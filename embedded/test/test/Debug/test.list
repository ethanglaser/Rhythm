
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002290  08002290  00012290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022e8  080022e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022f0  080022f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002304  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002304  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e89  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001281  00000000  00000000  00025ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f8  00000000  00000000  00027140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  00027738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000134f3  00000000  00000000  00027c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005dfe  00000000  00000000  0003b17b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074d5d  00000000  00000000  00040f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5cd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001430  00000000  00000000  000b5d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002278 	.word	0x08002278

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002278 	.word	0x08002278

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fa00 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f818 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f8e0 	bl	800065c <MX_GPIO_Init>
  MX_USART2_Init();
 800049c:	f000 f8b0 	bl	8000600 <MX_USART2_Init>
  MX_USART1_Init();
 80004a0:	f000 f880 	bl	80005a4 <MX_USART1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_USART_Transmit(&husart2, (uint8_t *) "Hello, world!", strlen("Hello, world!"), 10);
 80004a4:	4906      	ldr	r1, [pc, #24]	; (80004c0 <main+0x34>)
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <main+0x38>)
 80004a8:	230a      	movs	r3, #10
 80004aa:	220d      	movs	r2, #13
 80004ac:	f001 fc28 	bl	8001d00 <HAL_USART_Transmit>
	  HAL_USART_Transmit(&husart2, (uint8_t *) "Hello, world!", strlen("Hello, world!"), 10);
 80004b0:	4903      	ldr	r1, [pc, #12]	; (80004c0 <main+0x34>)
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <main+0x38>)
 80004b4:	230a      	movs	r3, #10
 80004b6:	220d      	movs	r2, #13
 80004b8:	f001 fc22 	bl	8001d00 <HAL_USART_Transmit>
	  HAL_USART_Transmit(&husart2, (uint8_t *) "Hello, world!", strlen("Hello, world!"), 10);
 80004bc:	e7f2      	b.n	80004a4 <main+0x18>
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	08002290 	.word	0x08002290
 80004c4:	20000028 	.word	0x20000028

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b09d      	sub	sp, #116	; 0x74
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	2438      	movs	r4, #56	; 0x38
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2338      	movs	r3, #56	; 0x38
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f001 fec5 	bl	8002268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	2324      	movs	r3, #36	; 0x24
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	0018      	movs	r0, r3
 80004e4:	2314      	movs	r3, #20
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f001 febd 	bl	8002268 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	2324      	movs	r3, #36	; 0x24
 80004f4:	001a      	movs	r2, r3
 80004f6:	2100      	movs	r1, #0
 80004f8:	f001 feb6 	bl	8002268 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <SystemClock_Config+0xd4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <SystemClock_Config+0xd8>)
 8000502:	401a      	ands	r2, r3
 8000504:	4b25      	ldr	r3, [pc, #148]	; (800059c <SystemClock_Config+0xd4>)
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0109      	lsls	r1, r1, #4
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800050e:	0021      	movs	r1, r4
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2210      	movs	r2, #16
 8000514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	22a0      	movs	r2, #160	; 0xa0
 8000526:	0212      	lsls	r2, r2, #8
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	187b      	adds	r3, r7, r1
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fc48 	bl	8000dc8 <HAL_RCC_OscConfig>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800053c:	f000 f8b0 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	2124      	movs	r1, #36	; 0x24
 8000542:	187b      	adds	r3, r7, r1
 8000544:	220f      	movs	r2, #15
 8000546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fff7 	bl	8001558 <HAL_RCC_ClockConfig>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800056e:	f000 f897 	bl	80006a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000572:	003b      	movs	r3, r7
 8000574:	2203      	movs	r2, #3
 8000576:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000578:	003b      	movs	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800057e:	003b      	movs	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000584:	003b      	movs	r3, r7
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fa06 	bl	8001998 <HAL_RCCEx_PeriphCLKConfig>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000590:	f000 f886 	bl	80006a0 <Error_Handler>
  }
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b01d      	add	sp, #116	; 0x74
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	40007000 	.word	0x40007000
 80005a0:	ffffe7ff 	.word	0xffffe7ff

080005a4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_USART1_Init+0x54>)
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <MX_USART1_Init+0x58>)
 80005ac:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_USART1_Init+0x54>)
 80005b0:	22e1      	movs	r2, #225	; 0xe1
 80005b2:	0252      	lsls	r2, r2, #9
 80005b4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <MX_USART1_Init+0x54>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_USART1_Init+0x54>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <MX_USART1_Init+0x54>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART1_Init+0x54>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <MX_USART1_Init+0x54>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_USART1_Init+0x54>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <MX_USART1_Init+0x54>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <MX_USART1_Init+0x54>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fb3c 	bl	8001c60 <HAL_USART_Init>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f000 f858 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	20000078 	.word	0x20000078
 80005fc:	40013800 	.word	0x40013800

08000600 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_USART2_Init+0x54>)
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <MX_USART2_Init+0x58>)
 8000608:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_USART2_Init+0x54>)
 800060c:	22e1      	movs	r2, #225	; 0xe1
 800060e:	0252      	lsls	r2, r2, #9
 8000610:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART2_Init+0x54>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_Init+0x54>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_USART2_Init+0x54>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART2_Init+0x54>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_USART2_Init+0x54>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART2_Init+0x54>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_USART2_Init+0x54>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MX_USART2_Init+0x54>)
 800063e:	0018      	movs	r0, r3
 8000640:	f001 fb0e 	bl	8001c60 <HAL_USART_Init>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f82a 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	20000028 	.word	0x20000028
 8000658:	40004400 	.word	0x40004400

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_GPIO_Init+0x40>)
 8000664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_GPIO_Init+0x40>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_GPIO_Init+0x40>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_GPIO_Init+0x40>)
 800067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_GPIO_Init+0x40>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_GPIO_Init+0x40>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	40021000 	.word	0x40021000

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <Error_Handler+0x6>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <HAL_MspInit+0x24>)
 80006ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MspInit+0x24>)
 80006b2:	2101      	movs	r1, #1
 80006b4:	430a      	orrs	r2, r1
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_MspInit+0x24>)
 80006ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <HAL_MspInit+0x24>)
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	0549      	lsls	r1, r1, #21
 80006c2:	430a      	orrs	r2, r1
 80006c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b08b      	sub	sp, #44	; 0x2c
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	2314      	movs	r3, #20
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f001 fdc0 	bl	8002268 <memset>
  if(husart->Instance==USART1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a42      	ldr	r2, [pc, #264]	; (80007f8 <HAL_USART_MspInit+0x128>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d14e      	bne.n	8000790 <HAL_USART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f2:	4b42      	ldr	r3, [pc, #264]	; (80007fc <HAL_USART_MspInit+0x12c>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <HAL_USART_MspInit+0x12c>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	01c9      	lsls	r1, r1, #7
 80006fc:	430a      	orrs	r2, r1
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <HAL_USART_MspInit+0x12c>)
 8000702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000704:	4b3d      	ldr	r3, [pc, #244]	; (80007fc <HAL_USART_MspInit+0x12c>)
 8000706:	2101      	movs	r1, #1
 8000708:	430a      	orrs	r2, r1
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
 800070c:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <HAL_USART_MspInit+0x12c>)
 800070e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000710:	2201      	movs	r2, #1
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b38      	ldr	r3, [pc, #224]	; (80007fc <HAL_USART_MspInit+0x12c>)
 800071a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071c:	4b37      	ldr	r3, [pc, #220]	; (80007fc <HAL_USART_MspInit+0x12c>)
 800071e:	2102      	movs	r1, #2
 8000720:	430a      	orrs	r2, r1
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
 8000724:	4b35      	ldr	r3, [pc, #212]	; (80007fc <HAL_USART_MspInit+0x12c>)
 8000726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000728:	2202      	movs	r2, #2
 800072a:	4013      	ands	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000730:	2114      	movs	r1, #20
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	000c      	movs	r4, r1
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2202      	movs	r2, #2
 8000740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2203      	movs	r2, #3
 800074c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2204      	movs	r2, #4
 8000752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	193a      	adds	r2, r7, r4
 8000756:	23a0      	movs	r3, #160	; 0xa0
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f9bd 	bl	8000adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	22c0      	movs	r2, #192	; 0xc0
 8000768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	187b      	adds	r3, r7, r1
 8000784:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <HAL_USART_MspInit+0x130>)
 8000786:	0019      	movs	r1, r3
 8000788:	0010      	movs	r0, r2
 800078a:	f000 f9a7 	bl	8000adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800078e:	e02e      	b.n	80007ee <HAL_USART_MspInit+0x11e>
  else if(husart->Instance==USART2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <HAL_USART_MspInit+0x134>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d129      	bne.n	80007ee <HAL_USART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_USART_MspInit+0x12c>)
 800079c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <HAL_USART_MspInit+0x12c>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0289      	lsls	r1, r1, #10
 80007a4:	430a      	orrs	r2, r1
 80007a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_USART_MspInit+0x12c>)
 80007aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <HAL_USART_MspInit+0x12c>)
 80007ae:	2101      	movs	r1, #1
 80007b0:	430a      	orrs	r2, r1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_USART_MspInit+0x12c>)
 80007b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b8:	2201      	movs	r2, #1
 80007ba:	4013      	ands	r3, r2
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80007c0:	2114      	movs	r1, #20
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	221c      	movs	r2, #28
 80007c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2202      	movs	r2, #2
 80007cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2203      	movs	r2, #3
 80007d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2204      	movs	r2, #4
 80007de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	187a      	adds	r2, r7, r1
 80007e2:	23a0      	movs	r3, #160	; 0xa0
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 f977 	bl	8000adc <HAL_GPIO_Init>
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b00b      	add	sp, #44	; 0x2c
 80007f4:	bd90      	pop	{r4, r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40013800 	.word	0x40013800
 80007fc:	40021000 	.word	0x40021000
 8000800:	50000400 	.word	0x50000400
 8000804:	40004400 	.word	0x40004400

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f886 	bl	800093c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000840:	480d      	ldr	r0, [pc, #52]	; (8000878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000842:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 8000846:	490e      	ldr	r1, [pc, #56]	; (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000848:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 800085c:	4c0b      	ldr	r4, [pc, #44]	; (800088c <LoopForever+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800086a:	f7ff ffe4 	bl	8000836 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086e:	f001 fcd7 	bl	8002220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000872:	f7ff fe0b 	bl	800048c <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   r0, =_estack
 8000878:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000884:	080022f8 	.word	0x080022f8
  ldr r2, =_sbss
 8000888:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800088c:	200000cc 	.word	0x200000cc

08000890 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_COMP_IRQHandler>
	...

08000894 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_Init+0x3c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_Init+0x3c>)
 80008a6:	2140      	movs	r1, #64	; 0x40
 80008a8:	430a      	orrs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 f811 	bl	80008d4 <HAL_InitTick>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d003      	beq.n	80008be <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e001      	b.n	80008c2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008be:	f7ff fef3 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_InitTick+0x5c>)
 80008de:	681c      	ldr	r4, [r3, #0]
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_InitTick+0x60>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	0019      	movs	r1, r3
 80008e6:	23fa      	movs	r3, #250	; 0xfa
 80008e8:	0098      	lsls	r0, r3, #2
 80008ea:	f7ff fc0d 	bl	8000108 <__udivsi3>
 80008ee:	0003      	movs	r3, r0
 80008f0:	0019      	movs	r1, r3
 80008f2:	0020      	movs	r0, r4
 80008f4:	f7ff fc08 	bl	8000108 <__udivsi3>
 80008f8:	0003      	movs	r3, r0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 f8e1 	bl	8000ac2 <HAL_SYSTICK_Config>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	e00f      	b.n	8000928 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d80b      	bhi.n	8000926 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	2301      	movs	r3, #1
 8000912:	425b      	negs	r3, r3
 8000914:	2200      	movs	r2, #0
 8000916:	0018      	movs	r0, r3
 8000918:	f000 f8be 	bl	8000a98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_InitTick+0x64>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b003      	add	sp, #12
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	20000000 	.word	0x20000000
 8000934:	20000008 	.word	0x20000008
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x1c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	001a      	movs	r2, r3
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x20>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	18d2      	adds	r2, r2, r3
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_IncTick+0x20>)
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	20000008 	.word	0x20000008
 800095c:	200000c8 	.word	0x200000c8

08000960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <HAL_GetTick+0x10>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	200000c8 	.word	0x200000c8

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b7f      	cmp	r3, #127	; 0x7f
 8000988:	d828      	bhi.n	80009dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098a:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <__NVIC_SetPriority+0xd4>)
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b25b      	sxtb	r3, r3
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	33c0      	adds	r3, #192	; 0xc0
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	589b      	ldr	r3, [r3, r2]
 800099a:	1dfa      	adds	r2, r7, #7
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	0011      	movs	r1, r2
 80009a0:	2203      	movs	r2, #3
 80009a2:	400a      	ands	r2, r1
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	21ff      	movs	r1, #255	; 0xff
 80009a8:	4091      	lsls	r1, r2
 80009aa:	000a      	movs	r2, r1
 80009ac:	43d2      	mvns	r2, r2
 80009ae:	401a      	ands	r2, r3
 80009b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	22ff      	movs	r2, #255	; 0xff
 80009b8:	401a      	ands	r2, r3
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0018      	movs	r0, r3
 80009c0:	2303      	movs	r3, #3
 80009c2:	4003      	ands	r3, r0
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c8:	481f      	ldr	r0, [pc, #124]	; (8000a48 <__NVIC_SetPriority+0xd4>)
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	430a      	orrs	r2, r1
 80009d4:	33c0      	adds	r3, #192	; 0xc0
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009da:	e031      	b.n	8000a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <__NVIC_SetPriority+0xd8>)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0019      	movs	r1, r3
 80009e4:	230f      	movs	r3, #15
 80009e6:	400b      	ands	r3, r1
 80009e8:	3b08      	subs	r3, #8
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	3306      	adds	r3, #6
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	18d3      	adds	r3, r2, r3
 80009f2:	3304      	adds	r3, #4
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1dfa      	adds	r2, r7, #7
 80009f8:	7812      	ldrb	r2, [r2, #0]
 80009fa:	0011      	movs	r1, r2
 80009fc:	2203      	movs	r2, #3
 80009fe:	400a      	ands	r2, r1
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	21ff      	movs	r1, #255	; 0xff
 8000a04:	4091      	lsls	r1, r2
 8000a06:	000a      	movs	r2, r1
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	019b      	lsls	r3, r3, #6
 8000a12:	22ff      	movs	r2, #255	; 0xff
 8000a14:	401a      	ands	r2, r3
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	4003      	ands	r3, r0
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <__NVIC_SetPriority+0xd8>)
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	001c      	movs	r4, r3
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	4023      	ands	r3, r4
 8000a30:	3b08      	subs	r3, #8
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	430a      	orrs	r2, r1
 8000a36:	3306      	adds	r3, #6
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	18c3      	adds	r3, r0, r3
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b003      	add	sp, #12
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <SysTick_Config+0x40>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d901      	bls.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e010      	b.n	8000a88 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SysTick_Config+0x44>)
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	3a01      	subs	r2, #1
 8000a6c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	425b      	negs	r3, r3
 8000a72:	2103      	movs	r1, #3
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff ff7d 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SysTick_Config+0x44>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SysTick_Config+0x44>)
 8000a82:	2207      	movs	r2, #7
 8000a84:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	00ffffff 	.word	0x00ffffff
 8000a94:	e000e010 	.word	0xe000e010

08000a98 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	1c02      	adds	r2, r0, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__NVIC_SetPriority>
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ffbf 	bl	8000a50 <SysTick_Config>
 8000ad2:	0003      	movs	r3, r0
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000af2:	e14f      	b.n	8000d94 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2101      	movs	r1, #1
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	4091      	lsls	r1, r2
 8000afe:	000a      	movs	r2, r1
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d100      	bne.n	8000b0c <HAL_GPIO_Init+0x30>
 8000b0a:	e140      	b.n	8000d8e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d00b      	beq.n	8000b2c <HAL_GPIO_Init+0x50>
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d007      	beq.n	8000b2c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b20:	2b11      	cmp	r3, #17
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	2b12      	cmp	r3, #18
 8000b2a:	d130      	bne.n	8000b8e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	2203      	movs	r2, #3
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	0013      	movs	r3, r2
 8000b3c:	43da      	mvns	r2, r3
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	0013      	movs	r3, r2
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b62:	2201      	movs	r2, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	2201      	movs	r2, #1
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0xf2>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	d123      	bne.n	8000c16 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	08da      	lsrs	r2, r3, #3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3208      	adds	r2, #8
 8000bd6:	0092      	lsls	r2, r2, #2
 8000bd8:	58d3      	ldr	r3, [r2, r3]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	2207      	movs	r2, #7
 8000be0:	4013      	ands	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	220f      	movs	r2, #15
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	691a      	ldr	r2, [r3, #16]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	400b      	ands	r3, r1
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	08da      	lsrs	r2, r3, #3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3208      	adds	r2, #8
 8000c10:	0092      	lsls	r2, r2, #2
 8000c12:	6939      	ldr	r1, [r7, #16]
 8000c14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2203      	movs	r2, #3
 8000c34:	401a      	ands	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	055b      	lsls	r3, r3, #21
 8000c52:	4013      	ands	r3, r2
 8000c54:	d100      	bne.n	8000c58 <HAL_GPIO_Init+0x17c>
 8000c56:	e09a      	b.n	8000d8e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c58:	4b54      	ldr	r3, [pc, #336]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c5c:	4b53      	ldr	r3, [pc, #332]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000c5e:	2101      	movs	r1, #1
 8000c60:	430a      	orrs	r2, r1
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c64:	4a52      	ldr	r2, [pc, #328]	; (8000db0 <HAL_GPIO_Init+0x2d4>)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	589b      	ldr	r3, [r3, r2]
 8000c70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2203      	movs	r2, #3
 8000c76:	4013      	ands	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	0013      	movs	r3, r2
 8000c80:	43da      	mvns	r2, r3
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	23a0      	movs	r3, #160	; 0xa0
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d019      	beq.n	8000cc6 <HAL_GPIO_Init+0x1ea>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a47      	ldr	r2, [pc, #284]	; (8000db4 <HAL_GPIO_Init+0x2d8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0x1e6>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a46      	ldr	r2, [pc, #280]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d00d      	beq.n	8000cbe <HAL_GPIO_Init+0x1e2>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a45      	ldr	r2, [pc, #276]	; (8000dbc <HAL_GPIO_Init+0x2e0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d007      	beq.n	8000cba <HAL_GPIO_Init+0x1de>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a44      	ldr	r2, [pc, #272]	; (8000dc0 <HAL_GPIO_Init+0x2e4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_GPIO_Init+0x1da>
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	e008      	b.n	8000cc8 <HAL_GPIO_Init+0x1ec>
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	e006      	b.n	8000cc8 <HAL_GPIO_Init+0x1ec>
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e004      	b.n	8000cc8 <HAL_GPIO_Init+0x1ec>
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_Init+0x1ec>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x1ec>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	2103      	movs	r1, #3
 8000ccc:	400a      	ands	r2, r1
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cd8:	4935      	ldr	r1, [pc, #212]	; (8000db0 <HAL_GPIO_Init+0x2d4>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce6:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	025b      	lsls	r3, r3, #9
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	035b      	lsls	r3, r3, #13
 8000d52:	4013      	ands	r3, r2
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	039b      	lsls	r3, r3, #14
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	40da      	lsrs	r2, r3
 8000d9c:	1e13      	subs	r3, r2, #0
 8000d9e:	d000      	beq.n	8000da2 <HAL_GPIO_Init+0x2c6>
 8000da0:	e6a8      	b.n	8000af4 <HAL_GPIO_Init+0x18>
  }
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b006      	add	sp, #24
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000
 8000db4:	50000400 	.word	0x50000400
 8000db8:	50000800 	.word	0x50000800
 8000dbc:	50000c00 	.word	0x50000c00
 8000dc0:	50001c00 	.word	0x50001c00
 8000dc4:	40010400 	.word	0x40010400

08000dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f000 fbb4 	bl	8001544 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ddc:	4bc3      	ldr	r3, [pc, #780]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	220c      	movs	r2, #12
 8000de2:	4013      	ands	r3, r2
 8000de4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000de6:	4bc1      	ldr	r3, [pc, #772]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	4013      	ands	r3, r2
 8000df0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2201      	movs	r2, #1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d100      	bne.n	8000dfe <HAL_RCC_OscConfig+0x36>
 8000dfc:	e07e      	b.n	8000efc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d007      	beq.n	8000e14 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	2b0c      	cmp	r3, #12
 8000e08:	d112      	bne.n	8000e30 <HAL_RCC_OscConfig+0x68>
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	025b      	lsls	r3, r3, #9
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d10d      	bne.n	8000e30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	4bb5      	ldr	r3, [pc, #724]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d100      	bne.n	8000e22 <HAL_RCC_OscConfig+0x5a>
 8000e20:	e06b      	b.n	8000efa <HAL_RCC_OscConfig+0x132>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d167      	bne.n	8000efa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f000 fb8a 	bl	8001544 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	025b      	lsls	r3, r3, #9
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d107      	bne.n	8000e4c <HAL_RCC_OscConfig+0x84>
 8000e3c:	4bab      	ldr	r3, [pc, #684]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4baa      	ldr	r3, [pc, #680]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	0249      	lsls	r1, r1, #9
 8000e46:	430a      	orrs	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e027      	b.n	8000e9c <HAL_RCC_OscConfig+0xd4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	02db      	lsls	r3, r3, #11
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d10e      	bne.n	8000e76 <HAL_RCC_OscConfig+0xae>
 8000e58:	4ba4      	ldr	r3, [pc, #656]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4ba3      	ldr	r3, [pc, #652]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	02c9      	lsls	r1, r1, #11
 8000e62:	430a      	orrs	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	4ba1      	ldr	r3, [pc, #644]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4ba0      	ldr	r3, [pc, #640]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	0249      	lsls	r1, r1, #9
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e012      	b.n	8000e9c <HAL_RCC_OscConfig+0xd4>
 8000e76:	4b9d      	ldr	r3, [pc, #628]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	4b9c      	ldr	r3, [pc, #624]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e7c:	499c      	ldr	r1, [pc, #624]	; (80010f0 <HAL_RCC_OscConfig+0x328>)
 8000e7e:	400a      	ands	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	4b9a      	ldr	r3, [pc, #616]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	025b      	lsls	r3, r3, #9
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4b96      	ldr	r3, [pc, #600]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b95      	ldr	r3, [pc, #596]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000e96:	4997      	ldr	r1, [pc, #604]	; (80010f4 <HAL_RCC_OscConfig+0x32c>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d015      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fd5c 	bl	8000960 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eac:	e009      	b.n	8000ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eae:	f7ff fd57 	bl	8000960 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b64      	cmp	r3, #100	; 0x64
 8000eba:	d902      	bls.n	8000ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f000 fb41 	bl	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ec2:	4b8a      	ldr	r3, [pc, #552]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	029b      	lsls	r3, r3, #10
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d0ef      	beq.n	8000eae <HAL_RCC_OscConfig+0xe6>
 8000ece:	e015      	b.n	8000efc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fd46 	bl	8000960 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eda:	f7ff fd41 	bl	8000960 <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b64      	cmp	r3, #100	; 0x64
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e32b      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eec:	4b7f      	ldr	r3, [pc, #508]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d1f0      	bne.n	8000eda <HAL_RCC_OscConfig+0x112>
 8000ef8:	e000      	b.n	8000efc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2202      	movs	r2, #2
 8000f02:	4013      	ands	r3, r2
 8000f04:	d100      	bne.n	8000f08 <HAL_RCC_OscConfig+0x140>
 8000f06:	e08c      	b.n	8001022 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d005      	beq.n	8000f20 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	2b0c      	cmp	r3, #12
 8000f18:	d13f      	bne.n	8000f9a <HAL_RCC_OscConfig+0x1d2>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d13c      	bne.n	8000f9a <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f20:	4b72      	ldr	r3, [pc, #456]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2204      	movs	r2, #4
 8000f26:	4013      	ands	r3, r2
 8000f28:	d004      	beq.n	8000f34 <HAL_RCC_OscConfig+0x16c>
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e307      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f34:	4b6d      	ldr	r3, [pc, #436]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4a6f      	ldr	r2, [pc, #444]	; (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	021a      	lsls	r2, r3, #8
 8000f44:	4b69      	ldr	r3, [pc, #420]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000f46:	430a      	orrs	r2, r1
 8000f48:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f4a:	4b68      	ldr	r3, [pc, #416]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2209      	movs	r2, #9
 8000f50:	4393      	bics	r3, r2
 8000f52:	0019      	movs	r1, r3
 8000f54:	4b65      	ldr	r3, [pc, #404]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f5c:	f000 fc44 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 8000f60:	0001      	movs	r1, r0
 8000f62:	4b62      	ldr	r3, [pc, #392]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	220f      	movs	r2, #15
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	4a63      	ldr	r2, [pc, #396]	; (80010fc <HAL_RCC_OscConfig+0x334>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	000a      	movs	r2, r1
 8000f72:	40da      	lsrs	r2, r3
 8000f74:	4b62      	ldr	r3, [pc, #392]	; (8001100 <HAL_RCC_OscConfig+0x338>)
 8000f76:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000f78:	4b62      	ldr	r3, [pc, #392]	; (8001104 <HAL_RCC_OscConfig+0x33c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2513      	movs	r5, #19
 8000f7e:	197c      	adds	r4, r7, r5
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fca7 	bl	80008d4 <HAL_InitTick>
 8000f86:	0003      	movs	r3, r0
 8000f88:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000f8a:	197b      	adds	r3, r7, r5
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d047      	beq.n	8001022 <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 8000f92:	2313      	movs	r3, #19
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	e2d4      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d027      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fa0:	4b52      	ldr	r3, [pc, #328]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2209      	movs	r2, #9
 8000fa6:	4393      	bics	r3, r2
 8000fa8:	0019      	movs	r1, r3
 8000faa:	4b50      	ldr	r3, [pc, #320]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fcd5 	bl	8000960 <HAL_GetTick>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fcd0 	bl	8000960 <HAL_GetTick>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e2ba      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d0f1      	beq.n	8000fbc <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd8:	4b44      	ldr	r3, [pc, #272]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <HAL_RCC_OscConfig+0x330>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	021a      	lsls	r2, r3, #8
 8000fe8:	4b40      	ldr	r3, [pc, #256]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000fea:	430a      	orrs	r2, r1
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	e018      	b.n	8001022 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff0:	4b3e      	ldr	r3, [pc, #248]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fcb0 	bl	8000960 <HAL_GetTick>
 8001000:	0003      	movs	r3, r0
 8001002:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fcab 	bl	8000960 <HAL_GetTick>
 800100a:	0002      	movs	r2, r0
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e295      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001018:	4b34      	ldr	r3, [pc, #208]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2204      	movs	r2, #4
 800101e:	4013      	ands	r3, r2
 8001020:	d1f1      	bne.n	8001006 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2210      	movs	r2, #16
 8001028:	4013      	ands	r3, r2
 800102a:	d100      	bne.n	800102e <HAL_RCC_OscConfig+0x266>
 800102c:	e0a3      	b.n	8001176 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d141      	bne.n	80010b8 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4013      	ands	r3, r2
 800103e:	d005      	beq.n	800104c <HAL_RCC_OscConfig+0x284>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e27b      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <HAL_RCC_OscConfig+0x340>)
 8001052:	4013      	ands	r3, r2
 8001054:	0019      	movs	r1, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105a:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 800105c:	430a      	orrs	r2, r1
 800105e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	0a19      	lsrs	r1, r3, #8
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	061a      	lsls	r2, r3, #24
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8001070:	430a      	orrs	r2, r1
 8001072:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	0b5b      	lsrs	r3, r3, #13
 800107a:	3301      	adds	r3, #1
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	0212      	lsls	r2, r2, #8
 8001080:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	210f      	movs	r1, #15
 800108a:	400b      	ands	r3, r1
 800108c:	491b      	ldr	r1, [pc, #108]	; (80010fc <HAL_RCC_OscConfig+0x334>)
 800108e:	5ccb      	ldrb	r3, [r1, r3]
 8001090:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_RCC_OscConfig+0x338>)
 8001094:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_RCC_OscConfig+0x33c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2513      	movs	r5, #19
 800109c:	197c      	adds	r4, r7, r5
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff fc18 	bl	80008d4 <HAL_InitTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010a8:	197b      	adds	r3, r7, r5
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d062      	beq.n	8001176 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 80010b0:	2313      	movs	r3, #19
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	e245      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d040      	beq.n	8001142 <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	0049      	lsls	r1, r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fc47 	bl	8000960 <HAL_GetTick>
 80010d2:	0003      	movs	r3, r0
 80010d4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010d6:	e019      	b.n	800110c <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc42 	bl	8000960 <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d912      	bls.n	800110c <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e22c      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	40021000 	.word	0x40021000
 80010f0:	fffeffff 	.word	0xfffeffff
 80010f4:	fffbffff 	.word	0xfffbffff
 80010f8:	ffffe0ff 	.word	0xffffe0ff
 80010fc:	080022a0 	.word	0x080022a0
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004
 8001108:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800110c:	4bc6      	ldr	r3, [pc, #792]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d0df      	beq.n	80010d8 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001118:	4bc3      	ldr	r3, [pc, #780]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4ac3      	ldr	r2, [pc, #780]	; (800142c <HAL_RCC_OscConfig+0x664>)
 800111e:	4013      	ands	r3, r2
 8001120:	0019      	movs	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001126:	4bc0      	ldr	r3, [pc, #768]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001128:	430a      	orrs	r2, r1
 800112a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112c:	4bbe      	ldr	r3, [pc, #760]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	0a19      	lsrs	r1, r3, #8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	061a      	lsls	r2, r3, #24
 800113a:	4bbb      	ldr	r3, [pc, #748]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800113c:	430a      	orrs	r2, r1
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	e019      	b.n	8001176 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001142:	4bb9      	ldr	r3, [pc, #740]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4bb8      	ldr	r3, [pc, #736]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001148:	49b9      	ldr	r1, [pc, #740]	; (8001430 <HAL_RCC_OscConfig+0x668>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fc07 	bl	8000960 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001158:	f7ff fc02 	bl	8000960 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1ec      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800116a:	4baf      	ldr	r3, [pc, #700]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2208      	movs	r2, #8
 800117c:	4013      	ands	r3, r2
 800117e:	d036      	beq.n	80011ee <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d019      	beq.n	80011bc <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001188:	4ba7      	ldr	r3, [pc, #668]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800118a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800118c:	4ba6      	ldr	r3, [pc, #664]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800118e:	2101      	movs	r1, #1
 8001190:	430a      	orrs	r2, r1
 8001192:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fbe4 	bl	8000960 <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff fbdf 	bl	8000960 <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e1c9      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011b0:	4b9d      	ldr	r3, [pc, #628]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80011b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b4:	2202      	movs	r2, #2
 80011b6:	4013      	ands	r3, r2
 80011b8:	d0f1      	beq.n	800119e <HAL_RCC_OscConfig+0x3d6>
 80011ba:	e018      	b.n	80011ee <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011bc:	4b9a      	ldr	r3, [pc, #616]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80011be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011c0:	4b99      	ldr	r3, [pc, #612]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fbca 	bl	8000960 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fbc5 	bl	8000960 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1af      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011e4:	4b90      	ldr	r3, [pc, #576]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80011e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d1f1      	bne.n	80011d2 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2204      	movs	r2, #4
 80011f4:	4013      	ands	r3, r2
 80011f6:	d100      	bne.n	80011fa <HAL_RCC_OscConfig+0x432>
 80011f8:	e0af      	b.n	800135a <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fa:	2327      	movs	r3, #39	; 0x27
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	055b      	lsls	r3, r3, #21
 800120a:	4013      	ands	r3, r2
 800120c:	d10a      	bne.n	8001224 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b86      	ldr	r3, [pc, #536]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001212:	4b85      	ldr	r3, [pc, #532]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0549      	lsls	r1, r1, #21
 8001218:	430a      	orrs	r2, r1
 800121a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800121c:	2327      	movs	r3, #39	; 0x27
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	4b83      	ldr	r3, [pc, #524]	; (8001434 <HAL_RCC_OscConfig+0x66c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4013      	ands	r3, r2
 800122e:	d11a      	bne.n	8001266 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001230:	4b80      	ldr	r3, [pc, #512]	; (8001434 <HAL_RCC_OscConfig+0x66c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x66c>)
 8001236:	2180      	movs	r1, #128	; 0x80
 8001238:	0049      	lsls	r1, r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123e:	f7ff fb8f 	bl	8000960 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001248:	f7ff fb8a 	bl	8000960 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e174      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x66c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4013      	ands	r3, r2
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	429a      	cmp	r2, r3
 8001270:	d107      	bne.n	8001282 <HAL_RCC_OscConfig+0x4ba>
 8001272:	4b6d      	ldr	r3, [pc, #436]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001276:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	0049      	lsls	r1, r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	651a      	str	r2, [r3, #80]	; 0x50
 8001280:	e031      	b.n	80012e6 <HAL_RCC_OscConfig+0x51e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x4dc>
 800128a:	4b67      	ldr	r3, [pc, #412]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800128c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800128e:	4b66      	ldr	r3, [pc, #408]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001290:	4967      	ldr	r1, [pc, #412]	; (8001430 <HAL_RCC_OscConfig+0x668>)
 8001292:	400a      	ands	r2, r1
 8001294:	651a      	str	r2, [r3, #80]	; 0x50
 8001296:	4b64      	ldr	r3, [pc, #400]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800129a:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800129c:	4966      	ldr	r1, [pc, #408]	; (8001438 <HAL_RCC_OscConfig+0x670>)
 800129e:	400a      	ands	r2, r1
 80012a0:	651a      	str	r2, [r3, #80]	; 0x50
 80012a2:	e020      	b.n	80012e6 <HAL_RCC_OscConfig+0x51e>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	23a0      	movs	r3, #160	; 0xa0
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d10e      	bne.n	80012ce <HAL_RCC_OscConfig+0x506>
 80012b0:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80012b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012b4:	4b5c      	ldr	r3, [pc, #368]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	00c9      	lsls	r1, r1, #3
 80012ba:	430a      	orrs	r2, r1
 80012bc:	651a      	str	r2, [r3, #80]	; 0x50
 80012be:	4b5a      	ldr	r3, [pc, #360]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80012c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012c2:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0049      	lsls	r1, r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	651a      	str	r2, [r3, #80]	; 0x50
 80012cc:	e00b      	b.n	80012e6 <HAL_RCC_OscConfig+0x51e>
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80012d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d2:	4b55      	ldr	r3, [pc, #340]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80012d4:	4956      	ldr	r1, [pc, #344]	; (8001430 <HAL_RCC_OscConfig+0x668>)
 80012d6:	400a      	ands	r2, r1
 80012d8:	651a      	str	r2, [r3, #80]	; 0x50
 80012da:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80012dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012de:	4b52      	ldr	r3, [pc, #328]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80012e0:	4955      	ldr	r1, [pc, #340]	; (8001438 <HAL_RCC_OscConfig+0x670>)
 80012e2:	400a      	ands	r2, r1
 80012e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb37 	bl	8000960 <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012f6:	e009      	b.n	800130c <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fb32 	bl	8000960 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a4e      	ldr	r2, [pc, #312]	; (800143c <HAL_RCC_OscConfig+0x674>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e11b      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800130c:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800130e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4013      	ands	r3, r2
 8001316:	d0ef      	beq.n	80012f8 <HAL_RCC_OscConfig+0x530>
 8001318:	e014      	b.n	8001344 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fb21 	bl	8000960 <HAL_GetTick>
 800131e:	0003      	movs	r3, r0
 8001320:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001322:	e009      	b.n	8001338 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f7ff fb1c 	bl	8000960 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a43      	ldr	r2, [pc, #268]	; (800143c <HAL_RCC_OscConfig+0x674>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e105      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001338:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800133a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d1ef      	bne.n	8001324 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001344:	2327      	movs	r3, #39	; 0x27
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d105      	bne.n	800135a <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001352:	4b35      	ldr	r3, [pc, #212]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001354:	493a      	ldr	r1, [pc, #232]	; (8001440 <HAL_RCC_OscConfig+0x678>)
 8001356:	400a      	ands	r2, r1
 8001358:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2220      	movs	r2, #32
 8001360:	4013      	ands	r3, r2
 8001362:	d049      	beq.n	80013f8 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d026      	beq.n	80013ba <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800137a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 800137e:	2101      	movs	r1, #1
 8001380:	430a      	orrs	r2, r1
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <HAL_RCC_OscConfig+0x67c>)
 8001386:	6a1a      	ldr	r2, [r3, #32]
 8001388:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <HAL_RCC_OscConfig+0x67c>)
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	0189      	lsls	r1, r1, #6
 800138e:	430a      	orrs	r2, r1
 8001390:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fae5 	bl	8000960 <HAL_GetTick>
 8001396:	0003      	movs	r3, r0
 8001398:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800139c:	f7ff fae0 	bl	8000960 <HAL_GetTick>
 80013a0:	0002      	movs	r2, r0
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0ca      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2202      	movs	r2, #2
 80013b4:	4013      	ands	r3, r2
 80013b6:	d0f1      	beq.n	800139c <HAL_RCC_OscConfig+0x5d4>
 80013b8:	e01e      	b.n	80013f8 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	438a      	bics	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <HAL_RCC_OscConfig+0x67c>)
 80013cc:	491e      	ldr	r1, [pc, #120]	; (8001448 <HAL_RCC_OscConfig+0x680>)
 80013ce:	400a      	ands	r2, r1
 80013d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fac5 	bl	8000960 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013dc:	f7ff fac0 	bl	8000960 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0aa      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d1f1      	bne.n	80013dc <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x63a>
 8001400:	e09f      	b.n	8001542 <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x642>
 8001408:	e078      	b.n	80014fc <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	2b02      	cmp	r3, #2
 8001410:	d159      	bne.n	80014c6 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HAL_RCC_OscConfig+0x660>)
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <HAL_RCC_OscConfig+0x684>)
 800141a:	400a      	ands	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fa9f 	bl	8000960 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001426:	e01c      	b.n	8001462 <HAL_RCC_OscConfig+0x69a>
 8001428:	40021000 	.word	0x40021000
 800142c:	ffff1fff 	.word	0xffff1fff
 8001430:	fffffeff 	.word	0xfffffeff
 8001434:	40007000 	.word	0x40007000
 8001438:	fffffbff 	.word	0xfffffbff
 800143c:	00001388 	.word	0x00001388
 8001440:	efffffff 	.word	0xefffffff
 8001444:	40010000 	.word	0x40010000
 8001448:	ffffdfff 	.word	0xffffdfff
 800144c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fa86 	bl	8000960 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e070      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001462:	4b3a      	ldr	r3, [pc, #232]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	049b      	lsls	r3, r3, #18
 800146a:	4013      	ands	r3, r2
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	4a37      	ldr	r2, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x788>)
 8001474:	4013      	ands	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001486:	431a      	orrs	r2, r3
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800148a:	430a      	orrs	r2, r1
 800148c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_RCC_OscConfig+0x784>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0449      	lsls	r1, r1, #17
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fa60 	bl	8000960 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fa5b 	bl	8000960 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e045      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	049b      	lsls	r3, r3, #18
 80014c0:	4013      	ands	r3, r2
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x6de>
 80014c4:	e03d      	b.n	8001542 <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80014cc:	4921      	ldr	r1, [pc, #132]	; (8001554 <HAL_RCC_OscConfig+0x78c>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fa45 	bl	8000960 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fa40 	bl	8000960 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e02a      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_RCC_OscConfig+0x784>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	049b      	lsls	r3, r3, #18
 80014f6:	4013      	ands	r3, r2
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x714>
 80014fa:	e022      	b.n	8001542 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_RCC_OscConfig+0x784>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	025b      	lsls	r3, r3, #9
 8001514:	401a      	ands	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	429a      	cmp	r2, r3
 800151c:	d10f      	bne.n	800153e <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	23f0      	movs	r3, #240	; 0xf0
 8001522:	039b      	lsls	r3, r3, #14
 8001524:	401a      	ands	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d107      	bne.n	800153e <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b00a      	add	sp, #40	; 0x28
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	ff02ffff 	.word	0xff02ffff
 8001554:	feffffff 	.word	0xfeffffff

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e129      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d91e      	bls.n	80015b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b93      	ldr	r3, [pc, #588]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2201      	movs	r2, #1
 8001580:	4393      	bics	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800158c:	f7ff f9e8 	bl	8000960 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001594:	e009      	b.n	80015aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001596:	f7ff f9e3 	bl	8000960 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	4a8a      	ldr	r2, [pc, #552]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e10a      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b87      	ldr	r3, [pc, #540]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4013      	ands	r3, r2
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c2:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	22f0      	movs	r2, #240	; 0xf0
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	4013      	ands	r3, r2
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x8a>
 80015e0:	e089      	b.n	80016f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ea:	4b79      	ldr	r3, [pc, #484]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	029b      	lsls	r3, r3, #10
 80015f2:	4013      	ands	r3, r2
 80015f4:	d120      	bne.n	8001638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e2      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001602:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	049b      	lsls	r3, r3, #18
 800160a:	4013      	ands	r3, r2
 800160c:	d114      	bne.n	8001638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0d6      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d106      	bne.n	8001628 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800161a:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
 8001622:	d109      	bne.n	8001638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cb      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001628:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0c3      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001638:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2203      	movs	r2, #3
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff f988 	bl	8000960 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d111      	bne.n	8001680 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800165c:	e009      	b.n	8001672 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165e:	f7ff f97f 	bl	8000960 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a58      	ldr	r2, [pc, #352]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0a6      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	220c      	movs	r2, #12
 8001678:	4013      	ands	r3, r2
 800167a:	2b08      	cmp	r3, #8
 800167c:	d1ef      	bne.n	800165e <HAL_RCC_ClockConfig+0x106>
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d111      	bne.n	80016ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	e009      	b.n	800169e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168a:	f7ff f969 	bl	8000960 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e090      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169e:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	220c      	movs	r2, #12
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d1ef      	bne.n	800168a <HAL_RCC_ClockConfig+0x132>
 80016aa:	e024      	b.n	80016f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11b      	bne.n	80016ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b4:	e009      	b.n	80016ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b6:	f7ff f953 	bl	8000960 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	4a42      	ldr	r2, [pc, #264]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e07a      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	220c      	movs	r2, #12
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d1ef      	bne.n	80016b6 <HAL_RCC_ClockConfig+0x15e>
 80016d6:	e00e      	b.n	80016f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff f942 	bl	8000960 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e069      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	220c      	movs	r2, #12
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2201      	movs	r2, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d21e      	bcs.n	8001742 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001704:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4393      	bics	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001716:	f7ff f923 	bl	8000960 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	e009      	b.n	8001734 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f91e 	bl	8000960 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a28      	ldr	r2, [pc, #160]	; (80017cc <HAL_RCC_ClockConfig+0x274>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e045      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_ClockConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	4013      	ands	r3, r2
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d1ee      	bne.n	8001720 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2204      	movs	r2, #4
 8001748:	4013      	ands	r3, r2
 800174a:	d009      	beq.n	8001760 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <HAL_RCC_ClockConfig+0x27c>)
 8001752:	4013      	ands	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2208      	movs	r2, #8
 8001766:	4013      	ands	r3, r2
 8001768:	d00a      	beq.n	8001780 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	4a1a      	ldr	r2, [pc, #104]	; (80017d8 <HAL_RCC_ClockConfig+0x280>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	00da      	lsls	r2, r3, #3
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 800177c:	430a      	orrs	r2, r1
 800177e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001780:	f000 f832 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 8001784:	0001      	movs	r1, r0
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x278>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	220f      	movs	r2, #15
 800178e:	4013      	ands	r3, r2
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <HAL_RCC_ClockConfig+0x284>)
 8001792:	5cd3      	ldrb	r3, [r2, r3]
 8001794:	000a      	movs	r2, r1
 8001796:	40da      	lsrs	r2, r3
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_RCC_ClockConfig+0x288>)
 800179a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_ClockConfig+0x28c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	250b      	movs	r5, #11
 80017a2:	197c      	adds	r4, r7, r5
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff f895 	bl	80008d4 <HAL_InitTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017ae:	197b      	adds	r3, r7, r5
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 80017b6:	230b      	movs	r3, #11
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b004      	add	sp, #16
 80017c6:	bdb0      	pop	{r4, r5, r7, pc}
 80017c8:	40022000 	.word	0x40022000
 80017cc:	00001388 	.word	0x00001388
 80017d0:	40021000 	.word	0x40021000
 80017d4:	fffff8ff 	.word	0xfffff8ff
 80017d8:	ffffc7ff 	.word	0xffffc7ff
 80017dc:	080022a0 	.word	0x080022a0
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ea:	b08f      	sub	sp, #60	; 0x3c
 80017ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80017ee:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <HAL_RCC_GetSysClockFreq+0x130>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	230c      	movs	r3, #12
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d00f      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x36>
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d010      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x3c>
 8001802:	2b04      	cmp	r3, #4
 8001804:	d000      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x20>
 8001806:	e073      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001808:	4b43      	ldr	r3, [pc, #268]	; (8001918 <HAL_RCC_GetSysClockFreq+0x130>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2210      	movs	r2, #16
 800180e:	4013      	ands	r3, r2
 8001810:	d002      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001812:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_RCC_GetSysClockFreq+0x134>)
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001816:	e079      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_RCC_GetSysClockFreq+0x138>)
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800181c:	e076      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001822:	e073      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	0c9a      	lsrs	r2, r3, #18
 8001828:	230f      	movs	r3, #15
 800182a:	401a      	ands	r2, r3
 800182c:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <HAL_RCC_GetSysClockFreq+0x140>)
 800182e:	5c9b      	ldrb	r3, [r3, r2]
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001834:	0d9a      	lsrs	r2, r3, #22
 8001836:	2303      	movs	r3, #3
 8001838:	4013      	ands	r3, r2
 800183a:	3301      	adds	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_GetSysClockFreq+0x130>)
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	025b      	lsls	r3, r3, #9
 8001846:	4013      	ands	r3, r2
 8001848:	d019      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	4a34      	ldr	r2, [pc, #208]	; (8001924 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001854:	2300      	movs	r3, #0
 8001856:	69b8      	ldr	r0, [r7, #24]
 8001858:	69f9      	ldr	r1, [r7, #28]
 800185a:	f7fe fd01 	bl	8000260 <__aeabi_lmul>
 800185e:	0003      	movs	r3, r0
 8001860:	000c      	movs	r4, r1
 8001862:	0018      	movs	r0, r3
 8001864:	0021      	movs	r1, r4
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f7fe fcd5 	bl	8000220 <__aeabi_uldivmod>
 8001876:	0003      	movs	r3, r0
 8001878:	000c      	movs	r4, r1
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
 800187c:	e035      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_RCC_GetSysClockFreq+0x130>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2210      	movs	r2, #16
 8001884:	4013      	ands	r3, r2
 8001886:	d019      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_RCC_GetSysClockFreq+0x134>)
 8001892:	2300      	movs	r3, #0
 8001894:	68b8      	ldr	r0, [r7, #8]
 8001896:	68f9      	ldr	r1, [r7, #12]
 8001898:	f7fe fce2 	bl	8000260 <__aeabi_lmul>
 800189c:	0003      	movs	r3, r0
 800189e:	000c      	movs	r4, r1
 80018a0:	0018      	movs	r0, r3
 80018a2:	0021      	movs	r1, r4
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f7fe fcb6 	bl	8000220 <__aeabi_uldivmod>
 80018b4:	0003      	movs	r3, r0
 80018b6:	000c      	movs	r4, r1
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ba:	e016      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	0018      	movs	r0, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	0019      	movs	r1, r3
 80018c4:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_RCC_GetSysClockFreq+0x138>)
 80018c6:	2300      	movs	r3, #0
 80018c8:	f7fe fcca 	bl	8000260 <__aeabi_lmul>
 80018cc:	0003      	movs	r3, r0
 80018ce:	000c      	movs	r4, r1
 80018d0:	0018      	movs	r0, r3
 80018d2:	0021      	movs	r1, r4
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	001d      	movs	r5, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	001e      	movs	r6, r3
 80018dc:	002a      	movs	r2, r5
 80018de:	0033      	movs	r3, r6
 80018e0:	f7fe fc9e 	bl	8000220 <__aeabi_uldivmod>
 80018e4:	0003      	movs	r3, r0
 80018e6:	000c      	movs	r4, r1
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80018ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ee:	e00d      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_GetSysClockFreq+0x130>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	0b5b      	lsrs	r3, r3, #13
 80018f6:	2207      	movs	r2, #7
 80018f8:	4013      	ands	r3, r2
 80018fa:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	3301      	adds	r3, #1
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	0212      	lsls	r2, r2, #8
 8001904:	409a      	lsls	r2, r3
 8001906:	0013      	movs	r3, r2
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800190a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800190c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b00f      	add	sp, #60	; 0x3c
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	40021000 	.word	0x40021000
 800191c:	003d0900 	.word	0x003d0900
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200
 8001928:	080022b8 	.word	0x080022b8

0800192c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001930:	4b02      	ldr	r3, [pc, #8]	; (800193c <HAL_RCC_GetHCLKFreq+0x10>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001944:	f7ff fff2 	bl	800192c <HAL_RCC_GetHCLKFreq>
 8001948:	0001      	movs	r1, r0
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	2207      	movs	r2, #7
 8001952:	4013      	ands	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	40d9      	lsrs	r1, r3
 800195a:	000b      	movs	r3, r1
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40021000 	.word	0x40021000
 8001968:	080022b0 	.word	0x080022b0

0800196c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001970:	f7ff ffdc 	bl	800192c <HAL_RCC_GetHCLKFreq>
 8001974:	0001      	movs	r1, r0
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	0adb      	lsrs	r3, r3, #11
 800197c:	2207      	movs	r2, #7
 800197e:	4013      	ands	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	40d9      	lsrs	r1, r3
 8001986:	000b      	movs	r3, r1
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40021000 	.word	0x40021000
 8001994:	080022b0 	.word	0x080022b0

08001998 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80019a0:	2317      	movs	r3, #23
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2220      	movs	r2, #32
 80019ae:	4013      	ands	r3, r2
 80019b0:	d106      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80019be:	e0d9      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c0:	4b9c      	ldr	r3, [pc, #624]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80019c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	4013      	ands	r3, r2
 80019ca:	d10a      	bne.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019cc:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80019ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d0:	4b98      	ldr	r3, [pc, #608]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	0549      	lsls	r1, r1, #21
 80019d6:	430a      	orrs	r2, r1
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80019da:	2317      	movs	r3, #23
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b95      	ldr	r3, [pc, #596]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	d11a      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b92      	ldr	r3, [pc, #584]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b91      	ldr	r3, [pc, #580]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	0049      	lsls	r1, r1, #1
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fc:	f7fe ffb0 	bl	8000960 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	e008      	b.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7fe ffab 	bl	8000960 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b64      	cmp	r3, #100	; 0x64
 8001a12:	d901      	bls.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e108      	b.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	4b87      	ldr	r3, [pc, #540]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001a24:	4b83      	ldr	r3, [pc, #524]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	23c0      	movs	r3, #192	; 0xc0
 8001a2a:	039b      	lsls	r3, r3, #14
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	23c0      	movs	r3, #192	; 0xc0
 8001a36:	039b      	lsls	r3, r3, #14
 8001a38:	4013      	ands	r3, r2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	23c0      	movs	r3, #192	; 0xc0
 8001a46:	039b      	lsls	r3, r3, #14
 8001a48:	4013      	ands	r3, r2
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	23c0      	movs	r3, #192	; 0xc0
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	401a      	ands	r2, r3
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d10a      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001a62:	4b74      	ldr	r3, [pc, #464]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	029b      	lsls	r3, r3, #10
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	029b      	lsls	r3, r3, #10
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d101      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0d8      	b.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001a78:	4b6e      	ldr	r3, [pc, #440]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a7c:	23c0      	movs	r3, #192	; 0xc0
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d049      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	23c0      	movs	r3, #192	; 0xc0
 8001a90:	029b      	lsls	r3, r3, #10
 8001a92:	4013      	ands	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d004      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	23c0      	movs	r3, #192	; 0xc0
 8001aaa:	029b      	lsls	r3, r3, #10
 8001aac:	4013      	ands	r3, r2
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d034      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	4013      	ands	r3, r2
 8001abe:	d02e      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac4:	4a5d      	ldr	r2, [pc, #372]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ace:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0309      	lsls	r1, r1, #12
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ad8:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001adc:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ade:	4958      	ldr	r1, [pc, #352]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	d014      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7fe ff34 	bl	8000960 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001afc:	e009      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7fe ff2f 	bl	8000960 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e08b      	b.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b12:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0ef      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	23c0      	movs	r3, #192	; 0xc0
 8001b24:	029b      	lsls	r3, r3, #10
 8001b26:	401a      	ands	r2, r3
 8001b28:	23c0      	movs	r3, #192	; 0xc0
 8001b2a:	029b      	lsls	r3, r3, #10
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	23c0      	movs	r3, #192	; 0xc0
 8001b40:	039b      	lsls	r3, r3, #14
 8001b42:	401a      	ands	r2, r3
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	23c0      	movs	r3, #192	; 0xc0
 8001b54:	029b      	lsls	r3, r3, #10
 8001b56:	401a      	ands	r2, r3
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b5e:	2317      	movs	r3, #23
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b68:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b6e:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001b70:	400a      	ands	r2, r1
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	2203      	movs	r2, #3
 8001b84:	4393      	bics	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d009      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1a      	ldr	r2, [r3, #32]
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c06:	430a      	orrs	r2, r1
 8001c08:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	4013      	ands	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b006      	add	sp, #24
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	fffcffff 	.word	0xfffcffff
 8001c40:	fff7ffff 	.word	0xfff7ffff
 8001c44:	00001388 	.word	0x00001388
 8001c48:	ffcfffff 	.word	0xffcfffff
 8001c4c:	efffffff 	.word	0xefffffff
 8001c50:	fffff3ff 	.word	0xfffff3ff
 8001c54:	ffffcfff 	.word	0xffffcfff
 8001c58:	fbffffff 	.word	0xfbffffff
 8001c5c:	fff3ffff 	.word	0xfff3ffff

08001c60 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e03f      	b.n	8001cf2 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2249      	movs	r2, #73	; 0x49
 8001c76:	5c9b      	ldrb	r3, [r3, r2]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2248      	movs	r2, #72	; 0x48
 8001c82:	2100      	movs	r1, #0
 8001c84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7fe fd21 	bl	80006d0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2249      	movs	r2, #73	; 0x49
 8001c92:	2102      	movs	r1, #2
 8001c94:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	438a      	bics	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f91d 	bl	8001ee8 <USART_SetConfig>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e01c      	b.n	8001cf2 <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	490e      	ldr	r1, [pc, #56]	; (8001cfc <HAL_USART_Init+0x9c>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	212a      	movs	r1, #42	; 0x2a
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f000 fa54 	bl	8002198 <USART_CheckIdleState>
 8001cf0:	0003      	movs	r3, r0
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	ffffbfff 	.word	0xffffbfff

08001d00 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	1dbb      	adds	r3, r7, #6
 8001d0e:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2249      	movs	r2, #73	; 0x49
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d000      	beq.n	8001d1e <HAL_USART_Transmit+0x1e>
 8001d1c:	e0a9      	b.n	8001e72 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_USART_Transmit+0x2c>
 8001d24:	1dbb      	adds	r3, r7, #6
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0a1      	b.n	8001e74 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	015b      	lsls	r3, r3, #5
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d109      	bne.n	8001d50 <HAL_USART_Transmit+0x50>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d001      	beq.n	8001d50 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e091      	b.n	8001e74 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2248      	movs	r2, #72	; 0x48
 8001d54:	5c9b      	ldrb	r3, [r3, r2]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_USART_Transmit+0x5e>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e08a      	b.n	8001e74 <HAL_USART_Transmit+0x174>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2248      	movs	r2, #72	; 0x48
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2249      	movs	r2, #73	; 0x49
 8001d70:	2112      	movs	r1, #18
 8001d72:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d74:	f7fe fdf4 	bl	8000960 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1dba      	adds	r2, r7, #6
 8001d80:	8812      	ldrh	r2, [r2, #0]
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1dba      	adds	r2, r7, #6
 8001d88:	8812      	ldrh	r2, [r2, #0]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	015b      	lsls	r3, r3, #5
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d108      	bne.n	8001daa <HAL_USART_Transmit+0xaa>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d104      	bne.n	8001daa <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	e003      	b.n	8001db2 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8001db2:	e02a      	b.n	8001e0a <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	f000 f85b 	bl	8001e7c <USART_WaitOnFlagUntilTimeout>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e052      	b.n	8001e74 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10b      	bne.n	8001dec <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	001a      	movs	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	05d2      	lsls	r2, r2, #23
 8001de0:	0dd2      	lsrs	r2, r2, #23
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	3302      	adds	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	e007      	b.n	8001dfc <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1cf      	bne.n	8001db4 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2140      	movs	r1, #64	; 0x40
 8001e22:	f000 f82b 	bl	8001e7c <USART_WaitOnFlagUntilTimeout>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e022      	b.n	8001e74 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2240      	movs	r2, #64	; 0x40
 8001e34:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2108      	movs	r1, #8
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699a      	ldr	r2, [r3, #24]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2110      	movs	r1, #16
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2249      	movs	r2, #73	; 0x49
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2248      	movs	r2, #72	; 0x48
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b008      	add	sp, #32
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001e8c:	e017      	b.n	8001ebe <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	3301      	adds	r3, #1
 8001e92:	d014      	beq.n	8001ebe <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e94:	f7fe fd64 	bl	8000960 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d302      	bcc.n	8001eaa <USART_WaitOnFlagUntilTimeout+0x2e>
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2249      	movs	r2, #73	; 0x49
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2248      	movs	r2, #72	; 0x48
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e00f      	b.n	8001ede <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	425a      	negs	r2, r3
 8001ece:	4153      	adcs	r3, r2
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d0d8      	beq.n	8001e8e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8001ef0:	231e      	movs	r3, #30
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	0212      	lsls	r2, r2, #8
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a96      	ldr	r2, [pc, #600]	; (8002174 <USART_SetConfig+0x28c>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a87      	ldr	r2, [pc, #540]	; (8002178 <USART_SetConfig+0x290>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a83      	ldr	r2, [pc, #524]	; (800217c <USART_SetConfig+0x294>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d125      	bne.n	8001fc0 <USART_SetConfig+0xd8>
 8001f74:	4b82      	ldr	r3, [pc, #520]	; (8002180 <USART_SetConfig+0x298>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	2203      	movs	r2, #3
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d00f      	beq.n	8001fa0 <USART_SetConfig+0xb8>
 8001f80:	d304      	bcc.n	8001f8c <USART_SetConfig+0xa4>
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d007      	beq.n	8001f96 <USART_SetConfig+0xae>
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d00f      	beq.n	8001faa <USART_SetConfig+0xc2>
 8001f8a:	e013      	b.n	8001fb4 <USART_SetConfig+0xcc>
 8001f8c:	231f      	movs	r3, #31
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	e046      	b.n	8002024 <USART_SetConfig+0x13c>
 8001f96:	231f      	movs	r3, #31
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	e041      	b.n	8002024 <USART_SetConfig+0x13c>
 8001fa0:	231f      	movs	r3, #31
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e03c      	b.n	8002024 <USART_SetConfig+0x13c>
 8001faa:	231f      	movs	r3, #31
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2208      	movs	r2, #8
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e037      	b.n	8002024 <USART_SetConfig+0x13c>
 8001fb4:	231f      	movs	r3, #31
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2210      	movs	r2, #16
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	e031      	b.n	8002024 <USART_SetConfig+0x13c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6f      	ldr	r2, [pc, #444]	; (8002184 <USART_SetConfig+0x29c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d128      	bne.n	800201c <USART_SetConfig+0x134>
 8001fca:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <USART_SetConfig+0x298>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	220c      	movs	r2, #12
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d012      	beq.n	8001ffc <USART_SetConfig+0x114>
 8001fd6:	d802      	bhi.n	8001fde <USART_SetConfig+0xf6>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <USART_SetConfig+0x100>
 8001fdc:	e018      	b.n	8002010 <USART_SetConfig+0x128>
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d007      	beq.n	8001ff2 <USART_SetConfig+0x10a>
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d00f      	beq.n	8002006 <USART_SetConfig+0x11e>
 8001fe6:	e013      	b.n	8002010 <USART_SetConfig+0x128>
 8001fe8:	231f      	movs	r3, #31
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e018      	b.n	8002024 <USART_SetConfig+0x13c>
 8001ff2:	231f      	movs	r3, #31
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e013      	b.n	8002024 <USART_SetConfig+0x13c>
 8001ffc:	231f      	movs	r3, #31
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2204      	movs	r2, #4
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e00e      	b.n	8002024 <USART_SetConfig+0x13c>
 8002006:	231f      	movs	r3, #31
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2208      	movs	r2, #8
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	e009      	b.n	8002024 <USART_SetConfig+0x13c>
 8002010:	231f      	movs	r3, #31
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	2210      	movs	r2, #16
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	e003      	b.n	8002024 <USART_SetConfig+0x13c>
 800201c:	231f      	movs	r3, #31
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2210      	movs	r2, #16
 8002022:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8002024:	231f      	movs	r3, #31
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d86d      	bhi.n	800210a <USART_SetConfig+0x222>
 800202e:	009a      	lsls	r2, r3, #2
 8002030:	4b55      	ldr	r3, [pc, #340]	; (8002188 <USART_SetConfig+0x2a0>)
 8002032:	18d3      	adds	r3, r2, r3
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	469f      	mov	pc, r3
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002038:	f7ff fc82 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 800203c:	0003      	movs	r3, r0
 800203e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	005a      	lsls	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	18d2      	adds	r2, r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0019      	movs	r1, r3
 8002052:	0010      	movs	r0, r2
 8002054:	f7fe f858 	bl	8000108 <__udivsi3>
 8002058:	0003      	movs	r3, r0
 800205a:	61bb      	str	r3, [r7, #24]
      break;
 800205c:	e05a      	b.n	8002114 <USART_SetConfig+0x22c>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800205e:	f7ff fc85 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8002062:	0003      	movs	r3, r0
 8002064:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	005a      	lsls	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	18d2      	adds	r2, r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	0019      	movs	r1, r3
 8002078:	0010      	movs	r0, r2
 800207a:	f7fe f845 	bl	8000108 <__udivsi3>
 800207e:	0003      	movs	r3, r0
 8002080:	61bb      	str	r3, [r7, #24]
      break;
 8002082:	e047      	b.n	8002114 <USART_SetConfig+0x22c>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <USART_SetConfig+0x298>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	4013      	ands	r3, r2
 800208c:	d00d      	beq.n	80020aa <USART_SetConfig+0x1c2>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> 2U), husart->Init.BaudRate));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	4a3d      	ldr	r2, [pc, #244]	; (800218c <USART_SetConfig+0x2a4>)
 8002096:	189a      	adds	r2, r3, r2
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0019      	movs	r1, r3
 800209e:	0010      	movs	r0, r2
 80020a0:	f7fe f832 	bl	8000108 <__udivsi3>
 80020a4:	0003      	movs	r3, r0
 80020a6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
      }
      break;
 80020a8:	e034      	b.n	8002114 <USART_SetConfig+0x22c>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	4a37      	ldr	r2, [pc, #220]	; (8002190 <USART_SetConfig+0x2a8>)
 80020b2:	189a      	adds	r2, r3, r2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	0019      	movs	r1, r3
 80020ba:	0010      	movs	r0, r2
 80020bc:	f7fe f824 	bl	8000108 <__udivsi3>
 80020c0:	0003      	movs	r3, r0
 80020c2:	61bb      	str	r3, [r7, #24]
      break;
 80020c4:	e026      	b.n	8002114 <USART_SetConfig+0x22c>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80020c6:	f7ff fb8f 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 80020ca:	0003      	movs	r3, r0
 80020cc:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	005a      	lsls	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	18d2      	adds	r2, r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0019      	movs	r1, r3
 80020e0:	0010      	movs	r0, r2
 80020e2:	f7fe f811 	bl	8000108 <__udivsi3>
 80020e6:	0003      	movs	r3, r0
 80020e8:	61bb      	str	r3, [r7, #24]
      break;
 80020ea:	e013      	b.n	8002114 <USART_SetConfig+0x22c>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	0252      	lsls	r2, r2, #9
 80020f6:	189a      	adds	r2, r3, r2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	0019      	movs	r1, r3
 80020fe:	0010      	movs	r0, r2
 8002100:	f7fe f802 	bl	8000108 <__udivsi3>
 8002104:	0003      	movs	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
      break;
 8002108:	e004      	b.n	8002114 <USART_SetConfig+0x22c>
    default:
      ret = HAL_ERROR;
 800210a:	231e      	movs	r3, #30
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
      break;
 8002112:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	d91b      	bls.n	8002152 <USART_SetConfig+0x26a>
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <USART_SetConfig+0x2ac>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d817      	bhi.n	8002152 <USART_SetConfig+0x26a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	b29a      	uxth	r2, r3
 8002126:	200e      	movs	r0, #14
 8002128:	183b      	adds	r3, r7, r0
 800212a:	210f      	movs	r1, #15
 800212c:	438a      	bics	r2, r1
 800212e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	b29b      	uxth	r3, r3
 8002136:	2207      	movs	r2, #7
 8002138:	4013      	ands	r3, r2
 800213a:	b299      	uxth	r1, r3
 800213c:	183b      	adds	r3, r7, r0
 800213e:	183a      	adds	r2, r7, r0
 8002140:	8812      	ldrh	r2, [r2, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	183a      	adds	r2, r7, r0
 800214c:	8812      	ldrh	r2, [r2, #0]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	e003      	b.n	800215a <USART_SetConfig+0x272>
  }
  else
  {
    ret = HAL_ERROR;
 8002152:	231e      	movs	r3, #30
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8002166:	231e      	movs	r3, #30
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b008      	add	sp, #32
 8002172:	bd80      	pop	{r7, pc}
 8002174:	efff69f3 	.word	0xefff69f3
 8002178:	ffffc0ff 	.word	0xffffc0ff
 800217c:	40013800 	.word	0x40013800
 8002180:	40021000 	.word	0x40021000
 8002184:	40004400 	.word	0x40004400
 8002188:	080022c4 	.word	0x080022c4
 800218c:	007a1200 	.word	0x007a1200
 8002190:	01e84800 	.word	0x01e84800
 8002194:	0000ffff 	.word	0x0000ffff

08002198 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80021a6:	f7fe fbdb 	bl	8000960 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2208      	movs	r2, #8
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d10e      	bne.n	80021da <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	0399      	lsls	r1, r3, #14
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	23fa      	movs	r3, #250	; 0xfa
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	0013      	movs	r3, r2
 80021cc:	2200      	movs	r2, #0
 80021ce:	f7ff fe55 	bl	8001e7c <USART_WaitOnFlagUntilTimeout>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d001      	beq.n	80021da <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e01e      	b.n	8002218 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d10e      	bne.n	8002206 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	03d9      	lsls	r1, r3, #15
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	23fa      	movs	r3, #250	; 0xfa
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	0013      	movs	r3, r2
 80021f8:	2200      	movs	r2, #0
 80021fa:	f7ff fe3f 	bl	8001e7c <USART_WaitOnFlagUntilTimeout>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e008      	b.n	8002218 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2249      	movs	r2, #73	; 0x49
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2248      	movs	r2, #72	; 0x48
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}

08002220 <__libc_init_array>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	2600      	movs	r6, #0
 8002224:	4d0c      	ldr	r5, [pc, #48]	; (8002258 <__libc_init_array+0x38>)
 8002226:	4c0d      	ldr	r4, [pc, #52]	; (800225c <__libc_init_array+0x3c>)
 8002228:	1b64      	subs	r4, r4, r5
 800222a:	10a4      	asrs	r4, r4, #2
 800222c:	42a6      	cmp	r6, r4
 800222e:	d109      	bne.n	8002244 <__libc_init_array+0x24>
 8002230:	2600      	movs	r6, #0
 8002232:	f000 f821 	bl	8002278 <_init>
 8002236:	4d0a      	ldr	r5, [pc, #40]	; (8002260 <__libc_init_array+0x40>)
 8002238:	4c0a      	ldr	r4, [pc, #40]	; (8002264 <__libc_init_array+0x44>)
 800223a:	1b64      	subs	r4, r4, r5
 800223c:	10a4      	asrs	r4, r4, #2
 800223e:	42a6      	cmp	r6, r4
 8002240:	d105      	bne.n	800224e <__libc_init_array+0x2e>
 8002242:	bd70      	pop	{r4, r5, r6, pc}
 8002244:	00b3      	lsls	r3, r6, #2
 8002246:	58eb      	ldr	r3, [r5, r3]
 8002248:	4798      	blx	r3
 800224a:	3601      	adds	r6, #1
 800224c:	e7ee      	b.n	800222c <__libc_init_array+0xc>
 800224e:	00b3      	lsls	r3, r6, #2
 8002250:	58eb      	ldr	r3, [r5, r3]
 8002252:	4798      	blx	r3
 8002254:	3601      	adds	r6, #1
 8002256:	e7f2      	b.n	800223e <__libc_init_array+0x1e>
 8002258:	080022f0 	.word	0x080022f0
 800225c:	080022f0 	.word	0x080022f0
 8002260:	080022f0 	.word	0x080022f0
 8002264:	080022f4 	.word	0x080022f4

08002268 <memset>:
 8002268:	0003      	movs	r3, r0
 800226a:	1812      	adds	r2, r2, r0
 800226c:	4293      	cmp	r3, r2
 800226e:	d100      	bne.n	8002272 <memset+0xa>
 8002270:	4770      	bx	lr
 8002272:	7019      	strb	r1, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	e7f9      	b.n	800226c <memset+0x4>

08002278 <_init>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227e:	bc08      	pop	{r3}
 8002280:	469e      	mov	lr, r3
 8002282:	4770      	bx	lr

08002284 <_fini>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228a:	bc08      	pop	{r3}
 800228c:	469e      	mov	lr, r3
 800228e:	4770      	bx	lr
