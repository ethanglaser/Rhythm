
477_BluetoothInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008498  08008498  00018498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d0  080086d0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086d8  080086d8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080086e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200000a0  0800877c  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800877c  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f644  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021b8  00000000  00000000  0002f708  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  00032840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015429  00000000  00000000  000336d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4cb  00000000  00000000  00048b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000812ae  00000000  00000000  00054fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d627a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f18  00000000  00000000  000d62f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008480 	.word	0x08008480

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08008480 	.word	0x08008480

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f000 fffd 	bl	8001414 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 ff55 	bl	80012d4 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ffef 	bl	8001414 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffe5 	bl	8001414 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff77 	bl	800134c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff6d 	bl	800134c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_uldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d111      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d10f      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000488:	2900      	cmp	r1, #0
 800048a:	d100      	bne.n	800048e <__aeabi_uldivmod+0xe>
 800048c:	2800      	cmp	r0, #0
 800048e:	d002      	beq.n	8000496 <__aeabi_uldivmod+0x16>
 8000490:	2100      	movs	r1, #0
 8000492:	43c9      	mvns	r1, r1
 8000494:	1c08      	adds	r0, r1, #0
 8000496:	b407      	push	{r0, r1, r2}
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <__aeabi_uldivmod+0x24>)
 800049a:	a102      	add	r1, pc, #8	; (adr r1, 80004a4 <__aeabi_uldivmod+0x24>)
 800049c:	1840      	adds	r0, r0, r1
 800049e:	9002      	str	r0, [sp, #8]
 80004a0:	bd03      	pop	{r0, r1, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	ffffff5d 	.word	0xffffff5d
 80004a8:	b403      	push	{r0, r1}
 80004aa:	4668      	mov	r0, sp
 80004ac:	b501      	push	{r0, lr}
 80004ae:	9802      	ldr	r0, [sp, #8]
 80004b0:	f000 f830 	bl	8000514 <__udivmoddi4>
 80004b4:	9b01      	ldr	r3, [sp, #4]
 80004b6:	469e      	mov	lr, r3
 80004b8:	b002      	add	sp, #8
 80004ba:	bc0c      	pop	{r2, r3}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_lmul>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	46ce      	mov	lr, r9
 80004c4:	4647      	mov	r7, r8
 80004c6:	0415      	lsls	r5, r2, #16
 80004c8:	0c2d      	lsrs	r5, r5, #16
 80004ca:	002e      	movs	r6, r5
 80004cc:	b580      	push	{r7, lr}
 80004ce:	0407      	lsls	r7, r0, #16
 80004d0:	0c14      	lsrs	r4, r2, #16
 80004d2:	0c3f      	lsrs	r7, r7, #16
 80004d4:	4699      	mov	r9, r3
 80004d6:	0c03      	lsrs	r3, r0, #16
 80004d8:	437e      	muls	r6, r7
 80004da:	435d      	muls	r5, r3
 80004dc:	4367      	muls	r7, r4
 80004de:	4363      	muls	r3, r4
 80004e0:	197f      	adds	r7, r7, r5
 80004e2:	0c34      	lsrs	r4, r6, #16
 80004e4:	19e4      	adds	r4, r4, r7
 80004e6:	469c      	mov	ip, r3
 80004e8:	42a5      	cmp	r5, r4
 80004ea:	d903      	bls.n	80004f4 <__aeabi_lmul+0x34>
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	025b      	lsls	r3, r3, #9
 80004f0:	4698      	mov	r8, r3
 80004f2:	44c4      	add	ip, r8
 80004f4:	464b      	mov	r3, r9
 80004f6:	4343      	muls	r3, r0
 80004f8:	4351      	muls	r1, r2
 80004fa:	0c25      	lsrs	r5, r4, #16
 80004fc:	0436      	lsls	r6, r6, #16
 80004fe:	4465      	add	r5, ip
 8000500:	0c36      	lsrs	r6, r6, #16
 8000502:	0424      	lsls	r4, r4, #16
 8000504:	19a4      	adds	r4, r4, r6
 8000506:	195b      	adds	r3, r3, r5
 8000508:	1859      	adds	r1, r3, r1
 800050a:	0020      	movs	r0, r4
 800050c:	bc0c      	pop	{r2, r3}
 800050e:	4690      	mov	r8, r2
 8000510:	4699      	mov	r9, r3
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000514 <__udivmoddi4>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	464f      	mov	r7, r9
 8000518:	4646      	mov	r6, r8
 800051a:	46d6      	mov	lr, sl
 800051c:	b5c0      	push	{r6, r7, lr}
 800051e:	0004      	movs	r4, r0
 8000520:	b082      	sub	sp, #8
 8000522:	000d      	movs	r5, r1
 8000524:	4691      	mov	r9, r2
 8000526:	4698      	mov	r8, r3
 8000528:	428b      	cmp	r3, r1
 800052a:	d82f      	bhi.n	800058c <__udivmoddi4+0x78>
 800052c:	d02c      	beq.n	8000588 <__udivmoddi4+0x74>
 800052e:	4641      	mov	r1, r8
 8000530:	4648      	mov	r0, r9
 8000532:	f001 fe05 	bl	8002140 <__clzdi2>
 8000536:	0029      	movs	r1, r5
 8000538:	0006      	movs	r6, r0
 800053a:	0020      	movs	r0, r4
 800053c:	f001 fe00 	bl	8002140 <__clzdi2>
 8000540:	1a33      	subs	r3, r6, r0
 8000542:	469c      	mov	ip, r3
 8000544:	3b20      	subs	r3, #32
 8000546:	469a      	mov	sl, r3
 8000548:	d500      	bpl.n	800054c <__udivmoddi4+0x38>
 800054a:	e076      	b.n	800063a <__udivmoddi4+0x126>
 800054c:	464b      	mov	r3, r9
 800054e:	4652      	mov	r2, sl
 8000550:	4093      	lsls	r3, r2
 8000552:	001f      	movs	r7, r3
 8000554:	464b      	mov	r3, r9
 8000556:	4662      	mov	r2, ip
 8000558:	4093      	lsls	r3, r2
 800055a:	001e      	movs	r6, r3
 800055c:	42af      	cmp	r7, r5
 800055e:	d828      	bhi.n	80005b2 <__udivmoddi4+0x9e>
 8000560:	d025      	beq.n	80005ae <__udivmoddi4+0x9a>
 8000562:	4653      	mov	r3, sl
 8000564:	1ba4      	subs	r4, r4, r6
 8000566:	41bd      	sbcs	r5, r7
 8000568:	2b00      	cmp	r3, #0
 800056a:	da00      	bge.n	800056e <__udivmoddi4+0x5a>
 800056c:	e07b      	b.n	8000666 <__udivmoddi4+0x152>
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	4652      	mov	r2, sl
 800057a:	4093      	lsls	r3, r2
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	4662      	mov	r2, ip
 8000582:	4093      	lsls	r3, r2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	e018      	b.n	80005ba <__udivmoddi4+0xa6>
 8000588:	4282      	cmp	r2, r0
 800058a:	d9d0      	bls.n	800052e <__udivmoddi4+0x1a>
 800058c:	2200      	movs	r2, #0
 800058e:	2300      	movs	r3, #0
 8000590:	9200      	str	r2, [sp, #0]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <__udivmoddi4+0x8a>
 800059a:	601c      	str	r4, [r3, #0]
 800059c:	605d      	str	r5, [r3, #4]
 800059e:	9800      	ldr	r0, [sp, #0]
 80005a0:	9901      	ldr	r1, [sp, #4]
 80005a2:	b002      	add	sp, #8
 80005a4:	bc1c      	pop	{r2, r3, r4}
 80005a6:	4690      	mov	r8, r2
 80005a8:	4699      	mov	r9, r3
 80005aa:	46a2      	mov	sl, r4
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d9d7      	bls.n	8000562 <__udivmoddi4+0x4e>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2300      	movs	r3, #0
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	4663      	mov	r3, ip
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0e9      	beq.n	8000594 <__udivmoddi4+0x80>
 80005c0:	07fb      	lsls	r3, r7, #31
 80005c2:	4698      	mov	r8, r3
 80005c4:	4641      	mov	r1, r8
 80005c6:	0872      	lsrs	r2, r6, #1
 80005c8:	430a      	orrs	r2, r1
 80005ca:	087b      	lsrs	r3, r7, #1
 80005cc:	4666      	mov	r6, ip
 80005ce:	e00e      	b.n	80005ee <__udivmoddi4+0xda>
 80005d0:	42ab      	cmp	r3, r5
 80005d2:	d101      	bne.n	80005d8 <__udivmoddi4+0xc4>
 80005d4:	42a2      	cmp	r2, r4
 80005d6:	d80c      	bhi.n	80005f2 <__udivmoddi4+0xde>
 80005d8:	1aa4      	subs	r4, r4, r2
 80005da:	419d      	sbcs	r5, r3
 80005dc:	2001      	movs	r0, #1
 80005de:	1924      	adds	r4, r4, r4
 80005e0:	416d      	adcs	r5, r5
 80005e2:	2100      	movs	r1, #0
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1824      	adds	r4, r4, r0
 80005e8:	414d      	adcs	r5, r1
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d006      	beq.n	80005fc <__udivmoddi4+0xe8>
 80005ee:	42ab      	cmp	r3, r5
 80005f0:	d9ee      	bls.n	80005d0 <__udivmoddi4+0xbc>
 80005f2:	3e01      	subs	r6, #1
 80005f4:	1924      	adds	r4, r4, r4
 80005f6:	416d      	adcs	r5, r5
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d1f8      	bne.n	80005ee <__udivmoddi4+0xda>
 80005fc:	9800      	ldr	r0, [sp, #0]
 80005fe:	9901      	ldr	r1, [sp, #4]
 8000600:	4653      	mov	r3, sl
 8000602:	1900      	adds	r0, r0, r4
 8000604:	4169      	adcs	r1, r5
 8000606:	2b00      	cmp	r3, #0
 8000608:	db23      	blt.n	8000652 <__udivmoddi4+0x13e>
 800060a:	002b      	movs	r3, r5
 800060c:	4652      	mov	r2, sl
 800060e:	40d3      	lsrs	r3, r2
 8000610:	002a      	movs	r2, r5
 8000612:	4664      	mov	r4, ip
 8000614:	40e2      	lsrs	r2, r4
 8000616:	001c      	movs	r4, r3
 8000618:	4653      	mov	r3, sl
 800061a:	0015      	movs	r5, r2
 800061c:	2b00      	cmp	r3, #0
 800061e:	db2d      	blt.n	800067c <__udivmoddi4+0x168>
 8000620:	0026      	movs	r6, r4
 8000622:	4657      	mov	r7, sl
 8000624:	40be      	lsls	r6, r7
 8000626:	0033      	movs	r3, r6
 8000628:	0026      	movs	r6, r4
 800062a:	4667      	mov	r7, ip
 800062c:	40be      	lsls	r6, r7
 800062e:	0032      	movs	r2, r6
 8000630:	1a80      	subs	r0, r0, r2
 8000632:	4199      	sbcs	r1, r3
 8000634:	9000      	str	r0, [sp, #0]
 8000636:	9101      	str	r1, [sp, #4]
 8000638:	e7ac      	b.n	8000594 <__udivmoddi4+0x80>
 800063a:	4662      	mov	r2, ip
 800063c:	2320      	movs	r3, #32
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	464a      	mov	r2, r9
 8000642:	40da      	lsrs	r2, r3
 8000644:	4661      	mov	r1, ip
 8000646:	0013      	movs	r3, r2
 8000648:	4642      	mov	r2, r8
 800064a:	408a      	lsls	r2, r1
 800064c:	0017      	movs	r7, r2
 800064e:	431f      	orrs	r7, r3
 8000650:	e780      	b.n	8000554 <__udivmoddi4+0x40>
 8000652:	4662      	mov	r2, ip
 8000654:	2320      	movs	r3, #32
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	4666      	mov	r6, ip
 800065c:	409a      	lsls	r2, r3
 800065e:	0023      	movs	r3, r4
 8000660:	40f3      	lsrs	r3, r6
 8000662:	4313      	orrs	r3, r2
 8000664:	e7d4      	b.n	8000610 <__udivmoddi4+0xfc>
 8000666:	4662      	mov	r2, ip
 8000668:	2320      	movs	r3, #32
 800066a:	2100      	movs	r1, #0
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	9100      	str	r1, [sp, #0]
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	40da      	lsrs	r2, r3
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	e780      	b.n	800057e <__udivmoddi4+0x6a>
 800067c:	2320      	movs	r3, #32
 800067e:	4662      	mov	r2, ip
 8000680:	0026      	movs	r6, r4
 8000682:	1a9b      	subs	r3, r3, r2
 8000684:	40de      	lsrs	r6, r3
 8000686:	002f      	movs	r7, r5
 8000688:	46b0      	mov	r8, r6
 800068a:	4666      	mov	r6, ip
 800068c:	40b7      	lsls	r7, r6
 800068e:	4646      	mov	r6, r8
 8000690:	003b      	movs	r3, r7
 8000692:	4333      	orrs	r3, r6
 8000694:	e7c8      	b.n	8000628 <__udivmoddi4+0x114>
 8000696:	46c0      	nop			; (mov r8, r8)

08000698 <__aeabi_dadd>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	464f      	mov	r7, r9
 800069c:	4646      	mov	r6, r8
 800069e:	46d6      	mov	lr, sl
 80006a0:	000c      	movs	r4, r1
 80006a2:	0309      	lsls	r1, r1, #12
 80006a4:	b5c0      	push	{r6, r7, lr}
 80006a6:	0a49      	lsrs	r1, r1, #9
 80006a8:	0f47      	lsrs	r7, r0, #29
 80006aa:	005e      	lsls	r6, r3, #1
 80006ac:	4339      	orrs	r1, r7
 80006ae:	031f      	lsls	r7, r3, #12
 80006b0:	0fdb      	lsrs	r3, r3, #31
 80006b2:	469c      	mov	ip, r3
 80006b4:	0065      	lsls	r5, r4, #1
 80006b6:	0a7b      	lsrs	r3, r7, #9
 80006b8:	0f57      	lsrs	r7, r2, #29
 80006ba:	431f      	orrs	r7, r3
 80006bc:	0d6d      	lsrs	r5, r5, #21
 80006be:	0fe4      	lsrs	r4, r4, #31
 80006c0:	0d76      	lsrs	r6, r6, #21
 80006c2:	46a1      	mov	r9, r4
 80006c4:	00c0      	lsls	r0, r0, #3
 80006c6:	46b8      	mov	r8, r7
 80006c8:	00d2      	lsls	r2, r2, #3
 80006ca:	1bab      	subs	r3, r5, r6
 80006cc:	4564      	cmp	r4, ip
 80006ce:	d07b      	beq.n	80007c8 <__aeabi_dadd+0x130>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	dd5f      	ble.n	8000794 <__aeabi_dadd+0xfc>
 80006d4:	2e00      	cmp	r6, #0
 80006d6:	d000      	beq.n	80006da <__aeabi_dadd+0x42>
 80006d8:	e0a4      	b.n	8000824 <__aeabi_dadd+0x18c>
 80006da:	003e      	movs	r6, r7
 80006dc:	4316      	orrs	r6, r2
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x4a>
 80006e0:	e112      	b.n	8000908 <__aeabi_dadd+0x270>
 80006e2:	1e5e      	subs	r6, r3, #1
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x52>
 80006e8:	e19e      	b.n	8000a28 <__aeabi_dadd+0x390>
 80006ea:	1a87      	subs	r7, r0, r2
 80006ec:	4643      	mov	r3, r8
 80006ee:	42b8      	cmp	r0, r7
 80006f0:	4180      	sbcs	r0, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	1ac9      	subs	r1, r1, r3
 80006f6:	4240      	negs	r0, r0
 80006f8:	1a09      	subs	r1, r1, r0
 80006fa:	020b      	lsls	r3, r1, #8
 80006fc:	d400      	bmi.n	8000700 <__aeabi_dadd+0x68>
 80006fe:	e131      	b.n	8000964 <__aeabi_dadd+0x2cc>
 8000700:	0249      	lsls	r1, r1, #9
 8000702:	0a4e      	lsrs	r6, r1, #9
 8000704:	2e00      	cmp	r6, #0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x72>
 8000708:	e16e      	b.n	80009e8 <__aeabi_dadd+0x350>
 800070a:	0030      	movs	r0, r6
 800070c:	f001 fcfa 	bl	8002104 <__clzsi2>
 8000710:	0003      	movs	r3, r0
 8000712:	3b08      	subs	r3, #8
 8000714:	2b1f      	cmp	r3, #31
 8000716:	dd00      	ble.n	800071a <__aeabi_dadd+0x82>
 8000718:	e161      	b.n	80009de <__aeabi_dadd+0x346>
 800071a:	2220      	movs	r2, #32
 800071c:	0039      	movs	r1, r7
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	409e      	lsls	r6, r3
 8000722:	40d1      	lsrs	r1, r2
 8000724:	409f      	lsls	r7, r3
 8000726:	430e      	orrs	r6, r1
 8000728:	429d      	cmp	r5, r3
 800072a:	dd00      	ble.n	800072e <__aeabi_dadd+0x96>
 800072c:	e151      	b.n	80009d2 <__aeabi_dadd+0x33a>
 800072e:	1b5d      	subs	r5, r3, r5
 8000730:	1c6b      	adds	r3, r5, #1
 8000732:	2b1f      	cmp	r3, #31
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0xa0>
 8000736:	e17c      	b.n	8000a32 <__aeabi_dadd+0x39a>
 8000738:	2120      	movs	r1, #32
 800073a:	1ac9      	subs	r1, r1, r3
 800073c:	003d      	movs	r5, r7
 800073e:	0030      	movs	r0, r6
 8000740:	408f      	lsls	r7, r1
 8000742:	4088      	lsls	r0, r1
 8000744:	40dd      	lsrs	r5, r3
 8000746:	1e79      	subs	r1, r7, #1
 8000748:	418f      	sbcs	r7, r1
 800074a:	0031      	movs	r1, r6
 800074c:	2207      	movs	r2, #7
 800074e:	4328      	orrs	r0, r5
 8000750:	40d9      	lsrs	r1, r3
 8000752:	2500      	movs	r5, #0
 8000754:	4307      	orrs	r7, r0
 8000756:	403a      	ands	r2, r7
 8000758:	2a00      	cmp	r2, #0
 800075a:	d009      	beq.n	8000770 <__aeabi_dadd+0xd8>
 800075c:	230f      	movs	r3, #15
 800075e:	403b      	ands	r3, r7
 8000760:	2b04      	cmp	r3, #4
 8000762:	d005      	beq.n	8000770 <__aeabi_dadd+0xd8>
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	42bb      	cmp	r3, r7
 8000768:	41bf      	sbcs	r7, r7
 800076a:	427f      	negs	r7, r7
 800076c:	19c9      	adds	r1, r1, r7
 800076e:	001f      	movs	r7, r3
 8000770:	020b      	lsls	r3, r1, #8
 8000772:	d400      	bmi.n	8000776 <__aeabi_dadd+0xde>
 8000774:	e226      	b.n	8000bc4 <__aeabi_dadd+0x52c>
 8000776:	1c6a      	adds	r2, r5, #1
 8000778:	4bc6      	ldr	r3, [pc, #792]	; (8000a94 <__aeabi_dadd+0x3fc>)
 800077a:	0555      	lsls	r5, r2, #21
 800077c:	0d6d      	lsrs	r5, r5, #21
 800077e:	429a      	cmp	r2, r3
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0xec>
 8000782:	e106      	b.n	8000992 <__aeabi_dadd+0x2fa>
 8000784:	4ac4      	ldr	r2, [pc, #784]	; (8000a98 <__aeabi_dadd+0x400>)
 8000786:	08ff      	lsrs	r7, r7, #3
 8000788:	400a      	ands	r2, r1
 800078a:	0753      	lsls	r3, r2, #29
 800078c:	0252      	lsls	r2, r2, #9
 800078e:	433b      	orrs	r3, r7
 8000790:	0b12      	lsrs	r2, r2, #12
 8000792:	e08e      	b.n	80008b2 <__aeabi_dadd+0x21a>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d000      	beq.n	800079a <__aeabi_dadd+0x102>
 8000798:	e0b8      	b.n	800090c <__aeabi_dadd+0x274>
 800079a:	1c6b      	adds	r3, r5, #1
 800079c:	055b      	lsls	r3, r3, #21
 800079e:	0d5b      	lsrs	r3, r3, #21
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x10e>
 80007a4:	e130      	b.n	8000a08 <__aeabi_dadd+0x370>
 80007a6:	1a87      	subs	r7, r0, r2
 80007a8:	4643      	mov	r3, r8
 80007aa:	42b8      	cmp	r0, r7
 80007ac:	41b6      	sbcs	r6, r6
 80007ae:	1acb      	subs	r3, r1, r3
 80007b0:	4276      	negs	r6, r6
 80007b2:	1b9e      	subs	r6, r3, r6
 80007b4:	0233      	lsls	r3, r6, #8
 80007b6:	d500      	bpl.n	80007ba <__aeabi_dadd+0x122>
 80007b8:	e14c      	b.n	8000a54 <__aeabi_dadd+0x3bc>
 80007ba:	003b      	movs	r3, r7
 80007bc:	4333      	orrs	r3, r6
 80007be:	d1a1      	bne.n	8000704 <__aeabi_dadd+0x6c>
 80007c0:	2200      	movs	r2, #0
 80007c2:	2400      	movs	r4, #0
 80007c4:	2500      	movs	r5, #0
 80007c6:	e070      	b.n	80008aa <__aeabi_dadd+0x212>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dc00      	bgt.n	80007ce <__aeabi_dadd+0x136>
 80007cc:	e0e5      	b.n	800099a <__aeabi_dadd+0x302>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x13c>
 80007d2:	e083      	b.n	80008dc <__aeabi_dadd+0x244>
 80007d4:	4eaf      	ldr	r6, [pc, #700]	; (8000a94 <__aeabi_dadd+0x3fc>)
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d060      	beq.n	800089c <__aeabi_dadd+0x204>
 80007da:	2680      	movs	r6, #128	; 0x80
 80007dc:	0436      	lsls	r6, r6, #16
 80007de:	4337      	orrs	r7, r6
 80007e0:	46b8      	mov	r8, r7
 80007e2:	2b38      	cmp	r3, #56	; 0x38
 80007e4:	dc00      	bgt.n	80007e8 <__aeabi_dadd+0x150>
 80007e6:	e13e      	b.n	8000a66 <__aeabi_dadd+0x3ce>
 80007e8:	4643      	mov	r3, r8
 80007ea:	4313      	orrs	r3, r2
 80007ec:	001f      	movs	r7, r3
 80007ee:	1e7a      	subs	r2, r7, #1
 80007f0:	4197      	sbcs	r7, r2
 80007f2:	183f      	adds	r7, r7, r0
 80007f4:	4287      	cmp	r7, r0
 80007f6:	4180      	sbcs	r0, r0
 80007f8:	4240      	negs	r0, r0
 80007fa:	1809      	adds	r1, r1, r0
 80007fc:	020b      	lsls	r3, r1, #8
 80007fe:	d400      	bmi.n	8000802 <__aeabi_dadd+0x16a>
 8000800:	e0b0      	b.n	8000964 <__aeabi_dadd+0x2cc>
 8000802:	4ba4      	ldr	r3, [pc, #656]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000804:	3501      	adds	r5, #1
 8000806:	429d      	cmp	r5, r3
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x174>
 800080a:	e0c3      	b.n	8000994 <__aeabi_dadd+0x2fc>
 800080c:	4aa2      	ldr	r2, [pc, #648]	; (8000a98 <__aeabi_dadd+0x400>)
 800080e:	087b      	lsrs	r3, r7, #1
 8000810:	400a      	ands	r2, r1
 8000812:	2101      	movs	r1, #1
 8000814:	400f      	ands	r7, r1
 8000816:	431f      	orrs	r7, r3
 8000818:	0851      	lsrs	r1, r2, #1
 800081a:	07d3      	lsls	r3, r2, #31
 800081c:	2207      	movs	r2, #7
 800081e:	431f      	orrs	r7, r3
 8000820:	403a      	ands	r2, r7
 8000822:	e799      	b.n	8000758 <__aeabi_dadd+0xc0>
 8000824:	4e9b      	ldr	r6, [pc, #620]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000826:	42b5      	cmp	r5, r6
 8000828:	d038      	beq.n	800089c <__aeabi_dadd+0x204>
 800082a:	2680      	movs	r6, #128	; 0x80
 800082c:	0436      	lsls	r6, r6, #16
 800082e:	4337      	orrs	r7, r6
 8000830:	46b8      	mov	r8, r7
 8000832:	2b38      	cmp	r3, #56	; 0x38
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x1a0>
 8000836:	e0dc      	b.n	80009f2 <__aeabi_dadd+0x35a>
 8000838:	2b1f      	cmp	r3, #31
 800083a:	dc00      	bgt.n	800083e <__aeabi_dadd+0x1a6>
 800083c:	e130      	b.n	8000aa0 <__aeabi_dadd+0x408>
 800083e:	001e      	movs	r6, r3
 8000840:	4647      	mov	r7, r8
 8000842:	3e20      	subs	r6, #32
 8000844:	40f7      	lsrs	r7, r6
 8000846:	46bc      	mov	ip, r7
 8000848:	2b20      	cmp	r3, #32
 800084a:	d004      	beq.n	8000856 <__aeabi_dadd+0x1be>
 800084c:	2640      	movs	r6, #64	; 0x40
 800084e:	1af3      	subs	r3, r6, r3
 8000850:	4646      	mov	r6, r8
 8000852:	409e      	lsls	r6, r3
 8000854:	4332      	orrs	r2, r6
 8000856:	0017      	movs	r7, r2
 8000858:	4663      	mov	r3, ip
 800085a:	1e7a      	subs	r2, r7, #1
 800085c:	4197      	sbcs	r7, r2
 800085e:	431f      	orrs	r7, r3
 8000860:	e0cc      	b.n	80009fc <__aeabi_dadd+0x364>
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x1d0>
 8000866:	e204      	b.n	8000c72 <__aeabi_dadd+0x5da>
 8000868:	4643      	mov	r3, r8
 800086a:	4313      	orrs	r3, r2
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x1d8>
 800086e:	e159      	b.n	8000b24 <__aeabi_dadd+0x48c>
 8000870:	074b      	lsls	r3, r1, #29
 8000872:	08c0      	lsrs	r0, r0, #3
 8000874:	4318      	orrs	r0, r3
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	08c9      	lsrs	r1, r1, #3
 800087a:	031b      	lsls	r3, r3, #12
 800087c:	4219      	tst	r1, r3
 800087e:	d008      	beq.n	8000892 <__aeabi_dadd+0x1fa>
 8000880:	4645      	mov	r5, r8
 8000882:	08ed      	lsrs	r5, r5, #3
 8000884:	421d      	tst	r5, r3
 8000886:	d104      	bne.n	8000892 <__aeabi_dadd+0x1fa>
 8000888:	4643      	mov	r3, r8
 800088a:	08d0      	lsrs	r0, r2, #3
 800088c:	0759      	lsls	r1, r3, #29
 800088e:	4308      	orrs	r0, r1
 8000890:	0029      	movs	r1, r5
 8000892:	0f42      	lsrs	r2, r0, #29
 8000894:	00c9      	lsls	r1, r1, #3
 8000896:	4d7f      	ldr	r5, [pc, #508]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000898:	4311      	orrs	r1, r2
 800089a:	00c0      	lsls	r0, r0, #3
 800089c:	074b      	lsls	r3, r1, #29
 800089e:	08ca      	lsrs	r2, r1, #3
 80008a0:	497c      	ldr	r1, [pc, #496]	; (8000a94 <__aeabi_dadd+0x3fc>)
 80008a2:	08c0      	lsrs	r0, r0, #3
 80008a4:	4303      	orrs	r3, r0
 80008a6:	428d      	cmp	r5, r1
 80008a8:	d068      	beq.n	800097c <__aeabi_dadd+0x2e4>
 80008aa:	0312      	lsls	r2, r2, #12
 80008ac:	056d      	lsls	r5, r5, #21
 80008ae:	0b12      	lsrs	r2, r2, #12
 80008b0:	0d6d      	lsrs	r5, r5, #21
 80008b2:	2100      	movs	r1, #0
 80008b4:	0312      	lsls	r2, r2, #12
 80008b6:	0018      	movs	r0, r3
 80008b8:	0b13      	lsrs	r3, r2, #12
 80008ba:	0d0a      	lsrs	r2, r1, #20
 80008bc:	0512      	lsls	r2, r2, #20
 80008be:	431a      	orrs	r2, r3
 80008c0:	4b76      	ldr	r3, [pc, #472]	; (8000a9c <__aeabi_dadd+0x404>)
 80008c2:	052d      	lsls	r5, r5, #20
 80008c4:	4013      	ands	r3, r2
 80008c6:	432b      	orrs	r3, r5
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	07e4      	lsls	r4, r4, #31
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	4323      	orrs	r3, r4
 80008d0:	0019      	movs	r1, r3
 80008d2:	bc1c      	pop	{r2, r3, r4}
 80008d4:	4690      	mov	r8, r2
 80008d6:	4699      	mov	r9, r3
 80008d8:	46a2      	mov	sl, r4
 80008da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008dc:	003e      	movs	r6, r7
 80008de:	4316      	orrs	r6, r2
 80008e0:	d012      	beq.n	8000908 <__aeabi_dadd+0x270>
 80008e2:	1e5e      	subs	r6, r3, #1
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x252>
 80008e8:	e100      	b.n	8000aec <__aeabi_dadd+0x454>
 80008ea:	1887      	adds	r7, r0, r2
 80008ec:	4287      	cmp	r7, r0
 80008ee:	4180      	sbcs	r0, r0
 80008f0:	4441      	add	r1, r8
 80008f2:	4240      	negs	r0, r0
 80008f4:	1809      	adds	r1, r1, r0
 80008f6:	2501      	movs	r5, #1
 80008f8:	020b      	lsls	r3, r1, #8
 80008fa:	d533      	bpl.n	8000964 <__aeabi_dadd+0x2cc>
 80008fc:	2502      	movs	r5, #2
 80008fe:	e785      	b.n	800080c <__aeabi_dadd+0x174>
 8000900:	4664      	mov	r4, ip
 8000902:	0033      	movs	r3, r6
 8000904:	4641      	mov	r1, r8
 8000906:	0010      	movs	r0, r2
 8000908:	001d      	movs	r5, r3
 800090a:	e7c7      	b.n	800089c <__aeabi_dadd+0x204>
 800090c:	2d00      	cmp	r5, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x27a>
 8000910:	e0da      	b.n	8000ac8 <__aeabi_dadd+0x430>
 8000912:	000c      	movs	r4, r1
 8000914:	4304      	orrs	r4, r0
 8000916:	d0f3      	beq.n	8000900 <__aeabi_dadd+0x268>
 8000918:	1c5c      	adds	r4, r3, #1
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x286>
 800091c:	e19f      	b.n	8000c5e <__aeabi_dadd+0x5c6>
 800091e:	4c5d      	ldr	r4, [pc, #372]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000920:	42a6      	cmp	r6, r4
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x28e>
 8000924:	e12f      	b.n	8000b86 <__aeabi_dadd+0x4ee>
 8000926:	43db      	mvns	r3, r3
 8000928:	2b38      	cmp	r3, #56	; 0x38
 800092a:	dd00      	ble.n	800092e <__aeabi_dadd+0x296>
 800092c:	e166      	b.n	8000bfc <__aeabi_dadd+0x564>
 800092e:	2b1f      	cmp	r3, #31
 8000930:	dd00      	ble.n	8000934 <__aeabi_dadd+0x29c>
 8000932:	e183      	b.n	8000c3c <__aeabi_dadd+0x5a4>
 8000934:	2420      	movs	r4, #32
 8000936:	0005      	movs	r5, r0
 8000938:	1ae4      	subs	r4, r4, r3
 800093a:	000f      	movs	r7, r1
 800093c:	40dd      	lsrs	r5, r3
 800093e:	40d9      	lsrs	r1, r3
 8000940:	40a0      	lsls	r0, r4
 8000942:	4643      	mov	r3, r8
 8000944:	40a7      	lsls	r7, r4
 8000946:	1a5b      	subs	r3, r3, r1
 8000948:	1e44      	subs	r4, r0, #1
 800094a:	41a0      	sbcs	r0, r4
 800094c:	4698      	mov	r8, r3
 800094e:	432f      	orrs	r7, r5
 8000950:	4338      	orrs	r0, r7
 8000952:	1a17      	subs	r7, r2, r0
 8000954:	42ba      	cmp	r2, r7
 8000956:	4192      	sbcs	r2, r2
 8000958:	4643      	mov	r3, r8
 800095a:	4252      	negs	r2, r2
 800095c:	1a99      	subs	r1, r3, r2
 800095e:	4664      	mov	r4, ip
 8000960:	0035      	movs	r5, r6
 8000962:	e6ca      	b.n	80006fa <__aeabi_dadd+0x62>
 8000964:	2207      	movs	r2, #7
 8000966:	403a      	ands	r2, r7
 8000968:	2a00      	cmp	r2, #0
 800096a:	d000      	beq.n	800096e <__aeabi_dadd+0x2d6>
 800096c:	e6f6      	b.n	800075c <__aeabi_dadd+0xc4>
 800096e:	074b      	lsls	r3, r1, #29
 8000970:	08ca      	lsrs	r2, r1, #3
 8000972:	4948      	ldr	r1, [pc, #288]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000974:	08ff      	lsrs	r7, r7, #3
 8000976:	433b      	orrs	r3, r7
 8000978:	428d      	cmp	r5, r1
 800097a:	d196      	bne.n	80008aa <__aeabi_dadd+0x212>
 800097c:	0019      	movs	r1, r3
 800097e:	4311      	orrs	r1, r2
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x2ec>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x62a>
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0309      	lsls	r1, r1, #12
 8000988:	430a      	orrs	r2, r1
 800098a:	0312      	lsls	r2, r2, #12
 800098c:	0b12      	lsrs	r2, r2, #12
 800098e:	4d41      	ldr	r5, [pc, #260]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000990:	e78f      	b.n	80008b2 <__aeabi_dadd+0x21a>
 8000992:	0015      	movs	r5, r2
 8000994:	2200      	movs	r2, #0
 8000996:	2300      	movs	r3, #0
 8000998:	e78b      	b.n	80008b2 <__aeabi_dadd+0x21a>
 800099a:	2b00      	cmp	r3, #0
 800099c:	d000      	beq.n	80009a0 <__aeabi_dadd+0x308>
 800099e:	e0c7      	b.n	8000b30 <__aeabi_dadd+0x498>
 80009a0:	1c6b      	adds	r3, r5, #1
 80009a2:	055f      	lsls	r7, r3, #21
 80009a4:	0d7f      	lsrs	r7, r7, #21
 80009a6:	2f01      	cmp	r7, #1
 80009a8:	dc00      	bgt.n	80009ac <__aeabi_dadd+0x314>
 80009aa:	e0f1      	b.n	8000b90 <__aeabi_dadd+0x4f8>
 80009ac:	4d39      	ldr	r5, [pc, #228]	; (8000a94 <__aeabi_dadd+0x3fc>)
 80009ae:	42ab      	cmp	r3, r5
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dadd+0x31c>
 80009b2:	e0b9      	b.n	8000b28 <__aeabi_dadd+0x490>
 80009b4:	1885      	adds	r5, r0, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	4285      	cmp	r5, r0
 80009ba:	4189      	sbcs	r1, r1
 80009bc:	4442      	add	r2, r8
 80009be:	4249      	negs	r1, r1
 80009c0:	1851      	adds	r1, r2, r1
 80009c2:	2207      	movs	r2, #7
 80009c4:	07cf      	lsls	r7, r1, #31
 80009c6:	086d      	lsrs	r5, r5, #1
 80009c8:	432f      	orrs	r7, r5
 80009ca:	0849      	lsrs	r1, r1, #1
 80009cc:	403a      	ands	r2, r7
 80009ce:	001d      	movs	r5, r3
 80009d0:	e6c2      	b.n	8000758 <__aeabi_dadd+0xc0>
 80009d2:	2207      	movs	r2, #7
 80009d4:	4930      	ldr	r1, [pc, #192]	; (8000a98 <__aeabi_dadd+0x400>)
 80009d6:	1aed      	subs	r5, r5, r3
 80009d8:	4031      	ands	r1, r6
 80009da:	403a      	ands	r2, r7
 80009dc:	e6bc      	b.n	8000758 <__aeabi_dadd+0xc0>
 80009de:	003e      	movs	r6, r7
 80009e0:	3828      	subs	r0, #40	; 0x28
 80009e2:	4086      	lsls	r6, r0
 80009e4:	2700      	movs	r7, #0
 80009e6:	e69f      	b.n	8000728 <__aeabi_dadd+0x90>
 80009e8:	0038      	movs	r0, r7
 80009ea:	f001 fb8b 	bl	8002104 <__clzsi2>
 80009ee:	3020      	adds	r0, #32
 80009f0:	e68e      	b.n	8000710 <__aeabi_dadd+0x78>
 80009f2:	4643      	mov	r3, r8
 80009f4:	4313      	orrs	r3, r2
 80009f6:	001f      	movs	r7, r3
 80009f8:	1e7a      	subs	r2, r7, #1
 80009fa:	4197      	sbcs	r7, r2
 80009fc:	1bc7      	subs	r7, r0, r7
 80009fe:	42b8      	cmp	r0, r7
 8000a00:	4180      	sbcs	r0, r0
 8000a02:	4240      	negs	r0, r0
 8000a04:	1a09      	subs	r1, r1, r0
 8000a06:	e678      	b.n	80006fa <__aeabi_dadd+0x62>
 8000a08:	000e      	movs	r6, r1
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	4306      	orrs	r6, r0
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d161      	bne.n	8000ad8 <__aeabi_dadd+0x440>
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_dadd+0x382>
 8000a18:	e0f4      	b.n	8000c04 <__aeabi_dadd+0x56c>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x388>
 8000a1e:	e11b      	b.n	8000c58 <__aeabi_dadd+0x5c0>
 8000a20:	4664      	mov	r4, ip
 8000a22:	0039      	movs	r1, r7
 8000a24:	0010      	movs	r0, r2
 8000a26:	e739      	b.n	800089c <__aeabi_dadd+0x204>
 8000a28:	4f1a      	ldr	r7, [pc, #104]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000a2a:	42bb      	cmp	r3, r7
 8000a2c:	d07a      	beq.n	8000b24 <__aeabi_dadd+0x48c>
 8000a2e:	0033      	movs	r3, r6
 8000a30:	e6ff      	b.n	8000832 <__aeabi_dadd+0x19a>
 8000a32:	0030      	movs	r0, r6
 8000a34:	3d1f      	subs	r5, #31
 8000a36:	40e8      	lsrs	r0, r5
 8000a38:	2b20      	cmp	r3, #32
 8000a3a:	d003      	beq.n	8000a44 <__aeabi_dadd+0x3ac>
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	1acb      	subs	r3, r1, r3
 8000a40:	409e      	lsls	r6, r3
 8000a42:	4337      	orrs	r7, r6
 8000a44:	1e7b      	subs	r3, r7, #1
 8000a46:	419f      	sbcs	r7, r3
 8000a48:	2207      	movs	r2, #7
 8000a4a:	4307      	orrs	r7, r0
 8000a4c:	403a      	ands	r2, r7
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e789      	b.n	8000968 <__aeabi_dadd+0x2d0>
 8000a54:	1a17      	subs	r7, r2, r0
 8000a56:	4643      	mov	r3, r8
 8000a58:	42ba      	cmp	r2, r7
 8000a5a:	41b6      	sbcs	r6, r6
 8000a5c:	1a59      	subs	r1, r3, r1
 8000a5e:	4276      	negs	r6, r6
 8000a60:	1b8e      	subs	r6, r1, r6
 8000a62:	4664      	mov	r4, ip
 8000a64:	e64e      	b.n	8000704 <__aeabi_dadd+0x6c>
 8000a66:	2b1f      	cmp	r3, #31
 8000a68:	dd00      	ble.n	8000a6c <__aeabi_dadd+0x3d4>
 8000a6a:	e0ad      	b.n	8000bc8 <__aeabi_dadd+0x530>
 8000a6c:	2620      	movs	r6, #32
 8000a6e:	4647      	mov	r7, r8
 8000a70:	1af6      	subs	r6, r6, r3
 8000a72:	40b7      	lsls	r7, r6
 8000a74:	46b9      	mov	r9, r7
 8000a76:	0017      	movs	r7, r2
 8000a78:	46b2      	mov	sl, r6
 8000a7a:	40df      	lsrs	r7, r3
 8000a7c:	464e      	mov	r6, r9
 8000a7e:	433e      	orrs	r6, r7
 8000a80:	0037      	movs	r7, r6
 8000a82:	4656      	mov	r6, sl
 8000a84:	40b2      	lsls	r2, r6
 8000a86:	1e56      	subs	r6, r2, #1
 8000a88:	41b2      	sbcs	r2, r6
 8000a8a:	4317      	orrs	r7, r2
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	40da      	lsrs	r2, r3
 8000a90:	1889      	adds	r1, r1, r2
 8000a92:	e6ae      	b.n	80007f2 <__aeabi_dadd+0x15a>
 8000a94:	000007ff 	.word	0x000007ff
 8000a98:	ff7fffff 	.word	0xff7fffff
 8000a9c:	800fffff 	.word	0x800fffff
 8000aa0:	2620      	movs	r6, #32
 8000aa2:	4647      	mov	r7, r8
 8000aa4:	1af6      	subs	r6, r6, r3
 8000aa6:	40b7      	lsls	r7, r6
 8000aa8:	46b9      	mov	r9, r7
 8000aaa:	0017      	movs	r7, r2
 8000aac:	46b2      	mov	sl, r6
 8000aae:	40df      	lsrs	r7, r3
 8000ab0:	464e      	mov	r6, r9
 8000ab2:	433e      	orrs	r6, r7
 8000ab4:	0037      	movs	r7, r6
 8000ab6:	4656      	mov	r6, sl
 8000ab8:	40b2      	lsls	r2, r6
 8000aba:	1e56      	subs	r6, r2, #1
 8000abc:	41b2      	sbcs	r2, r6
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	40da      	lsrs	r2, r3
 8000ac4:	1a89      	subs	r1, r1, r2
 8000ac6:	e799      	b.n	80009fc <__aeabi_dadd+0x364>
 8000ac8:	4c7f      	ldr	r4, [pc, #508]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d05b      	beq.n	8000b86 <__aeabi_dadd+0x4ee>
 8000ace:	2480      	movs	r4, #128	; 0x80
 8000ad0:	0424      	lsls	r4, r4, #16
 8000ad2:	425b      	negs	r3, r3
 8000ad4:	4321      	orrs	r1, r4
 8000ad6:	e727      	b.n	8000928 <__aeabi_dadd+0x290>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d10c      	bne.n	8000af6 <__aeabi_dadd+0x45e>
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x44a>
 8000ae0:	e0cb      	b.n	8000c7a <__aeabi_dadd+0x5e2>
 8000ae2:	4664      	mov	r4, ip
 8000ae4:	0039      	movs	r1, r7
 8000ae6:	0010      	movs	r0, r2
 8000ae8:	4d77      	ldr	r5, [pc, #476]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000aea:	e6d7      	b.n	800089c <__aeabi_dadd+0x204>
 8000aec:	4f76      	ldr	r7, [pc, #472]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000aee:	42bb      	cmp	r3, r7
 8000af0:	d018      	beq.n	8000b24 <__aeabi_dadd+0x48c>
 8000af2:	0033      	movs	r3, r6
 8000af4:	e675      	b.n	80007e2 <__aeabi_dadd+0x14a>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d014      	beq.n	8000b24 <__aeabi_dadd+0x48c>
 8000afa:	074b      	lsls	r3, r1, #29
 8000afc:	08c0      	lsrs	r0, r0, #3
 8000afe:	4318      	orrs	r0, r3
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	031b      	lsls	r3, r3, #12
 8000b06:	4219      	tst	r1, r3
 8000b08:	d007      	beq.n	8000b1a <__aeabi_dadd+0x482>
 8000b0a:	08fc      	lsrs	r4, r7, #3
 8000b0c:	421c      	tst	r4, r3
 8000b0e:	d104      	bne.n	8000b1a <__aeabi_dadd+0x482>
 8000b10:	0779      	lsls	r1, r7, #29
 8000b12:	08d0      	lsrs	r0, r2, #3
 8000b14:	4308      	orrs	r0, r1
 8000b16:	46e1      	mov	r9, ip
 8000b18:	0021      	movs	r1, r4
 8000b1a:	464c      	mov	r4, r9
 8000b1c:	0f42      	lsrs	r2, r0, #29
 8000b1e:	00c9      	lsls	r1, r1, #3
 8000b20:	4311      	orrs	r1, r2
 8000b22:	00c0      	lsls	r0, r0, #3
 8000b24:	4d68      	ldr	r5, [pc, #416]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000b26:	e6b9      	b.n	800089c <__aeabi_dadd+0x204>
 8000b28:	001d      	movs	r5, r3
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e6c0      	b.n	80008b2 <__aeabi_dadd+0x21a>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d15b      	bne.n	8000bec <__aeabi_dadd+0x554>
 8000b34:	000d      	movs	r5, r1
 8000b36:	4305      	orrs	r5, r0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x4a4>
 8000b3a:	e6e2      	b.n	8000902 <__aeabi_dadd+0x26a>
 8000b3c:	1c5d      	adds	r5, r3, #1
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x4aa>
 8000b40:	e0b0      	b.n	8000ca4 <__aeabi_dadd+0x60c>
 8000b42:	4d61      	ldr	r5, [pc, #388]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000b44:	42ae      	cmp	r6, r5
 8000b46:	d01f      	beq.n	8000b88 <__aeabi_dadd+0x4f0>
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	2b38      	cmp	r3, #56	; 0x38
 8000b4c:	dc71      	bgt.n	8000c32 <__aeabi_dadd+0x59a>
 8000b4e:	2b1f      	cmp	r3, #31
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_dadd+0x4bc>
 8000b52:	e096      	b.n	8000c82 <__aeabi_dadd+0x5ea>
 8000b54:	2520      	movs	r5, #32
 8000b56:	000f      	movs	r7, r1
 8000b58:	1aed      	subs	r5, r5, r3
 8000b5a:	40af      	lsls	r7, r5
 8000b5c:	46b9      	mov	r9, r7
 8000b5e:	0007      	movs	r7, r0
 8000b60:	46aa      	mov	sl, r5
 8000b62:	40df      	lsrs	r7, r3
 8000b64:	464d      	mov	r5, r9
 8000b66:	433d      	orrs	r5, r7
 8000b68:	002f      	movs	r7, r5
 8000b6a:	4655      	mov	r5, sl
 8000b6c:	40a8      	lsls	r0, r5
 8000b6e:	40d9      	lsrs	r1, r3
 8000b70:	1e45      	subs	r5, r0, #1
 8000b72:	41a8      	sbcs	r0, r5
 8000b74:	4488      	add	r8, r1
 8000b76:	4307      	orrs	r7, r0
 8000b78:	18bf      	adds	r7, r7, r2
 8000b7a:	4297      	cmp	r7, r2
 8000b7c:	4192      	sbcs	r2, r2
 8000b7e:	4251      	negs	r1, r2
 8000b80:	4441      	add	r1, r8
 8000b82:	0035      	movs	r5, r6
 8000b84:	e63a      	b.n	80007fc <__aeabi_dadd+0x164>
 8000b86:	4664      	mov	r4, ip
 8000b88:	0035      	movs	r5, r6
 8000b8a:	4641      	mov	r1, r8
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	e685      	b.n	800089c <__aeabi_dadd+0x204>
 8000b90:	000b      	movs	r3, r1
 8000b92:	4303      	orrs	r3, r0
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d000      	beq.n	8000b9a <__aeabi_dadd+0x502>
 8000b98:	e663      	b.n	8000862 <__aeabi_dadd+0x1ca>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f5      	beq.n	8000b8a <__aeabi_dadd+0x4f2>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x50e>
 8000ba4:	e67a      	b.n	800089c <__aeabi_dadd+0x204>
 8000ba6:	1887      	adds	r7, r0, r2
 8000ba8:	4287      	cmp	r7, r0
 8000baa:	4180      	sbcs	r0, r0
 8000bac:	2207      	movs	r2, #7
 8000bae:	4441      	add	r1, r8
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	1809      	adds	r1, r1, r0
 8000bb4:	403a      	ands	r2, r7
 8000bb6:	020b      	lsls	r3, r1, #8
 8000bb8:	d400      	bmi.n	8000bbc <__aeabi_dadd+0x524>
 8000bba:	e6d5      	b.n	8000968 <__aeabi_dadd+0x2d0>
 8000bbc:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <__aeabi_dadd+0x634>)
 8000bbe:	3501      	adds	r5, #1
 8000bc0:	4019      	ands	r1, r3
 8000bc2:	e5c9      	b.n	8000758 <__aeabi_dadd+0xc0>
 8000bc4:	0038      	movs	r0, r7
 8000bc6:	e669      	b.n	800089c <__aeabi_dadd+0x204>
 8000bc8:	001e      	movs	r6, r3
 8000bca:	4647      	mov	r7, r8
 8000bcc:	3e20      	subs	r6, #32
 8000bce:	40f7      	lsrs	r7, r6
 8000bd0:	46bc      	mov	ip, r7
 8000bd2:	2b20      	cmp	r3, #32
 8000bd4:	d004      	beq.n	8000be0 <__aeabi_dadd+0x548>
 8000bd6:	2640      	movs	r6, #64	; 0x40
 8000bd8:	1af3      	subs	r3, r6, r3
 8000bda:	4646      	mov	r6, r8
 8000bdc:	409e      	lsls	r6, r3
 8000bde:	4332      	orrs	r2, r6
 8000be0:	0017      	movs	r7, r2
 8000be2:	4663      	mov	r3, ip
 8000be4:	1e7a      	subs	r2, r7, #1
 8000be6:	4197      	sbcs	r7, r2
 8000be8:	431f      	orrs	r7, r3
 8000bea:	e602      	b.n	80007f2 <__aeabi_dadd+0x15a>
 8000bec:	4d36      	ldr	r5, [pc, #216]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000bee:	42ae      	cmp	r6, r5
 8000bf0:	d0ca      	beq.n	8000b88 <__aeabi_dadd+0x4f0>
 8000bf2:	2580      	movs	r5, #128	; 0x80
 8000bf4:	042d      	lsls	r5, r5, #16
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	4329      	orrs	r1, r5
 8000bfa:	e7a6      	b.n	8000b4a <__aeabi_dadd+0x4b2>
 8000bfc:	4308      	orrs	r0, r1
 8000bfe:	1e41      	subs	r1, r0, #1
 8000c00:	4188      	sbcs	r0, r1
 8000c02:	e6a6      	b.n	8000952 <__aeabi_dadd+0x2ba>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x572>
 8000c08:	e648      	b.n	800089c <__aeabi_dadd+0x204>
 8000c0a:	1a87      	subs	r7, r0, r2
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	42b8      	cmp	r0, r7
 8000c10:	41b6      	sbcs	r6, r6
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	4276      	negs	r6, r6
 8000c16:	1b9e      	subs	r6, r3, r6
 8000c18:	0233      	lsls	r3, r6, #8
 8000c1a:	d54b      	bpl.n	8000cb4 <__aeabi_dadd+0x61c>
 8000c1c:	1a17      	subs	r7, r2, r0
 8000c1e:	4643      	mov	r3, r8
 8000c20:	42ba      	cmp	r2, r7
 8000c22:	4192      	sbcs	r2, r2
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	4252      	negs	r2, r2
 8000c28:	1a89      	subs	r1, r1, r2
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	4664      	mov	r4, ip
 8000c2e:	403a      	ands	r2, r7
 8000c30:	e592      	b.n	8000758 <__aeabi_dadd+0xc0>
 8000c32:	4301      	orrs	r1, r0
 8000c34:	000f      	movs	r7, r1
 8000c36:	1e79      	subs	r1, r7, #1
 8000c38:	418f      	sbcs	r7, r1
 8000c3a:	e79d      	b.n	8000b78 <__aeabi_dadd+0x4e0>
 8000c3c:	001c      	movs	r4, r3
 8000c3e:	000f      	movs	r7, r1
 8000c40:	3c20      	subs	r4, #32
 8000c42:	40e7      	lsrs	r7, r4
 8000c44:	2b20      	cmp	r3, #32
 8000c46:	d003      	beq.n	8000c50 <__aeabi_dadd+0x5b8>
 8000c48:	2440      	movs	r4, #64	; 0x40
 8000c4a:	1ae3      	subs	r3, r4, r3
 8000c4c:	4099      	lsls	r1, r3
 8000c4e:	4308      	orrs	r0, r1
 8000c50:	1e41      	subs	r1, r0, #1
 8000c52:	4188      	sbcs	r0, r1
 8000c54:	4338      	orrs	r0, r7
 8000c56:	e67c      	b.n	8000952 <__aeabi_dadd+0x2ba>
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2400      	movs	r4, #0
 8000c5c:	e625      	b.n	80008aa <__aeabi_dadd+0x212>
 8000c5e:	1a17      	subs	r7, r2, r0
 8000c60:	4643      	mov	r3, r8
 8000c62:	42ba      	cmp	r2, r7
 8000c64:	4192      	sbcs	r2, r2
 8000c66:	1a59      	subs	r1, r3, r1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	1a89      	subs	r1, r1, r2
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	0035      	movs	r5, r6
 8000c70:	e543      	b.n	80006fa <__aeabi_dadd+0x62>
 8000c72:	4641      	mov	r1, r8
 8000c74:	0010      	movs	r0, r2
 8000c76:	4d14      	ldr	r5, [pc, #80]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000c78:	e610      	b.n	800089c <__aeabi_dadd+0x204>
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	2400      	movs	r4, #0
 8000c7e:	0312      	lsls	r2, r2, #12
 8000c80:	e680      	b.n	8000984 <__aeabi_dadd+0x2ec>
 8000c82:	001d      	movs	r5, r3
 8000c84:	000f      	movs	r7, r1
 8000c86:	3d20      	subs	r5, #32
 8000c88:	40ef      	lsrs	r7, r5
 8000c8a:	46bc      	mov	ip, r7
 8000c8c:	2b20      	cmp	r3, #32
 8000c8e:	d003      	beq.n	8000c98 <__aeabi_dadd+0x600>
 8000c90:	2540      	movs	r5, #64	; 0x40
 8000c92:	1aeb      	subs	r3, r5, r3
 8000c94:	4099      	lsls	r1, r3
 8000c96:	4308      	orrs	r0, r1
 8000c98:	0007      	movs	r7, r0
 8000c9a:	4663      	mov	r3, ip
 8000c9c:	1e78      	subs	r0, r7, #1
 8000c9e:	4187      	sbcs	r7, r0
 8000ca0:	431f      	orrs	r7, r3
 8000ca2:	e769      	b.n	8000b78 <__aeabi_dadd+0x4e0>
 8000ca4:	1887      	adds	r7, r0, r2
 8000ca6:	4297      	cmp	r7, r2
 8000ca8:	419b      	sbcs	r3, r3
 8000caa:	4441      	add	r1, r8
 8000cac:	425b      	negs	r3, r3
 8000cae:	18c9      	adds	r1, r1, r3
 8000cb0:	0035      	movs	r5, r6
 8000cb2:	e5a3      	b.n	80007fc <__aeabi_dadd+0x164>
 8000cb4:	003b      	movs	r3, r7
 8000cb6:	4333      	orrs	r3, r6
 8000cb8:	d0ce      	beq.n	8000c58 <__aeabi_dadd+0x5c0>
 8000cba:	2207      	movs	r2, #7
 8000cbc:	0031      	movs	r1, r6
 8000cbe:	403a      	ands	r2, r7
 8000cc0:	e652      	b.n	8000968 <__aeabi_dadd+0x2d0>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	e5f4      	b.n	80008b2 <__aeabi_dadd+0x21a>
 8000cc8:	000007ff 	.word	0x000007ff
 8000ccc:	ff7fffff 	.word	0xff7fffff

08000cd0 <__aeabi_ddiv>:
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd2:	4657      	mov	r7, sl
 8000cd4:	46de      	mov	lr, fp
 8000cd6:	464e      	mov	r6, r9
 8000cd8:	4645      	mov	r5, r8
 8000cda:	b5e0      	push	{r5, r6, r7, lr}
 8000cdc:	4683      	mov	fp, r0
 8000cde:	0007      	movs	r7, r0
 8000ce0:	030e      	lsls	r6, r1, #12
 8000ce2:	0048      	lsls	r0, r1, #1
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	4692      	mov	sl, r2
 8000ce8:	001c      	movs	r4, r3
 8000cea:	0b36      	lsrs	r6, r6, #12
 8000cec:	0d40      	lsrs	r0, r0, #21
 8000cee:	0fcd      	lsrs	r5, r1, #31
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0x26>
 8000cf4:	e09d      	b.n	8000e32 <__aeabi_ddiv+0x162>
 8000cf6:	4b95      	ldr	r3, [pc, #596]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	d039      	beq.n	8000d70 <__aeabi_ddiv+0xa0>
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	00f6      	lsls	r6, r6, #3
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	431e      	orrs	r6, r3
 8000d04:	4a92      	ldr	r2, [pc, #584]	; (8000f50 <__aeabi_ddiv+0x280>)
 8000d06:	0f7b      	lsrs	r3, r7, #29
 8000d08:	4333      	orrs	r3, r6
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	4694      	mov	ip, r2
 8000d0e:	0003      	movs	r3, r0
 8000d10:	4463      	add	r3, ip
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2300      	movs	r3, #0
 8000d16:	2600      	movs	r6, #0
 8000d18:	00ff      	lsls	r7, r7, #3
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	0323      	lsls	r3, r4, #12
 8000d1e:	0b1b      	lsrs	r3, r3, #12
 8000d20:	4698      	mov	r8, r3
 8000d22:	0063      	lsls	r3, r4, #1
 8000d24:	0fe4      	lsrs	r4, r4, #31
 8000d26:	4652      	mov	r2, sl
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	9401      	str	r4, [sp, #4]
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x60>
 8000d2e:	e0b3      	b.n	8000e98 <__aeabi_ddiv+0x1c8>
 8000d30:	4986      	ldr	r1, [pc, #536]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x68>
 8000d36:	e09e      	b.n	8000e76 <__aeabi_ddiv+0x1a6>
 8000d38:	4642      	mov	r2, r8
 8000d3a:	00d1      	lsls	r1, r2, #3
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0412      	lsls	r2, r2, #16
 8000d40:	430a      	orrs	r2, r1
 8000d42:	4651      	mov	r1, sl
 8000d44:	0f49      	lsrs	r1, r1, #29
 8000d46:	4311      	orrs	r1, r2
 8000d48:	468b      	mov	fp, r1
 8000d4a:	4981      	ldr	r1, [pc, #516]	; (8000f50 <__aeabi_ddiv+0x280>)
 8000d4c:	4652      	mov	r2, sl
 8000d4e:	468c      	mov	ip, r1
 8000d50:	9900      	ldr	r1, [sp, #0]
 8000d52:	4463      	add	r3, ip
 8000d54:	1acb      	subs	r3, r1, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	002b      	movs	r3, r5
 8000d5e:	4063      	eors	r3, r4
 8000d60:	469a      	mov	sl, r3
 8000d62:	2e0f      	cmp	r6, #15
 8000d64:	d900      	bls.n	8000d68 <__aeabi_ddiv+0x98>
 8000d66:	e105      	b.n	8000f74 <__aeabi_ddiv+0x2a4>
 8000d68:	4b7a      	ldr	r3, [pc, #488]	; (8000f54 <__aeabi_ddiv+0x284>)
 8000d6a:	00b6      	lsls	r6, r6, #2
 8000d6c:	599b      	ldr	r3, [r3, r6]
 8000d6e:	469f      	mov	pc, r3
 8000d70:	465b      	mov	r3, fp
 8000d72:	4333      	orrs	r3, r6
 8000d74:	4699      	mov	r9, r3
 8000d76:	d000      	beq.n	8000d7a <__aeabi_ddiv+0xaa>
 8000d78:	e0b8      	b.n	8000eec <__aeabi_ddiv+0x21c>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	2608      	movs	r6, #8
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9000      	str	r0, [sp, #0]
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	e7ca      	b.n	8000d1c <__aeabi_ddiv+0x4c>
 8000d86:	46cb      	mov	fp, r9
 8000d88:	003a      	movs	r2, r7
 8000d8a:	9902      	ldr	r1, [sp, #8]
 8000d8c:	9501      	str	r5, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
 8000d90:	469a      	mov	sl, r3
 8000d92:	2902      	cmp	r1, #2
 8000d94:	d027      	beq.n	8000de6 <__aeabi_ddiv+0x116>
 8000d96:	2903      	cmp	r1, #3
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0xcc>
 8000d9a:	e280      	b.n	800129e <__aeabi_ddiv+0x5ce>
 8000d9c:	2901      	cmp	r1, #1
 8000d9e:	d044      	beq.n	8000e2a <__aeabi_ddiv+0x15a>
 8000da0:	496d      	ldr	r1, [pc, #436]	; (8000f58 <__aeabi_ddiv+0x288>)
 8000da2:	9b00      	ldr	r3, [sp, #0]
 8000da4:	468c      	mov	ip, r1
 8000da6:	4463      	add	r3, ip
 8000da8:	001c      	movs	r4, r3
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	dd38      	ble.n	8000e20 <__aeabi_ddiv+0x150>
 8000dae:	0753      	lsls	r3, r2, #29
 8000db0:	d000      	beq.n	8000db4 <__aeabi_ddiv+0xe4>
 8000db2:	e213      	b.n	80011dc <__aeabi_ddiv+0x50c>
 8000db4:	08d2      	lsrs	r2, r2, #3
 8000db6:	465b      	mov	r3, fp
 8000db8:	01db      	lsls	r3, r3, #7
 8000dba:	d509      	bpl.n	8000dd0 <__aeabi_ddiv+0x100>
 8000dbc:	4659      	mov	r1, fp
 8000dbe:	4b67      	ldr	r3, [pc, #412]	; (8000f5c <__aeabi_ddiv+0x28c>)
 8000dc0:	4019      	ands	r1, r3
 8000dc2:	468b      	mov	fp, r1
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	00c9      	lsls	r1, r1, #3
 8000dc8:	468c      	mov	ip, r1
 8000dca:	9b00      	ldr	r3, [sp, #0]
 8000dcc:	4463      	add	r3, ip
 8000dce:	001c      	movs	r4, r3
 8000dd0:	4b63      	ldr	r3, [pc, #396]	; (8000f60 <__aeabi_ddiv+0x290>)
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	dc07      	bgt.n	8000de6 <__aeabi_ddiv+0x116>
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	0564      	lsls	r4, r4, #21
 8000dda:	075f      	lsls	r7, r3, #29
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	4317      	orrs	r7, r2
 8000de0:	0b1b      	lsrs	r3, r3, #12
 8000de2:	0d62      	lsrs	r2, r4, #21
 8000de4:	e002      	b.n	8000dec <__aeabi_ddiv+0x11c>
 8000de6:	2300      	movs	r3, #0
 8000de8:	2700      	movs	r7, #0
 8000dea:	4a58      	ldr	r2, [pc, #352]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000dec:	2100      	movs	r1, #0
 8000dee:	031b      	lsls	r3, r3, #12
 8000df0:	0b1c      	lsrs	r4, r3, #12
 8000df2:	0d0b      	lsrs	r3, r1, #20
 8000df4:	051b      	lsls	r3, r3, #20
 8000df6:	4323      	orrs	r3, r4
 8000df8:	0514      	lsls	r4, r2, #20
 8000dfa:	4a5a      	ldr	r2, [pc, #360]	; (8000f64 <__aeabi_ddiv+0x294>)
 8000dfc:	0038      	movs	r0, r7
 8000dfe:	4013      	ands	r3, r2
 8000e00:	431c      	orrs	r4, r3
 8000e02:	4653      	mov	r3, sl
 8000e04:	0064      	lsls	r4, r4, #1
 8000e06:	07db      	lsls	r3, r3, #31
 8000e08:	0864      	lsrs	r4, r4, #1
 8000e0a:	431c      	orrs	r4, r3
 8000e0c:	0021      	movs	r1, r4
 8000e0e:	b005      	add	sp, #20
 8000e10:	bc3c      	pop	{r2, r3, r4, r5}
 8000e12:	4690      	mov	r8, r2
 8000e14:	4699      	mov	r9, r3
 8000e16:	46a2      	mov	sl, r4
 8000e18:	46ab      	mov	fp, r5
 8000e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4252      	negs	r2, r2
 8000e20:	2301      	movs	r3, #1
 8000e22:	1b1b      	subs	r3, r3, r4
 8000e24:	2b38      	cmp	r3, #56	; 0x38
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_ddiv+0x15a>
 8000e28:	e1ad      	b.n	8001186 <__aeabi_ddiv+0x4b6>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	2700      	movs	r7, #0
 8000e30:	e7dc      	b.n	8000dec <__aeabi_ddiv+0x11c>
 8000e32:	465b      	mov	r3, fp
 8000e34:	4333      	orrs	r3, r6
 8000e36:	4699      	mov	r9, r3
 8000e38:	d05e      	beq.n	8000ef8 <__aeabi_ddiv+0x228>
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_ddiv+0x170>
 8000e3e:	e18a      	b.n	8001156 <__aeabi_ddiv+0x486>
 8000e40:	0030      	movs	r0, r6
 8000e42:	f001 f95f 	bl	8002104 <__clzsi2>
 8000e46:	0003      	movs	r3, r0
 8000e48:	3b0b      	subs	r3, #11
 8000e4a:	2b1c      	cmp	r3, #28
 8000e4c:	dd00      	ble.n	8000e50 <__aeabi_ddiv+0x180>
 8000e4e:	e17b      	b.n	8001148 <__aeabi_ddiv+0x478>
 8000e50:	221d      	movs	r2, #29
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	465a      	mov	r2, fp
 8000e56:	0001      	movs	r1, r0
 8000e58:	40da      	lsrs	r2, r3
 8000e5a:	3908      	subs	r1, #8
 8000e5c:	408e      	lsls	r6, r1
 8000e5e:	0013      	movs	r3, r2
 8000e60:	465f      	mov	r7, fp
 8000e62:	4333      	orrs	r3, r6
 8000e64:	4699      	mov	r9, r3
 8000e66:	408f      	lsls	r7, r1
 8000e68:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <__aeabi_ddiv+0x298>)
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2300      	movs	r3, #0
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	e752      	b.n	8000d1c <__aeabi_ddiv+0x4c>
 8000e76:	4641      	mov	r1, r8
 8000e78:	4653      	mov	r3, sl
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	493b      	ldr	r1, [pc, #236]	; (8000f6c <__aeabi_ddiv+0x29c>)
 8000e7e:	469b      	mov	fp, r3
 8000e80:	468c      	mov	ip, r1
 8000e82:	9b00      	ldr	r3, [sp, #0]
 8000e84:	4463      	add	r3, ip
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	465b      	mov	r3, fp
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d13b      	bne.n	8000f06 <__aeabi_ddiv+0x236>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	2200      	movs	r2, #0
 8000e92:	431e      	orrs	r6, r3
 8000e94:	2102      	movs	r1, #2
 8000e96:	e761      	b.n	8000d5c <__aeabi_ddiv+0x8c>
 8000e98:	4643      	mov	r3, r8
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	469b      	mov	fp, r3
 8000e9e:	d037      	beq.n	8000f10 <__aeabi_ddiv+0x240>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_ddiv+0x1d8>
 8000ea6:	e162      	b.n	800116e <__aeabi_ddiv+0x49e>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	f001 f92b 	bl	8002104 <__clzsi2>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	3b0b      	subs	r3, #11
 8000eb2:	2b1c      	cmp	r3, #28
 8000eb4:	dd00      	ble.n	8000eb8 <__aeabi_ddiv+0x1e8>
 8000eb6:	e153      	b.n	8001160 <__aeabi_ddiv+0x490>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	4641      	mov	r1, r8
 8000ebc:	3a08      	subs	r2, #8
 8000ebe:	4091      	lsls	r1, r2
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	211d      	movs	r1, #29
 8000ec4:	1acb      	subs	r3, r1, r3
 8000ec6:	4651      	mov	r1, sl
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	000b      	movs	r3, r1
 8000ecc:	4641      	mov	r1, r8
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	469b      	mov	fp, r3
 8000ed2:	4653      	mov	r3, sl
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	9b00      	ldr	r3, [sp, #0]
 8000eda:	4925      	ldr	r1, [pc, #148]	; (8000f70 <__aeabi_ddiv+0x2a0>)
 8000edc:	469c      	mov	ip, r3
 8000ede:	4460      	add	r0, ip
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	468c      	mov	ip, r1
 8000ee4:	4463      	add	r3, ip
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e737      	b.n	8000d5c <__aeabi_ddiv+0x8c>
 8000eec:	2303      	movs	r3, #3
 8000eee:	46b1      	mov	r9, r6
 8000ef0:	9000      	str	r0, [sp, #0]
 8000ef2:	260c      	movs	r6, #12
 8000ef4:	9302      	str	r3, [sp, #8]
 8000ef6:	e711      	b.n	8000d1c <__aeabi_ddiv+0x4c>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	2604      	movs	r6, #4
 8000f00:	2700      	movs	r7, #0
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	e70a      	b.n	8000d1c <__aeabi_ddiv+0x4c>
 8000f06:	2303      	movs	r3, #3
 8000f08:	46c3      	mov	fp, r8
 8000f0a:	431e      	orrs	r6, r3
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	e725      	b.n	8000d5c <__aeabi_ddiv+0x8c>
 8000f10:	3301      	adds	r3, #1
 8000f12:	431e      	orrs	r6, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	e720      	b.n	8000d5c <__aeabi_ddiv+0x8c>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	2700      	movs	r7, #0
 8000f22:	031b      	lsls	r3, r3, #12
 8000f24:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000f26:	e761      	b.n	8000dec <__aeabi_ddiv+0x11c>
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	031b      	lsls	r3, r3, #12
 8000f2e:	4219      	tst	r1, r3
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x264>
 8000f32:	e0e2      	b.n	80010fa <__aeabi_ddiv+0x42a>
 8000f34:	4659      	mov	r1, fp
 8000f36:	4219      	tst	r1, r3
 8000f38:	d000      	beq.n	8000f3c <__aeabi_ddiv+0x26c>
 8000f3a:	e0de      	b.n	80010fa <__aeabi_ddiv+0x42a>
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	031b      	lsls	r3, r3, #12
 8000f40:	0017      	movs	r7, r2
 8000f42:	0b1b      	lsrs	r3, r3, #12
 8000f44:	46a2      	mov	sl, r4
 8000f46:	4a01      	ldr	r2, [pc, #4]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000f48:	e750      	b.n	8000dec <__aeabi_ddiv+0x11c>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	000007ff 	.word	0x000007ff
 8000f50:	fffffc01 	.word	0xfffffc01
 8000f54:	08008568 	.word	0x08008568
 8000f58:	000003ff 	.word	0x000003ff
 8000f5c:	feffffff 	.word	0xfeffffff
 8000f60:	000007fe 	.word	0x000007fe
 8000f64:	800fffff 	.word	0x800fffff
 8000f68:	fffffc0d 	.word	0xfffffc0d
 8000f6c:	fffff801 	.word	0xfffff801
 8000f70:	000003f3 	.word	0x000003f3
 8000f74:	45d9      	cmp	r9, fp
 8000f76:	d900      	bls.n	8000f7a <__aeabi_ddiv+0x2aa>
 8000f78:	e0cb      	b.n	8001112 <__aeabi_ddiv+0x442>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x2ae>
 8000f7c:	e0c6      	b.n	800110c <__aeabi_ddiv+0x43c>
 8000f7e:	003c      	movs	r4, r7
 8000f80:	4648      	mov	r0, r9
 8000f82:	2700      	movs	r7, #0
 8000f84:	9b00      	ldr	r3, [sp, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	465b      	mov	r3, fp
 8000f8c:	0e16      	lsrs	r6, r2, #24
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	431e      	orrs	r6, r3
 8000f92:	0213      	lsls	r3, r2, #8
 8000f94:	4698      	mov	r8, r3
 8000f96:	0433      	lsls	r3, r6, #16
 8000f98:	0c1b      	lsrs	r3, r3, #16
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	0c31      	lsrs	r1, r6, #16
 8000f9e:	9101      	str	r1, [sp, #4]
 8000fa0:	f7ff f940 	bl	8000224 <__aeabi_uidivmod>
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	4342      	muls	r2, r0
 8000fa8:	040b      	lsls	r3, r1, #16
 8000faa:	0c21      	lsrs	r1, r4, #16
 8000fac:	0005      	movs	r5, r0
 8000fae:	4319      	orrs	r1, r3
 8000fb0:	428a      	cmp	r2, r1
 8000fb2:	d907      	bls.n	8000fc4 <__aeabi_ddiv+0x2f4>
 8000fb4:	1989      	adds	r1, r1, r6
 8000fb6:	3d01      	subs	r5, #1
 8000fb8:	428e      	cmp	r6, r1
 8000fba:	d803      	bhi.n	8000fc4 <__aeabi_ddiv+0x2f4>
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d901      	bls.n	8000fc4 <__aeabi_ddiv+0x2f4>
 8000fc0:	1e85      	subs	r5, r0, #2
 8000fc2:	1989      	adds	r1, r1, r6
 8000fc4:	1a88      	subs	r0, r1, r2
 8000fc6:	9901      	ldr	r1, [sp, #4]
 8000fc8:	f7ff f92c 	bl	8000224 <__aeabi_uidivmod>
 8000fcc:	0409      	lsls	r1, r1, #16
 8000fce:	468c      	mov	ip, r1
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	0421      	lsls	r1, r4, #16
 8000fd4:	4664      	mov	r4, ip
 8000fd6:	4342      	muls	r2, r0
 8000fd8:	0c09      	lsrs	r1, r1, #16
 8000fda:	0003      	movs	r3, r0
 8000fdc:	4321      	orrs	r1, r4
 8000fde:	428a      	cmp	r2, r1
 8000fe0:	d904      	bls.n	8000fec <__aeabi_ddiv+0x31c>
 8000fe2:	1989      	adds	r1, r1, r6
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	428e      	cmp	r6, r1
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x31c>
 8000fea:	e0f1      	b.n	80011d0 <__aeabi_ddiv+0x500>
 8000fec:	042d      	lsls	r5, r5, #16
 8000fee:	431d      	orrs	r5, r3
 8000ff0:	46ab      	mov	fp, r5
 8000ff2:	4643      	mov	r3, r8
 8000ff4:	1a89      	subs	r1, r1, r2
 8000ff6:	4642      	mov	r2, r8
 8000ff8:	0c28      	lsrs	r0, r5, #16
 8000ffa:	0412      	lsls	r2, r2, #16
 8000ffc:	0c1d      	lsrs	r5, r3, #16
 8000ffe:	465b      	mov	r3, fp
 8001000:	0c14      	lsrs	r4, r2, #16
 8001002:	0022      	movs	r2, r4
 8001004:	041b      	lsls	r3, r3, #16
 8001006:	0c1b      	lsrs	r3, r3, #16
 8001008:	435a      	muls	r2, r3
 800100a:	9403      	str	r4, [sp, #12]
 800100c:	436b      	muls	r3, r5
 800100e:	4344      	muls	r4, r0
 8001010:	9502      	str	r5, [sp, #8]
 8001012:	4368      	muls	r0, r5
 8001014:	191b      	adds	r3, r3, r4
 8001016:	0c15      	lsrs	r5, r2, #16
 8001018:	18eb      	adds	r3, r5, r3
 800101a:	429c      	cmp	r4, r3
 800101c:	d903      	bls.n	8001026 <__aeabi_ddiv+0x356>
 800101e:	2480      	movs	r4, #128	; 0x80
 8001020:	0264      	lsls	r4, r4, #9
 8001022:	46a4      	mov	ip, r4
 8001024:	4460      	add	r0, ip
 8001026:	0c1c      	lsrs	r4, r3, #16
 8001028:	0415      	lsls	r5, r2, #16
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	0c2d      	lsrs	r5, r5, #16
 800102e:	1820      	adds	r0, r4, r0
 8001030:	195d      	adds	r5, r3, r5
 8001032:	4281      	cmp	r1, r0
 8001034:	d377      	bcc.n	8001126 <__aeabi_ddiv+0x456>
 8001036:	d073      	beq.n	8001120 <__aeabi_ddiv+0x450>
 8001038:	1a0c      	subs	r4, r1, r0
 800103a:	4aa2      	ldr	r2, [pc, #648]	; (80012c4 <__aeabi_ddiv+0x5f4>)
 800103c:	1b7d      	subs	r5, r7, r5
 800103e:	42af      	cmp	r7, r5
 8001040:	41bf      	sbcs	r7, r7
 8001042:	4694      	mov	ip, r2
 8001044:	9b00      	ldr	r3, [sp, #0]
 8001046:	427f      	negs	r7, r7
 8001048:	4463      	add	r3, ip
 800104a:	1be0      	subs	r0, r4, r7
 800104c:	001c      	movs	r4, r3
 800104e:	4286      	cmp	r6, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x384>
 8001052:	e0db      	b.n	800120c <__aeabi_ddiv+0x53c>
 8001054:	9901      	ldr	r1, [sp, #4]
 8001056:	f7ff f8e5 	bl	8000224 <__aeabi_uidivmod>
 800105a:	464a      	mov	r2, r9
 800105c:	4342      	muls	r2, r0
 800105e:	040b      	lsls	r3, r1, #16
 8001060:	0c29      	lsrs	r1, r5, #16
 8001062:	0007      	movs	r7, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d907      	bls.n	800107a <__aeabi_ddiv+0x3aa>
 800106a:	1989      	adds	r1, r1, r6
 800106c:	3f01      	subs	r7, #1
 800106e:	428e      	cmp	r6, r1
 8001070:	d803      	bhi.n	800107a <__aeabi_ddiv+0x3aa>
 8001072:	428a      	cmp	r2, r1
 8001074:	d901      	bls.n	800107a <__aeabi_ddiv+0x3aa>
 8001076:	1e87      	subs	r7, r0, #2
 8001078:	1989      	adds	r1, r1, r6
 800107a:	1a88      	subs	r0, r1, r2
 800107c:	9901      	ldr	r1, [sp, #4]
 800107e:	f7ff f8d1 	bl	8000224 <__aeabi_uidivmod>
 8001082:	0409      	lsls	r1, r1, #16
 8001084:	464a      	mov	r2, r9
 8001086:	4689      	mov	r9, r1
 8001088:	0429      	lsls	r1, r5, #16
 800108a:	464d      	mov	r5, r9
 800108c:	4342      	muls	r2, r0
 800108e:	0c09      	lsrs	r1, r1, #16
 8001090:	0003      	movs	r3, r0
 8001092:	4329      	orrs	r1, r5
 8001094:	428a      	cmp	r2, r1
 8001096:	d907      	bls.n	80010a8 <__aeabi_ddiv+0x3d8>
 8001098:	1989      	adds	r1, r1, r6
 800109a:	3b01      	subs	r3, #1
 800109c:	428e      	cmp	r6, r1
 800109e:	d803      	bhi.n	80010a8 <__aeabi_ddiv+0x3d8>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	d901      	bls.n	80010a8 <__aeabi_ddiv+0x3d8>
 80010a4:	1e83      	subs	r3, r0, #2
 80010a6:	1989      	adds	r1, r1, r6
 80010a8:	043f      	lsls	r7, r7, #16
 80010aa:	1a89      	subs	r1, r1, r2
 80010ac:	003a      	movs	r2, r7
 80010ae:	9f03      	ldr	r7, [sp, #12]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	0038      	movs	r0, r7
 80010b4:	0413      	lsls	r3, r2, #16
 80010b6:	0c1b      	lsrs	r3, r3, #16
 80010b8:	4358      	muls	r0, r3
 80010ba:	4681      	mov	r9, r0
 80010bc:	9802      	ldr	r0, [sp, #8]
 80010be:	0c15      	lsrs	r5, r2, #16
 80010c0:	436f      	muls	r7, r5
 80010c2:	4343      	muls	r3, r0
 80010c4:	4345      	muls	r5, r0
 80010c6:	4648      	mov	r0, r9
 80010c8:	0c00      	lsrs	r0, r0, #16
 80010ca:	4684      	mov	ip, r0
 80010cc:	19db      	adds	r3, r3, r7
 80010ce:	4463      	add	r3, ip
 80010d0:	429f      	cmp	r7, r3
 80010d2:	d903      	bls.n	80010dc <__aeabi_ddiv+0x40c>
 80010d4:	2080      	movs	r0, #128	; 0x80
 80010d6:	0240      	lsls	r0, r0, #9
 80010d8:	4684      	mov	ip, r0
 80010da:	4465      	add	r5, ip
 80010dc:	4648      	mov	r0, r9
 80010de:	0c1f      	lsrs	r7, r3, #16
 80010e0:	0400      	lsls	r0, r0, #16
 80010e2:	041b      	lsls	r3, r3, #16
 80010e4:	0c00      	lsrs	r0, r0, #16
 80010e6:	197d      	adds	r5, r7, r5
 80010e8:	1818      	adds	r0, r3, r0
 80010ea:	42a9      	cmp	r1, r5
 80010ec:	d200      	bcs.n	80010f0 <__aeabi_ddiv+0x420>
 80010ee:	e084      	b.n	80011fa <__aeabi_ddiv+0x52a>
 80010f0:	d100      	bne.n	80010f4 <__aeabi_ddiv+0x424>
 80010f2:	e07f      	b.n	80011f4 <__aeabi_ddiv+0x524>
 80010f4:	2301      	movs	r3, #1
 80010f6:	431a      	orrs	r2, r3
 80010f8:	e657      	b.n	8000daa <__aeabi_ddiv+0xda>
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	464a      	mov	r2, r9
 80010fe:	031b      	lsls	r3, r3, #12
 8001100:	4313      	orrs	r3, r2
 8001102:	031b      	lsls	r3, r3, #12
 8001104:	0b1b      	lsrs	r3, r3, #12
 8001106:	46aa      	mov	sl, r5
 8001108:	4a6f      	ldr	r2, [pc, #444]	; (80012c8 <__aeabi_ddiv+0x5f8>)
 800110a:	e66f      	b.n	8000dec <__aeabi_ddiv+0x11c>
 800110c:	42ba      	cmp	r2, r7
 800110e:	d900      	bls.n	8001112 <__aeabi_ddiv+0x442>
 8001110:	e735      	b.n	8000f7e <__aeabi_ddiv+0x2ae>
 8001112:	464b      	mov	r3, r9
 8001114:	07dc      	lsls	r4, r3, #31
 8001116:	0858      	lsrs	r0, r3, #1
 8001118:	087b      	lsrs	r3, r7, #1
 800111a:	431c      	orrs	r4, r3
 800111c:	07ff      	lsls	r7, r7, #31
 800111e:	e734      	b.n	8000f8a <__aeabi_ddiv+0x2ba>
 8001120:	2400      	movs	r4, #0
 8001122:	42af      	cmp	r7, r5
 8001124:	d289      	bcs.n	800103a <__aeabi_ddiv+0x36a>
 8001126:	4447      	add	r7, r8
 8001128:	4547      	cmp	r7, r8
 800112a:	41a4      	sbcs	r4, r4
 800112c:	465b      	mov	r3, fp
 800112e:	4264      	negs	r4, r4
 8001130:	19a4      	adds	r4, r4, r6
 8001132:	1864      	adds	r4, r4, r1
 8001134:	3b01      	subs	r3, #1
 8001136:	42a6      	cmp	r6, r4
 8001138:	d21e      	bcs.n	8001178 <__aeabi_ddiv+0x4a8>
 800113a:	42a0      	cmp	r0, r4
 800113c:	d86d      	bhi.n	800121a <__aeabi_ddiv+0x54a>
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x472>
 8001140:	e0b6      	b.n	80012b0 <__aeabi_ddiv+0x5e0>
 8001142:	1a24      	subs	r4, r4, r0
 8001144:	469b      	mov	fp, r3
 8001146:	e778      	b.n	800103a <__aeabi_ddiv+0x36a>
 8001148:	0003      	movs	r3, r0
 800114a:	465a      	mov	r2, fp
 800114c:	3b28      	subs	r3, #40	; 0x28
 800114e:	409a      	lsls	r2, r3
 8001150:	2700      	movs	r7, #0
 8001152:	4691      	mov	r9, r2
 8001154:	e688      	b.n	8000e68 <__aeabi_ddiv+0x198>
 8001156:	4658      	mov	r0, fp
 8001158:	f000 ffd4 	bl	8002104 <__clzsi2>
 800115c:	3020      	adds	r0, #32
 800115e:	e672      	b.n	8000e46 <__aeabi_ddiv+0x176>
 8001160:	0003      	movs	r3, r0
 8001162:	4652      	mov	r2, sl
 8001164:	3b28      	subs	r3, #40	; 0x28
 8001166:	409a      	lsls	r2, r3
 8001168:	4693      	mov	fp, r2
 800116a:	2200      	movs	r2, #0
 800116c:	e6b4      	b.n	8000ed8 <__aeabi_ddiv+0x208>
 800116e:	4650      	mov	r0, sl
 8001170:	f000 ffc8 	bl	8002104 <__clzsi2>
 8001174:	3020      	adds	r0, #32
 8001176:	e69a      	b.n	8000eae <__aeabi_ddiv+0x1de>
 8001178:	42a6      	cmp	r6, r4
 800117a:	d1e2      	bne.n	8001142 <__aeabi_ddiv+0x472>
 800117c:	45b8      	cmp	r8, r7
 800117e:	d9dc      	bls.n	800113a <__aeabi_ddiv+0x46a>
 8001180:	1a34      	subs	r4, r6, r0
 8001182:	469b      	mov	fp, r3
 8001184:	e759      	b.n	800103a <__aeabi_ddiv+0x36a>
 8001186:	2b1f      	cmp	r3, #31
 8001188:	dc65      	bgt.n	8001256 <__aeabi_ddiv+0x586>
 800118a:	4c50      	ldr	r4, [pc, #320]	; (80012cc <__aeabi_ddiv+0x5fc>)
 800118c:	9900      	ldr	r1, [sp, #0]
 800118e:	46a4      	mov	ip, r4
 8001190:	465c      	mov	r4, fp
 8001192:	4461      	add	r1, ip
 8001194:	0008      	movs	r0, r1
 8001196:	408c      	lsls	r4, r1
 8001198:	0011      	movs	r1, r2
 800119a:	4082      	lsls	r2, r0
 800119c:	40d9      	lsrs	r1, r3
 800119e:	1e50      	subs	r0, r2, #1
 80011a0:	4182      	sbcs	r2, r0
 80011a2:	430c      	orrs	r4, r1
 80011a4:	4314      	orrs	r4, r2
 80011a6:	465a      	mov	r2, fp
 80011a8:	40da      	lsrs	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	0762      	lsls	r2, r4, #29
 80011ae:	d009      	beq.n	80011c4 <__aeabi_ddiv+0x4f4>
 80011b0:	220f      	movs	r2, #15
 80011b2:	4022      	ands	r2, r4
 80011b4:	2a04      	cmp	r2, #4
 80011b6:	d005      	beq.n	80011c4 <__aeabi_ddiv+0x4f4>
 80011b8:	0022      	movs	r2, r4
 80011ba:	1d14      	adds	r4, r2, #4
 80011bc:	4294      	cmp	r4, r2
 80011be:	4189      	sbcs	r1, r1
 80011c0:	4249      	negs	r1, r1
 80011c2:	185b      	adds	r3, r3, r1
 80011c4:	021a      	lsls	r2, r3, #8
 80011c6:	d562      	bpl.n	800128e <__aeabi_ddiv+0x5be>
 80011c8:	2201      	movs	r2, #1
 80011ca:	2300      	movs	r3, #0
 80011cc:	2700      	movs	r7, #0
 80011ce:	e60d      	b.n	8000dec <__aeabi_ddiv+0x11c>
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d800      	bhi.n	80011d6 <__aeabi_ddiv+0x506>
 80011d4:	e70a      	b.n	8000fec <__aeabi_ddiv+0x31c>
 80011d6:	1e83      	subs	r3, r0, #2
 80011d8:	1989      	adds	r1, r1, r6
 80011da:	e707      	b.n	8000fec <__aeabi_ddiv+0x31c>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x516>
 80011e4:	e5e6      	b.n	8000db4 <__aeabi_ddiv+0xe4>
 80011e6:	1d17      	adds	r7, r2, #4
 80011e8:	4297      	cmp	r7, r2
 80011ea:	4192      	sbcs	r2, r2
 80011ec:	4253      	negs	r3, r2
 80011ee:	449b      	add	fp, r3
 80011f0:	08fa      	lsrs	r2, r7, #3
 80011f2:	e5e0      	b.n	8000db6 <__aeabi_ddiv+0xe6>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x52a>
 80011f8:	e5d7      	b.n	8000daa <__aeabi_ddiv+0xda>
 80011fa:	1871      	adds	r1, r6, r1
 80011fc:	1e53      	subs	r3, r2, #1
 80011fe:	42b1      	cmp	r1, r6
 8001200:	d327      	bcc.n	8001252 <__aeabi_ddiv+0x582>
 8001202:	42a9      	cmp	r1, r5
 8001204:	d315      	bcc.n	8001232 <__aeabi_ddiv+0x562>
 8001206:	d058      	beq.n	80012ba <__aeabi_ddiv+0x5ea>
 8001208:	001a      	movs	r2, r3
 800120a:	e773      	b.n	80010f4 <__aeabi_ddiv+0x424>
 800120c:	2b00      	cmp	r3, #0
 800120e:	dc00      	bgt.n	8001212 <__aeabi_ddiv+0x542>
 8001210:	e604      	b.n	8000e1c <__aeabi_ddiv+0x14c>
 8001212:	2301      	movs	r3, #1
 8001214:	2200      	movs	r2, #0
 8001216:	449b      	add	fp, r3
 8001218:	e5cd      	b.n	8000db6 <__aeabi_ddiv+0xe6>
 800121a:	2302      	movs	r3, #2
 800121c:	4447      	add	r7, r8
 800121e:	4547      	cmp	r7, r8
 8001220:	4189      	sbcs	r1, r1
 8001222:	425b      	negs	r3, r3
 8001224:	469c      	mov	ip, r3
 8001226:	4249      	negs	r1, r1
 8001228:	1989      	adds	r1, r1, r6
 800122a:	190c      	adds	r4, r1, r4
 800122c:	44e3      	add	fp, ip
 800122e:	1a24      	subs	r4, r4, r0
 8001230:	e703      	b.n	800103a <__aeabi_ddiv+0x36a>
 8001232:	4643      	mov	r3, r8
 8001234:	005f      	lsls	r7, r3, #1
 8001236:	4547      	cmp	r7, r8
 8001238:	419b      	sbcs	r3, r3
 800123a:	46b8      	mov	r8, r7
 800123c:	425b      	negs	r3, r3
 800123e:	199e      	adds	r6, r3, r6
 8001240:	3a02      	subs	r2, #2
 8001242:	1989      	adds	r1, r1, r6
 8001244:	42a9      	cmp	r1, r5
 8001246:	d000      	beq.n	800124a <__aeabi_ddiv+0x57a>
 8001248:	e754      	b.n	80010f4 <__aeabi_ddiv+0x424>
 800124a:	4540      	cmp	r0, r8
 800124c:	d000      	beq.n	8001250 <__aeabi_ddiv+0x580>
 800124e:	e751      	b.n	80010f4 <__aeabi_ddiv+0x424>
 8001250:	e5ab      	b.n	8000daa <__aeabi_ddiv+0xda>
 8001252:	001a      	movs	r2, r3
 8001254:	e7f6      	b.n	8001244 <__aeabi_ddiv+0x574>
 8001256:	211f      	movs	r1, #31
 8001258:	465f      	mov	r7, fp
 800125a:	4249      	negs	r1, r1
 800125c:	1b0c      	subs	r4, r1, r4
 800125e:	40e7      	lsrs	r7, r4
 8001260:	2b20      	cmp	r3, #32
 8001262:	d007      	beq.n	8001274 <__aeabi_ddiv+0x5a4>
 8001264:	491a      	ldr	r1, [pc, #104]	; (80012d0 <__aeabi_ddiv+0x600>)
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	468c      	mov	ip, r1
 800126a:	4463      	add	r3, ip
 800126c:	0018      	movs	r0, r3
 800126e:	465b      	mov	r3, fp
 8001270:	4083      	lsls	r3, r0
 8001272:	431a      	orrs	r2, r3
 8001274:	1e50      	subs	r0, r2, #1
 8001276:	4182      	sbcs	r2, r0
 8001278:	433a      	orrs	r2, r7
 800127a:	2707      	movs	r7, #7
 800127c:	2300      	movs	r3, #0
 800127e:	4017      	ands	r7, r2
 8001280:	d009      	beq.n	8001296 <__aeabi_ddiv+0x5c6>
 8001282:	210f      	movs	r1, #15
 8001284:	2300      	movs	r3, #0
 8001286:	4011      	ands	r1, r2
 8001288:	0014      	movs	r4, r2
 800128a:	2904      	cmp	r1, #4
 800128c:	d195      	bne.n	80011ba <__aeabi_ddiv+0x4ea>
 800128e:	0022      	movs	r2, r4
 8001290:	075f      	lsls	r7, r3, #29
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	0b1b      	lsrs	r3, r3, #12
 8001296:	08d2      	lsrs	r2, r2, #3
 8001298:	4317      	orrs	r7, r2
 800129a:	2200      	movs	r2, #0
 800129c:	e5a6      	b.n	8000dec <__aeabi_ddiv+0x11c>
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	4659      	mov	r1, fp
 80012a2:	031b      	lsls	r3, r3, #12
 80012a4:	430b      	orrs	r3, r1
 80012a6:	031b      	lsls	r3, r3, #12
 80012a8:	0017      	movs	r7, r2
 80012aa:	0b1b      	lsrs	r3, r3, #12
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <__aeabi_ddiv+0x5f8>)
 80012ae:	e59d      	b.n	8000dec <__aeabi_ddiv+0x11c>
 80012b0:	42bd      	cmp	r5, r7
 80012b2:	d8b2      	bhi.n	800121a <__aeabi_ddiv+0x54a>
 80012b4:	469b      	mov	fp, r3
 80012b6:	2400      	movs	r4, #0
 80012b8:	e6bf      	b.n	800103a <__aeabi_ddiv+0x36a>
 80012ba:	4580      	cmp	r8, r0
 80012bc:	d3b9      	bcc.n	8001232 <__aeabi_ddiv+0x562>
 80012be:	001a      	movs	r2, r3
 80012c0:	e7c3      	b.n	800124a <__aeabi_ddiv+0x57a>
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	000003ff 	.word	0x000003ff
 80012c8:	000007ff 	.word	0x000007ff
 80012cc:	0000041e 	.word	0x0000041e
 80012d0:	0000043e 	.word	0x0000043e

080012d4 <__eqdf2>:
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	464f      	mov	r7, r9
 80012d8:	4646      	mov	r6, r8
 80012da:	46d6      	mov	lr, sl
 80012dc:	4684      	mov	ip, r0
 80012de:	b5c0      	push	{r6, r7, lr}
 80012e0:	4680      	mov	r8, r0
 80012e2:	4e19      	ldr	r6, [pc, #100]	; (8001348 <__eqdf2+0x74>)
 80012e4:	0318      	lsls	r0, r3, #12
 80012e6:	030f      	lsls	r7, r1, #12
 80012e8:	004d      	lsls	r5, r1, #1
 80012ea:	0b00      	lsrs	r0, r0, #12
 80012ec:	005c      	lsls	r4, r3, #1
 80012ee:	4682      	mov	sl, r0
 80012f0:	0b3f      	lsrs	r7, r7, #12
 80012f2:	0d6d      	lsrs	r5, r5, #21
 80012f4:	0fc9      	lsrs	r1, r1, #31
 80012f6:	4691      	mov	r9, r2
 80012f8:	0d64      	lsrs	r4, r4, #21
 80012fa:	0fdb      	lsrs	r3, r3, #31
 80012fc:	2001      	movs	r0, #1
 80012fe:	42b5      	cmp	r5, r6
 8001300:	d00a      	beq.n	8001318 <__eqdf2+0x44>
 8001302:	42b4      	cmp	r4, r6
 8001304:	d003      	beq.n	800130e <__eqdf2+0x3a>
 8001306:	42a5      	cmp	r5, r4
 8001308:	d101      	bne.n	800130e <__eqdf2+0x3a>
 800130a:	4557      	cmp	r7, sl
 800130c:	d00c      	beq.n	8001328 <__eqdf2+0x54>
 800130e:	bc1c      	pop	{r2, r3, r4}
 8001310:	4690      	mov	r8, r2
 8001312:	4699      	mov	r9, r3
 8001314:	46a2      	mov	sl, r4
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001318:	4666      	mov	r6, ip
 800131a:	433e      	orrs	r6, r7
 800131c:	d1f7      	bne.n	800130e <__eqdf2+0x3a>
 800131e:	42ac      	cmp	r4, r5
 8001320:	d1f5      	bne.n	800130e <__eqdf2+0x3a>
 8001322:	4654      	mov	r4, sl
 8001324:	4314      	orrs	r4, r2
 8001326:	d1f2      	bne.n	800130e <__eqdf2+0x3a>
 8001328:	2001      	movs	r0, #1
 800132a:	45c8      	cmp	r8, r9
 800132c:	d1ef      	bne.n	800130e <__eqdf2+0x3a>
 800132e:	4299      	cmp	r1, r3
 8001330:	d007      	beq.n	8001342 <__eqdf2+0x6e>
 8001332:	2d00      	cmp	r5, #0
 8001334:	d1eb      	bne.n	800130e <__eqdf2+0x3a>
 8001336:	4663      	mov	r3, ip
 8001338:	431f      	orrs	r7, r3
 800133a:	0038      	movs	r0, r7
 800133c:	1e47      	subs	r7, r0, #1
 800133e:	41b8      	sbcs	r0, r7
 8001340:	e7e5      	b.n	800130e <__eqdf2+0x3a>
 8001342:	2000      	movs	r0, #0
 8001344:	e7e3      	b.n	800130e <__eqdf2+0x3a>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	000007ff 	.word	0x000007ff

0800134c <__gedf2>:
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	464f      	mov	r7, r9
 8001350:	4646      	mov	r6, r8
 8001352:	46d6      	mov	lr, sl
 8001354:	004d      	lsls	r5, r1, #1
 8001356:	b5c0      	push	{r6, r7, lr}
 8001358:	030e      	lsls	r6, r1, #12
 800135a:	0fc9      	lsrs	r1, r1, #31
 800135c:	468a      	mov	sl, r1
 800135e:	492c      	ldr	r1, [pc, #176]	; (8001410 <__gedf2+0xc4>)
 8001360:	031f      	lsls	r7, r3, #12
 8001362:	005c      	lsls	r4, r3, #1
 8001364:	4680      	mov	r8, r0
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d6d      	lsrs	r5, r5, #21
 800136a:	4691      	mov	r9, r2
 800136c:	0b3f      	lsrs	r7, r7, #12
 800136e:	0d64      	lsrs	r4, r4, #21
 8001370:	0fdb      	lsrs	r3, r3, #31
 8001372:	428d      	cmp	r5, r1
 8001374:	d01e      	beq.n	80013b4 <__gedf2+0x68>
 8001376:	428c      	cmp	r4, r1
 8001378:	d016      	beq.n	80013a8 <__gedf2+0x5c>
 800137a:	2d00      	cmp	r5, #0
 800137c:	d11e      	bne.n	80013bc <__gedf2+0x70>
 800137e:	4330      	orrs	r0, r6
 8001380:	4684      	mov	ip, r0
 8001382:	2c00      	cmp	r4, #0
 8001384:	d101      	bne.n	800138a <__gedf2+0x3e>
 8001386:	433a      	orrs	r2, r7
 8001388:	d023      	beq.n	80013d2 <__gedf2+0x86>
 800138a:	4662      	mov	r2, ip
 800138c:	2a00      	cmp	r2, #0
 800138e:	d01a      	beq.n	80013c6 <__gedf2+0x7a>
 8001390:	459a      	cmp	sl, r3
 8001392:	d029      	beq.n	80013e8 <__gedf2+0x9c>
 8001394:	4651      	mov	r1, sl
 8001396:	2002      	movs	r0, #2
 8001398:	3901      	subs	r1, #1
 800139a:	4008      	ands	r0, r1
 800139c:	3801      	subs	r0, #1
 800139e:	bc1c      	pop	{r2, r3, r4}
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	46a2      	mov	sl, r4
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a8:	0039      	movs	r1, r7
 80013aa:	4311      	orrs	r1, r2
 80013ac:	d0e5      	beq.n	800137a <__gedf2+0x2e>
 80013ae:	2002      	movs	r0, #2
 80013b0:	4240      	negs	r0, r0
 80013b2:	e7f4      	b.n	800139e <__gedf2+0x52>
 80013b4:	4330      	orrs	r0, r6
 80013b6:	d1fa      	bne.n	80013ae <__gedf2+0x62>
 80013b8:	42ac      	cmp	r4, r5
 80013ba:	d00f      	beq.n	80013dc <__gedf2+0x90>
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d10f      	bne.n	80013e0 <__gedf2+0x94>
 80013c0:	433a      	orrs	r2, r7
 80013c2:	d0e7      	beq.n	8001394 <__gedf2+0x48>
 80013c4:	e00c      	b.n	80013e0 <__gedf2+0x94>
 80013c6:	2201      	movs	r2, #1
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4393      	bics	r3, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	3001      	adds	r0, #1
 80013d0:	e7e5      	b.n	800139e <__gedf2+0x52>
 80013d2:	4663      	mov	r3, ip
 80013d4:	2000      	movs	r0, #0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0e1      	beq.n	800139e <__gedf2+0x52>
 80013da:	e7db      	b.n	8001394 <__gedf2+0x48>
 80013dc:	433a      	orrs	r2, r7
 80013de:	d1e6      	bne.n	80013ae <__gedf2+0x62>
 80013e0:	459a      	cmp	sl, r3
 80013e2:	d1d7      	bne.n	8001394 <__gedf2+0x48>
 80013e4:	42a5      	cmp	r5, r4
 80013e6:	dcd5      	bgt.n	8001394 <__gedf2+0x48>
 80013e8:	42a5      	cmp	r5, r4
 80013ea:	db05      	blt.n	80013f8 <__gedf2+0xac>
 80013ec:	42be      	cmp	r6, r7
 80013ee:	d8d1      	bhi.n	8001394 <__gedf2+0x48>
 80013f0:	d008      	beq.n	8001404 <__gedf2+0xb8>
 80013f2:	2000      	movs	r0, #0
 80013f4:	42be      	cmp	r6, r7
 80013f6:	d2d2      	bcs.n	800139e <__gedf2+0x52>
 80013f8:	4650      	mov	r0, sl
 80013fa:	2301      	movs	r3, #1
 80013fc:	3801      	subs	r0, #1
 80013fe:	4398      	bics	r0, r3
 8001400:	3001      	adds	r0, #1
 8001402:	e7cc      	b.n	800139e <__gedf2+0x52>
 8001404:	45c8      	cmp	r8, r9
 8001406:	d8c5      	bhi.n	8001394 <__gedf2+0x48>
 8001408:	2000      	movs	r0, #0
 800140a:	45c8      	cmp	r8, r9
 800140c:	d3f4      	bcc.n	80013f8 <__gedf2+0xac>
 800140e:	e7c6      	b.n	800139e <__gedf2+0x52>
 8001410:	000007ff 	.word	0x000007ff

08001414 <__ledf2>:
 8001414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001416:	464f      	mov	r7, r9
 8001418:	4646      	mov	r6, r8
 800141a:	46d6      	mov	lr, sl
 800141c:	004d      	lsls	r5, r1, #1
 800141e:	b5c0      	push	{r6, r7, lr}
 8001420:	030e      	lsls	r6, r1, #12
 8001422:	0fc9      	lsrs	r1, r1, #31
 8001424:	468a      	mov	sl, r1
 8001426:	492e      	ldr	r1, [pc, #184]	; (80014e0 <__ledf2+0xcc>)
 8001428:	031f      	lsls	r7, r3, #12
 800142a:	005c      	lsls	r4, r3, #1
 800142c:	4680      	mov	r8, r0
 800142e:	0b36      	lsrs	r6, r6, #12
 8001430:	0d6d      	lsrs	r5, r5, #21
 8001432:	4691      	mov	r9, r2
 8001434:	0b3f      	lsrs	r7, r7, #12
 8001436:	0d64      	lsrs	r4, r4, #21
 8001438:	0fdb      	lsrs	r3, r3, #31
 800143a:	428d      	cmp	r5, r1
 800143c:	d018      	beq.n	8001470 <__ledf2+0x5c>
 800143e:	428c      	cmp	r4, r1
 8001440:	d011      	beq.n	8001466 <__ledf2+0x52>
 8001442:	2d00      	cmp	r5, #0
 8001444:	d118      	bne.n	8001478 <__ledf2+0x64>
 8001446:	4330      	orrs	r0, r6
 8001448:	4684      	mov	ip, r0
 800144a:	2c00      	cmp	r4, #0
 800144c:	d11e      	bne.n	800148c <__ledf2+0x78>
 800144e:	433a      	orrs	r2, r7
 8001450:	d11c      	bne.n	800148c <__ledf2+0x78>
 8001452:	4663      	mov	r3, ip
 8001454:	2000      	movs	r0, #0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d030      	beq.n	80014bc <__ledf2+0xa8>
 800145a:	4651      	mov	r1, sl
 800145c:	2002      	movs	r0, #2
 800145e:	3901      	subs	r1, #1
 8001460:	4008      	ands	r0, r1
 8001462:	3801      	subs	r0, #1
 8001464:	e02a      	b.n	80014bc <__ledf2+0xa8>
 8001466:	0039      	movs	r1, r7
 8001468:	4311      	orrs	r1, r2
 800146a:	d0ea      	beq.n	8001442 <__ledf2+0x2e>
 800146c:	2002      	movs	r0, #2
 800146e:	e025      	b.n	80014bc <__ledf2+0xa8>
 8001470:	4330      	orrs	r0, r6
 8001472:	d1fb      	bne.n	800146c <__ledf2+0x58>
 8001474:	42ac      	cmp	r4, r5
 8001476:	d026      	beq.n	80014c6 <__ledf2+0xb2>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d126      	bne.n	80014ca <__ledf2+0xb6>
 800147c:	433a      	orrs	r2, r7
 800147e:	d124      	bne.n	80014ca <__ledf2+0xb6>
 8001480:	4651      	mov	r1, sl
 8001482:	2002      	movs	r0, #2
 8001484:	3901      	subs	r1, #1
 8001486:	4008      	ands	r0, r1
 8001488:	3801      	subs	r0, #1
 800148a:	e017      	b.n	80014bc <__ledf2+0xa8>
 800148c:	4662      	mov	r2, ip
 800148e:	2a00      	cmp	r2, #0
 8001490:	d00f      	beq.n	80014b2 <__ledf2+0x9e>
 8001492:	459a      	cmp	sl, r3
 8001494:	d1e1      	bne.n	800145a <__ledf2+0x46>
 8001496:	42a5      	cmp	r5, r4
 8001498:	db05      	blt.n	80014a6 <__ledf2+0x92>
 800149a:	42be      	cmp	r6, r7
 800149c:	d8dd      	bhi.n	800145a <__ledf2+0x46>
 800149e:	d019      	beq.n	80014d4 <__ledf2+0xc0>
 80014a0:	2000      	movs	r0, #0
 80014a2:	42be      	cmp	r6, r7
 80014a4:	d20a      	bcs.n	80014bc <__ledf2+0xa8>
 80014a6:	4650      	mov	r0, sl
 80014a8:	2301      	movs	r3, #1
 80014aa:	3801      	subs	r0, #1
 80014ac:	4398      	bics	r0, r3
 80014ae:	3001      	adds	r0, #1
 80014b0:	e004      	b.n	80014bc <__ledf2+0xa8>
 80014b2:	2201      	movs	r2, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4393      	bics	r3, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	3001      	adds	r0, #1
 80014bc:	bc1c      	pop	{r2, r3, r4}
 80014be:	4690      	mov	r8, r2
 80014c0:	4699      	mov	r9, r3
 80014c2:	46a2      	mov	sl, r4
 80014c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c6:	433a      	orrs	r2, r7
 80014c8:	d1d0      	bne.n	800146c <__ledf2+0x58>
 80014ca:	459a      	cmp	sl, r3
 80014cc:	d1c5      	bne.n	800145a <__ledf2+0x46>
 80014ce:	42a5      	cmp	r5, r4
 80014d0:	dcc3      	bgt.n	800145a <__ledf2+0x46>
 80014d2:	e7e0      	b.n	8001496 <__ledf2+0x82>
 80014d4:	45c8      	cmp	r8, r9
 80014d6:	d8c0      	bhi.n	800145a <__ledf2+0x46>
 80014d8:	2000      	movs	r0, #0
 80014da:	45c8      	cmp	r8, r9
 80014dc:	d3e3      	bcc.n	80014a6 <__ledf2+0x92>
 80014de:	e7ed      	b.n	80014bc <__ledf2+0xa8>
 80014e0:	000007ff 	.word	0x000007ff

080014e4 <__aeabi_dmul>:
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	4657      	mov	r7, sl
 80014e8:	46de      	mov	lr, fp
 80014ea:	464e      	mov	r6, r9
 80014ec:	4645      	mov	r5, r8
 80014ee:	b5e0      	push	{r5, r6, r7, lr}
 80014f0:	4683      	mov	fp, r0
 80014f2:	0006      	movs	r6, r0
 80014f4:	030f      	lsls	r7, r1, #12
 80014f6:	0048      	lsls	r0, r1, #1
 80014f8:	b087      	sub	sp, #28
 80014fa:	4692      	mov	sl, r2
 80014fc:	001d      	movs	r5, r3
 80014fe:	0b3f      	lsrs	r7, r7, #12
 8001500:	0d40      	lsrs	r0, r0, #21
 8001502:	0fcc      	lsrs	r4, r1, #31
 8001504:	2800      	cmp	r0, #0
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x26>
 8001508:	e06f      	b.n	80015ea <__aeabi_dmul+0x106>
 800150a:	4bde      	ldr	r3, [pc, #888]	; (8001884 <__aeabi_dmul+0x3a0>)
 800150c:	4298      	cmp	r0, r3
 800150e:	d038      	beq.n	8001582 <__aeabi_dmul+0x9e>
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	00ff      	lsls	r7, r7, #3
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	431f      	orrs	r7, r3
 8001518:	0f73      	lsrs	r3, r6, #29
 800151a:	433b      	orrs	r3, r7
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	4bda      	ldr	r3, [pc, #872]	; (8001888 <__aeabi_dmul+0x3a4>)
 8001520:	2700      	movs	r7, #0
 8001522:	4699      	mov	r9, r3
 8001524:	2300      	movs	r3, #0
 8001526:	469b      	mov	fp, r3
 8001528:	00f6      	lsls	r6, r6, #3
 800152a:	4481      	add	r9, r0
 800152c:	032b      	lsls	r3, r5, #12
 800152e:	0069      	lsls	r1, r5, #1
 8001530:	0b1b      	lsrs	r3, r3, #12
 8001532:	4652      	mov	r2, sl
 8001534:	4698      	mov	r8, r3
 8001536:	0d49      	lsrs	r1, r1, #21
 8001538:	0fed      	lsrs	r5, r5, #31
 800153a:	2900      	cmp	r1, #0
 800153c:	d100      	bne.n	8001540 <__aeabi_dmul+0x5c>
 800153e:	e085      	b.n	800164c <__aeabi_dmul+0x168>
 8001540:	4bd0      	ldr	r3, [pc, #832]	; (8001884 <__aeabi_dmul+0x3a0>)
 8001542:	4299      	cmp	r1, r3
 8001544:	d100      	bne.n	8001548 <__aeabi_dmul+0x64>
 8001546:	e073      	b.n	8001630 <__aeabi_dmul+0x14c>
 8001548:	4643      	mov	r3, r8
 800154a:	00da      	lsls	r2, r3, #3
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	4313      	orrs	r3, r2
 8001552:	4652      	mov	r2, sl
 8001554:	48cc      	ldr	r0, [pc, #816]	; (8001888 <__aeabi_dmul+0x3a4>)
 8001556:	0f52      	lsrs	r2, r2, #29
 8001558:	4684      	mov	ip, r0
 800155a:	4313      	orrs	r3, r2
 800155c:	4652      	mov	r2, sl
 800155e:	2000      	movs	r0, #0
 8001560:	4461      	add	r1, ip
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4489      	add	r9, r1
 8001566:	0021      	movs	r1, r4
 8001568:	4069      	eors	r1, r5
 800156a:	9100      	str	r1, [sp, #0]
 800156c:	468c      	mov	ip, r1
 800156e:	2101      	movs	r1, #1
 8001570:	4449      	add	r1, r9
 8001572:	468a      	mov	sl, r1
 8001574:	2f0f      	cmp	r7, #15
 8001576:	d900      	bls.n	800157a <__aeabi_dmul+0x96>
 8001578:	e090      	b.n	800169c <__aeabi_dmul+0x1b8>
 800157a:	49c4      	ldr	r1, [pc, #784]	; (800188c <__aeabi_dmul+0x3a8>)
 800157c:	00bf      	lsls	r7, r7, #2
 800157e:	59cf      	ldr	r7, [r1, r7]
 8001580:	46bf      	mov	pc, r7
 8001582:	465b      	mov	r3, fp
 8001584:	433b      	orrs	r3, r7
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	d000      	beq.n	800158c <__aeabi_dmul+0xa8>
 800158a:	e16a      	b.n	8001862 <__aeabi_dmul+0x37e>
 800158c:	2302      	movs	r3, #2
 800158e:	2708      	movs	r7, #8
 8001590:	2600      	movs	r6, #0
 8001592:	4681      	mov	r9, r0
 8001594:	469b      	mov	fp, r3
 8001596:	e7c9      	b.n	800152c <__aeabi_dmul+0x48>
 8001598:	0032      	movs	r2, r6
 800159a:	4658      	mov	r0, fp
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	4661      	mov	r1, ip
 80015a0:	9100      	str	r1, [sp, #0]
 80015a2:	2802      	cmp	r0, #2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0xc4>
 80015a6:	e075      	b.n	8001694 <__aeabi_dmul+0x1b0>
 80015a8:	2803      	cmp	r0, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xca>
 80015ac:	e1fe      	b.n	80019ac <__aeabi_dmul+0x4c8>
 80015ae:	2801      	cmp	r0, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xd0>
 80015b2:	e12c      	b.n	800180e <__aeabi_dmul+0x32a>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2700      	movs	r7, #0
 80015b8:	2600      	movs	r6, #0
 80015ba:	2500      	movs	r5, #0
 80015bc:	033f      	lsls	r7, r7, #12
 80015be:	0d2a      	lsrs	r2, r5, #20
 80015c0:	0b3f      	lsrs	r7, r7, #12
 80015c2:	48b3      	ldr	r0, [pc, #716]	; (8001890 <__aeabi_dmul+0x3ac>)
 80015c4:	0512      	lsls	r2, r2, #20
 80015c6:	433a      	orrs	r2, r7
 80015c8:	4002      	ands	r2, r0
 80015ca:	051b      	lsls	r3, r3, #20
 80015cc:	4313      	orrs	r3, r2
 80015ce:	9a00      	ldr	r2, [sp, #0]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	07d1      	lsls	r1, r2, #31
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	430b      	orrs	r3, r1
 80015d8:	0030      	movs	r0, r6
 80015da:	0019      	movs	r1, r3
 80015dc:	b007      	add	sp, #28
 80015de:	bc3c      	pop	{r2, r3, r4, r5}
 80015e0:	4690      	mov	r8, r2
 80015e2:	4699      	mov	r9, r3
 80015e4:	46a2      	mov	sl, r4
 80015e6:	46ab      	mov	fp, r5
 80015e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ea:	465b      	mov	r3, fp
 80015ec:	433b      	orrs	r3, r7
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dmul+0x110>
 80015f2:	e12f      	b.n	8001854 <__aeabi_dmul+0x370>
 80015f4:	2f00      	cmp	r7, #0
 80015f6:	d100      	bne.n	80015fa <__aeabi_dmul+0x116>
 80015f8:	e1a5      	b.n	8001946 <__aeabi_dmul+0x462>
 80015fa:	0038      	movs	r0, r7
 80015fc:	f000 fd82 	bl	8002104 <__clzsi2>
 8001600:	0003      	movs	r3, r0
 8001602:	3b0b      	subs	r3, #11
 8001604:	2b1c      	cmp	r3, #28
 8001606:	dd00      	ble.n	800160a <__aeabi_dmul+0x126>
 8001608:	e196      	b.n	8001938 <__aeabi_dmul+0x454>
 800160a:	221d      	movs	r2, #29
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	465a      	mov	r2, fp
 8001610:	0001      	movs	r1, r0
 8001612:	40da      	lsrs	r2, r3
 8001614:	465e      	mov	r6, fp
 8001616:	3908      	subs	r1, #8
 8001618:	408f      	lsls	r7, r1
 800161a:	0013      	movs	r3, r2
 800161c:	408e      	lsls	r6, r1
 800161e:	433b      	orrs	r3, r7
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	4b9c      	ldr	r3, [pc, #624]	; (8001894 <__aeabi_dmul+0x3b0>)
 8001624:	2700      	movs	r7, #0
 8001626:	1a1b      	subs	r3, r3, r0
 8001628:	4699      	mov	r9, r3
 800162a:	2300      	movs	r3, #0
 800162c:	469b      	mov	fp, r3
 800162e:	e77d      	b.n	800152c <__aeabi_dmul+0x48>
 8001630:	4641      	mov	r1, r8
 8001632:	4653      	mov	r3, sl
 8001634:	430b      	orrs	r3, r1
 8001636:	4993      	ldr	r1, [pc, #588]	; (8001884 <__aeabi_dmul+0x3a0>)
 8001638:	468c      	mov	ip, r1
 800163a:	44e1      	add	r9, ip
 800163c:	2b00      	cmp	r3, #0
 800163e:	d000      	beq.n	8001642 <__aeabi_dmul+0x15e>
 8001640:	e11a      	b.n	8001878 <__aeabi_dmul+0x394>
 8001642:	2202      	movs	r2, #2
 8001644:	2002      	movs	r0, #2
 8001646:	4317      	orrs	r7, r2
 8001648:	2200      	movs	r2, #0
 800164a:	e78c      	b.n	8001566 <__aeabi_dmul+0x82>
 800164c:	4313      	orrs	r3, r2
 800164e:	d100      	bne.n	8001652 <__aeabi_dmul+0x16e>
 8001650:	e10d      	b.n	800186e <__aeabi_dmul+0x38a>
 8001652:	4643      	mov	r3, r8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dmul+0x176>
 8001658:	e181      	b.n	800195e <__aeabi_dmul+0x47a>
 800165a:	4640      	mov	r0, r8
 800165c:	f000 fd52 	bl	8002104 <__clzsi2>
 8001660:	0002      	movs	r2, r0
 8001662:	3a0b      	subs	r2, #11
 8001664:	2a1c      	cmp	r2, #28
 8001666:	dd00      	ble.n	800166a <__aeabi_dmul+0x186>
 8001668:	e172      	b.n	8001950 <__aeabi_dmul+0x46c>
 800166a:	0001      	movs	r1, r0
 800166c:	4643      	mov	r3, r8
 800166e:	3908      	subs	r1, #8
 8001670:	408b      	lsls	r3, r1
 8001672:	4698      	mov	r8, r3
 8001674:	231d      	movs	r3, #29
 8001676:	1a9a      	subs	r2, r3, r2
 8001678:	4653      	mov	r3, sl
 800167a:	40d3      	lsrs	r3, r2
 800167c:	001a      	movs	r2, r3
 800167e:	4643      	mov	r3, r8
 8001680:	4313      	orrs	r3, r2
 8001682:	4652      	mov	r2, sl
 8001684:	408a      	lsls	r2, r1
 8001686:	4649      	mov	r1, r9
 8001688:	1a08      	subs	r0, r1, r0
 800168a:	4982      	ldr	r1, [pc, #520]	; (8001894 <__aeabi_dmul+0x3b0>)
 800168c:	4689      	mov	r9, r1
 800168e:	4481      	add	r9, r0
 8001690:	2000      	movs	r0, #0
 8001692:	e768      	b.n	8001566 <__aeabi_dmul+0x82>
 8001694:	4b7b      	ldr	r3, [pc, #492]	; (8001884 <__aeabi_dmul+0x3a0>)
 8001696:	2700      	movs	r7, #0
 8001698:	2600      	movs	r6, #0
 800169a:	e78e      	b.n	80015ba <__aeabi_dmul+0xd6>
 800169c:	0c14      	lsrs	r4, r2, #16
 800169e:	0412      	lsls	r2, r2, #16
 80016a0:	0c12      	lsrs	r2, r2, #16
 80016a2:	0011      	movs	r1, r2
 80016a4:	0c37      	lsrs	r7, r6, #16
 80016a6:	0436      	lsls	r6, r6, #16
 80016a8:	0c35      	lsrs	r5, r6, #16
 80016aa:	4379      	muls	r1, r7
 80016ac:	0028      	movs	r0, r5
 80016ae:	468c      	mov	ip, r1
 80016b0:	002e      	movs	r6, r5
 80016b2:	4360      	muls	r0, r4
 80016b4:	4460      	add	r0, ip
 80016b6:	4683      	mov	fp, r0
 80016b8:	4356      	muls	r6, r2
 80016ba:	0021      	movs	r1, r4
 80016bc:	0c30      	lsrs	r0, r6, #16
 80016be:	4680      	mov	r8, r0
 80016c0:	4658      	mov	r0, fp
 80016c2:	4379      	muls	r1, r7
 80016c4:	4440      	add	r0, r8
 80016c6:	9102      	str	r1, [sp, #8]
 80016c8:	4584      	cmp	ip, r0
 80016ca:	d906      	bls.n	80016da <__aeabi_dmul+0x1f6>
 80016cc:	4688      	mov	r8, r1
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0249      	lsls	r1, r1, #9
 80016d2:	468c      	mov	ip, r1
 80016d4:	44e0      	add	r8, ip
 80016d6:	4641      	mov	r1, r8
 80016d8:	9102      	str	r1, [sp, #8]
 80016da:	0436      	lsls	r6, r6, #16
 80016dc:	0c01      	lsrs	r1, r0, #16
 80016de:	0c36      	lsrs	r6, r6, #16
 80016e0:	0400      	lsls	r0, r0, #16
 80016e2:	468b      	mov	fp, r1
 80016e4:	1981      	adds	r1, r0, r6
 80016e6:	0c1e      	lsrs	r6, r3, #16
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	9103      	str	r1, [sp, #12]
 80016ee:	0019      	movs	r1, r3
 80016f0:	4379      	muls	r1, r7
 80016f2:	468c      	mov	ip, r1
 80016f4:	0028      	movs	r0, r5
 80016f6:	4375      	muls	r5, r6
 80016f8:	4465      	add	r5, ip
 80016fa:	46a8      	mov	r8, r5
 80016fc:	4358      	muls	r0, r3
 80016fe:	0c05      	lsrs	r5, r0, #16
 8001700:	4445      	add	r5, r8
 8001702:	4377      	muls	r7, r6
 8001704:	42a9      	cmp	r1, r5
 8001706:	d903      	bls.n	8001710 <__aeabi_dmul+0x22c>
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0249      	lsls	r1, r1, #9
 800170c:	468c      	mov	ip, r1
 800170e:	4467      	add	r7, ip
 8001710:	0c29      	lsrs	r1, r5, #16
 8001712:	468c      	mov	ip, r1
 8001714:	0039      	movs	r1, r7
 8001716:	0400      	lsls	r0, r0, #16
 8001718:	0c00      	lsrs	r0, r0, #16
 800171a:	042d      	lsls	r5, r5, #16
 800171c:	182d      	adds	r5, r5, r0
 800171e:	4461      	add	r1, ip
 8001720:	44ab      	add	fp, r5
 8001722:	9105      	str	r1, [sp, #20]
 8001724:	4659      	mov	r1, fp
 8001726:	9104      	str	r1, [sp, #16]
 8001728:	9901      	ldr	r1, [sp, #4]
 800172a:	040f      	lsls	r7, r1, #16
 800172c:	0c3f      	lsrs	r7, r7, #16
 800172e:	0c08      	lsrs	r0, r1, #16
 8001730:	0039      	movs	r1, r7
 8001732:	4351      	muls	r1, r2
 8001734:	4342      	muls	r2, r0
 8001736:	4690      	mov	r8, r2
 8001738:	0002      	movs	r2, r0
 800173a:	468c      	mov	ip, r1
 800173c:	0c09      	lsrs	r1, r1, #16
 800173e:	468b      	mov	fp, r1
 8001740:	4362      	muls	r2, r4
 8001742:	437c      	muls	r4, r7
 8001744:	4444      	add	r4, r8
 8001746:	445c      	add	r4, fp
 8001748:	45a0      	cmp	r8, r4
 800174a:	d903      	bls.n	8001754 <__aeabi_dmul+0x270>
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0249      	lsls	r1, r1, #9
 8001750:	4688      	mov	r8, r1
 8001752:	4442      	add	r2, r8
 8001754:	0c21      	lsrs	r1, r4, #16
 8001756:	4688      	mov	r8, r1
 8001758:	4661      	mov	r1, ip
 800175a:	0409      	lsls	r1, r1, #16
 800175c:	0c09      	lsrs	r1, r1, #16
 800175e:	468c      	mov	ip, r1
 8001760:	0039      	movs	r1, r7
 8001762:	4359      	muls	r1, r3
 8001764:	4343      	muls	r3, r0
 8001766:	4370      	muls	r0, r6
 8001768:	437e      	muls	r6, r7
 800176a:	0c0f      	lsrs	r7, r1, #16
 800176c:	18f6      	adds	r6, r6, r3
 800176e:	0424      	lsls	r4, r4, #16
 8001770:	19be      	adds	r6, r7, r6
 8001772:	4464      	add	r4, ip
 8001774:	4442      	add	r2, r8
 8001776:	468c      	mov	ip, r1
 8001778:	42b3      	cmp	r3, r6
 800177a:	d903      	bls.n	8001784 <__aeabi_dmul+0x2a0>
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	025b      	lsls	r3, r3, #9
 8001780:	4698      	mov	r8, r3
 8001782:	4440      	add	r0, r8
 8001784:	9b02      	ldr	r3, [sp, #8]
 8001786:	4661      	mov	r1, ip
 8001788:	4698      	mov	r8, r3
 800178a:	9b04      	ldr	r3, [sp, #16]
 800178c:	0437      	lsls	r7, r6, #16
 800178e:	4443      	add	r3, r8
 8001790:	469b      	mov	fp, r3
 8001792:	45ab      	cmp	fp, r5
 8001794:	41ad      	sbcs	r5, r5
 8001796:	426b      	negs	r3, r5
 8001798:	040d      	lsls	r5, r1, #16
 800179a:	9905      	ldr	r1, [sp, #20]
 800179c:	0c2d      	lsrs	r5, r5, #16
 800179e:	468c      	mov	ip, r1
 80017a0:	197f      	adds	r7, r7, r5
 80017a2:	4467      	add	r7, ip
 80017a4:	18fd      	adds	r5, r7, r3
 80017a6:	46a8      	mov	r8, r5
 80017a8:	465d      	mov	r5, fp
 80017aa:	192d      	adds	r5, r5, r4
 80017ac:	42a5      	cmp	r5, r4
 80017ae:	41a4      	sbcs	r4, r4
 80017b0:	4693      	mov	fp, r2
 80017b2:	4264      	negs	r4, r4
 80017b4:	46a4      	mov	ip, r4
 80017b6:	44c3      	add	fp, r8
 80017b8:	44dc      	add	ip, fp
 80017ba:	428f      	cmp	r7, r1
 80017bc:	41bf      	sbcs	r7, r7
 80017be:	4598      	cmp	r8, r3
 80017c0:	419b      	sbcs	r3, r3
 80017c2:	4593      	cmp	fp, r2
 80017c4:	4192      	sbcs	r2, r2
 80017c6:	45a4      	cmp	ip, r4
 80017c8:	41a4      	sbcs	r4, r4
 80017ca:	425b      	negs	r3, r3
 80017cc:	427f      	negs	r7, r7
 80017ce:	431f      	orrs	r7, r3
 80017d0:	0c36      	lsrs	r6, r6, #16
 80017d2:	4252      	negs	r2, r2
 80017d4:	4264      	negs	r4, r4
 80017d6:	19bf      	adds	r7, r7, r6
 80017d8:	4322      	orrs	r2, r4
 80017da:	18bf      	adds	r7, r7, r2
 80017dc:	4662      	mov	r2, ip
 80017de:	1838      	adds	r0, r7, r0
 80017e0:	0243      	lsls	r3, r0, #9
 80017e2:	0dd2      	lsrs	r2, r2, #23
 80017e4:	9903      	ldr	r1, [sp, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	026a      	lsls	r2, r5, #9
 80017ea:	430a      	orrs	r2, r1
 80017ec:	1e50      	subs	r0, r2, #1
 80017ee:	4182      	sbcs	r2, r0
 80017f0:	4661      	mov	r1, ip
 80017f2:	0ded      	lsrs	r5, r5, #23
 80017f4:	432a      	orrs	r2, r5
 80017f6:	024e      	lsls	r6, r1, #9
 80017f8:	4332      	orrs	r2, r6
 80017fa:	01d9      	lsls	r1, r3, #7
 80017fc:	d400      	bmi.n	8001800 <__aeabi_dmul+0x31c>
 80017fe:	e0b3      	b.n	8001968 <__aeabi_dmul+0x484>
 8001800:	2601      	movs	r6, #1
 8001802:	0850      	lsrs	r0, r2, #1
 8001804:	4032      	ands	r2, r6
 8001806:	4302      	orrs	r2, r0
 8001808:	07de      	lsls	r6, r3, #31
 800180a:	4332      	orrs	r2, r6
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	4c22      	ldr	r4, [pc, #136]	; (8001898 <__aeabi_dmul+0x3b4>)
 8001810:	4454      	add	r4, sl
 8001812:	2c00      	cmp	r4, #0
 8001814:	dd62      	ble.n	80018dc <__aeabi_dmul+0x3f8>
 8001816:	0751      	lsls	r1, r2, #29
 8001818:	d009      	beq.n	800182e <__aeabi_dmul+0x34a>
 800181a:	200f      	movs	r0, #15
 800181c:	4010      	ands	r0, r2
 800181e:	2804      	cmp	r0, #4
 8001820:	d005      	beq.n	800182e <__aeabi_dmul+0x34a>
 8001822:	1d10      	adds	r0, r2, #4
 8001824:	4290      	cmp	r0, r2
 8001826:	4192      	sbcs	r2, r2
 8001828:	4252      	negs	r2, r2
 800182a:	189b      	adds	r3, r3, r2
 800182c:	0002      	movs	r2, r0
 800182e:	01d9      	lsls	r1, r3, #7
 8001830:	d504      	bpl.n	800183c <__aeabi_dmul+0x358>
 8001832:	2480      	movs	r4, #128	; 0x80
 8001834:	4819      	ldr	r0, [pc, #100]	; (800189c <__aeabi_dmul+0x3b8>)
 8001836:	00e4      	lsls	r4, r4, #3
 8001838:	4003      	ands	r3, r0
 800183a:	4454      	add	r4, sl
 800183c:	4818      	ldr	r0, [pc, #96]	; (80018a0 <__aeabi_dmul+0x3bc>)
 800183e:	4284      	cmp	r4, r0
 8001840:	dd00      	ble.n	8001844 <__aeabi_dmul+0x360>
 8001842:	e727      	b.n	8001694 <__aeabi_dmul+0x1b0>
 8001844:	075e      	lsls	r6, r3, #29
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	08d2      	lsrs	r2, r2, #3
 800184a:	0b1f      	lsrs	r7, r3, #12
 800184c:	0563      	lsls	r3, r4, #21
 800184e:	4316      	orrs	r6, r2
 8001850:	0d5b      	lsrs	r3, r3, #21
 8001852:	e6b2      	b.n	80015ba <__aeabi_dmul+0xd6>
 8001854:	2300      	movs	r3, #0
 8001856:	4699      	mov	r9, r3
 8001858:	3301      	adds	r3, #1
 800185a:	2704      	movs	r7, #4
 800185c:	2600      	movs	r6, #0
 800185e:	469b      	mov	fp, r3
 8001860:	e664      	b.n	800152c <__aeabi_dmul+0x48>
 8001862:	2303      	movs	r3, #3
 8001864:	9701      	str	r7, [sp, #4]
 8001866:	4681      	mov	r9, r0
 8001868:	270c      	movs	r7, #12
 800186a:	469b      	mov	fp, r3
 800186c:	e65e      	b.n	800152c <__aeabi_dmul+0x48>
 800186e:	2201      	movs	r2, #1
 8001870:	2001      	movs	r0, #1
 8001872:	4317      	orrs	r7, r2
 8001874:	2200      	movs	r2, #0
 8001876:	e676      	b.n	8001566 <__aeabi_dmul+0x82>
 8001878:	2303      	movs	r3, #3
 800187a:	2003      	movs	r0, #3
 800187c:	431f      	orrs	r7, r3
 800187e:	4643      	mov	r3, r8
 8001880:	e671      	b.n	8001566 <__aeabi_dmul+0x82>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	000007ff 	.word	0x000007ff
 8001888:	fffffc01 	.word	0xfffffc01
 800188c:	080085a8 	.word	0x080085a8
 8001890:	800fffff 	.word	0x800fffff
 8001894:	fffffc0d 	.word	0xfffffc0d
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	2300      	movs	r3, #0
 80018a6:	2780      	movs	r7, #128	; 0x80
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	033f      	lsls	r7, r7, #12
 80018ac:	2600      	movs	r6, #0
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <__aeabi_dmul+0x4d8>)
 80018b0:	e683      	b.n	80015ba <__aeabi_dmul+0xd6>
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	0032      	movs	r2, r6
 80018b6:	46a4      	mov	ip, r4
 80018b8:	4658      	mov	r0, fp
 80018ba:	e670      	b.n	800159e <__aeabi_dmul+0xba>
 80018bc:	46ac      	mov	ip, r5
 80018be:	e66e      	b.n	800159e <__aeabi_dmul+0xba>
 80018c0:	2780      	movs	r7, #128	; 0x80
 80018c2:	9901      	ldr	r1, [sp, #4]
 80018c4:	033f      	lsls	r7, r7, #12
 80018c6:	4239      	tst	r1, r7
 80018c8:	d02d      	beq.n	8001926 <__aeabi_dmul+0x442>
 80018ca:	423b      	tst	r3, r7
 80018cc:	d12b      	bne.n	8001926 <__aeabi_dmul+0x442>
 80018ce:	431f      	orrs	r7, r3
 80018d0:	033f      	lsls	r7, r7, #12
 80018d2:	0b3f      	lsrs	r7, r7, #12
 80018d4:	9500      	str	r5, [sp, #0]
 80018d6:	0016      	movs	r6, r2
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <__aeabi_dmul+0x4d8>)
 80018da:	e66e      	b.n	80015ba <__aeabi_dmul+0xd6>
 80018dc:	2501      	movs	r5, #1
 80018de:	1b2d      	subs	r5, r5, r4
 80018e0:	2d38      	cmp	r5, #56	; 0x38
 80018e2:	dd00      	ble.n	80018e6 <__aeabi_dmul+0x402>
 80018e4:	e666      	b.n	80015b4 <__aeabi_dmul+0xd0>
 80018e6:	2d1f      	cmp	r5, #31
 80018e8:	dc40      	bgt.n	800196c <__aeabi_dmul+0x488>
 80018ea:	4835      	ldr	r0, [pc, #212]	; (80019c0 <__aeabi_dmul+0x4dc>)
 80018ec:	001c      	movs	r4, r3
 80018ee:	4450      	add	r0, sl
 80018f0:	0016      	movs	r6, r2
 80018f2:	4082      	lsls	r2, r0
 80018f4:	4084      	lsls	r4, r0
 80018f6:	40ee      	lsrs	r6, r5
 80018f8:	1e50      	subs	r0, r2, #1
 80018fa:	4182      	sbcs	r2, r0
 80018fc:	4334      	orrs	r4, r6
 80018fe:	4314      	orrs	r4, r2
 8001900:	40eb      	lsrs	r3, r5
 8001902:	0762      	lsls	r2, r4, #29
 8001904:	d009      	beq.n	800191a <__aeabi_dmul+0x436>
 8001906:	220f      	movs	r2, #15
 8001908:	4022      	ands	r2, r4
 800190a:	2a04      	cmp	r2, #4
 800190c:	d005      	beq.n	800191a <__aeabi_dmul+0x436>
 800190e:	0022      	movs	r2, r4
 8001910:	1d14      	adds	r4, r2, #4
 8001912:	4294      	cmp	r4, r2
 8001914:	4180      	sbcs	r0, r0
 8001916:	4240      	negs	r0, r0
 8001918:	181b      	adds	r3, r3, r0
 800191a:	021a      	lsls	r2, r3, #8
 800191c:	d53e      	bpl.n	800199c <__aeabi_dmul+0x4b8>
 800191e:	2301      	movs	r3, #1
 8001920:	2700      	movs	r7, #0
 8001922:	2600      	movs	r6, #0
 8001924:	e649      	b.n	80015ba <__aeabi_dmul+0xd6>
 8001926:	2780      	movs	r7, #128	; 0x80
 8001928:	9b01      	ldr	r3, [sp, #4]
 800192a:	033f      	lsls	r7, r7, #12
 800192c:	431f      	orrs	r7, r3
 800192e:	033f      	lsls	r7, r7, #12
 8001930:	0b3f      	lsrs	r7, r7, #12
 8001932:	9400      	str	r4, [sp, #0]
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <__aeabi_dmul+0x4d8>)
 8001936:	e640      	b.n	80015ba <__aeabi_dmul+0xd6>
 8001938:	0003      	movs	r3, r0
 800193a:	465a      	mov	r2, fp
 800193c:	3b28      	subs	r3, #40	; 0x28
 800193e:	409a      	lsls	r2, r3
 8001940:	2600      	movs	r6, #0
 8001942:	9201      	str	r2, [sp, #4]
 8001944:	e66d      	b.n	8001622 <__aeabi_dmul+0x13e>
 8001946:	4658      	mov	r0, fp
 8001948:	f000 fbdc 	bl	8002104 <__clzsi2>
 800194c:	3020      	adds	r0, #32
 800194e:	e657      	b.n	8001600 <__aeabi_dmul+0x11c>
 8001950:	0003      	movs	r3, r0
 8001952:	4652      	mov	r2, sl
 8001954:	3b28      	subs	r3, #40	; 0x28
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	2200      	movs	r2, #0
 800195c:	e693      	b.n	8001686 <__aeabi_dmul+0x1a2>
 800195e:	4650      	mov	r0, sl
 8001960:	f000 fbd0 	bl	8002104 <__clzsi2>
 8001964:	3020      	adds	r0, #32
 8001966:	e67b      	b.n	8001660 <__aeabi_dmul+0x17c>
 8001968:	46ca      	mov	sl, r9
 800196a:	e750      	b.n	800180e <__aeabi_dmul+0x32a>
 800196c:	201f      	movs	r0, #31
 800196e:	001e      	movs	r6, r3
 8001970:	4240      	negs	r0, r0
 8001972:	1b04      	subs	r4, r0, r4
 8001974:	40e6      	lsrs	r6, r4
 8001976:	2d20      	cmp	r5, #32
 8001978:	d003      	beq.n	8001982 <__aeabi_dmul+0x49e>
 800197a:	4c12      	ldr	r4, [pc, #72]	; (80019c4 <__aeabi_dmul+0x4e0>)
 800197c:	4454      	add	r4, sl
 800197e:	40a3      	lsls	r3, r4
 8001980:	431a      	orrs	r2, r3
 8001982:	1e50      	subs	r0, r2, #1
 8001984:	4182      	sbcs	r2, r0
 8001986:	4332      	orrs	r2, r6
 8001988:	2607      	movs	r6, #7
 800198a:	2700      	movs	r7, #0
 800198c:	4016      	ands	r6, r2
 800198e:	d009      	beq.n	80019a4 <__aeabi_dmul+0x4c0>
 8001990:	200f      	movs	r0, #15
 8001992:	2300      	movs	r3, #0
 8001994:	4010      	ands	r0, r2
 8001996:	0014      	movs	r4, r2
 8001998:	2804      	cmp	r0, #4
 800199a:	d1b9      	bne.n	8001910 <__aeabi_dmul+0x42c>
 800199c:	0022      	movs	r2, r4
 800199e:	075e      	lsls	r6, r3, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	0b1f      	lsrs	r7, r3, #12
 80019a4:	08d2      	lsrs	r2, r2, #3
 80019a6:	4316      	orrs	r6, r2
 80019a8:	2300      	movs	r3, #0
 80019aa:	e606      	b.n	80015ba <__aeabi_dmul+0xd6>
 80019ac:	2780      	movs	r7, #128	; 0x80
 80019ae:	033f      	lsls	r7, r7, #12
 80019b0:	431f      	orrs	r7, r3
 80019b2:	033f      	lsls	r7, r7, #12
 80019b4:	0b3f      	lsrs	r7, r7, #12
 80019b6:	0016      	movs	r6, r2
 80019b8:	4b00      	ldr	r3, [pc, #0]	; (80019bc <__aeabi_dmul+0x4d8>)
 80019ba:	e5fe      	b.n	80015ba <__aeabi_dmul+0xd6>
 80019bc:	000007ff 	.word	0x000007ff
 80019c0:	0000041e 	.word	0x0000041e
 80019c4:	0000043e 	.word	0x0000043e

080019c8 <__aeabi_dsub>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	4657      	mov	r7, sl
 80019cc:	464e      	mov	r6, r9
 80019ce:	4645      	mov	r5, r8
 80019d0:	46de      	mov	lr, fp
 80019d2:	000c      	movs	r4, r1
 80019d4:	0309      	lsls	r1, r1, #12
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	0a49      	lsrs	r1, r1, #9
 80019da:	0f46      	lsrs	r6, r0, #29
 80019dc:	005f      	lsls	r7, r3, #1
 80019de:	4331      	orrs	r1, r6
 80019e0:	031e      	lsls	r6, r3, #12
 80019e2:	0fdb      	lsrs	r3, r3, #31
 80019e4:	0a76      	lsrs	r6, r6, #9
 80019e6:	469b      	mov	fp, r3
 80019e8:	0f53      	lsrs	r3, r2, #29
 80019ea:	4333      	orrs	r3, r6
 80019ec:	4ec8      	ldr	r6, [pc, #800]	; (8001d10 <__aeabi_dsub+0x348>)
 80019ee:	0065      	lsls	r5, r4, #1
 80019f0:	00c0      	lsls	r0, r0, #3
 80019f2:	0fe4      	lsrs	r4, r4, #31
 80019f4:	00d2      	lsls	r2, r2, #3
 80019f6:	0d6d      	lsrs	r5, r5, #21
 80019f8:	46a2      	mov	sl, r4
 80019fa:	4681      	mov	r9, r0
 80019fc:	0d7f      	lsrs	r7, r7, #21
 80019fe:	469c      	mov	ip, r3
 8001a00:	4690      	mov	r8, r2
 8001a02:	42b7      	cmp	r7, r6
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x40>
 8001a06:	e0b9      	b.n	8001b7c <__aeabi_dsub+0x1b4>
 8001a08:	465b      	mov	r3, fp
 8001a0a:	2601      	movs	r6, #1
 8001a0c:	4073      	eors	r3, r6
 8001a0e:	469b      	mov	fp, r3
 8001a10:	1bee      	subs	r6, r5, r7
 8001a12:	45a3      	cmp	fp, r4
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x50>
 8001a16:	e083      	b.n	8001b20 <__aeabi_dsub+0x158>
 8001a18:	2e00      	cmp	r6, #0
 8001a1a:	dd63      	ble.n	8001ae4 <__aeabi_dsub+0x11c>
 8001a1c:	2f00      	cmp	r7, #0
 8001a1e:	d000      	beq.n	8001a22 <__aeabi_dsub+0x5a>
 8001a20:	e0b1      	b.n	8001b86 <__aeabi_dsub+0x1be>
 8001a22:	4663      	mov	r3, ip
 8001a24:	4313      	orrs	r3, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x62>
 8001a28:	e123      	b.n	8001c72 <__aeabi_dsub+0x2aa>
 8001a2a:	1e73      	subs	r3, r6, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d000      	beq.n	8001a32 <__aeabi_dsub+0x6a>
 8001a30:	e1ba      	b.n	8001da8 <__aeabi_dsub+0x3e0>
 8001a32:	1a86      	subs	r6, r0, r2
 8001a34:	4663      	mov	r3, ip
 8001a36:	42b0      	cmp	r0, r6
 8001a38:	4180      	sbcs	r0, r0
 8001a3a:	2501      	movs	r5, #1
 8001a3c:	1ac9      	subs	r1, r1, r3
 8001a3e:	4240      	negs	r0, r0
 8001a40:	1a09      	subs	r1, r1, r0
 8001a42:	020b      	lsls	r3, r1, #8
 8001a44:	d400      	bmi.n	8001a48 <__aeabi_dsub+0x80>
 8001a46:	e147      	b.n	8001cd8 <__aeabi_dsub+0x310>
 8001a48:	0249      	lsls	r1, r1, #9
 8001a4a:	0a4b      	lsrs	r3, r1, #9
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	4643      	mov	r3, r8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x8e>
 8001a54:	e189      	b.n	8001d6a <__aeabi_dsub+0x3a2>
 8001a56:	4640      	mov	r0, r8
 8001a58:	f000 fb54 	bl	8002104 <__clzsi2>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	3b08      	subs	r3, #8
 8001a60:	2b1f      	cmp	r3, #31
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dsub+0x9e>
 8001a64:	e17c      	b.n	8001d60 <__aeabi_dsub+0x398>
 8001a66:	2220      	movs	r2, #32
 8001a68:	0030      	movs	r0, r6
 8001a6a:	1ad2      	subs	r2, r2, r3
 8001a6c:	4641      	mov	r1, r8
 8001a6e:	40d0      	lsrs	r0, r2
 8001a70:	4099      	lsls	r1, r3
 8001a72:	0002      	movs	r2, r0
 8001a74:	409e      	lsls	r6, r3
 8001a76:	430a      	orrs	r2, r1
 8001a78:	429d      	cmp	r5, r3
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dsub+0xb6>
 8001a7c:	e16a      	b.n	8001d54 <__aeabi_dsub+0x38c>
 8001a7e:	1b5d      	subs	r5, r3, r5
 8001a80:	1c6b      	adds	r3, r5, #1
 8001a82:	2b1f      	cmp	r3, #31
 8001a84:	dd00      	ble.n	8001a88 <__aeabi_dsub+0xc0>
 8001a86:	e194      	b.n	8001db2 <__aeabi_dsub+0x3ea>
 8001a88:	2120      	movs	r1, #32
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	0035      	movs	r5, r6
 8001a8e:	1ac9      	subs	r1, r1, r3
 8001a90:	408e      	lsls	r6, r1
 8001a92:	40da      	lsrs	r2, r3
 8001a94:	4088      	lsls	r0, r1
 8001a96:	40dd      	lsrs	r5, r3
 8001a98:	1e71      	subs	r1, r6, #1
 8001a9a:	418e      	sbcs	r6, r1
 8001a9c:	0011      	movs	r1, r2
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	4328      	orrs	r0, r5
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	4306      	orrs	r6, r0
 8001aa6:	4032      	ands	r2, r6
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d009      	beq.n	8001ac0 <__aeabi_dsub+0xf8>
 8001aac:	230f      	movs	r3, #15
 8001aae:	4033      	ands	r3, r6
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d005      	beq.n	8001ac0 <__aeabi_dsub+0xf8>
 8001ab4:	1d33      	adds	r3, r6, #4
 8001ab6:	42b3      	cmp	r3, r6
 8001ab8:	41b6      	sbcs	r6, r6
 8001aba:	4276      	negs	r6, r6
 8001abc:	1989      	adds	r1, r1, r6
 8001abe:	001e      	movs	r6, r3
 8001ac0:	020b      	lsls	r3, r1, #8
 8001ac2:	d400      	bmi.n	8001ac6 <__aeabi_dsub+0xfe>
 8001ac4:	e23d      	b.n	8001f42 <__aeabi_dsub+0x57a>
 8001ac6:	1c6a      	adds	r2, r5, #1
 8001ac8:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <__aeabi_dsub+0x348>)
 8001aca:	0555      	lsls	r5, r2, #21
 8001acc:	0d6d      	lsrs	r5, r5, #21
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x10c>
 8001ad2:	e119      	b.n	8001d08 <__aeabi_dsub+0x340>
 8001ad4:	4a8f      	ldr	r2, [pc, #572]	; (8001d14 <__aeabi_dsub+0x34c>)
 8001ad6:	08f6      	lsrs	r6, r6, #3
 8001ad8:	400a      	ands	r2, r1
 8001ada:	0757      	lsls	r7, r2, #29
 8001adc:	0252      	lsls	r2, r2, #9
 8001ade:	4337      	orrs	r7, r6
 8001ae0:	0b12      	lsrs	r2, r2, #12
 8001ae2:	e09b      	b.n	8001c1c <__aeabi_dsub+0x254>
 8001ae4:	2e00      	cmp	r6, #0
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dsub+0x122>
 8001ae8:	e0c5      	b.n	8001c76 <__aeabi_dsub+0x2ae>
 8001aea:	1c6e      	adds	r6, r5, #1
 8001aec:	0576      	lsls	r6, r6, #21
 8001aee:	0d76      	lsrs	r6, r6, #21
 8001af0:	2e01      	cmp	r6, #1
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dsub+0x12e>
 8001af4:	e148      	b.n	8001d88 <__aeabi_dsub+0x3c0>
 8001af6:	4667      	mov	r7, ip
 8001af8:	1a86      	subs	r6, r0, r2
 8001afa:	1bcb      	subs	r3, r1, r7
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	41bf      	sbcs	r7, r7
 8001b00:	427f      	negs	r7, r7
 8001b02:	46b8      	mov	r8, r7
 8001b04:	001f      	movs	r7, r3
 8001b06:	4643      	mov	r3, r8
 8001b08:	1aff      	subs	r7, r7, r3
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	46b8      	mov	r8, r7
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	d500      	bpl.n	8001b14 <__aeabi_dsub+0x14c>
 8001b12:	e15f      	b.n	8001dd4 <__aeabi_dsub+0x40c>
 8001b14:	4337      	orrs	r7, r6
 8001b16:	d19a      	bne.n	8001a4e <__aeabi_dsub+0x86>
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2400      	movs	r4, #0
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	e079      	b.n	8001c14 <__aeabi_dsub+0x24c>
 8001b20:	2e00      	cmp	r6, #0
 8001b22:	dc00      	bgt.n	8001b26 <__aeabi_dsub+0x15e>
 8001b24:	e0fa      	b.n	8001d1c <__aeabi_dsub+0x354>
 8001b26:	2f00      	cmp	r7, #0
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x164>
 8001b2a:	e08d      	b.n	8001c48 <__aeabi_dsub+0x280>
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <__aeabi_dsub+0x348>)
 8001b2e:	429d      	cmp	r5, r3
 8001b30:	d067      	beq.n	8001c02 <__aeabi_dsub+0x23a>
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	4667      	mov	r7, ip
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	431f      	orrs	r7, r3
 8001b3a:	46bc      	mov	ip, r7
 8001b3c:	2e38      	cmp	r6, #56	; 0x38
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_dsub+0x17a>
 8001b40:	e152      	b.n	8001de8 <__aeabi_dsub+0x420>
 8001b42:	4663      	mov	r3, ip
 8001b44:	4313      	orrs	r3, r2
 8001b46:	1e5a      	subs	r2, r3, #1
 8001b48:	4193      	sbcs	r3, r2
 8001b4a:	181e      	adds	r6, r3, r0
 8001b4c:	4286      	cmp	r6, r0
 8001b4e:	4180      	sbcs	r0, r0
 8001b50:	4240      	negs	r0, r0
 8001b52:	1809      	adds	r1, r1, r0
 8001b54:	020b      	lsls	r3, r1, #8
 8001b56:	d400      	bmi.n	8001b5a <__aeabi_dsub+0x192>
 8001b58:	e0be      	b.n	8001cd8 <__aeabi_dsub+0x310>
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <__aeabi_dsub+0x348>)
 8001b5c:	3501      	adds	r5, #1
 8001b5e:	429d      	cmp	r5, r3
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x19c>
 8001b62:	e0d2      	b.n	8001d0a <__aeabi_dsub+0x342>
 8001b64:	4a6b      	ldr	r2, [pc, #428]	; (8001d14 <__aeabi_dsub+0x34c>)
 8001b66:	0873      	lsrs	r3, r6, #1
 8001b68:	400a      	ands	r2, r1
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	400e      	ands	r6, r1
 8001b6e:	431e      	orrs	r6, r3
 8001b70:	0851      	lsrs	r1, r2, #1
 8001b72:	07d3      	lsls	r3, r2, #31
 8001b74:	2207      	movs	r2, #7
 8001b76:	431e      	orrs	r6, r3
 8001b78:	4032      	ands	r2, r6
 8001b7a:	e795      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001b7c:	001e      	movs	r6, r3
 8001b7e:	4316      	orrs	r6, r2
 8001b80:	d000      	beq.n	8001b84 <__aeabi_dsub+0x1bc>
 8001b82:	e745      	b.n	8001a10 <__aeabi_dsub+0x48>
 8001b84:	e740      	b.n	8001a08 <__aeabi_dsub+0x40>
 8001b86:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <__aeabi_dsub+0x348>)
 8001b88:	429d      	cmp	r5, r3
 8001b8a:	d03a      	beq.n	8001c02 <__aeabi_dsub+0x23a>
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	4667      	mov	r7, ip
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	431f      	orrs	r7, r3
 8001b94:	46bc      	mov	ip, r7
 8001b96:	2e38      	cmp	r6, #56	; 0x38
 8001b98:	dd00      	ble.n	8001b9c <__aeabi_dsub+0x1d4>
 8001b9a:	e0eb      	b.n	8001d74 <__aeabi_dsub+0x3ac>
 8001b9c:	2e1f      	cmp	r6, #31
 8001b9e:	dc00      	bgt.n	8001ba2 <__aeabi_dsub+0x1da>
 8001ba0:	e13a      	b.n	8001e18 <__aeabi_dsub+0x450>
 8001ba2:	0033      	movs	r3, r6
 8001ba4:	4667      	mov	r7, ip
 8001ba6:	3b20      	subs	r3, #32
 8001ba8:	40df      	lsrs	r7, r3
 8001baa:	003b      	movs	r3, r7
 8001bac:	2e20      	cmp	r6, #32
 8001bae:	d005      	beq.n	8001bbc <__aeabi_dsub+0x1f4>
 8001bb0:	2740      	movs	r7, #64	; 0x40
 8001bb2:	1bbf      	subs	r7, r7, r6
 8001bb4:	4666      	mov	r6, ip
 8001bb6:	40be      	lsls	r6, r7
 8001bb8:	4332      	orrs	r2, r6
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4646      	mov	r6, r8
 8001bbe:	1e72      	subs	r2, r6, #1
 8001bc0:	4196      	sbcs	r6, r2
 8001bc2:	4333      	orrs	r3, r6
 8001bc4:	e0da      	b.n	8001d7c <__aeabi_dsub+0x3b4>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x204>
 8001bca:	e214      	b.n	8001ff6 <__aeabi_dsub+0x62e>
 8001bcc:	4663      	mov	r3, ip
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x20c>
 8001bd2:	e168      	b.n	8001ea6 <__aeabi_dsub+0x4de>
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	074e      	lsls	r6, r1, #29
 8001bd8:	08c0      	lsrs	r0, r0, #3
 8001bda:	08c9      	lsrs	r1, r1, #3
 8001bdc:	031b      	lsls	r3, r3, #12
 8001bde:	4306      	orrs	r6, r0
 8001be0:	4219      	tst	r1, r3
 8001be2:	d008      	beq.n	8001bf6 <__aeabi_dsub+0x22e>
 8001be4:	4660      	mov	r0, ip
 8001be6:	08c0      	lsrs	r0, r0, #3
 8001be8:	4218      	tst	r0, r3
 8001bea:	d104      	bne.n	8001bf6 <__aeabi_dsub+0x22e>
 8001bec:	4663      	mov	r3, ip
 8001bee:	0001      	movs	r1, r0
 8001bf0:	08d2      	lsrs	r2, r2, #3
 8001bf2:	075e      	lsls	r6, r3, #29
 8001bf4:	4316      	orrs	r6, r2
 8001bf6:	00f3      	lsls	r3, r6, #3
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	00c9      	lsls	r1, r1, #3
 8001bfc:	0f72      	lsrs	r2, r6, #29
 8001bfe:	4d44      	ldr	r5, [pc, #272]	; (8001d10 <__aeabi_dsub+0x348>)
 8001c00:	4311      	orrs	r1, r2
 8001c02:	464b      	mov	r3, r9
 8001c04:	08de      	lsrs	r6, r3, #3
 8001c06:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <__aeabi_dsub+0x348>)
 8001c08:	074f      	lsls	r7, r1, #29
 8001c0a:	4337      	orrs	r7, r6
 8001c0c:	08ca      	lsrs	r2, r1, #3
 8001c0e:	429d      	cmp	r5, r3
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x24c>
 8001c12:	e06e      	b.n	8001cf2 <__aeabi_dsub+0x32a>
 8001c14:	0312      	lsls	r2, r2, #12
 8001c16:	056d      	lsls	r5, r5, #21
 8001c18:	0b12      	lsrs	r2, r2, #12
 8001c1a:	0d6d      	lsrs	r5, r5, #21
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	0312      	lsls	r2, r2, #12
 8001c20:	0b13      	lsrs	r3, r2, #12
 8001c22:	0d0a      	lsrs	r2, r1, #20
 8001c24:	0512      	lsls	r2, r2, #20
 8001c26:	431a      	orrs	r2, r3
 8001c28:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <__aeabi_dsub+0x350>)
 8001c2a:	052d      	lsls	r5, r5, #20
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	432b      	orrs	r3, r5
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	07e4      	lsls	r4, r4, #31
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	4323      	orrs	r3, r4
 8001c38:	0038      	movs	r0, r7
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	bc3c      	pop	{r2, r3, r4, r5}
 8001c3e:	4690      	mov	r8, r2
 8001c40:	4699      	mov	r9, r3
 8001c42:	46a2      	mov	sl, r4
 8001c44:	46ab      	mov	fp, r5
 8001c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c48:	4663      	mov	r3, ip
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	d011      	beq.n	8001c72 <__aeabi_dsub+0x2aa>
 8001c4e:	1e73      	subs	r3, r6, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d000      	beq.n	8001c56 <__aeabi_dsub+0x28e>
 8001c54:	e107      	b.n	8001e66 <__aeabi_dsub+0x49e>
 8001c56:	1886      	adds	r6, r0, r2
 8001c58:	4286      	cmp	r6, r0
 8001c5a:	4180      	sbcs	r0, r0
 8001c5c:	4461      	add	r1, ip
 8001c5e:	4240      	negs	r0, r0
 8001c60:	1809      	adds	r1, r1, r0
 8001c62:	2501      	movs	r5, #1
 8001c64:	020b      	lsls	r3, r1, #8
 8001c66:	d537      	bpl.n	8001cd8 <__aeabi_dsub+0x310>
 8001c68:	2502      	movs	r5, #2
 8001c6a:	e77b      	b.n	8001b64 <__aeabi_dsub+0x19c>
 8001c6c:	003e      	movs	r6, r7
 8001c6e:	4661      	mov	r1, ip
 8001c70:	4691      	mov	r9, r2
 8001c72:	0035      	movs	r5, r6
 8001c74:	e7c5      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001c76:	465c      	mov	r4, fp
 8001c78:	2d00      	cmp	r5, #0
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x2b6>
 8001c7c:	e0e1      	b.n	8001e42 <__aeabi_dsub+0x47a>
 8001c7e:	000b      	movs	r3, r1
 8001c80:	4303      	orrs	r3, r0
 8001c82:	d0f3      	beq.n	8001c6c <__aeabi_dsub+0x2a4>
 8001c84:	1c73      	adds	r3, r6, #1
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x2c2>
 8001c88:	e1ac      	b.n	8001fe4 <__aeabi_dsub+0x61c>
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <__aeabi_dsub+0x348>)
 8001c8c:	429f      	cmp	r7, r3
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x2ca>
 8001c90:	e13a      	b.n	8001f08 <__aeabi_dsub+0x540>
 8001c92:	43f3      	mvns	r3, r6
 8001c94:	2b38      	cmp	r3, #56	; 0x38
 8001c96:	dd00      	ble.n	8001c9a <__aeabi_dsub+0x2d2>
 8001c98:	e16f      	b.n	8001f7a <__aeabi_dsub+0x5b2>
 8001c9a:	2b1f      	cmp	r3, #31
 8001c9c:	dd00      	ble.n	8001ca0 <__aeabi_dsub+0x2d8>
 8001c9e:	e18c      	b.n	8001fba <__aeabi_dsub+0x5f2>
 8001ca0:	2520      	movs	r5, #32
 8001ca2:	000e      	movs	r6, r1
 8001ca4:	1aed      	subs	r5, r5, r3
 8001ca6:	40ae      	lsls	r6, r5
 8001ca8:	46b0      	mov	r8, r6
 8001caa:	0006      	movs	r6, r0
 8001cac:	46aa      	mov	sl, r5
 8001cae:	40de      	lsrs	r6, r3
 8001cb0:	4645      	mov	r5, r8
 8001cb2:	4335      	orrs	r5, r6
 8001cb4:	002e      	movs	r6, r5
 8001cb6:	4655      	mov	r5, sl
 8001cb8:	40d9      	lsrs	r1, r3
 8001cba:	40a8      	lsls	r0, r5
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	1e45      	subs	r5, r0, #1
 8001cc0:	41a8      	sbcs	r0, r5
 8001cc2:	1a5b      	subs	r3, r3, r1
 8001cc4:	469c      	mov	ip, r3
 8001cc6:	4330      	orrs	r0, r6
 8001cc8:	1a16      	subs	r6, r2, r0
 8001cca:	42b2      	cmp	r2, r6
 8001ccc:	4192      	sbcs	r2, r2
 8001cce:	4663      	mov	r3, ip
 8001cd0:	4252      	negs	r2, r2
 8001cd2:	1a99      	subs	r1, r3, r2
 8001cd4:	003d      	movs	r5, r7
 8001cd6:	e6b4      	b.n	8001a42 <__aeabi_dsub+0x7a>
 8001cd8:	2207      	movs	r2, #7
 8001cda:	4032      	ands	r2, r6
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d000      	beq.n	8001ce2 <__aeabi_dsub+0x31a>
 8001ce0:	e6e4      	b.n	8001aac <__aeabi_dsub+0xe4>
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <__aeabi_dsub+0x348>)
 8001ce4:	08f6      	lsrs	r6, r6, #3
 8001ce6:	074f      	lsls	r7, r1, #29
 8001ce8:	4337      	orrs	r7, r6
 8001cea:	08ca      	lsrs	r2, r1, #3
 8001cec:	429d      	cmp	r5, r3
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_dsub+0x32a>
 8001cf0:	e790      	b.n	8001c14 <__aeabi_dsub+0x24c>
 8001cf2:	003b      	movs	r3, r7
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dsub+0x332>
 8001cf8:	e1a6      	b.n	8002048 <__aeabi_dsub+0x680>
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	031b      	lsls	r3, r3, #12
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	0312      	lsls	r2, r2, #12
 8001d02:	0b12      	lsrs	r2, r2, #12
 8001d04:	4d02      	ldr	r5, [pc, #8]	; (8001d10 <__aeabi_dsub+0x348>)
 8001d06:	e789      	b.n	8001c1c <__aeabi_dsub+0x254>
 8001d08:	0015      	movs	r5, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	e785      	b.n	8001c1c <__aeabi_dsub+0x254>
 8001d10:	000007ff 	.word	0x000007ff
 8001d14:	ff7fffff 	.word	0xff7fffff
 8001d18:	800fffff 	.word	0x800fffff
 8001d1c:	2e00      	cmp	r6, #0
 8001d1e:	d000      	beq.n	8001d22 <__aeabi_dsub+0x35a>
 8001d20:	e0c7      	b.n	8001eb2 <__aeabi_dsub+0x4ea>
 8001d22:	1c6b      	adds	r3, r5, #1
 8001d24:	055e      	lsls	r6, r3, #21
 8001d26:	0d76      	lsrs	r6, r6, #21
 8001d28:	2e01      	cmp	r6, #1
 8001d2a:	dc00      	bgt.n	8001d2e <__aeabi_dsub+0x366>
 8001d2c:	e0f0      	b.n	8001f10 <__aeabi_dsub+0x548>
 8001d2e:	4dc8      	ldr	r5, [pc, #800]	; (8002050 <__aeabi_dsub+0x688>)
 8001d30:	42ab      	cmp	r3, r5
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dsub+0x36e>
 8001d34:	e0b9      	b.n	8001eaa <__aeabi_dsub+0x4e2>
 8001d36:	1885      	adds	r5, r0, r2
 8001d38:	000a      	movs	r2, r1
 8001d3a:	4285      	cmp	r5, r0
 8001d3c:	4189      	sbcs	r1, r1
 8001d3e:	4462      	add	r2, ip
 8001d40:	4249      	negs	r1, r1
 8001d42:	1851      	adds	r1, r2, r1
 8001d44:	2207      	movs	r2, #7
 8001d46:	07ce      	lsls	r6, r1, #31
 8001d48:	086d      	lsrs	r5, r5, #1
 8001d4a:	432e      	orrs	r6, r5
 8001d4c:	0849      	lsrs	r1, r1, #1
 8001d4e:	4032      	ands	r2, r6
 8001d50:	001d      	movs	r5, r3
 8001d52:	e6a9      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001d54:	49bf      	ldr	r1, [pc, #764]	; (8002054 <__aeabi_dsub+0x68c>)
 8001d56:	1aed      	subs	r5, r5, r3
 8001d58:	4011      	ands	r1, r2
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	4032      	ands	r2, r6
 8001d5e:	e6a3      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001d60:	0032      	movs	r2, r6
 8001d62:	3828      	subs	r0, #40	; 0x28
 8001d64:	4082      	lsls	r2, r0
 8001d66:	2600      	movs	r6, #0
 8001d68:	e686      	b.n	8001a78 <__aeabi_dsub+0xb0>
 8001d6a:	0030      	movs	r0, r6
 8001d6c:	f000 f9ca 	bl	8002104 <__clzsi2>
 8001d70:	3020      	adds	r0, #32
 8001d72:	e673      	b.n	8001a5c <__aeabi_dsub+0x94>
 8001d74:	4663      	mov	r3, ip
 8001d76:	4313      	orrs	r3, r2
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	4193      	sbcs	r3, r2
 8001d7c:	1ac6      	subs	r6, r0, r3
 8001d7e:	42b0      	cmp	r0, r6
 8001d80:	4180      	sbcs	r0, r0
 8001d82:	4240      	negs	r0, r0
 8001d84:	1a09      	subs	r1, r1, r0
 8001d86:	e65c      	b.n	8001a42 <__aeabi_dsub+0x7a>
 8001d88:	000e      	movs	r6, r1
 8001d8a:	4667      	mov	r7, ip
 8001d8c:	4306      	orrs	r6, r0
 8001d8e:	4317      	orrs	r7, r2
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	d15e      	bne.n	8001e52 <__aeabi_dsub+0x48a>
 8001d94:	2e00      	cmp	r6, #0
 8001d96:	d000      	beq.n	8001d9a <__aeabi_dsub+0x3d2>
 8001d98:	e0f3      	b.n	8001f82 <__aeabi_dsub+0x5ba>
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x3d8>
 8001d9e:	e11e      	b.n	8001fde <__aeabi_dsub+0x616>
 8001da0:	465c      	mov	r4, fp
 8001da2:	4661      	mov	r1, ip
 8001da4:	4691      	mov	r9, r2
 8001da6:	e72c      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001da8:	4fa9      	ldr	r7, [pc, #676]	; (8002050 <__aeabi_dsub+0x688>)
 8001daa:	42be      	cmp	r6, r7
 8001dac:	d07b      	beq.n	8001ea6 <__aeabi_dsub+0x4de>
 8001dae:	001e      	movs	r6, r3
 8001db0:	e6f1      	b.n	8001b96 <__aeabi_dsub+0x1ce>
 8001db2:	0010      	movs	r0, r2
 8001db4:	3d1f      	subs	r5, #31
 8001db6:	40e8      	lsrs	r0, r5
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d003      	beq.n	8001dc4 <__aeabi_dsub+0x3fc>
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	4316      	orrs	r6, r2
 8001dc4:	1e73      	subs	r3, r6, #1
 8001dc6:	419e      	sbcs	r6, r3
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4306      	orrs	r6, r0
 8001dcc:	4032      	ands	r2, r6
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	e783      	b.n	8001cdc <__aeabi_dsub+0x314>
 8001dd4:	1a16      	subs	r6, r2, r0
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	42b2      	cmp	r2, r6
 8001dda:	4180      	sbcs	r0, r0
 8001ddc:	1a59      	subs	r1, r3, r1
 8001dde:	4240      	negs	r0, r0
 8001de0:	1a0b      	subs	r3, r1, r0
 8001de2:	4698      	mov	r8, r3
 8001de4:	465c      	mov	r4, fp
 8001de6:	e632      	b.n	8001a4e <__aeabi_dsub+0x86>
 8001de8:	2e1f      	cmp	r6, #31
 8001dea:	dd00      	ble.n	8001dee <__aeabi_dsub+0x426>
 8001dec:	e0ab      	b.n	8001f46 <__aeabi_dsub+0x57e>
 8001dee:	2720      	movs	r7, #32
 8001df0:	1bbb      	subs	r3, r7, r6
 8001df2:	469a      	mov	sl, r3
 8001df4:	4663      	mov	r3, ip
 8001df6:	4657      	mov	r7, sl
 8001df8:	40bb      	lsls	r3, r7
 8001dfa:	4699      	mov	r9, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	464f      	mov	r7, r9
 8001e00:	40f3      	lsrs	r3, r6
 8001e02:	431f      	orrs	r7, r3
 8001e04:	003b      	movs	r3, r7
 8001e06:	4657      	mov	r7, sl
 8001e08:	40ba      	lsls	r2, r7
 8001e0a:	1e57      	subs	r7, r2, #1
 8001e0c:	41ba      	sbcs	r2, r7
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	4662      	mov	r2, ip
 8001e12:	40f2      	lsrs	r2, r6
 8001e14:	1889      	adds	r1, r1, r2
 8001e16:	e698      	b.n	8001b4a <__aeabi_dsub+0x182>
 8001e18:	2720      	movs	r7, #32
 8001e1a:	1bbb      	subs	r3, r7, r6
 8001e1c:	469a      	mov	sl, r3
 8001e1e:	4663      	mov	r3, ip
 8001e20:	4657      	mov	r7, sl
 8001e22:	40bb      	lsls	r3, r7
 8001e24:	4699      	mov	r9, r3
 8001e26:	0013      	movs	r3, r2
 8001e28:	464f      	mov	r7, r9
 8001e2a:	40f3      	lsrs	r3, r6
 8001e2c:	431f      	orrs	r7, r3
 8001e2e:	003b      	movs	r3, r7
 8001e30:	4657      	mov	r7, sl
 8001e32:	40ba      	lsls	r2, r7
 8001e34:	1e57      	subs	r7, r2, #1
 8001e36:	41ba      	sbcs	r2, r7
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	4662      	mov	r2, ip
 8001e3c:	40f2      	lsrs	r2, r6
 8001e3e:	1a89      	subs	r1, r1, r2
 8001e40:	e79c      	b.n	8001d7c <__aeabi_dsub+0x3b4>
 8001e42:	4b83      	ldr	r3, [pc, #524]	; (8002050 <__aeabi_dsub+0x688>)
 8001e44:	429f      	cmp	r7, r3
 8001e46:	d05f      	beq.n	8001f08 <__aeabi_dsub+0x540>
 8001e48:	2580      	movs	r5, #128	; 0x80
 8001e4a:	042d      	lsls	r5, r5, #16
 8001e4c:	4273      	negs	r3, r6
 8001e4e:	4329      	orrs	r1, r5
 8001e50:	e720      	b.n	8001c94 <__aeabi_dsub+0x2cc>
 8001e52:	2e00      	cmp	r6, #0
 8001e54:	d10c      	bne.n	8001e70 <__aeabi_dsub+0x4a8>
 8001e56:	2f00      	cmp	r7, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x494>
 8001e5a:	e0d0      	b.n	8001ffe <__aeabi_dsub+0x636>
 8001e5c:	465c      	mov	r4, fp
 8001e5e:	4661      	mov	r1, ip
 8001e60:	4691      	mov	r9, r2
 8001e62:	4d7b      	ldr	r5, [pc, #492]	; (8002050 <__aeabi_dsub+0x688>)
 8001e64:	e6cd      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001e66:	4f7a      	ldr	r7, [pc, #488]	; (8002050 <__aeabi_dsub+0x688>)
 8001e68:	42be      	cmp	r6, r7
 8001e6a:	d01c      	beq.n	8001ea6 <__aeabi_dsub+0x4de>
 8001e6c:	001e      	movs	r6, r3
 8001e6e:	e665      	b.n	8001b3c <__aeabi_dsub+0x174>
 8001e70:	2f00      	cmp	r7, #0
 8001e72:	d018      	beq.n	8001ea6 <__aeabi_dsub+0x4de>
 8001e74:	08c0      	lsrs	r0, r0, #3
 8001e76:	074e      	lsls	r6, r1, #29
 8001e78:	4306      	orrs	r6, r0
 8001e7a:	2080      	movs	r0, #128	; 0x80
 8001e7c:	08c9      	lsrs	r1, r1, #3
 8001e7e:	0300      	lsls	r0, r0, #12
 8001e80:	4201      	tst	r1, r0
 8001e82:	d008      	beq.n	8001e96 <__aeabi_dsub+0x4ce>
 8001e84:	4663      	mov	r3, ip
 8001e86:	08dc      	lsrs	r4, r3, #3
 8001e88:	4204      	tst	r4, r0
 8001e8a:	d104      	bne.n	8001e96 <__aeabi_dsub+0x4ce>
 8001e8c:	0021      	movs	r1, r4
 8001e8e:	46da      	mov	sl, fp
 8001e90:	08d2      	lsrs	r2, r2, #3
 8001e92:	075e      	lsls	r6, r3, #29
 8001e94:	4316      	orrs	r6, r2
 8001e96:	00f3      	lsls	r3, r6, #3
 8001e98:	4699      	mov	r9, r3
 8001e9a:	2401      	movs	r4, #1
 8001e9c:	4653      	mov	r3, sl
 8001e9e:	00c9      	lsls	r1, r1, #3
 8001ea0:	0f72      	lsrs	r2, r6, #29
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	401c      	ands	r4, r3
 8001ea6:	4d6a      	ldr	r5, [pc, #424]	; (8002050 <__aeabi_dsub+0x688>)
 8001ea8:	e6ab      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001eaa:	001d      	movs	r5, r3
 8001eac:	2200      	movs	r2, #0
 8001eae:	2700      	movs	r7, #0
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dsub+0x254>
 8001eb2:	2d00      	cmp	r5, #0
 8001eb4:	d159      	bne.n	8001f6a <__aeabi_dsub+0x5a2>
 8001eb6:	000b      	movs	r3, r1
 8001eb8:	4303      	orrs	r3, r0
 8001eba:	d100      	bne.n	8001ebe <__aeabi_dsub+0x4f6>
 8001ebc:	e6d6      	b.n	8001c6c <__aeabi_dsub+0x2a4>
 8001ebe:	1c73      	adds	r3, r6, #1
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x4fc>
 8001ec2:	e0b2      	b.n	800202a <__aeabi_dsub+0x662>
 8001ec4:	4b62      	ldr	r3, [pc, #392]	; (8002050 <__aeabi_dsub+0x688>)
 8001ec6:	429f      	cmp	r7, r3
 8001ec8:	d01e      	beq.n	8001f08 <__aeabi_dsub+0x540>
 8001eca:	43f3      	mvns	r3, r6
 8001ecc:	2b38      	cmp	r3, #56	; 0x38
 8001ece:	dc6f      	bgt.n	8001fb0 <__aeabi_dsub+0x5e8>
 8001ed0:	2b1f      	cmp	r3, #31
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0x50e>
 8001ed4:	e097      	b.n	8002006 <__aeabi_dsub+0x63e>
 8001ed6:	2520      	movs	r5, #32
 8001ed8:	000e      	movs	r6, r1
 8001eda:	1aed      	subs	r5, r5, r3
 8001edc:	40ae      	lsls	r6, r5
 8001ede:	46b0      	mov	r8, r6
 8001ee0:	0006      	movs	r6, r0
 8001ee2:	46aa      	mov	sl, r5
 8001ee4:	40de      	lsrs	r6, r3
 8001ee6:	4645      	mov	r5, r8
 8001ee8:	4335      	orrs	r5, r6
 8001eea:	002e      	movs	r6, r5
 8001eec:	4655      	mov	r5, sl
 8001eee:	40a8      	lsls	r0, r5
 8001ef0:	40d9      	lsrs	r1, r3
 8001ef2:	1e45      	subs	r5, r0, #1
 8001ef4:	41a8      	sbcs	r0, r5
 8001ef6:	448c      	add	ip, r1
 8001ef8:	4306      	orrs	r6, r0
 8001efa:	18b6      	adds	r6, r6, r2
 8001efc:	4296      	cmp	r6, r2
 8001efe:	4192      	sbcs	r2, r2
 8001f00:	4251      	negs	r1, r2
 8001f02:	4461      	add	r1, ip
 8001f04:	003d      	movs	r5, r7
 8001f06:	e625      	b.n	8001b54 <__aeabi_dsub+0x18c>
 8001f08:	003d      	movs	r5, r7
 8001f0a:	4661      	mov	r1, ip
 8001f0c:	4691      	mov	r9, r2
 8001f0e:	e678      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001f10:	000b      	movs	r3, r1
 8001f12:	4303      	orrs	r3, r0
 8001f14:	2d00      	cmp	r5, #0
 8001f16:	d000      	beq.n	8001f1a <__aeabi_dsub+0x552>
 8001f18:	e655      	b.n	8001bc6 <__aeabi_dsub+0x1fe>
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f5      	beq.n	8001f0a <__aeabi_dsub+0x542>
 8001f1e:	4663      	mov	r3, ip
 8001f20:	4313      	orrs	r3, r2
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x55e>
 8001f24:	e66d      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001f26:	1886      	adds	r6, r0, r2
 8001f28:	4286      	cmp	r6, r0
 8001f2a:	4180      	sbcs	r0, r0
 8001f2c:	4461      	add	r1, ip
 8001f2e:	4240      	negs	r0, r0
 8001f30:	1809      	adds	r1, r1, r0
 8001f32:	2200      	movs	r2, #0
 8001f34:	020b      	lsls	r3, r1, #8
 8001f36:	d400      	bmi.n	8001f3a <__aeabi_dsub+0x572>
 8001f38:	e6d0      	b.n	8001cdc <__aeabi_dsub+0x314>
 8001f3a:	4b46      	ldr	r3, [pc, #280]	; (8002054 <__aeabi_dsub+0x68c>)
 8001f3c:	3501      	adds	r5, #1
 8001f3e:	4019      	ands	r1, r3
 8001f40:	e5b2      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001f42:	46b1      	mov	r9, r6
 8001f44:	e65d      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001f46:	0033      	movs	r3, r6
 8001f48:	4667      	mov	r7, ip
 8001f4a:	3b20      	subs	r3, #32
 8001f4c:	40df      	lsrs	r7, r3
 8001f4e:	003b      	movs	r3, r7
 8001f50:	2e20      	cmp	r6, #32
 8001f52:	d005      	beq.n	8001f60 <__aeabi_dsub+0x598>
 8001f54:	2740      	movs	r7, #64	; 0x40
 8001f56:	1bbf      	subs	r7, r7, r6
 8001f58:	4666      	mov	r6, ip
 8001f5a:	40be      	lsls	r6, r7
 8001f5c:	4332      	orrs	r2, r6
 8001f5e:	4690      	mov	r8, r2
 8001f60:	4646      	mov	r6, r8
 8001f62:	1e72      	subs	r2, r6, #1
 8001f64:	4196      	sbcs	r6, r2
 8001f66:	4333      	orrs	r3, r6
 8001f68:	e5ef      	b.n	8001b4a <__aeabi_dsub+0x182>
 8001f6a:	4b39      	ldr	r3, [pc, #228]	; (8002050 <__aeabi_dsub+0x688>)
 8001f6c:	429f      	cmp	r7, r3
 8001f6e:	d0cb      	beq.n	8001f08 <__aeabi_dsub+0x540>
 8001f70:	2580      	movs	r5, #128	; 0x80
 8001f72:	042d      	lsls	r5, r5, #16
 8001f74:	4273      	negs	r3, r6
 8001f76:	4329      	orrs	r1, r5
 8001f78:	e7a8      	b.n	8001ecc <__aeabi_dsub+0x504>
 8001f7a:	4308      	orrs	r0, r1
 8001f7c:	1e41      	subs	r1, r0, #1
 8001f7e:	4188      	sbcs	r0, r1
 8001f80:	e6a2      	b.n	8001cc8 <__aeabi_dsub+0x300>
 8001f82:	2f00      	cmp	r7, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x5c0>
 8001f86:	e63c      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001f88:	4663      	mov	r3, ip
 8001f8a:	1a86      	subs	r6, r0, r2
 8001f8c:	1acf      	subs	r7, r1, r3
 8001f8e:	42b0      	cmp	r0, r6
 8001f90:	419b      	sbcs	r3, r3
 8001f92:	425b      	negs	r3, r3
 8001f94:	1afb      	subs	r3, r7, r3
 8001f96:	4698      	mov	r8, r3
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	d54e      	bpl.n	800203a <__aeabi_dsub+0x672>
 8001f9c:	1a16      	subs	r6, r2, r0
 8001f9e:	4663      	mov	r3, ip
 8001fa0:	42b2      	cmp	r2, r6
 8001fa2:	4192      	sbcs	r2, r2
 8001fa4:	1a59      	subs	r1, r3, r1
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1a89      	subs	r1, r1, r2
 8001faa:	465c      	mov	r4, fp
 8001fac:	2200      	movs	r2, #0
 8001fae:	e57b      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001fb0:	4301      	orrs	r1, r0
 8001fb2:	000e      	movs	r6, r1
 8001fb4:	1e71      	subs	r1, r6, #1
 8001fb6:	418e      	sbcs	r6, r1
 8001fb8:	e79f      	b.n	8001efa <__aeabi_dsub+0x532>
 8001fba:	001d      	movs	r5, r3
 8001fbc:	000e      	movs	r6, r1
 8001fbe:	3d20      	subs	r5, #32
 8001fc0:	40ee      	lsrs	r6, r5
 8001fc2:	46b0      	mov	r8, r6
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d004      	beq.n	8001fd2 <__aeabi_dsub+0x60a>
 8001fc8:	2540      	movs	r5, #64	; 0x40
 8001fca:	1aeb      	subs	r3, r5, r3
 8001fcc:	4099      	lsls	r1, r3
 8001fce:	4308      	orrs	r0, r1
 8001fd0:	4681      	mov	r9, r0
 8001fd2:	4648      	mov	r0, r9
 8001fd4:	4643      	mov	r3, r8
 8001fd6:	1e41      	subs	r1, r0, #1
 8001fd8:	4188      	sbcs	r0, r1
 8001fda:	4318      	orrs	r0, r3
 8001fdc:	e674      	b.n	8001cc8 <__aeabi_dsub+0x300>
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2400      	movs	r4, #0
 8001fe2:	e617      	b.n	8001c14 <__aeabi_dsub+0x24c>
 8001fe4:	1a16      	subs	r6, r2, r0
 8001fe6:	4663      	mov	r3, ip
 8001fe8:	42b2      	cmp	r2, r6
 8001fea:	4192      	sbcs	r2, r2
 8001fec:	1a59      	subs	r1, r3, r1
 8001fee:	4252      	negs	r2, r2
 8001ff0:	1a89      	subs	r1, r1, r2
 8001ff2:	003d      	movs	r5, r7
 8001ff4:	e525      	b.n	8001a42 <__aeabi_dsub+0x7a>
 8001ff6:	4661      	mov	r1, ip
 8001ff8:	4691      	mov	r9, r2
 8001ffa:	4d15      	ldr	r5, [pc, #84]	; (8002050 <__aeabi_dsub+0x688>)
 8001ffc:	e601      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	2400      	movs	r4, #0
 8002002:	0312      	lsls	r2, r2, #12
 8002004:	e679      	b.n	8001cfa <__aeabi_dsub+0x332>
 8002006:	001d      	movs	r5, r3
 8002008:	000e      	movs	r6, r1
 800200a:	3d20      	subs	r5, #32
 800200c:	40ee      	lsrs	r6, r5
 800200e:	46b0      	mov	r8, r6
 8002010:	2b20      	cmp	r3, #32
 8002012:	d004      	beq.n	800201e <__aeabi_dsub+0x656>
 8002014:	2540      	movs	r5, #64	; 0x40
 8002016:	1aeb      	subs	r3, r5, r3
 8002018:	4099      	lsls	r1, r3
 800201a:	4308      	orrs	r0, r1
 800201c:	4681      	mov	r9, r0
 800201e:	464e      	mov	r6, r9
 8002020:	4643      	mov	r3, r8
 8002022:	1e71      	subs	r1, r6, #1
 8002024:	418e      	sbcs	r6, r1
 8002026:	431e      	orrs	r6, r3
 8002028:	e767      	b.n	8001efa <__aeabi_dsub+0x532>
 800202a:	1886      	adds	r6, r0, r2
 800202c:	4296      	cmp	r6, r2
 800202e:	419b      	sbcs	r3, r3
 8002030:	4461      	add	r1, ip
 8002032:	425b      	negs	r3, r3
 8002034:	18c9      	adds	r1, r1, r3
 8002036:	003d      	movs	r5, r7
 8002038:	e58c      	b.n	8001b54 <__aeabi_dsub+0x18c>
 800203a:	4647      	mov	r7, r8
 800203c:	4337      	orrs	r7, r6
 800203e:	d0ce      	beq.n	8001fde <__aeabi_dsub+0x616>
 8002040:	2207      	movs	r2, #7
 8002042:	4641      	mov	r1, r8
 8002044:	4032      	ands	r2, r6
 8002046:	e649      	b.n	8001cdc <__aeabi_dsub+0x314>
 8002048:	2700      	movs	r7, #0
 800204a:	003a      	movs	r2, r7
 800204c:	e5e6      	b.n	8001c1c <__aeabi_dsub+0x254>
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	000007ff 	.word	0x000007ff
 8002054:	ff7fffff 	.word	0xff7fffff

08002058 <__aeabi_dcmpun>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4e0c      	ldr	r6, [pc, #48]	; (800208c <__aeabi_dcmpun+0x34>)
 800205c:	030d      	lsls	r5, r1, #12
 800205e:	031c      	lsls	r4, r3, #12
 8002060:	0049      	lsls	r1, r1, #1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	0b2d      	lsrs	r5, r5, #12
 8002066:	0d49      	lsrs	r1, r1, #21
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	42b1      	cmp	r1, r6
 800206e:	d008      	beq.n	8002082 <__aeabi_dcmpun+0x2a>
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <__aeabi_dcmpun+0x34>)
 8002072:	2000      	movs	r0, #0
 8002074:	428b      	cmp	r3, r1
 8002076:	d103      	bne.n	8002080 <__aeabi_dcmpun+0x28>
 8002078:	4314      	orrs	r4, r2
 800207a:	0020      	movs	r0, r4
 800207c:	1e44      	subs	r4, r0, #1
 800207e:	41a0      	sbcs	r0, r4
 8002080:	bd70      	pop	{r4, r5, r6, pc}
 8002082:	4305      	orrs	r5, r0
 8002084:	2001      	movs	r0, #1
 8002086:	2d00      	cmp	r5, #0
 8002088:	d1fa      	bne.n	8002080 <__aeabi_dcmpun+0x28>
 800208a:	e7f1      	b.n	8002070 <__aeabi_dcmpun+0x18>
 800208c:	000007ff 	.word	0x000007ff

08002090 <__aeabi_i2d>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	2800      	cmp	r0, #0
 8002094:	d02d      	beq.n	80020f2 <__aeabi_i2d+0x62>
 8002096:	17c3      	asrs	r3, r0, #31
 8002098:	18c5      	adds	r5, r0, r3
 800209a:	405d      	eors	r5, r3
 800209c:	0fc4      	lsrs	r4, r0, #31
 800209e:	0028      	movs	r0, r5
 80020a0:	f000 f830 	bl	8002104 <__clzsi2>
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <__aeabi_i2d+0x6c>)
 80020a6:	1a1b      	subs	r3, r3, r0
 80020a8:	055b      	lsls	r3, r3, #21
 80020aa:	0d5b      	lsrs	r3, r3, #21
 80020ac:	280a      	cmp	r0, #10
 80020ae:	dd15      	ble.n	80020dc <__aeabi_i2d+0x4c>
 80020b0:	380b      	subs	r0, #11
 80020b2:	4085      	lsls	r5, r0
 80020b4:	2200      	movs	r2, #0
 80020b6:	032d      	lsls	r5, r5, #12
 80020b8:	0b2d      	lsrs	r5, r5, #12
 80020ba:	2100      	movs	r1, #0
 80020bc:	0010      	movs	r0, r2
 80020be:	032d      	lsls	r5, r5, #12
 80020c0:	0d0a      	lsrs	r2, r1, #20
 80020c2:	0b2d      	lsrs	r5, r5, #12
 80020c4:	0512      	lsls	r2, r2, #20
 80020c6:	432a      	orrs	r2, r5
 80020c8:	4d0d      	ldr	r5, [pc, #52]	; (8002100 <__aeabi_i2d+0x70>)
 80020ca:	051b      	lsls	r3, r3, #20
 80020cc:	402a      	ands	r2, r5
 80020ce:	4313      	orrs	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	07e4      	lsls	r4, r4, #31
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	4323      	orrs	r3, r4
 80020d8:	0019      	movs	r1, r3
 80020da:	bd70      	pop	{r4, r5, r6, pc}
 80020dc:	0002      	movs	r2, r0
 80020de:	0029      	movs	r1, r5
 80020e0:	3215      	adds	r2, #21
 80020e2:	4091      	lsls	r1, r2
 80020e4:	000a      	movs	r2, r1
 80020e6:	210b      	movs	r1, #11
 80020e8:	1a08      	subs	r0, r1, r0
 80020ea:	40c5      	lsrs	r5, r0
 80020ec:	032d      	lsls	r5, r5, #12
 80020ee:	0b2d      	lsrs	r5, r5, #12
 80020f0:	e7e3      	b.n	80020ba <__aeabi_i2d+0x2a>
 80020f2:	2400      	movs	r4, #0
 80020f4:	2300      	movs	r3, #0
 80020f6:	2500      	movs	r5, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	e7de      	b.n	80020ba <__aeabi_i2d+0x2a>
 80020fc:	0000041e 	.word	0x0000041e
 8002100:	800fffff 	.word	0x800fffff

08002104 <__clzsi2>:
 8002104:	211c      	movs	r1, #28
 8002106:	2301      	movs	r3, #1
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	4298      	cmp	r0, r3
 800210c:	d301      	bcc.n	8002112 <__clzsi2+0xe>
 800210e:	0c00      	lsrs	r0, r0, #16
 8002110:	3910      	subs	r1, #16
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	4298      	cmp	r0, r3
 8002116:	d301      	bcc.n	800211c <__clzsi2+0x18>
 8002118:	0a00      	lsrs	r0, r0, #8
 800211a:	3908      	subs	r1, #8
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	4298      	cmp	r0, r3
 8002120:	d301      	bcc.n	8002126 <__clzsi2+0x22>
 8002122:	0900      	lsrs	r0, r0, #4
 8002124:	3904      	subs	r1, #4
 8002126:	a202      	add	r2, pc, #8	; (adr r2, 8002130 <__clzsi2+0x2c>)
 8002128:	5c10      	ldrb	r0, [r2, r0]
 800212a:	1840      	adds	r0, r0, r1
 800212c:	4770      	bx	lr
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	02020304 	.word	0x02020304
 8002134:	01010101 	.word	0x01010101
	...

08002140 <__clzdi2>:
 8002140:	b510      	push	{r4, lr}
 8002142:	2900      	cmp	r1, #0
 8002144:	d103      	bne.n	800214e <__clzdi2+0xe>
 8002146:	f7ff ffdd 	bl	8002104 <__clzsi2>
 800214a:	3020      	adds	r0, #32
 800214c:	e002      	b.n	8002154 <__clzdi2+0x14>
 800214e:	1c08      	adds	r0, r1, #0
 8002150:	f7ff ffd8 	bl	8002104 <__clzsi2>
 8002154:	bd10      	pop	{r4, pc}
 8002156:	46c0      	nop			; (mov r8, r8)

08002158 <RN4020_sendBatteryLife>:
	RN4020_sendData(huart, "SN,T17_NewlyWED");
	RN4020_sendData(huart, "\r\n");
	return RN4020_waitForReadyState();
}

HAL_StatusTypeDef RN4020_sendBatteryLife(UART_HandleTypeDef *huart, char* batteryLevel) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <RN4020_sendBatteryLife+0x44>)
 8002164:	2101      	movs	r1, #1
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f846 	bl	80021f8 <RN4020_setState>
	RN4020_sendData(huart, "SUW,2A19,");
 800216c:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <RN4020_sendBatteryLife+0x48>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0011      	movs	r1, r2
 8002172:	0018      	movs	r0, r3
 8002174:	f000 f850 	bl	8002218 <RN4020_sendData>
	RN4020_sendData(huart, batteryLevel);
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0011      	movs	r1, r2
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f84a 	bl	8002218 <RN4020_sendData>
	RN4020_sendData(huart, "\r\n");
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <RN4020_sendBatteryLife+0x4c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0011      	movs	r1, r2
 800218a:	0018      	movs	r0, r3
 800218c:	f000 f844 	bl	8002218 <RN4020_sendData>
//	return RN4020_waitForReadyState2();
	return HAL_OK;
 8002190:	2300      	movs	r3, #0
	}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	20000138 	.word	0x20000138
 80021a0:	08008544 	.word	0x08008544
 80021a4:	08008540 	.word	0x08008540

080021a8 <RN4020_sendCadence>:

HAL_StatusTypeDef RN4020_sendCadence(UART_HandleTypeDef *huart, char* cadence) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <RN4020_sendCadence+0x44>)
 80021b4:	2101      	movs	r1, #1
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f81e 	bl	80021f8 <RN4020_setState>
	RN4020_sendData(huart, "SUW,2A07,");
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <RN4020_sendCadence+0x48>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0011      	movs	r1, r2
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f828 	bl	8002218 <RN4020_sendData>
	RN4020_sendData(huart, cadence);
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0011      	movs	r1, r2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 f822 	bl	8002218 <RN4020_sendData>
//	RN4020_sendData(huart, "75");
	RN4020_sendData(huart, "\r\n");
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <RN4020_sendCadence+0x4c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0011      	movs	r1, r2
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 f81c 	bl	8002218 <RN4020_sendData>
//	return RN4020_waitForReadyState2();
	return HAL_OK;
 80021e0:	2300      	movs	r3, #0
	}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	20000138 	.word	0x20000138
 80021f0:	08008550 	.word	0x08008550
 80021f4:	08008540 	.word	0x08008540

080021f8 <RN4020_setState>:
	case RN4020_STATE_READY:
	break;
	}
}

void RN4020_setState(RN4020_State *state, RN4020_State newState) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	000a      	movs	r2, r1
 8002202:	1cfb      	adds	r3, r7, #3
 8002204:	701a      	strb	r2, [r3, #0]
	*state = newState;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	1cfa      	adds	r2, r7, #3
 800220a:	7812      	ldrb	r2, [r2, #0]
 800220c:	701a      	strb	r2, [r3, #0]
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <RN4020_sendData>:

void RN4020_sendData(UART_HandleTypeDef *huart, const char* line) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
//  char carriageLineCh = '\r';
//  char newLineCh = '\n';
  HAL_UART_Transmit(huart, (uint8_t*)line, strlen(line), RN4020_TIMEOUT);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	0018      	movs	r0, r3
 8002226:	f7fd ff6f 	bl	8000108 <strlen>
 800222a:	0003      	movs	r3, r0
 800222c:	b29a      	uxth	r2, r3
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <RN4020_sendData+0x28>)
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f003 fcf8 	bl	8005c28 <HAL_UART_Transmit>
  //HAL_UART_Transmit(huart, (uint8_t*)&carriageLineCh, 1, RN4020_TIMEOUT);
  //HAL_UART_Transmit(huart, (uint8_t*)&newLineCh, 1, RN4020_TIMEOUT);
  //HAL_Delay(300);
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}
 8002240:	00001388 	.word	0x00001388

08002244 <babysitter_SendData>:
//**********************************************************************
//  RN4020 Functions (END)
//**********************************************************************


void babysitter_SendData() {
 8002244:	b5b0      	push	{r4, r5, r7, lr}
 8002246:	b08e      	sub	sp, #56	; 0x38
 8002248:	af04      	add	r7, sp, #16
	//Variables for babysitter interrupt
	HAL_StatusTypeDef babysitter_ret;
	HAL_StatusTypeDef babysitter_ret2;
	uint8_t BABY_data[2];
	uint8_t BABY_data2[2];
	int bigbattery = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
	char cadence[4] = {0,0,0,0};
 800224e:	2310      	movs	r3, #16
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
	char integer[4] = {0,0,0,0}; //create an empty string to store number
 8002256:	230c      	movs	r3, #12
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
	char HELPinteger[4] = {0,0,0,0};
 800225e:	2308      	movs	r3, #8
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
	if (rotation_counter < 10) {
 8002266:	4b87      	ldr	r3, [pc, #540]	; (8002484 <babysitter_SendData+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b09      	cmp	r3, #9
 800226c:	dc08      	bgt.n	8002280 <babysitter_SendData+0x3c>
		sprintf(cadence, "0%d", rotation_counter);
 800226e:	4b85      	ldr	r3, [pc, #532]	; (8002484 <babysitter_SendData+0x240>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4985      	ldr	r1, [pc, #532]	; (8002488 <babysitter_SendData+0x244>)
 8002274:	2310      	movs	r3, #16
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	0018      	movs	r0, r3
 800227a:	f004 fc59 	bl	8006b30 <siprintf>
 800227e:	e007      	b.n	8002290 <babysitter_SendData+0x4c>
	}
	else {
		sprintf(cadence, "%02d", rotation_counter);
 8002280:	4b80      	ldr	r3, [pc, #512]	; (8002484 <babysitter_SendData+0x240>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4981      	ldr	r1, [pc, #516]	; (800248c <babysitter_SendData+0x248>)
 8002286:	2310      	movs	r3, #16
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	0018      	movs	r0, r3
 800228c:	f004 fc50 	bl	8006b30 <siprintf>
	}
	RN4020_sendCadence(&huart1, cadence);
 8002290:	2310      	movs	r3, #16
 8002292:	18fa      	adds	r2, r7, r3
 8002294:	4b7e      	ldr	r3, [pc, #504]	; (8002490 <babysitter_SendData+0x24c>)
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff ff85 	bl	80021a8 <RN4020_sendCadence>
	babysitter_ret = HAL_I2C_Mem_Read(&hi2c2, BABY_Main_ADDR, rem, I2C_MEMADD_SIZE_8BIT, BABY_data, 2, HAL_MAX_DELAY);
 800229e:	4b7d      	ldr	r3, [pc, #500]	; (8002494 <babysitter_SendData+0x250>)
 80022a0:	8819      	ldrh	r1, [r3, #0]
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <babysitter_SendData+0x254>)
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	2523      	movs	r5, #35	; 0x23
 80022a8:	197c      	adds	r4, r7, r5
 80022aa:	487c      	ldr	r0, [pc, #496]	; (800249c <babysitter_SendData+0x258>)
 80022ac:	2301      	movs	r3, #1
 80022ae:	425b      	negs	r3, r3
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2302      	movs	r3, #2
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2318      	movs	r3, #24
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	f001 fd71 	bl	8003da4 <HAL_I2C_Mem_Read>
 80022c2:	0003      	movs	r3, r0
 80022c4:	7023      	strb	r3, [r4, #0]
	babysitter_ret2 = HAL_I2C_Mem_Read(&hi2c2, BABY_Main_ADDR, full, I2C_MEMADD_SIZE_8BIT, BABY_data2, 2, HAL_MAX_DELAY);
 80022c6:	4b73      	ldr	r3, [pc, #460]	; (8002494 <babysitter_SendData+0x250>)
 80022c8:	8819      	ldrh	r1, [r3, #0]
 80022ca:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <babysitter_SendData+0x25c>)
 80022cc:	881a      	ldrh	r2, [r3, #0]
 80022ce:	2322      	movs	r3, #34	; 0x22
 80022d0:	18fc      	adds	r4, r7, r3
 80022d2:	4872      	ldr	r0, [pc, #456]	; (800249c <babysitter_SendData+0x258>)
 80022d4:	2301      	movs	r3, #1
 80022d6:	425b      	negs	r3, r3
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	2302      	movs	r3, #2
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	2314      	movs	r3, #20
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2301      	movs	r3, #1
 80022e6:	f001 fd5d 	bl	8003da4 <HAL_I2C_Mem_Read>
 80022ea:	0003      	movs	r3, r0
 80022ec:	7023      	strb	r3, [r4, #0]

	if ( babysitter_ret != HAL_OK || babysitter_ret2 != HAL_OK ) {
 80022ee:	197b      	adds	r3, r7, r5
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <babysitter_SendData+0xbe>
 80022f6:	2322      	movs	r3, #34	; 0x22
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d100      	bne.n	8002302 <babysitter_SendData+0xbe>
 8002300:	e075      	b.n	80023ee <babysitter_SendData+0x1aa>
		babysitter_ret = HAL_I2C_Mem_Read(&hi2c2, BABY_Main_ADDR, rem, I2C_MEMADD_SIZE_8BIT, BABY_data, 2, HAL_MAX_DELAY);
 8002302:	4b64      	ldr	r3, [pc, #400]	; (8002494 <babysitter_SendData+0x250>)
 8002304:	8819      	ldrh	r1, [r3, #0]
 8002306:	4b64      	ldr	r3, [pc, #400]	; (8002498 <babysitter_SendData+0x254>)
 8002308:	881a      	ldrh	r2, [r3, #0]
 800230a:	2523      	movs	r5, #35	; 0x23
 800230c:	197c      	adds	r4, r7, r5
 800230e:	4863      	ldr	r0, [pc, #396]	; (800249c <babysitter_SendData+0x258>)
 8002310:	2301      	movs	r3, #1
 8002312:	425b      	negs	r3, r3
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	2302      	movs	r3, #2
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	2318      	movs	r3, #24
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2301      	movs	r3, #1
 8002322:	f001 fd3f 	bl	8003da4 <HAL_I2C_Mem_Read>
 8002326:	0003      	movs	r3, r0
 8002328:	7023      	strb	r3, [r4, #0]
		babysitter_ret2 = HAL_I2C_Mem_Read(&hi2c2, BABY_Main_ADDR, full, I2C_MEMADD_SIZE_8BIT, BABY_data2, 2, HAL_MAX_DELAY);
 800232a:	4b5a      	ldr	r3, [pc, #360]	; (8002494 <babysitter_SendData+0x250>)
 800232c:	8819      	ldrh	r1, [r3, #0]
 800232e:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <babysitter_SendData+0x25c>)
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	2322      	movs	r3, #34	; 0x22
 8002334:	18fc      	adds	r4, r7, r3
 8002336:	4859      	ldr	r0, [pc, #356]	; (800249c <babysitter_SendData+0x258>)
 8002338:	2301      	movs	r3, #1
 800233a:	425b      	negs	r3, r3
 800233c:	9302      	str	r3, [sp, #8]
 800233e:	2302      	movs	r3, #2
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	2314      	movs	r3, #20
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	f001 fd2b 	bl	8003da4 <HAL_I2C_Mem_Read>
 800234e:	0003      	movs	r3, r0
 8002350:	7023      	strb	r3, [r4, #0]
		if ( babysitter_ret != HAL_OK || babysitter_ret2 != HAL_OK ) {
 8002352:	197b      	adds	r3, r7, r5
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d000      	beq.n	800235c <babysitter_SendData+0x118>
 800235a:	e08e      	b.n	800247a <babysitter_SendData+0x236>
 800235c:	2322      	movs	r3, #34	; 0x22
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d000      	beq.n	8002368 <babysitter_SendData+0x124>
 8002366:	e088      	b.n	800247a <babysitter_SendData+0x236>
			//HAL_UART_Transmit(&huart1, (uint8_t *) " RECEIVE ERROR\r\n", strlen(" RECEIVE ERROR\r\n"), 100);
		}
		else {
			uint16_t finalval = ((uint16_t) BABY_data[1] << 8) | BABY_data[0];
 8002368:	2118      	movs	r1, #24
 800236a:	187b      	adds	r3, r7, r1
 800236c:	785b      	ldrb	r3, [r3, #1]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	b21a      	sxth	r2, r3
 8002372:	187b      	adds	r3, r7, r1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b21b      	sxth	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b21a      	sxth	r2, r3
 800237c:	211c      	movs	r1, #28
 800237e:	187b      	adds	r3, r7, r1
 8002380:	801a      	strh	r2, [r3, #0]
			uint16_t finalval2 = ((uint16_t) BABY_data2[1] << 8) | BABY_data2[0];
 8002382:	2014      	movs	r0, #20
 8002384:	183b      	adds	r3, r7, r0
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	183b      	adds	r3, r7, r0
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21a      	sxth	r2, r3
 8002396:	201a      	movs	r0, #26
 8002398:	183b      	adds	r3, r7, r0
 800239a:	801a      	strh	r2, [r3, #0]
			bigbattery = 100000 * finalval / finalval2;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <babysitter_SendData+0x260>)
 80023a2:	435a      	muls	r2, r3
 80023a4:	183b      	adds	r3, r7, r0
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	0019      	movs	r1, r3
 80023aa:	0010      	movs	r0, r2
 80023ac:	f7fd ff3e 	bl	800022c <__divsi3>
 80023b0:	0003      	movs	r3, r0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24

			if ((bigbattery / 1000) < 10) {
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	4a3c      	ldr	r2, [pc, #240]	; (80024a8 <babysitter_SendData+0x264>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	dc08      	bgt.n	80023ce <babysitter_SendData+0x18a>
				//sprintf(integer, "0%d", bigbattery / 1000);
				sprintf(HELPinteger, "0%d", HELPcounter);
 80023bc:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <babysitter_SendData+0x268>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4931      	ldr	r1, [pc, #196]	; (8002488 <babysitter_SendData+0x244>)
 80023c2:	2308      	movs	r3, #8
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	0018      	movs	r0, r3
 80023c8:	f004 fbb2 	bl	8006b30 <siprintf>
 80023cc:	e007      	b.n	80023de <babysitter_SendData+0x19a>
			}
			else {
				//sprintf(integer, "%02d", bigbattery / 1000);
				sprintf(HELPinteger, "%02d", HELPcounter);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <babysitter_SendData+0x268>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	492e      	ldr	r1, [pc, #184]	; (800248c <babysitter_SendData+0x248>)
 80023d4:	2308      	movs	r3, #8
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	0018      	movs	r0, r3
 80023da:	f004 fba9 	bl	8006b30 <siprintf>
			}

//			RN4020_sendBatteryLife(&huart1, integer);
			RN4020_sendBatteryLife(&huart1, HELPinteger);
 80023de:	2308      	movs	r3, #8
 80023e0:	18fa      	adds	r2, r7, r3
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <babysitter_SendData+0x24c>)
 80023e4:	0011      	movs	r1, r2
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7ff feb6 	bl	8002158 <RN4020_sendBatteryLife>
		if ( babysitter_ret != HAL_OK || babysitter_ret2 != HAL_OK ) {
 80023ec:	e045      	b.n	800247a <babysitter_SendData+0x236>
		}
	}
	else {
		char integer[4] = {0,0,0,0}; //create an empty string to store number
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
//		char decimal[4] = {0,0,0,0}; //create an empty string to store number
		uint16_t finalval = ((uint16_t) BABY_data[1] << 8) | BABY_data[0];
 80023f4:	2118      	movs	r1, #24
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b21b      	sxth	r3, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	b21a      	sxth	r2, r3
 8002408:	2120      	movs	r1, #32
 800240a:	187b      	adds	r3, r7, r1
 800240c:	801a      	strh	r2, [r3, #0]
		uint16_t finalval2 = ((uint16_t) BABY_data2[1] << 8) | BABY_data2[0];
 800240e:	2014      	movs	r0, #20
 8002410:	183b      	adds	r3, r7, r0
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b21a      	sxth	r2, r3
 8002418:	183b      	adds	r3, r7, r0
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b21b      	sxth	r3, r3
 800241e:	4313      	orrs	r3, r2
 8002420:	b21a      	sxth	r2, r3
 8002422:	201e      	movs	r0, #30
 8002424:	183b      	adds	r3, r7, r0
 8002426:	801a      	strh	r2, [r3, #0]
		bigbattery = 100000 * finalval / finalval2;
 8002428:	187b      	adds	r3, r7, r1
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <babysitter_SendData+0x260>)
 800242e:	435a      	muls	r2, r3
 8002430:	183b      	adds	r3, r7, r0
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	0019      	movs	r1, r3
 8002436:	0010      	movs	r0, r2
 8002438:	f7fd fef8 	bl	800022c <__divsi3>
 800243c:	0003      	movs	r3, r0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

		if ((bigbattery / 1000) < 10) {
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <babysitter_SendData+0x264>)
 8002444:	4293      	cmp	r3, r2
 8002446:	dc08      	bgt.n	800245a <babysitter_SendData+0x216>
			//sprintf(integer, "0%d", bigbattery / 1000);
			sprintf(HELPinteger, "0%d", HELPcounter);
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <babysitter_SendData+0x268>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	490e      	ldr	r1, [pc, #56]	; (8002488 <babysitter_SendData+0x244>)
 800244e:	2308      	movs	r3, #8
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	0018      	movs	r0, r3
 8002454:	f004 fb6c 	bl	8006b30 <siprintf>
 8002458:	e007      	b.n	800246a <babysitter_SendData+0x226>
		}
		else {
			//sprintf(integer, "%02d", bigbattery / 1000);
			sprintf(HELPinteger, "%02d", HELPcounter);
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <babysitter_SendData+0x268>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	490b      	ldr	r1, [pc, #44]	; (800248c <babysitter_SendData+0x248>)
 8002460:	2308      	movs	r3, #8
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	0018      	movs	r0, r3
 8002466:	f004 fb63 	bl	8006b30 <siprintf>
		}
//		sprintf(decimal, "%03d", bigbattery % 1000);
//		RN4020_sendBatteryLife(&huart1, integer);
		RN4020_sendBatteryLife(&huart1, HELPinteger);
 800246a:	2308      	movs	r3, #8
 800246c:	18fa      	adds	r2, r7, r3
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <babysitter_SendData+0x24c>)
 8002470:	0011      	movs	r1, r2
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff fe70 	bl	8002158 <RN4020_sendBatteryLife>
	  }
//	  if (ret == HAL_OK) {
//		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	  }

}
 8002478:	e000      	b.n	800247c <babysitter_SendData+0x238>
		if ( babysitter_ret != HAL_OK || babysitter_ret2 != HAL_OK ) {
 800247a:	46c0      	nop			; (mov r8, r8)
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b00a      	add	sp, #40	; 0x28
 8002482:	bdb0      	pop	{r4, r5, r7, pc}
 8002484:	200000d0 	.word	0x200000d0
 8002488:	0800855c 	.word	0x0800855c
 800248c:	08008560 	.word	0x08008560
 8002490:	200001a0 	.word	0x200001a0
 8002494:	20000020 	.word	0x20000020
 8002498:	20000022 	.word	0x20000022
 800249c:	2000013c 	.word	0x2000013c
 80024a0:	20000024 	.word	0x20000024
 80024a4:	000186a0 	.word	0x000186a0
 80024a8:	0000270f 	.word	0x0000270f
 80024ac:	200000bc 	.word	0x200000bc

080024b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	b091      	sub	sp, #68	; 0x44
 80024b4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int RN4020_config_ret;

	HAL_StatusTypeDef ICM_ret = HAL_OK;
 80024b6:	2517      	movs	r5, #23
 80024b8:	197b      	adds	r3, r7, r5
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret2 = HAL_OK;
 80024be:	2616      	movs	r6, #22
 80024c0:	19bb      	adds	r3, r7, r6
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret3 = HAL_OK;
 80024c6:	2315      	movs	r3, #21
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret4 = HAL_OK;
 80024ce:	2214      	movs	r2, #20
 80024d0:	18bb      	adds	r3, r7, r2
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret5 = HAL_OK;
 80024d6:	2113      	movs	r1, #19
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret6 = HAL_OK;
 80024de:	2012      	movs	r0, #18
 80024e0:	183b      	adds	r3, r7, r0
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]

	uint8_t deviceID;
	uint8_t pwr1 = 0x80;
 80024e6:	1dbb      	adds	r3, r7, #6
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	701a      	strb	r2, [r3, #0]
	uint8_t pwr1_2 = 0x01;
 80024ec:	1d7b      	adds	r3, r7, #5
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
	uint8_t rtDiv = 0x00;
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
	uint8_t accelConfig = 0x18;
 80024f8:	1cfb      	adds	r3, r7, #3
 80024fa:	2218      	movs	r2, #24
 80024fc:	701a      	strb	r2, [r3, #0]
	uint8_t accelConfig2 = 0x03;
 80024fe:	1cbb      	adds	r3, r7, #2
 8002500:	2203      	movs	r2, #3
 8002502:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002504:	f000 fefe 	bl	8003304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002508:	f000 fb6e 	bl	8002be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800250c:	f000 fcdc 	bl	8002ec8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002510:	f000 fcaa 	bl	8002e68 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002514:	f000 fc52 	bl	8002dbc <MX_TIM2_Init>
  MX_I2C2_Init();
 8002518:	f000 fc10 	bl	8002d3c <MX_I2C2_Init>
  MX_I2C1_Init();
 800251c:	f000 fbce 	bl	8002cbc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RCC -> IOPENR |= RCC_IOPENR_IOPBEN | RCC_IOPENR_IOPAEN;
 8002520:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <main+0x210>)
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <main+0x210>)
 8002526:	2103      	movs	r1, #3
 8002528:	430a      	orrs	r2, r1
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Set PA5 pin off
 800252c:	23a0      	movs	r3, #160	; 0xa0
 800252e:	05db      	lsls	r3, r3, #23
 8002530:	2200      	movs	r2, #0
 8002532:	2120      	movs	r1, #32
 8002534:	0018      	movs	r0, r3
 8002536:	f001 fa53 	bl	80039e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800253a:	23a0      	movs	r3, #160	; 0xa0
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	2201      	movs	r2, #1
 8002540:	2110      	movs	r1, #16
 8002542:	0018      	movs	r0, r3
 8002544:	f001 fa4c 	bl	80039e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002548:	4b5e      	ldr	r3, [pc, #376]	; (80026c4 <main+0x214>)
 800254a:	2201      	movs	r2, #1
 800254c:	2110      	movs	r1, #16
 800254e:	0018      	movs	r0, r3
 8002550:	f001 fa46 	bl	80039e0 <HAL_GPIO_WritePin>
//==================================================================================
//==================================================================================
//	ICM-20602 Configuration Step
//==================================================================================
  // read who_am_i
  ICM_ret = HAL_I2C_Mem_Read(&hi2c1, ICM_Main_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &deviceID, 1, 0xFF);
 8002554:	4b5c      	ldr	r3, [pc, #368]	; (80026c8 <main+0x218>)
 8002556:	8819      	ldrh	r1, [r3, #0]
 8002558:	197c      	adds	r4, r7, r5
 800255a:	485c      	ldr	r0, [pc, #368]	; (80026cc <main+0x21c>)
 800255c:	23ff      	movs	r3, #255	; 0xff
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	2301      	movs	r3, #1
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2301      	movs	r3, #1
 800256a:	2275      	movs	r2, #117	; 0x75
 800256c:	f001 fc1a 	bl	8003da4 <HAL_I2C_Mem_Read>
 8002570:	0003      	movs	r3, r0
 8002572:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002574:	2019      	movs	r0, #25
 8002576:	f000 ff35 	bl	80033e4 <HAL_Delay>

  // reset IMU
  ICM_ret2 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &pwr1, 1, 0xFF);
 800257a:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <main+0x218>)
 800257c:	8819      	ldrh	r1, [r3, #0]
 800257e:	19bc      	adds	r4, r7, r6
 8002580:	4852      	ldr	r0, [pc, #328]	; (80026cc <main+0x21c>)
 8002582:	23ff      	movs	r3, #255	; 0xff
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	2301      	movs	r3, #1
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	1dbb      	adds	r3, r7, #6
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2301      	movs	r3, #1
 8002590:	226b      	movs	r2, #107	; 0x6b
 8002592:	f001 fad9 	bl	8003b48 <HAL_I2C_Mem_Write>
 8002596:	0003      	movs	r3, r0
 8002598:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 800259a:	2019      	movs	r0, #25
 800259c:	f000 ff22 	bl	80033e4 <HAL_Delay>

  // enable temperature sensor and SELECTS the clock source
  ICM_ret3 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &pwr1_2, 1, 0xFF);
 80025a0:	4b49      	ldr	r3, [pc, #292]	; (80026c8 <main+0x218>)
 80025a2:	8819      	ldrh	r1, [r3, #0]
 80025a4:	2315      	movs	r3, #21
 80025a6:	18fc      	adds	r4, r7, r3
 80025a8:	4848      	ldr	r0, [pc, #288]	; (80026cc <main+0x21c>)
 80025aa:	23ff      	movs	r3, #255	; 0xff
 80025ac:	9302      	str	r3, [sp, #8]
 80025ae:	2301      	movs	r3, #1
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	1d7b      	adds	r3, r7, #5
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2301      	movs	r3, #1
 80025b8:	226b      	movs	r2, #107	; 0x6b
 80025ba:	f001 fac5 	bl	8003b48 <HAL_I2C_Mem_Write>
 80025be:	0003      	movs	r3, r0
 80025c0:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 80025c2:	2019      	movs	r0, #25
 80025c4:	f000 ff0e 	bl	80033e4 <HAL_Delay>
  temp_sens = 326.8;
 80025c8:	4a41      	ldr	r2, [pc, #260]	; (80026d0 <main+0x220>)
 80025ca:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <main+0x224>)
 80025cc:	4c42      	ldr	r4, [pc, #264]	; (80026d8 <main+0x228>)
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	6054      	str	r4, [r2, #4]

  // set sample rate to 1kHz and apply
  ICM_ret4 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &rtDiv, 1, 0xFF);
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <main+0x218>)
 80025d4:	8819      	ldrh	r1, [r3, #0]
 80025d6:	2214      	movs	r2, #20
 80025d8:	18bc      	adds	r4, r7, r2
 80025da:	483c      	ldr	r0, [pc, #240]	; (80026cc <main+0x21c>)
 80025dc:	23ff      	movs	r3, #255	; 0xff
 80025de:	9302      	str	r3, [sp, #8]
 80025e0:	2301      	movs	r3, #1
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2301      	movs	r3, #1
 80025ea:	2219      	movs	r2, #25
 80025ec:	f001 faac 	bl	8003b48 <HAL_I2C_Mem_Write>
 80025f0:	0003      	movs	r3, r0
 80025f2:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 80025f4:	2019      	movs	r0, #25
 80025f6:	f000 fef5 	bl	80033e4 <HAL_Delay>

  // accel full-scale range = 16g(0b11) -- sensitivity scale factor = 2,048 LSB/(dps)
  ICM_ret5 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &accelConfig, 1, 0xFF); // ACCEL full-scale range = 16g -- sensitivity scale facotr = 2,048 LSB/(dps)
 80025fa:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <main+0x218>)
 80025fc:	8819      	ldrh	r1, [r3, #0]
 80025fe:	2313      	movs	r3, #19
 8002600:	18fc      	adds	r4, r7, r3
 8002602:	4832      	ldr	r0, [pc, #200]	; (80026cc <main+0x21c>)
 8002604:	23ff      	movs	r3, #255	; 0xff
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	2301      	movs	r3, #1
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	1cfb      	adds	r3, r7, #3
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	221c      	movs	r2, #28
 8002614:	f001 fa98 	bl	8003b48 <HAL_I2C_Mem_Write>
 8002618:	0003      	movs	r3, r0
 800261a:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 800261c:	2019      	movs	r0, #25
 800261e:	f000 fee1 	bl	80033e4 <HAL_Delay>
  accel_sens = 2048.0;
 8002622:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <main+0x22c>)
 8002624:	2300      	movs	r3, #0
 8002626:	4c2e      	ldr	r4, [pc, #184]	; (80026e0 <main+0x230>)
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	6054      	str	r4, [r2, #4]

  // set A_DLPF_CFG to 3 for accel configuration
  ICM_ret6 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, ACCEL_CONFIG2, I2C_MEMADD_SIZE_8BIT, &accelConfig2, 1, 0xFF); // ACCEL FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800262c:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <main+0x218>)
 800262e:	8819      	ldrh	r1, [r3, #0]
 8002630:	2012      	movs	r0, #18
 8002632:	183c      	adds	r4, r7, r0
 8002634:	4825      	ldr	r0, [pc, #148]	; (80026cc <main+0x21c>)
 8002636:	23ff      	movs	r3, #255	; 0xff
 8002638:	9302      	str	r3, [sp, #8]
 800263a:	2301      	movs	r3, #1
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	1cbb      	adds	r3, r7, #2
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2301      	movs	r3, #1
 8002644:	221d      	movs	r2, #29
 8002646:	f001 fa7f 	bl	8003b48 <HAL_I2C_Mem_Write>
 800264a:	0003      	movs	r3, r0
 800264c:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 800264e:	2019      	movs	r0, #25
 8002650:	f000 fec8 	bl	80033e4 <HAL_Delay>
  if (ICM_ret != HAL_OK || ICM_ret2 != HAL_OK || ICM_ret3 != HAL_OK || ICM_ret4 != HAL_OK || ICM_ret5 != HAL_OK || ICM_ret6 != HAL_OK || deviceID != 0x12)
 8002654:	197b      	adds	r3, r7, r5
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d11c      	bne.n	8002696 <main+0x1e6>
 800265c:	2316      	movs	r3, #22
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d117      	bne.n	8002696 <main+0x1e6>
 8002666:	2315      	movs	r3, #21
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d112      	bne.n	8002696 <main+0x1e6>
 8002670:	2314      	movs	r3, #20
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <main+0x1e6>
 800267a:	2313      	movs	r3, #19
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d108      	bne.n	8002696 <main+0x1e6>
 8002684:	2312      	movs	r3, #18
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <main+0x1e6>
 800268e:	1dfb      	adds	r3, r7, #7
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b12      	cmp	r3, #18
 8002694:	d026      	beq.n	80026e4 <main+0x234>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, 1);
 8002696:	23e0      	movs	r3, #224	; 0xe0
 8002698:	01db      	lsls	r3, r3, #7
 800269a:	480a      	ldr	r0, [pc, #40]	; (80026c4 <main+0x214>)
 800269c:	2201      	movs	r2, #1
 800269e:	0019      	movs	r1, r3
 80026a0:	f001 f99e 	bl	80039e0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80026a4:	23fa      	movs	r3, #250	; 0xfa
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fe9b 	bl	80033e4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, 0);
 80026ae:	23e0      	movs	r3, #224	; 0xe0
 80026b0:	01db      	lsls	r3, r3, #7
 80026b2:	4804      	ldr	r0, [pc, #16]	; (80026c4 <main+0x214>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	0019      	movs	r1, r3
 80026b8:	f001 f992 	bl	80039e0 <HAL_GPIO_WritePin>
 80026bc:	e025      	b.n	800270a <main+0x25a>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	40021000 	.word	0x40021000
 80026c4:	50000400 	.word	0x50000400
 80026c8:	20000000 	.word	0x20000000
 80026cc:	200000ec 	.word	0x200000ec
 80026d0:	20000188 	.word	0x20000188
 80026d4:	cccccccd 	.word	0xcccccccd
 80026d8:	40746ccc 	.word	0x40746ccc
 80026dc:	20000198 	.word	0x20000198
 80026e0:	40a00000 	.word	0x40a00000
  }
  else {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	48d7      	ldr	r0, [pc, #860]	; (8002a48 <main+0x598>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	0019      	movs	r1, r3
 80026ee:	f001 f977 	bl	80039e0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80026f2:	23fa      	movs	r3, #250	; 0xfa
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fe74 	bl	80033e4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	015b      	lsls	r3, r3, #5
 8002700:	48d1      	ldr	r0, [pc, #836]	; (8002a48 <main+0x598>)
 8002702:	2200      	movs	r2, #0
 8002704:	0019      	movs	r1, r3
 8002706:	f001 f96b 	bl	80039e0 <HAL_GPIO_WritePin>
  }
//==================================================================================
//	Start TIMER2 Step (function @ HAL_TIM_PeriodElapsedCallback)
//==================================================================================
  HAL_TIM_Base_Start_IT(&htim2);
 800270a:	4bd0      	ldr	r3, [pc, #832]	; (8002a4c <main+0x59c>)
 800270c:	0018      	movs	r0, r3
 800270e:	f002 fedf 	bl	80054d0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int IMU_avgCounter = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
	int IMU_postCounter = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
	double IMU_sum = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	2400      	movs	r4, #0
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	627c      	str	r4, [r7, #36]	; 0x24
	double curr_value = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	2400      	movs	r4, #0
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	60fc      	str	r4, [r7, #12]
	double prev_value = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	2400      	movs	r4, #0
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	61fc      	str	r4, [r7, #28]

	while (1)
	{
		//Collect IMU acceleration data
		ICM_ret = HAL_I2C_Mem_Read(&hi2c1, ICM_Main_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, sizeof(data)/sizeof(uint8_t), HAL_MAX_DELAY);
 8002732:	4bc7      	ldr	r3, [pc, #796]	; (8002a50 <main+0x5a0>)
 8002734:	8819      	ldrh	r1, [r3, #0]
 8002736:	2317      	movs	r3, #23
 8002738:	18fc      	adds	r4, r7, r3
 800273a:	48c6      	ldr	r0, [pc, #792]	; (8002a54 <main+0x5a4>)
 800273c:	2301      	movs	r3, #1
 800273e:	425b      	negs	r3, r3
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2306      	movs	r3, #6
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	4bc4      	ldr	r3, [pc, #784]	; (8002a58 <main+0x5a8>)
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2301      	movs	r3, #1
 800274c:	223b      	movs	r2, #59	; 0x3b
 800274e:	f001 fb29 	bl	8003da4 <HAL_I2C_Mem_Read>
 8002752:	0003      	movs	r3, r0
 8002754:	7023      	strb	r3, [r4, #0]
		if ((data[0] & 0x80) != 0){
 8002756:	4bc0      	ldr	r3, [pc, #768]	; (8002a58 <main+0x5a8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b25b      	sxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	da0a      	bge.n	8002776 <main+0x2c6>
			accX = -1;
 8002760:	4abe      	ldr	r2, [pc, #760]	; (8002a5c <main+0x5ac>)
 8002762:	2300      	movs	r3, #0
 8002764:	4cbe      	ldr	r4, [pc, #760]	; (8002a60 <main+0x5b0>)
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	6054      	str	r4, [r2, #4]
			data[0] = (data[0] ^ 0xFF) + 1;
 800276a:	4bbb      	ldr	r3, [pc, #748]	; (8002a58 <main+0x5a8>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	425b      	negs	r3, r3
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4bb9      	ldr	r3, [pc, #740]	; (8002a58 <main+0x5a8>)
 8002774:	701a      	strb	r2, [r3, #0]
		}
		if ((data[2] & 0x80) != 0){
 8002776:	4bb8      	ldr	r3, [pc, #736]	; (8002a58 <main+0x5a8>)
 8002778:	789b      	ldrb	r3, [r3, #2]
 800277a:	b25b      	sxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	da0a      	bge.n	8002796 <main+0x2e6>
			accY = -1;
 8002780:	4ab8      	ldr	r2, [pc, #736]	; (8002a64 <main+0x5b4>)
 8002782:	2300      	movs	r3, #0
 8002784:	4cb6      	ldr	r4, [pc, #728]	; (8002a60 <main+0x5b0>)
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	6054      	str	r4, [r2, #4]
			data[2] = (data[2] ^ 0xFF) + 1;
 800278a:	4bb3      	ldr	r3, [pc, #716]	; (8002a58 <main+0x5a8>)
 800278c:	789b      	ldrb	r3, [r3, #2]
 800278e:	425b      	negs	r3, r3
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4bb1      	ldr	r3, [pc, #708]	; (8002a58 <main+0x5a8>)
 8002794:	709a      	strb	r2, [r3, #2]
		}
		if ((data[4] & 0x80) != 0){
 8002796:	4bb0      	ldr	r3, [pc, #704]	; (8002a58 <main+0x5a8>)
 8002798:	791b      	ldrb	r3, [r3, #4]
 800279a:	b25b      	sxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	da0a      	bge.n	80027b6 <main+0x306>
			accZ = -1;
 80027a0:	4ab1      	ldr	r2, [pc, #708]	; (8002a68 <main+0x5b8>)
 80027a2:	2300      	movs	r3, #0
 80027a4:	4cae      	ldr	r4, [pc, #696]	; (8002a60 <main+0x5b0>)
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	6054      	str	r4, [r2, #4]
			data[4] = (data[4] ^ 0xFF) + 1;
 80027aa:	4bab      	ldr	r3, [pc, #684]	; (8002a58 <main+0x5a8>)
 80027ac:	791b      	ldrb	r3, [r3, #4]
 80027ae:	425b      	negs	r3, r3
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4ba9      	ldr	r3, [pc, #676]	; (8002a58 <main+0x5a8>)
 80027b4:	711a      	strb	r2, [r3, #4]
		}
		accXraw = (uint16_t) (data[0] << 8 | data[1]);
 80027b6:	4ba8      	ldr	r3, [pc, #672]	; (8002a58 <main+0x5a8>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b21a      	sxth	r2, r3
 80027be:	4ba6      	ldr	r3, [pc, #664]	; (8002a58 <main+0x5a8>)
 80027c0:	785b      	ldrb	r3, [r3, #1]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4ba8      	ldr	r3, [pc, #672]	; (8002a6c <main+0x5bc>)
 80027cc:	801a      	strh	r2, [r3, #0]
		accYraw = (uint16_t) (data[2] << 8 | data[3]);
 80027ce:	4ba2      	ldr	r3, [pc, #648]	; (8002a58 <main+0x5a8>)
 80027d0:	789b      	ldrb	r3, [r3, #2]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	4ba0      	ldr	r3, [pc, #640]	; (8002a58 <main+0x5a8>)
 80027d8:	78db      	ldrb	r3, [r3, #3]
 80027da:	b21b      	sxth	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b21b      	sxth	r3, r3
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4ba3      	ldr	r3, [pc, #652]	; (8002a70 <main+0x5c0>)
 80027e4:	801a      	strh	r2, [r3, #0]
		accZraw = (uint16_t) (data[4] << 8 | data[5]);
 80027e6:	4b9c      	ldr	r3, [pc, #624]	; (8002a58 <main+0x5a8>)
 80027e8:	791b      	ldrb	r3, [r3, #4]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	4b9a      	ldr	r3, [pc, #616]	; (8002a58 <main+0x5a8>)
 80027f0:	795b      	ldrb	r3, [r3, #5]
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b21b      	sxth	r3, r3
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	4b9e      	ldr	r3, [pc, #632]	; (8002a74 <main+0x5c4>)
 80027fc:	801a      	strh	r2, [r3, #0]
		accX *= accXraw / accel_sens;
 80027fe:	4b9b      	ldr	r3, [pc, #620]	; (8002a6c <main+0x5bc>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	0018      	movs	r0, r3
 8002804:	f7ff fc44 	bl	8002090 <__aeabi_i2d>
 8002808:	4b9b      	ldr	r3, [pc, #620]	; (8002a78 <main+0x5c8>)
 800280a:	685c      	ldr	r4, [r3, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	001a      	movs	r2, r3
 8002810:	0023      	movs	r3, r4
 8002812:	f7fe fa5d 	bl	8000cd0 <__aeabi_ddiv>
 8002816:	0003      	movs	r3, r0
 8002818:	000c      	movs	r4, r1
 800281a:	0018      	movs	r0, r3
 800281c:	0021      	movs	r1, r4
 800281e:	4b8f      	ldr	r3, [pc, #572]	; (8002a5c <main+0x5ac>)
 8002820:	685c      	ldr	r4, [r3, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	001a      	movs	r2, r3
 8002826:	0023      	movs	r3, r4
 8002828:	f7fe fe5c 	bl	80014e4 <__aeabi_dmul>
 800282c:	0003      	movs	r3, r0
 800282e:	000c      	movs	r4, r1
 8002830:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <main+0x5ac>)
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	6054      	str	r4, [r2, #4]
		accY *= accYraw / accel_sens;
 8002836:	4b8e      	ldr	r3, [pc, #568]	; (8002a70 <main+0x5c0>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	0018      	movs	r0, r3
 800283c:	f7ff fc28 	bl	8002090 <__aeabi_i2d>
 8002840:	4b8d      	ldr	r3, [pc, #564]	; (8002a78 <main+0x5c8>)
 8002842:	685c      	ldr	r4, [r3, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	001a      	movs	r2, r3
 8002848:	0023      	movs	r3, r4
 800284a:	f7fe fa41 	bl	8000cd0 <__aeabi_ddiv>
 800284e:	0003      	movs	r3, r0
 8002850:	000c      	movs	r4, r1
 8002852:	0018      	movs	r0, r3
 8002854:	0021      	movs	r1, r4
 8002856:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <main+0x5b4>)
 8002858:	685c      	ldr	r4, [r3, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	001a      	movs	r2, r3
 800285e:	0023      	movs	r3, r4
 8002860:	f7fe fe40 	bl	80014e4 <__aeabi_dmul>
 8002864:	0003      	movs	r3, r0
 8002866:	000c      	movs	r4, r1
 8002868:	4a7e      	ldr	r2, [pc, #504]	; (8002a64 <main+0x5b4>)
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	6054      	str	r4, [r2, #4]
		accZ *= accZraw / accel_sens;
 800286e:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <main+0x5c4>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff fc0c 	bl	8002090 <__aeabi_i2d>
 8002878:	4b7f      	ldr	r3, [pc, #508]	; (8002a78 <main+0x5c8>)
 800287a:	685c      	ldr	r4, [r3, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	001a      	movs	r2, r3
 8002880:	0023      	movs	r3, r4
 8002882:	f7fe fa25 	bl	8000cd0 <__aeabi_ddiv>
 8002886:	0003      	movs	r3, r0
 8002888:	000c      	movs	r4, r1
 800288a:	0018      	movs	r0, r3
 800288c:	0021      	movs	r1, r4
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <main+0x5b8>)
 8002890:	685c      	ldr	r4, [r3, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	001a      	movs	r2, r3
 8002896:	0023      	movs	r3, r4
 8002898:	f7fe fe24 	bl	80014e4 <__aeabi_dmul>
 800289c:	0003      	movs	r3, r0
 800289e:	000c      	movs	r4, r1
 80028a0:	4a71      	ldr	r2, [pc, #452]	; (8002a68 <main+0x5b8>)
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	6054      	str	r4, [r2, #4]
		mag = sqrt((pow(accX, 2) + pow(accY, 2) + pow(accZ, 2)));
 80028a6:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <main+0x5ac>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	2300      	movs	r3, #0
 80028ae:	2480      	movs	r4, #128	; 0x80
 80028b0:	05e4      	lsls	r4, r4, #23
 80028b2:	001a      	movs	r2, r3
 80028b4:	0023      	movs	r3, r4
 80028b6:	f004 fd43 	bl	8007340 <pow>
 80028ba:	0005      	movs	r5, r0
 80028bc:	000e      	movs	r6, r1
 80028be:	4b69      	ldr	r3, [pc, #420]	; (8002a64 <main+0x5b4>)
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	2300      	movs	r3, #0
 80028c6:	2480      	movs	r4, #128	; 0x80
 80028c8:	05e4      	lsls	r4, r4, #23
 80028ca:	001a      	movs	r2, r3
 80028cc:	0023      	movs	r3, r4
 80028ce:	f004 fd37 	bl	8007340 <pow>
 80028d2:	0003      	movs	r3, r0
 80028d4:	000c      	movs	r4, r1
 80028d6:	001a      	movs	r2, r3
 80028d8:	0023      	movs	r3, r4
 80028da:	0028      	movs	r0, r5
 80028dc:	0031      	movs	r1, r6
 80028de:	f7fd fedb 	bl	8000698 <__aeabi_dadd>
 80028e2:	0003      	movs	r3, r0
 80028e4:	000c      	movs	r4, r1
 80028e6:	001d      	movs	r5, r3
 80028e8:	0026      	movs	r6, r4
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <main+0x5b8>)
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	2300      	movs	r3, #0
 80028f2:	2480      	movs	r4, #128	; 0x80
 80028f4:	05e4      	lsls	r4, r4, #23
 80028f6:	001a      	movs	r2, r3
 80028f8:	0023      	movs	r3, r4
 80028fa:	f004 fd21 	bl	8007340 <pow>
 80028fe:	0003      	movs	r3, r0
 8002900:	000c      	movs	r4, r1
 8002902:	001a      	movs	r2, r3
 8002904:	0023      	movs	r3, r4
 8002906:	0028      	movs	r0, r5
 8002908:	0031      	movs	r1, r6
 800290a:	f7fd fec5 	bl	8000698 <__aeabi_dadd>
 800290e:	0003      	movs	r3, r0
 8002910:	000c      	movs	r4, r1
 8002912:	0018      	movs	r0, r3
 8002914:	0021      	movs	r1, r4
 8002916:	f004 fea9 	bl	800766c <sqrt>
 800291a:	0003      	movs	r3, r0
 800291c:	000c      	movs	r4, r1
 800291e:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <main+0x5cc>)
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	6054      	str	r4, [r2, #4]
		if(((accX > .9) && (accX < 1.1)) || ((accX < -.9) && (accX > -1.1))){
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <main+0x5ac>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <main+0x5d0>)
 800292c:	4b55      	ldr	r3, [pc, #340]	; (8002a84 <main+0x5d4>)
 800292e:	f7fd fd93 	bl	8000458 <__aeabi_dcmpgt>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d008      	beq.n	8002948 <main+0x498>
 8002936:	4b49      	ldr	r3, [pc, #292]	; (8002a5c <main+0x5ac>)
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <main+0x5d8>)
 800293e:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <main+0x5dc>)
 8002940:	f7fd fd76 	bl	8000430 <__aeabi_dcmplt>
 8002944:	1e03      	subs	r3, r0, #0
 8002946:	d111      	bne.n	800296c <main+0x4bc>
 8002948:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <main+0x5ac>)
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	4a4c      	ldr	r2, [pc, #304]	; (8002a80 <main+0x5d0>)
 8002950:	4b4f      	ldr	r3, [pc, #316]	; (8002a90 <main+0x5e0>)
 8002952:	f7fd fd6d 	bl	8000430 <__aeabi_dcmplt>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d010      	beq.n	800297c <main+0x4cc>
 800295a:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <main+0x5ac>)
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	4a49      	ldr	r2, [pc, #292]	; (8002a88 <main+0x5d8>)
 8002962:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <main+0x5e4>)
 8002964:	f7fd fd78 	bl	8000458 <__aeabi_dcmpgt>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d007      	beq.n	800297c <main+0x4cc>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	015b      	lsls	r3, r3, #5
 8002970:	4835      	ldr	r0, [pc, #212]	; (8002a48 <main+0x598>)
 8002972:	2201      	movs	r2, #1
 8002974:	0019      	movs	r1, r3
 8002976:	f001 f833 	bl	80039e0 <HAL_GPIO_WritePin>
 800297a:	e006      	b.n	800298a <main+0x4da>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	015b      	lsls	r3, r3, #5
 8002980:	4831      	ldr	r0, [pc, #196]	; (8002a48 <main+0x598>)
 8002982:	2200      	movs	r2, #0
 8002984:	0019      	movs	r1, r3
 8002986:	f001 f82b 	bl	80039e0 <HAL_GPIO_WritePin>
		}
		if(((accY > .9) && (accY < 1.1)) || ((accY < -.9) && (accY > -1.1))){
 800298a:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <main+0x5b4>)
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <main+0x5d0>)
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <main+0x5d4>)
 8002994:	f7fd fd60 	bl	8000458 <__aeabi_dcmpgt>
 8002998:	1e03      	subs	r3, r0, #0
 800299a:	d008      	beq.n	80029ae <main+0x4fe>
 800299c:	4b31      	ldr	r3, [pc, #196]	; (8002a64 <main+0x5b4>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	6859      	ldr	r1, [r3, #4]
 80029a2:	4a39      	ldr	r2, [pc, #228]	; (8002a88 <main+0x5d8>)
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <main+0x5dc>)
 80029a6:	f7fd fd43 	bl	8000430 <__aeabi_dcmplt>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d111      	bne.n	80029d2 <main+0x522>
 80029ae:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <main+0x5b4>)
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	4a32      	ldr	r2, [pc, #200]	; (8002a80 <main+0x5d0>)
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <main+0x5e0>)
 80029b8:	f7fd fd3a 	bl	8000430 <__aeabi_dcmplt>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d010      	beq.n	80029e2 <main+0x532>
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <main+0x5b4>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	4a30      	ldr	r2, [pc, #192]	; (8002a88 <main+0x5d8>)
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <main+0x5e4>)
 80029ca:	f7fd fd45 	bl	8000458 <__aeabi_dcmpgt>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d007      	beq.n	80029e2 <main+0x532>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	481c      	ldr	r0, [pc, #112]	; (8002a48 <main+0x598>)
 80029d8:	2201      	movs	r2, #1
 80029da:	0019      	movs	r1, r3
 80029dc:	f001 f800 	bl	80039e0 <HAL_GPIO_WritePin>
 80029e0:	e006      	b.n	80029f0 <main+0x540>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	4818      	ldr	r0, [pc, #96]	; (8002a48 <main+0x598>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	0019      	movs	r1, r3
 80029ec:	f000 fff8 	bl	80039e0 <HAL_GPIO_WritePin>
		}
		if(((accZ > .9) && (accZ < 1.1)) || ((accZ < -.9) && (accZ > -1.1))){
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <main+0x5b8>)
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <main+0x5d0>)
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <main+0x5d4>)
 80029fa:	f7fd fd2d 	bl	8000458 <__aeabi_dcmpgt>
 80029fe:	1e03      	subs	r3, r0, #0
 8002a00:	d008      	beq.n	8002a14 <main+0x564>
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <main+0x5b8>)
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <main+0x5d8>)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <main+0x5dc>)
 8002a0c:	f7fd fd10 	bl	8000430 <__aeabi_dcmplt>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d111      	bne.n	8002a38 <main+0x588>
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <main+0x5b8>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <main+0x5d0>)
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <main+0x5e0>)
 8002a1e:	f7fd fd07 	bl	8000430 <__aeabi_dcmplt>
 8002a22:	1e03      	subs	r3, r0, #0
 8002a24:	d038      	beq.n	8002a98 <main+0x5e8>
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <main+0x5b8>)
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <main+0x5d8>)
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <main+0x5e4>)
 8002a30:	f7fd fd12 	bl	8000458 <__aeabi_dcmpgt>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d02f      	beq.n	8002a98 <main+0x5e8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	01db      	lsls	r3, r3, #7
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <main+0x598>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	0019      	movs	r1, r3
 8002a42:	f000 ffcd 	bl	80039e0 <HAL_GPIO_WritePin>
 8002a46:	e02e      	b.n	8002aa6 <main+0x5f6>
 8002a48:	50000400 	.word	0x50000400
 8002a4c:	20000234 	.word	0x20000234
 8002a50:	20000000 	.word	0x20000000
 8002a54:	200000ec 	.word	0x200000ec
 8002a58:	20000228 	.word	0x20000228
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	bff00000 	.word	0xbff00000
 8002a64:	20000010 	.word	0x20000010
 8002a68:	20000018 	.word	0x20000018
 8002a6c:	200000ea 	.word	0x200000ea
 8002a70:	20000232 	.word	0x20000232
 8002a74:	20000280 	.word	0x20000280
 8002a78:	20000198 	.word	0x20000198
 8002a7c:	20000278 	.word	0x20000278
 8002a80:	cccccccd 	.word	0xcccccccd
 8002a84:	3feccccc 	.word	0x3feccccc
 8002a88:	9999999a 	.word	0x9999999a
 8002a8c:	3ff19999 	.word	0x3ff19999
 8002a90:	bfeccccc 	.word	0xbfeccccc
 8002a94:	bff19999 	.word	0xbff19999
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	01db      	lsls	r3, r3, #7
 8002a9c:	4845      	ldr	r0, [pc, #276]	; (8002bb4 <main+0x704>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	f000 ff9d 	bl	80039e0 <HAL_GPIO_WritePin>
		}

		accX = 1;
 8002aa6:	4a44      	ldr	r2, [pc, #272]	; (8002bb8 <main+0x708>)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	4c44      	ldr	r4, [pc, #272]	; (8002bbc <main+0x70c>)
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	6054      	str	r4, [r2, #4]
		accY = 1;
 8002ab0:	4a43      	ldr	r2, [pc, #268]	; (8002bc0 <main+0x710>)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4c41      	ldr	r4, [pc, #260]	; (8002bbc <main+0x70c>)
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	6054      	str	r4, [r2, #4]
		accZ = 1;
 8002aba:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <main+0x714>)
 8002abc:	2300      	movs	r3, #0
 8002abe:	4c3f      	ldr	r4, [pc, #252]	; (8002bbc <main+0x70c>)
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	6054      	str	r4, [r2, #4]

		IMU_sum = IMU_sum + mag;
 8002ac4:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <main+0x718>)
 8002ac6:	685c      	ldr	r4, [r3, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	001a      	movs	r2, r3
 8002acc:	0023      	movs	r3, r4
 8002ace:	6a38      	ldr	r0, [r7, #32]
 8002ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad2:	f7fd fde1 	bl	8000698 <__aeabi_dadd>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	000c      	movs	r4, r1
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	627c      	str	r4, [r7, #36]	; 0x24
		if(IMU_avgCounter == 99) {
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	2b63      	cmp	r3, #99	; 0x63
 8002ae2:	d162      	bne.n	8002baa <main+0x6fa>
			curr_value = IMU_sum / 100;
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <main+0x71c>)
 8002ae8:	6a38      	ldr	r0, [r7, #32]
 8002aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aec:	f7fe f8f0 	bl	8000cd0 <__aeabi_ddiv>
 8002af0:	0003      	movs	r3, r0
 8002af2:	000c      	movs	r4, r1
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	60fc      	str	r4, [r7, #12]
			IMU_avgCounter = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
			IMU_sum = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	2400      	movs	r4, #0
 8002b00:	623b      	str	r3, [r7, #32]
 8002b02:	627c      	str	r4, [r7, #36]	; 0x24

			if(IMU_postCounter != 0) {
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d021      	beq.n	8002b4e <main+0x69e>
				prev_increasing = increasing;
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <main+0x720>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <main+0x724>)
 8002b10:	601a      	str	r2, [r3, #0]
				prev_decreasing = decreasing;
 8002b12:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <main+0x728>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <main+0x72c>)
 8002b18:	601a      	str	r2, [r3, #0]
				if(curr_value > prev_value) {
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	68b8      	ldr	r0, [r7, #8]
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	f7fd fc99 	bl	8000458 <__aeabi_dcmpgt>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d006      	beq.n	8002b38 <main+0x688>
					increasing = 1;
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <main+0x720>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
					decreasing = 0;
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <main+0x728>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e005      	b.n	8002b44 <main+0x694>
				}
				else {
					increasing = 0;
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <main+0x720>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
					decreasing = 1;
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <main+0x728>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
				}
				prev_value = curr_value;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	68fc      	ldr	r4, [r7, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	61fc      	str	r4, [r7, #28]
 8002b4c:	e003      	b.n	8002b56 <main+0x6a6>
			}
			else {
				prev_value = curr_value;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	68fc      	ldr	r4, [r7, #12]
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	61fc      	str	r4, [r7, #28]
			}
			if(prev_decreasing && increasing) {
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <main+0x72c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <main+0x6c0>
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <main+0x720>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <main+0x6c0>
				//rotation phase 1
				rotate++;
 8002b66:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <main+0x730>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <main+0x730>)
 8002b6e:	601a      	str	r2, [r3, #0]
			}
			if(prev_increasing && decreasing) {
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <main+0x724>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <main+0x6da>
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <main+0x728>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <main+0x6da>
				//rotation phase 2
				rotate++;
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <main+0x730>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <main+0x730>)
 8002b88:	601a      	str	r2, [r3, #0]
			}
			if(rotate == 2) {
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <main+0x730>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d107      	bne.n	8002ba2 <main+0x6f2>
				rotate = 0;
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <main+0x730>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
				rotation_counter++;
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <main+0x734>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <main+0x734>)
 8002ba0:	601a      	str	r2, [r3, #0]
			}
			IMU_postCounter++;
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba8:	e5c3      	b.n	8002732 <main+0x282>
		}
		else {
			IMU_avgCounter++;
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	3301      	adds	r3, #1
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
		ICM_ret = HAL_I2C_Mem_Read(&hi2c1, ICM_Main_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, sizeof(data)/sizeof(uint8_t), HAL_MAX_DELAY);
 8002bb0:	e5bf      	b.n	8002732 <main+0x282>
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	50000400 	.word	0x50000400
 8002bb8:	20000008 	.word	0x20000008
 8002bbc:	3ff00000 	.word	0x3ff00000
 8002bc0:	20000010 	.word	0x20000010
 8002bc4:	20000018 	.word	0x20000018
 8002bc8:	20000278 	.word	0x20000278
 8002bcc:	40590000 	.word	0x40590000
 8002bd0:	200000c0 	.word	0x200000c0
 8002bd4:	200000c8 	.word	0x200000c8
 8002bd8:	200000c4 	.word	0x200000c4
 8002bdc:	200000cc 	.word	0x200000cc
 8002be0:	200000d4 	.word	0x200000d4
 8002be4:	200000d0 	.word	0x200000d0

08002be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b09d      	sub	sp, #116	; 0x74
 8002bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bee:	2438      	movs	r4, #56	; 0x38
 8002bf0:	193b      	adds	r3, r7, r4
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	2338      	movs	r3, #56	; 0x38
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f003 ff91 	bl	8006b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bfe:	2324      	movs	r3, #36	; 0x24
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	0018      	movs	r0, r3
 8002c04:	2314      	movs	r3, #20
 8002c06:	001a      	movs	r2, r3
 8002c08:	2100      	movs	r1, #0
 8002c0a:	f003 ff89 	bl	8006b20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c0e:	003b      	movs	r3, r7
 8002c10:	0018      	movs	r0, r3
 8002c12:	2324      	movs	r3, #36	; 0x24
 8002c14:	001a      	movs	r2, r3
 8002c16:	2100      	movs	r1, #0
 8002c18:	f003 ff82 	bl	8006b20 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <SystemClock_Config+0xcc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <SystemClock_Config+0xd0>)
 8002c22:	401a      	ands	r2, r3
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <SystemClock_Config+0xcc>)
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	0109      	lsls	r1, r1, #4
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c2e:	0021      	movs	r1, r4
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	2202      	movs	r2, #2
 8002c34:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	2201      	movs	r2, #1
 8002c3a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2210      	movs	r2, #16
 8002c40:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f001 fcb4 	bl	80045b8 <HAL_RCC_OscConfig>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d001      	beq.n	8002c58 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002c54:	f000 f9c6 	bl	8002fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c58:	2124      	movs	r1, #36	; 0x24
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	2201      	movs	r2, #1
 8002c64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	22a0      	movs	r2, #160	; 0xa0
 8002c6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c72:	187b      	adds	r3, r7, r1
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f002 f863 	bl	8004d48 <HAL_RCC_ClockConfig>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002c86:	f000 f9ad 	bl	8002fe4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002c8a:	003b      	movs	r3, r7
 8002c8c:	2209      	movs	r2, #9
 8002c8e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c90:	003b      	movs	r3, r7
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c96:	003b      	movs	r3, r7
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c9c:	003b      	movs	r3, r7
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f002 fa72 	bl	8005188 <HAL_RCCEx_PeriphCLKConfig>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d001      	beq.n	8002cac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ca8:	f000 f99c 	bl	8002fe4 <Error_Handler>
  }
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b01d      	add	sp, #116	; 0x74
 8002cb2:	bd90      	pop	{r4, r7, pc}
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	ffffe7ff 	.word	0xffffe7ff

08002cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002cc2:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <MX_I2C1_Init+0x78>)
 8002cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000509;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <MX_I2C1_Init+0x7c>)
 8002cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 fe8f 	bl	8003a1c <HAL_I2C_Init>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d001      	beq.n	8002d06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d02:	f000 f96f 	bl	8002fe4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f001 fbbc 	bl	8004488 <HAL_I2CEx_ConfigAnalogFilter>
 8002d10:	1e03      	subs	r3, r0, #0
 8002d12:	d001      	beq.n	8002d18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d14:	f000 f966 	bl	8002fe4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <MX_I2C1_Init+0x74>)
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f001 fbff 	bl	8004520 <HAL_I2CEx_ConfigDigitalFilter>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d001      	beq.n	8002d2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d26:	f000 f95d 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200000ec 	.word	0x200000ec
 8002d34:	40005400 	.word	0x40005400
 8002d38:	00000509 	.word	0x00000509

08002d3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <MX_I2C2_Init+0x78>)
 8002d44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000509;
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d48:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <MX_I2C2_Init+0x7c>)
 8002d4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002d4c:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fe4f 	bl	8003a1c <HAL_I2C_Init>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d001      	beq.n	8002d86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002d82:	f000 f92f 	bl	8002fe4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d88:	2100      	movs	r1, #0
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 fb7c 	bl	8004488 <HAL_I2CEx_ConfigAnalogFilter>
 8002d90:	1e03      	subs	r3, r0, #0
 8002d92:	d001      	beq.n	8002d98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002d94:	f000 f926 	bl	8002fe4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <MX_I2C2_Init+0x74>)
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f001 fbbf 	bl	8004520 <HAL_I2CEx_ConfigDigitalFilter>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d001      	beq.n	8002daa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002da6:	f000 f91d 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	2000013c 	.word	0x2000013c
 8002db4:	40005800 	.word	0x40005800
 8002db8:	00000509 	.word	0x00000509

08002dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	2310      	movs	r3, #16
 8002dca:	001a      	movs	r2, r3
 8002dcc:	2100      	movs	r1, #0
 8002dce:	f003 fea7 	bl	8006b20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd2:	003b      	movs	r3, r7
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	001a      	movs	r2, r3
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f003 fea0 	bl	8006b20 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	05d2      	lsls	r2, r2, #23
 8002de6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 8002de8:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <MX_TIM2_Init+0xa4>)
 8002dec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500-1;
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002df6:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <MX_TIM2_Init+0xa8>)
 8002df8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f002 fb21 	bl	8005450 <HAL_TIM_Base_Init>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002e12:	f000 f8e7 	bl	8002fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e16:	2108      	movs	r1, #8
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	0152      	lsls	r2, r2, #5
 8002e1e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e20:	187a      	adds	r2, r7, r1
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002e24:	0011      	movs	r1, r2
 8002e26:	0018      	movs	r0, r3
 8002e28:	f002 fc86 	bl	8005738 <HAL_TIM_ConfigClockSource>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002e30:	f000 f8d8 	bl	8002fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e34:	003b      	movs	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e3a:	003b      	movs	r3, r7
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e40:	003a      	movs	r2, r7
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <MX_TIM2_Init+0xa0>)
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f002 fe42 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002e50:	f000 f8c8 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b006      	add	sp, #24
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000234 	.word	0x20000234
 8002e60:	00009c3f 	.word	0x00009c3f
 8002e64:	000005db 	.word	0x000005db

08002e68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <MX_USART1_UART_Init+0x5c>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002e74:	22e1      	movs	r2, #225	; 0xe1
 8002e76:	0252      	lsls	r2, r2, #9
 8002e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <MX_USART1_UART_Init+0x58>)
 8002eac:	0018      	movs	r0, r3
 8002eae:	f002 fe67 	bl	8005b80 <HAL_UART_Init>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d001      	beq.n	8002eba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002eb6:	f000 f895 	bl	8002fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200001a0 	.word	0x200001a0
 8002ec4:	40013800 	.word	0x40013800

08002ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ece:	240c      	movs	r4, #12
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	2314      	movs	r3, #20
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f003 fe21 	bl	8006b20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	2202      	movs	r2, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	430a      	orrs	r2, r1
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f02:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	4013      	ands	r3, r2
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <MX_GPIO_Init+0xd0>)
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8002f26:	491d      	ldr	r1, [pc, #116]	; (8002f9c <MX_GPIO_Init+0xd4>)
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <MX_GPIO_Init+0xd8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 fd57 	bl	80039e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_RESET);
 8002f32:	23a0      	movs	r3, #160	; 0xa0
 8002f34:	05db      	lsls	r3, r3, #23
 8002f36:	2200      	movs	r2, #0
 8002f38:	2130      	movs	r1, #48	; 0x30
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 fd50 	bl	80039e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB14 PB13 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8002f40:	0021      	movs	r1, r4
 8002f42:	187b      	adds	r3, r7, r1
 8002f44:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <MX_GPIO_Init+0xd4>)
 8002f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	187b      	adds	r3, r7, r1
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5a:	000c      	movs	r4, r1
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <MX_GPIO_Init+0xd8>)
 8002f60:	0019      	movs	r1, r3
 8002f62:	0010      	movs	r0, r2
 8002f64:	f000 fbc6 	bl	80036f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8002f68:	0021      	movs	r1, r4
 8002f6a:	187b      	adds	r3, r7, r1
 8002f6c:	2230      	movs	r2, #48	; 0x30
 8002f6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	2201      	movs	r2, #1
 8002f74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	187b      	adds	r3, r7, r1
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	187a      	adds	r2, r7, r1
 8002f84:	23a0      	movs	r3, #160	; 0xa0
 8002f86:	05db      	lsls	r3, r3, #23
 8002f88:	0011      	movs	r1, r2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 fbb2 	bl	80036f4 <HAL_GPIO_Init>

}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b009      	add	sp, #36	; 0x24
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	00007010 	.word	0x00007010
 8002fa0:	50000400 	.word	0x50000400

08002fa4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

	while ((I2C1->ISR & I2C_FLAG_BUSY) != 0) {
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d1f9      	bne.n	8002fae <HAL_TIM_PeriodElapsedCallback+0xa>

	}

	babysitter_SendData();
 8002fba:	f7ff f943 	bl	8002244 <babysitter_SendData>
	HELPcounter++;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002fc6:	601a      	str	r2, [r3, #0]
	rotation_counter = 0;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40005400 	.word	0x40005400
 8002fdc:	200000bc 	.word	0x200000bc
 8002fe0:	200000d0 	.word	0x200000d0

08002fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fea:	e7fe      	b.n	8002fea <Error_Handler+0x6>

08002fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_MspInit+0x24>)
 8002ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_MspInit+0x24>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <HAL_MspInit+0x24>)
 8002ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_MspInit+0x24>)
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	0549      	lsls	r1, r1, #21
 8003006:	430a      	orrs	r2, r1
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	2314      	movs	r3, #20
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	0018      	movs	r0, r3
 8003022:	2314      	movs	r3, #20
 8003024:	001a      	movs	r2, r3
 8003026:	2100      	movs	r1, #0
 8003028:	f003 fd7a 	bl	8006b20 <memset>
  if(hi2c->Instance==I2C1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a30      	ldr	r2, [pc, #192]	; (80030f4 <HAL_I2C_MspInit+0xe0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d12a      	bne.n	800308c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003036:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 800303c:	2102      	movs	r1, #2
 800303e:	430a      	orrs	r2, r1
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	2202      	movs	r2, #2
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800304e:	2114      	movs	r1, #20
 8003050:	187b      	adds	r3, r7, r1
 8003052:	22c0      	movs	r2, #192	; 0xc0
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003058:	187b      	adds	r3, r7, r1
 800305a:	2212      	movs	r2, #18
 800305c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800305e:	187b      	adds	r3, r7, r1
 8003060:	2201      	movs	r2, #1
 8003062:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	187b      	adds	r3, r7, r1
 8003066:	2203      	movs	r2, #3
 8003068:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2204      	movs	r2, #4
 800306e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003070:	187b      	adds	r3, r7, r1
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <HAL_I2C_MspInit+0xe8>)
 8003074:	0019      	movs	r1, r3
 8003076:	0010      	movs	r0, r2
 8003078:	f000 fb3c 	bl	80036f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800307c:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 800307e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	0389      	lsls	r1, r1, #14
 8003086:	430a      	orrs	r2, r1
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800308a:	e02e      	b.n	80030ea <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_I2C_MspInit+0xec>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d129      	bne.n	80030ea <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 800309c:	2102      	movs	r1, #2
 800309e:	430a      	orrs	r2, r1
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	2202      	movs	r2, #2
 80030a8:	4013      	ands	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030ae:	2114      	movs	r1, #20
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	22c0      	movs	r2, #192	; 0xc0
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	2212      	movs	r2, #18
 80030bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	2201      	movs	r2, #1
 80030c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	2203      	movs	r2, #3
 80030c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	2206      	movs	r2, #6
 80030ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_I2C_MspInit+0xe8>)
 80030d4:	0019      	movs	r1, r3
 80030d6:	0010      	movs	r0, r2
 80030d8:	f000 fb0c 	bl	80036f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 80030de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_I2C_MspInit+0xe4>)
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	03c9      	lsls	r1, r1, #15
 80030e6:	430a      	orrs	r2, r1
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b00a      	add	sp, #40	; 0x28
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	40005400 	.word	0x40005400
 80030f8:	40021000 	.word	0x40021000
 80030fc:	50000400 	.word	0x50000400
 8003100:	40005800 	.word	0x40005800

08003104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	05db      	lsls	r3, r3, #23
 8003114:	429a      	cmp	r2, r3
 8003116:	d10d      	bne.n	8003134 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <HAL_TIM_Base_MspInit+0x38>)
 800311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <HAL_TIM_Base_MspInit+0x38>)
 800311e:	2101      	movs	r1, #1
 8003120:	430a      	orrs	r2, r1
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	200f      	movs	r0, #15
 800312a:	f000 fa29 	bl	8003580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800312e:	200f      	movs	r0, #15
 8003130:	f000 fa3b 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	230c      	movs	r3, #12
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	0018      	movs	r0, r3
 800314e:	2314      	movs	r3, #20
 8003150:	001a      	movs	r2, r3
 8003152:	2100      	movs	r1, #0
 8003154:	f003 fce4 	bl	8006b20 <memset>
  if(huart->Instance==USART1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_UART_MspInit+0x8c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d130      	bne.n	80031c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_UART_MspInit+0x90>)
 8003164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_UART_MspInit+0x90>)
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	01c9      	lsls	r1, r1, #7
 800316c:	430a      	orrs	r2, r1
 800316e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_UART_MspInit+0x90>)
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_UART_MspInit+0x90>)
 8003176:	2102      	movs	r1, #2
 8003178:	430a      	orrs	r2, r1
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_UART_MspInit+0x90>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2202      	movs	r2, #2
 8003182:	4013      	ands	r3, r2
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003188:	210c      	movs	r1, #12
 800318a:	187b      	adds	r3, r7, r1
 800318c:	22c0      	movs	r2, #192	; 0xc0
 800318e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	187b      	adds	r3, r7, r1
 8003192:	2202      	movs	r2, #2
 8003194:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2203      	movs	r2, #3
 80031a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2200      	movs	r2, #0
 80031a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_UART_MspInit+0x94>)
 80031ac:	0019      	movs	r1, r3
 80031ae:	0010      	movs	r0, r2
 80031b0:	f000 faa0 	bl	80036f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2100      	movs	r1, #0
 80031b8:	201b      	movs	r0, #27
 80031ba:	f000 f9e1 	bl	8003580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031be:	201b      	movs	r0, #27
 80031c0:	f000 f9f3 	bl	80035aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b008      	add	sp, #32
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40013800 	.word	0x40013800
 80031d0:	40021000 	.word	0x40021000
 80031d4:	50000400 	.word	0x50000400

080031d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <NMI_Handler+0x4>

080031de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e2:	e7fe      	b.n	80031e2 <HardFault_Handler+0x4>

080031e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fc:	f000 f8d6 	bl	80033ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <TIM2_IRQHandler+0x14>)
 800320e:	0018      	movs	r0, r3
 8003210:	f002 f9aa 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	20000234 	.word	0x20000234

08003220 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <USART1_IRQHandler+0x14>)
 8003226:	0018      	movs	r0, r3
 8003228:	f002 fda6 	bl	8005d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	200001a0 	.word	0x200001a0

08003238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <_sbrk+0x5c>)
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <_sbrk+0x60>)
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800324c:	4b13      	ldr	r3, [pc, #76]	; (800329c <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <_sbrk+0x64>)
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <_sbrk+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	18d3      	adds	r3, r2, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d207      	bcs.n	8003278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003268:	f003 fc30 	bl	8006acc <__errno>
 800326c:	0003      	movs	r3, r0
 800326e:	220c      	movs	r2, #12
 8003270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003272:	2301      	movs	r3, #1
 8003274:	425b      	negs	r3, r3
 8003276:	e009      	b.n	800328c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	18d2      	adds	r2, r2, r3
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <_sbrk+0x64>)
 8003288:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b006      	add	sp, #24
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20002000 	.word	0x20002000
 8003298:	00000400 	.word	0x00000400
 800329c:	200000d8 	.word	0x200000d8
 80032a0:	20000290 	.word	0x20000290

080032a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80032b0:	480d      	ldr	r0, [pc, #52]	; (80032e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <LoopForever+0x6>)
  ldr r1, =_edata
 80032b6:	490e      	ldr	r1, [pc, #56]	; (80032f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032b8:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <LoopForever+0xe>)
  movs r3, #0
 80032ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032bc:	e002      	b.n	80032c4 <LoopCopyDataInit>

080032be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032c2:	3304      	adds	r3, #4

080032c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c8:	d3f9      	bcc.n	80032be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032cc:	4c0b      	ldr	r4, [pc, #44]	; (80032fc <LoopForever+0x16>)
  movs r3, #0
 80032ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d0:	e001      	b.n	80032d6 <LoopFillZerobss>

080032d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032d4:	3204      	adds	r2, #4

080032d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d8:	d3fb      	bcc.n	80032d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032da:	f7ff ffe3 	bl	80032a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032de:	f003 fbfb 	bl	8006ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032e2:	f7ff f8e5 	bl	80024b0 <main>

080032e6 <LoopForever>:

LoopForever:
    b LoopForever
 80032e6:	e7fe      	b.n	80032e6 <LoopForever>
  ldr   r0, =_estack
 80032e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80032ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80032f4:	080086e0 	.word	0x080086e0
  ldr r2, =_sbss
 80032f8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80032fc:	2000028c 	.word	0x2000028c

08003300 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003300:	e7fe      	b.n	8003300 <ADC1_COMP_IRQHandler>
	...

08003304 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_Init+0x3c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_Init+0x3c>)
 8003316:	2140      	movs	r1, #64	; 0x40
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800331c:	2000      	movs	r0, #0
 800331e:	f000 f811 	bl	8003344 <HAL_InitTick>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d003      	beq.n	800332e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e001      	b.n	8003332 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800332e:	f7ff fe5d 	bl	8002fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003332:	1dfb      	adds	r3, r7, #7
 8003334:	781b      	ldrb	r3, [r3, #0]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b002      	add	sp, #8
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	40022000 	.word	0x40022000

08003344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_InitTick+0x5c>)
 800334e:	681c      	ldr	r4, [r3, #0]
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_InitTick+0x60>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	0019      	movs	r1, r3
 8003356:	23fa      	movs	r3, #250	; 0xfa
 8003358:	0098      	lsls	r0, r3, #2
 800335a:	f7fc fedd 	bl	8000118 <__udivsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	0019      	movs	r1, r3
 8003362:	0020      	movs	r0, r4
 8003364:	f7fc fed8 	bl	8000118 <__udivsi3>
 8003368:	0003      	movs	r3, r0
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f92d 	bl	80035ca <HAL_SYSTICK_Config>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d001      	beq.n	8003378 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e00f      	b.n	8003398 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d80b      	bhi.n	8003396 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	2301      	movs	r3, #1
 8003382:	425b      	negs	r3, r3
 8003384:	2200      	movs	r2, #0
 8003386:	0018      	movs	r0, r3
 8003388:	f000 f8fa 	bl	8003580 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_InitTick+0x64>)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b003      	add	sp, #12
 800339e:	bd90      	pop	{r4, r7, pc}
 80033a0:	20000028 	.word	0x20000028
 80033a4:	20000030 	.word	0x20000030
 80033a8:	2000002c 	.word	0x2000002c

080033ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_IncTick+0x1c>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	001a      	movs	r2, r3
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_IncTick+0x20>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	18d2      	adds	r2, r2, r3
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_IncTick+0x20>)
 80033be:	601a      	str	r2, [r3, #0]
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20000030 	.word	0x20000030
 80033cc:	20000284 	.word	0x20000284

080033d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  return uwTick;
 80033d4:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <HAL_GetTick+0x10>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	20000284 	.word	0x20000284

080033e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_GetTick>
 80033f0:	0003      	movs	r3, r0
 80033f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	d005      	beq.n	800340a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_Delay+0x40>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	001a      	movs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	189b      	adds	r3, r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	f7ff ffe0 	bl	80033d0 <HAL_GetTick>
 8003410:	0002      	movs	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	429a      	cmp	r2, r3
 800341a:	d8f7      	bhi.n	800340c <HAL_Delay+0x28>
  {
  }
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000030 	.word	0x20000030

08003428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	0002      	movs	r2, r0
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b7f      	cmp	r3, #127	; 0x7f
 800343a:	d809      	bhi.n	8003450 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343c:	1dfb      	adds	r3, r7, #7
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	001a      	movs	r2, r3
 8003442:	231f      	movs	r3, #31
 8003444:	401a      	ands	r2, r3
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_EnableIRQ+0x30>)
 8003448:	2101      	movs	r1, #1
 800344a:	4091      	lsls	r1, r2
 800344c:	000a      	movs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
  }
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	0002      	movs	r2, r0
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	1dfb      	adds	r3, r7, #7
 8003468:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800346a:	1dfb      	adds	r3, r7, #7
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b7f      	cmp	r3, #127	; 0x7f
 8003470:	d828      	bhi.n	80034c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003472:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <__NVIC_SetPriority+0xd4>)
 8003474:	1dfb      	adds	r3, r7, #7
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b25b      	sxtb	r3, r3
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	33c0      	adds	r3, #192	; 0xc0
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	589b      	ldr	r3, [r3, r2]
 8003482:	1dfa      	adds	r2, r7, #7
 8003484:	7812      	ldrb	r2, [r2, #0]
 8003486:	0011      	movs	r1, r2
 8003488:	2203      	movs	r2, #3
 800348a:	400a      	ands	r2, r1
 800348c:	00d2      	lsls	r2, r2, #3
 800348e:	21ff      	movs	r1, #255	; 0xff
 8003490:	4091      	lsls	r1, r2
 8003492:	000a      	movs	r2, r1
 8003494:	43d2      	mvns	r2, r2
 8003496:	401a      	ands	r2, r3
 8003498:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	22ff      	movs	r2, #255	; 0xff
 80034a0:	401a      	ands	r2, r3
 80034a2:	1dfb      	adds	r3, r7, #7
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	0018      	movs	r0, r3
 80034a8:	2303      	movs	r3, #3
 80034aa:	4003      	ands	r3, r0
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b0:	481f      	ldr	r0, [pc, #124]	; (8003530 <__NVIC_SetPriority+0xd4>)
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	430a      	orrs	r2, r1
 80034bc:	33c0      	adds	r3, #192	; 0xc0
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034c2:	e031      	b.n	8003528 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <__NVIC_SetPriority+0xd8>)
 80034c6:	1dfb      	adds	r3, r7, #7
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	0019      	movs	r1, r3
 80034cc:	230f      	movs	r3, #15
 80034ce:	400b      	ands	r3, r1
 80034d0:	3b08      	subs	r3, #8
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3306      	adds	r3, #6
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	18d3      	adds	r3, r2, r3
 80034da:	3304      	adds	r3, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	1dfa      	adds	r2, r7, #7
 80034e0:	7812      	ldrb	r2, [r2, #0]
 80034e2:	0011      	movs	r1, r2
 80034e4:	2203      	movs	r2, #3
 80034e6:	400a      	ands	r2, r1
 80034e8:	00d2      	lsls	r2, r2, #3
 80034ea:	21ff      	movs	r1, #255	; 0xff
 80034ec:	4091      	lsls	r1, r2
 80034ee:	000a      	movs	r2, r1
 80034f0:	43d2      	mvns	r2, r2
 80034f2:	401a      	ands	r2, r3
 80034f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	019b      	lsls	r3, r3, #6
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	401a      	ands	r2, r3
 80034fe:	1dfb      	adds	r3, r7, #7
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	0018      	movs	r0, r3
 8003504:	2303      	movs	r3, #3
 8003506:	4003      	ands	r3, r0
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800350c:	4809      	ldr	r0, [pc, #36]	; (8003534 <__NVIC_SetPriority+0xd8>)
 800350e:	1dfb      	adds	r3, r7, #7
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	001c      	movs	r4, r3
 8003514:	230f      	movs	r3, #15
 8003516:	4023      	ands	r3, r4
 8003518:	3b08      	subs	r3, #8
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	430a      	orrs	r2, r1
 800351e:	3306      	adds	r3, #6
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	18c3      	adds	r3, r0, r3
 8003524:	3304      	adds	r3, #4
 8003526:	601a      	str	r2, [r3, #0]
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b003      	add	sp, #12
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	e000e100 	.word	0xe000e100
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <SysTick_Config+0x40>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354a:	2301      	movs	r3, #1
 800354c:	e010      	b.n	8003570 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <SysTick_Config+0x44>)
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	3a01      	subs	r2, #1
 8003554:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003556:	2301      	movs	r3, #1
 8003558:	425b      	negs	r3, r3
 800355a:	2103      	movs	r1, #3
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ff7d 	bl	800345c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <SysTick_Config+0x44>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <SysTick_Config+0x44>)
 800356a:	2207      	movs	r2, #7
 800356c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b002      	add	sp, #8
 8003576:	bd80      	pop	{r7, pc}
 8003578:	00ffffff 	.word	0x00ffffff
 800357c:	e000e010 	.word	0xe000e010

08003580 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	210f      	movs	r1, #15
 800358c:	187b      	adds	r3, r7, r1
 800358e:	1c02      	adds	r2, r0, #0
 8003590:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	187b      	adds	r3, r7, r1
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b25b      	sxtb	r3, r3
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff ff5d 	bl	800345c <__NVIC_SetPriority>
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b004      	add	sp, #16
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	0002      	movs	r2, r0
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	0018      	movs	r0, r3
 80035be:	f7ff ff33 	bl	8003428 <__NVIC_EnableIRQ>
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b002      	add	sp, #8
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7ff ffaf 	bl	8003538 <SysTick_Config>
 80035da:	0003      	movs	r3, r0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	230f      	movs	r3, #15
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2225      	movs	r2, #37	; 0x25
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d008      	beq.n	8003612 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2204      	movs	r2, #4
 8003604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2224      	movs	r2, #36	; 0x24
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e024      	b.n	800365c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	210e      	movs	r1, #14
 800361e:	438a      	bics	r2, r1
 8003620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2101      	movs	r1, #1
 800362e:	438a      	bics	r2, r1
 8003630:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	221c      	movs	r2, #28
 8003638:	401a      	ands	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	2101      	movs	r1, #1
 8003640:	4091      	lsls	r1, r2
 8003642:	000a      	movs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2225      	movs	r2, #37	; 0x25
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2224      	movs	r2, #36	; 0x24
 8003652:	2100      	movs	r1, #0
 8003654:	5499      	strb	r1, [r3, r2]

    return status;
 8003656:	230f      	movs	r3, #15
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b004      	add	sp, #16
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	230f      	movs	r3, #15
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2225      	movs	r2, #37	; 0x25
 8003678:	5c9b      	ldrb	r3, [r3, r2]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d007      	beq.n	8003690 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2204      	movs	r2, #4
 8003684:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003686:	230f      	movs	r3, #15
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e02a      	b.n	80036e6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	210e      	movs	r1, #14
 800369c:	438a      	bics	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2101      	movs	r1, #1
 80036ac:	438a      	bics	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	221c      	movs	r2, #28
 80036b6:	401a      	ands	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	2101      	movs	r1, #1
 80036be:	4091      	lsls	r1, r2
 80036c0:	000a      	movs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2225      	movs	r2, #37	; 0x25
 80036c8:	2101      	movs	r1, #1
 80036ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	2100      	movs	r1, #0
 80036d2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	0010      	movs	r0, r2
 80036e4:	4798      	blx	r3
    }
  }
  return status;
 80036e6:	230f      	movs	r3, #15
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b004      	add	sp, #16
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800370a:	e14f      	b.n	80039ac <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4091      	lsls	r1, r2
 8003716:	000a      	movs	r2, r1
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d100      	bne.n	8003724 <HAL_GPIO_Init+0x30>
 8003722:	e140      	b.n	80039a6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d00b      	beq.n	8003744 <HAL_GPIO_Init+0x50>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d007      	beq.n	8003744 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003738:	2b11      	cmp	r3, #17
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b12      	cmp	r3, #18
 8003742:	d130      	bne.n	80037a6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	409a      	lsls	r2, r3
 8003752:	0013      	movs	r3, r2
 8003754:	43da      	mvns	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	409a      	lsls	r2, r3
 8003766:	0013      	movs	r3, r2
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800377a:	2201      	movs	r2, #1
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
 8003780:	0013      	movs	r3, r2
 8003782:	43da      	mvns	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	2201      	movs	r2, #1
 8003792:	401a      	ands	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	409a      	lsls	r2, r3
 8003798:	0013      	movs	r3, r2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	2203      	movs	r2, #3
 80037b2:	409a      	lsls	r2, r3
 80037b4:	0013      	movs	r3, r2
 80037b6:	43da      	mvns	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	409a      	lsls	r2, r3
 80037c8:	0013      	movs	r3, r2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0xf2>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b12      	cmp	r3, #18
 80037e4:	d123      	bne.n	800382e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	0092      	lsls	r2, r2, #2
 80037f0:	58d3      	ldr	r3, [r2, r3]
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2207      	movs	r2, #7
 80037f8:	4013      	ands	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	409a      	lsls	r2, r3
 8003800:	0013      	movs	r3, r2
 8003802:	43da      	mvns	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2107      	movs	r1, #7
 8003812:	400b      	ands	r3, r1
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	409a      	lsls	r2, r3
 8003818:	0013      	movs	r3, r2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	08da      	lsrs	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3208      	adds	r2, #8
 8003828:	0092      	lsls	r2, r2, #2
 800382a:	6939      	ldr	r1, [r7, #16]
 800382c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	409a      	lsls	r2, r3
 800383c:	0013      	movs	r3, r2
 800383e:	43da      	mvns	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2203      	movs	r2, #3
 800384c:	401a      	ands	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	055b      	lsls	r3, r3, #21
 800386a:	4013      	ands	r3, r2
 800386c:	d100      	bne.n	8003870 <HAL_GPIO_Init+0x17c>
 800386e:	e09a      	b.n	80039a6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003870:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_GPIO_Init+0x2d0>)
 8003876:	2101      	movs	r1, #1
 8003878:	430a      	orrs	r2, r1
 800387a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800387c:	4a52      	ldr	r2, [pc, #328]	; (80039c8 <HAL_GPIO_Init+0x2d4>)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	3302      	adds	r3, #2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	589b      	ldr	r3, [r3, r2]
 8003888:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2203      	movs	r2, #3
 800388e:	4013      	ands	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	220f      	movs	r2, #15
 8003894:	409a      	lsls	r2, r3
 8003896:	0013      	movs	r3, r2
 8003898:	43da      	mvns	r2, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	23a0      	movs	r3, #160	; 0xa0
 80038a4:	05db      	lsls	r3, r3, #23
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d019      	beq.n	80038de <HAL_GPIO_Init+0x1ea>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a47      	ldr	r2, [pc, #284]	; (80039cc <HAL_GPIO_Init+0x2d8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <HAL_GPIO_Init+0x1e6>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <HAL_GPIO_Init+0x2dc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00d      	beq.n	80038d6 <HAL_GPIO_Init+0x1e2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a45      	ldr	r2, [pc, #276]	; (80039d4 <HAL_GPIO_Init+0x2e0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <HAL_GPIO_Init+0x1de>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a44      	ldr	r2, [pc, #272]	; (80039d8 <HAL_GPIO_Init+0x2e4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_GPIO_Init+0x1da>
 80038ca:	2305      	movs	r3, #5
 80038cc:	e008      	b.n	80038e0 <HAL_GPIO_Init+0x1ec>
 80038ce:	2306      	movs	r3, #6
 80038d0:	e006      	b.n	80038e0 <HAL_GPIO_Init+0x1ec>
 80038d2:	2303      	movs	r3, #3
 80038d4:	e004      	b.n	80038e0 <HAL_GPIO_Init+0x1ec>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_Init+0x1ec>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_GPIO_Init+0x1ec>
 80038de:	2300      	movs	r3, #0
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	2103      	movs	r1, #3
 80038e4:	400a      	ands	r2, r1
 80038e6:	0092      	lsls	r2, r2, #2
 80038e8:	4093      	lsls	r3, r2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f0:	4935      	ldr	r1, [pc, #212]	; (80039c8 <HAL_GPIO_Init+0x2d4>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038fe:	4b37      	ldr	r3, [pc, #220]	; (80039dc <HAL_GPIO_Init+0x2e8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43da      	mvns	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	4013      	ands	r3, r2
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003922:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <HAL_GPIO_Init+0x2e8>)
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003928:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <HAL_GPIO_Init+0x2e8>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	43da      	mvns	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	4013      	ands	r3, r2
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800394c:	4b23      	ldr	r3, [pc, #140]	; (80039dc <HAL_GPIO_Init+0x2e8>)
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003952:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_GPIO_Init+0x2e8>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	43da      	mvns	r2, r3
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	035b      	lsls	r3, r3, #13
 800396a:	4013      	ands	r3, r2
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003976:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_GPIO_Init+0x2e8>)
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_GPIO_Init+0x2e8>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	43da      	mvns	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	039b      	lsls	r3, r3, #14
 8003994:	4013      	ands	r3, r2
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_GPIO_Init+0x2e8>)
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3301      	adds	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	40da      	lsrs	r2, r3
 80039b4:	1e13      	subs	r3, r2, #0
 80039b6:	d000      	beq.n	80039ba <HAL_GPIO_Init+0x2c6>
 80039b8:	e6a8      	b.n	800370c <HAL_GPIO_Init+0x18>
  }
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b006      	add	sp, #24
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40010000 	.word	0x40010000
 80039cc:	50000400 	.word	0x50000400
 80039d0:	50000800 	.word	0x50000800
 80039d4:	50000c00 	.word	0x50000c00
 80039d8:	50001c00 	.word	0x50001c00
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	0008      	movs	r0, r1
 80039ea:	0011      	movs	r1, r2
 80039ec:	1cbb      	adds	r3, r7, #2
 80039ee:	1c02      	adds	r2, r0, #0
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	1c7b      	adds	r3, r7, #1
 80039f4:	1c0a      	adds	r2, r1, #0
 80039f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039f8:	1c7b      	adds	r3, r7, #1
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a00:	1cbb      	adds	r3, r7, #2
 8003a02:	881a      	ldrh	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003a0a:	1cbb      	adds	r3, r7, #2
 8003a0c:	881a      	ldrh	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e082      	b.n	8003b34 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2241      	movs	r2, #65	; 0x41
 8003a32:	5c9b      	ldrb	r3, [r3, r2]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d107      	bne.n	8003a4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2240      	movs	r2, #64	; 0x40
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff fae5 	bl	8003014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2241      	movs	r2, #65	; 0x41
 8003a4e:	2124      	movs	r1, #36	; 0x24
 8003a50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	438a      	bics	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4934      	ldr	r1, [pc, #208]	; (8003b3c <HAL_I2C_Init+0x120>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4931      	ldr	r1, [pc, #196]	; (8003b40 <HAL_I2C_Init+0x124>)
 8003a7c:	400a      	ands	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d108      	bne.n	8003a9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	0209      	lsls	r1, r1, #8
 8003a94:	430a      	orrs	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	e007      	b.n	8003aaa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2184      	movs	r1, #132	; 0x84
 8003aa4:	0209      	lsls	r1, r1, #8
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d104      	bne.n	8003abc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	0112      	lsls	r2, r2, #4
 8003aba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	491f      	ldr	r1, [pc, #124]	; (8003b44 <HAL_I2C_Init+0x128>)
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	491a      	ldr	r1, [pc, #104]	; (8003b40 <HAL_I2C_Init+0x124>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69d9      	ldr	r1, [r3, #28]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1a      	ldr	r2, [r3, #32]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	430a      	orrs	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2241      	movs	r2, #65	; 0x41
 8003b20:	2120      	movs	r1, #32
 8003b22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2242      	movs	r2, #66	; 0x42
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	f0ffffff 	.word	0xf0ffffff
 8003b40:	ffff7fff 	.word	0xffff7fff
 8003b44:	02008000 	.word	0x02008000

08003b48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	000c      	movs	r4, r1
 8003b52:	0010      	movs	r0, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	230a      	movs	r3, #10
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	1c22      	adds	r2, r4, #0
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	2308      	movs	r3, #8
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	1c02      	adds	r2, r0, #0
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	1dbb      	adds	r3, r7, #6
 8003b68:	1c0a      	adds	r2, r1, #0
 8003b6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2241      	movs	r2, #65	; 0x41
 8003b70:	5c9b      	ldrb	r3, [r3, r2]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d000      	beq.n	8003b7a <HAL_I2C_Mem_Write+0x32>
 8003b78:	e10c      	b.n	8003d94 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <HAL_I2C_Mem_Write+0x42>
 8003b80:	232c      	movs	r3, #44	; 0x2c
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	0092      	lsls	r2, r2, #2
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0ff      	b.n	8003d96 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2240      	movs	r2, #64	; 0x40
 8003b9a:	5c9b      	ldrb	r3, [r3, r2]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2C_Mem_Write+0x5c>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0f8      	b.n	8003d96 <HAL_I2C_Mem_Write+0x24e>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	2101      	movs	r1, #1
 8003baa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bac:	f7ff fc10 	bl	80033d0 <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	0219      	lsls	r1, r3, #8
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2319      	movs	r3, #25
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f000 fb0b 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0e3      	b.n	8003d96 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2241      	movs	r2, #65	; 0x41
 8003bd2:	2121      	movs	r1, #33	; 0x21
 8003bd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2242      	movs	r2, #66	; 0x42
 8003bda:	2140      	movs	r1, #64	; 0x40
 8003bdc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	222c      	movs	r2, #44	; 0x2c
 8003bee:	18ba      	adds	r2, r7, r2
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bfa:	1dbb      	adds	r3, r7, #6
 8003bfc:	881c      	ldrh	r4, [r3, #0]
 8003bfe:	2308      	movs	r3, #8
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	881a      	ldrh	r2, [r3, #0]
 8003c04:	230a      	movs	r3, #10
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	8819      	ldrh	r1, [r3, #0]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	0023      	movs	r3, r4
 8003c16:	f000 f9f9 	bl	800400c <I2C_RequestMemoryWrite>
 8003c1a:	1e03      	subs	r3, r0, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2240      	movs	r2, #64	; 0x40
 8003c22:	2100      	movs	r1, #0
 8003c24:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0b5      	b.n	8003d96 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2bff      	cmp	r3, #255	; 0xff
 8003c32:	d911      	bls.n	8003c58 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	045c      	lsls	r4, r3, #17
 8003c44:	230a      	movs	r3, #10
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	8819      	ldrh	r1, [r3, #0]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	0023      	movs	r3, r4
 8003c52:	f000 fbe3 	bl	800441c <I2C_TransferConfig>
 8003c56:	e012      	b.n	8003c7e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	049c      	lsls	r4, r3, #18
 8003c6c:	230a      	movs	r3, #10
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	8819      	ldrh	r1, [r3, #0]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	2300      	movs	r3, #0
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	0023      	movs	r3, r4
 8003c7a:	f000 fbcf 	bl	800441c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f000 fae8 	bl	800425a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c8a:	1e03      	subs	r3, r0, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e081      	b.n	8003d96 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03a      	beq.n	8003d42 <HAL_I2C_Mem_Write+0x1fa>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d136      	bne.n	8003d42 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	0013      	movs	r3, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	f000 fa7b 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	1e03      	subs	r3, r0, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e053      	b.n	8003d96 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2bff      	cmp	r3, #255	; 0xff
 8003cf6:	d911      	bls.n	8003d1c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	22ff      	movs	r2, #255	; 0xff
 8003cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	045c      	lsls	r4, r3, #17
 8003d08:	230a      	movs	r3, #10
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	8819      	ldrh	r1, [r3, #0]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	2300      	movs	r3, #0
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	0023      	movs	r3, r4
 8003d16:	f000 fb81 	bl	800441c <I2C_TransferConfig>
 8003d1a:	e012      	b.n	8003d42 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	049c      	lsls	r4, r3, #18
 8003d30:	230a      	movs	r3, #10
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	8819      	ldrh	r1, [r3, #0]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	0023      	movs	r3, r4
 8003d3e:	f000 fb6d 	bl	800441c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d198      	bne.n	8003c7e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 fac0 	bl	80042d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d58:	1e03      	subs	r3, r0, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e01a      	b.n	8003d96 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2220      	movs	r2, #32
 8003d66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	490b      	ldr	r1, [pc, #44]	; (8003da0 <HAL_I2C_Mem_Write+0x258>)
 8003d74:	400a      	ands	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2241      	movs	r2, #65	; 0x41
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2242      	movs	r2, #66	; 0x42
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2240      	movs	r2, #64	; 0x40
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b007      	add	sp, #28
 8003d9c:	bd90      	pop	{r4, r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	fe00e800 	.word	0xfe00e800

08003da4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	000c      	movs	r4, r1
 8003dae:	0010      	movs	r0, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	230a      	movs	r3, #10
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	1c22      	adds	r2, r4, #0
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	2308      	movs	r3, #8
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	1c02      	adds	r2, r0, #0
 8003dc0:	801a      	strh	r2, [r3, #0]
 8003dc2:	1dbb      	adds	r3, r7, #6
 8003dc4:	1c0a      	adds	r2, r1, #0
 8003dc6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2241      	movs	r2, #65	; 0x41
 8003dcc:	5c9b      	ldrb	r3, [r3, r2]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d000      	beq.n	8003dd6 <HAL_I2C_Mem_Read+0x32>
 8003dd4:	e110      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_I2C_Mem_Read+0x42>
 8003ddc:	232c      	movs	r3, #44	; 0x2c
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2280      	movs	r2, #128	; 0x80
 8003dea:	0092      	lsls	r2, r2, #2
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e103      	b.n	8003ffa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2240      	movs	r2, #64	; 0x40
 8003df6:	5c9b      	ldrb	r3, [r3, r2]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2C_Mem_Read+0x5c>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0fc      	b.n	8003ffa <HAL_I2C_Mem_Read+0x256>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	2101      	movs	r1, #1
 8003e06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e08:	f7ff fae2 	bl	80033d0 <HAL_GetTick>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	0219      	lsls	r1, r3, #8
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	2319      	movs	r3, #25
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f000 f9dd 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003e22:	1e03      	subs	r3, r0, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0e7      	b.n	8003ffa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2241      	movs	r2, #65	; 0x41
 8003e2e:	2122      	movs	r1, #34	; 0x22
 8003e30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2242      	movs	r2, #66	; 0x42
 8003e36:	2140      	movs	r1, #64	; 0x40
 8003e38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	222c      	movs	r2, #44	; 0x2c
 8003e4a:	18ba      	adds	r2, r7, r2
 8003e4c:	8812      	ldrh	r2, [r2, #0]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e56:	1dbb      	adds	r3, r7, #6
 8003e58:	881c      	ldrh	r4, [r3, #0]
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	881a      	ldrh	r2, [r3, #0]
 8003e60:	230a      	movs	r3, #10
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	8819      	ldrh	r1, [r3, #0]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	0023      	movs	r3, r4
 8003e72:	f000 f92f 	bl	80040d4 <I2C_RequestMemoryRead>
 8003e76:	1e03      	subs	r3, r0, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2240      	movs	r2, #64	; 0x40
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e0b9      	b.n	8003ffa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2bff      	cmp	r3, #255	; 0xff
 8003e8e:	d911      	bls.n	8003eb4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	045c      	lsls	r4, r3, #17
 8003ea0:	230a      	movs	r3, #10
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	8819      	ldrh	r1, [r3, #0]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	4b56      	ldr	r3, [pc, #344]	; (8004004 <HAL_I2C_Mem_Read+0x260>)
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	0023      	movs	r3, r4
 8003eae:	f000 fab5 	bl	800441c <I2C_TransferConfig>
 8003eb2:	e012      	b.n	8003eda <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	049c      	lsls	r4, r3, #18
 8003ec8:	230a      	movs	r3, #10
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	8819      	ldrh	r1, [r3, #0]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	4b4c      	ldr	r3, [pc, #304]	; (8004004 <HAL_I2C_Mem_Read+0x260>)
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	0023      	movs	r3, r4
 8003ed6:	f000 faa1 	bl	800441c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	0013      	movs	r3, r2
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2104      	movs	r1, #4
 8003ee8:	f000 f978 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e082      	b.n	8003ffa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d03a      	beq.n	8003fa6 <HAL_I2C_Mem_Read+0x202>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d136      	bne.n	8003fa6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	0013      	movs	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	2180      	movs	r1, #128	; 0x80
 8003f46:	f000 f949 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e053      	b.n	8003ffa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2bff      	cmp	r3, #255	; 0xff
 8003f5a:	d911      	bls.n	8003f80 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	22ff      	movs	r2, #255	; 0xff
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	045c      	lsls	r4, r3, #17
 8003f6c:	230a      	movs	r3, #10
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	8819      	ldrh	r1, [r3, #0]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	2300      	movs	r3, #0
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	0023      	movs	r3, r4
 8003f7a:	f000 fa4f 	bl	800441c <I2C_TransferConfig>
 8003f7e:	e012      	b.n	8003fa6 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	049c      	lsls	r4, r3, #18
 8003f94:	230a      	movs	r3, #10
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	8819      	ldrh	r1, [r3, #0]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	0023      	movs	r3, r4
 8003fa2:	f000 fa3b 	bl	800441c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d194      	bne.n	8003eda <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 f98e 	bl	80042d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e01a      	b.n	8003ffa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	490c      	ldr	r1, [pc, #48]	; (8004008 <HAL_I2C_Mem_Read+0x264>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2241      	movs	r2, #65	; 0x41
 8003fe0:	2120      	movs	r1, #32
 8003fe2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2242      	movs	r2, #66	; 0x42
 8003fe8:	2100      	movs	r1, #0
 8003fea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2240      	movs	r2, #64	; 0x40
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
  }
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b007      	add	sp, #28
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	80002400 	.word	0x80002400
 8004008:	fe00e800 	.word	0xfe00e800

0800400c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b5b0      	push	{r4, r5, r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	000c      	movs	r4, r1
 8004016:	0010      	movs	r0, r2
 8004018:	0019      	movs	r1, r3
 800401a:	250a      	movs	r5, #10
 800401c:	197b      	adds	r3, r7, r5
 800401e:	1c22      	adds	r2, r4, #0
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	2308      	movs	r3, #8
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	1c02      	adds	r2, r0, #0
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	1dbb      	adds	r3, r7, #6
 800402c:	1c0a      	adds	r2, r1, #0
 800402e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004030:	1dbb      	adds	r3, r7, #6
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	045c      	lsls	r4, r3, #17
 800403a:	197b      	adds	r3, r7, r5
 800403c:	8819      	ldrh	r1, [r3, #0]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <I2C_RequestMemoryWrite+0xc4>)
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	0023      	movs	r3, r4
 8004046:	f000 f9e9 	bl	800441c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	0018      	movs	r0, r3
 8004052:	f000 f902 	bl	800425a <I2C_WaitOnTXISFlagUntilTimeout>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d001      	beq.n	800405e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e033      	b.n	80040c6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800405e:	1dbb      	adds	r3, r7, #6
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004066:	2308      	movs	r3, #8
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
 8004074:	e019      	b.n	80040aa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004076:	2308      	movs	r3, #8
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	b29b      	uxth	r3, r3
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408a:	6a39      	ldr	r1, [r7, #32]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 f8e3 	bl	800425a <I2C_WaitOnTXISFlagUntilTimeout>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d001      	beq.n	800409c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e014      	b.n	80040c6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800409c:	2308      	movs	r3, #8
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a3a      	ldr	r2, [r7, #32]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	0013      	movs	r3, r2
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	f000 f890 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b004      	add	sp, #16
 80040cc:	bdb0      	pop	{r4, r5, r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	80002000 	.word	0x80002000

080040d4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b5b0      	push	{r4, r5, r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	000c      	movs	r4, r1
 80040de:	0010      	movs	r0, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	250a      	movs	r5, #10
 80040e4:	197b      	adds	r3, r7, r5
 80040e6:	1c22      	adds	r2, r4, #0
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	2308      	movs	r3, #8
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	1c02      	adds	r2, r0, #0
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	1dbb      	adds	r3, r7, #6
 80040f4:	1c0a      	adds	r2, r1, #0
 80040f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	197b      	adds	r3, r7, r5
 8004100:	8819      	ldrh	r1, [r3, #0]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	4b23      	ldr	r3, [pc, #140]	; (8004194 <I2C_RequestMemoryRead+0xc0>)
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2300      	movs	r3, #0
 800410a:	f000 f987 	bl	800441c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	6a39      	ldr	r1, [r7, #32]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	0018      	movs	r0, r3
 8004116:	f000 f8a0 	bl	800425a <I2C_WaitOnTXISFlagUntilTimeout>
 800411a:	1e03      	subs	r3, r0, #0
 800411c:	d001      	beq.n	8004122 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e033      	b.n	800418a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004122:	1dbb      	adds	r3, r7, #6
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800412a:	2308      	movs	r3, #8
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28
 8004138:	e019      	b.n	800416e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800413a:	2308      	movs	r3, #8
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	0a1b      	lsrs	r3, r3, #8
 8004142:	b29b      	uxth	r3, r3
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414e:	6a39      	ldr	r1, [r7, #32]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	0018      	movs	r0, r3
 8004154:	f000 f881 	bl	800425a <I2C_WaitOnTXISFlagUntilTimeout>
 8004158:	1e03      	subs	r3, r0, #0
 800415a:	d001      	beq.n	8004160 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e014      	b.n	800418a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004160:	2308      	movs	r3, #8
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800416e:	6a3a      	ldr	r2, [r7, #32]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	0013      	movs	r3, r2
 8004178:	2200      	movs	r2, #0
 800417a:	2140      	movs	r1, #64	; 0x40
 800417c:	f000 f82e 	bl	80041dc <I2C_WaitOnFlagUntilTimeout>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d001      	beq.n	8004188 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b004      	add	sp, #16
 8004190:	bdb0      	pop	{r4, r5, r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	80002000 	.word	0x80002000

08004198 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2202      	movs	r2, #2
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d103      	bne.n	80041b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2201      	movs	r2, #1
 80041be:	4013      	ands	r3, r2
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d007      	beq.n	80041d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2101      	movs	r1, #1
 80041d0:	430a      	orrs	r2, r1
 80041d2:	619a      	str	r2, [r3, #24]
  }
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	1dfb      	adds	r3, r7, #7
 80041ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ec:	e021      	b.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	d01e      	beq.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f4:	f7ff f8ec 	bl	80033d0 <HAL_GetTick>
 80041f8:	0002      	movs	r2, r0
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d302      	bcc.n	800420a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d113      	bne.n	8004232 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	2220      	movs	r2, #32
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2241      	movs	r2, #65	; 0x41
 800421a:	2120      	movs	r1, #32
 800421c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2242      	movs	r2, #66	; 0x42
 8004222:	2100      	movs	r1, #0
 8004224:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2240      	movs	r2, #64	; 0x40
 800422a:	2100      	movs	r1, #0
 800422c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00f      	b.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	425a      	negs	r2, r3
 8004242:	4153      	adcs	r3, r2
 8004244:	b2db      	uxtb	r3, r3
 8004246:	001a      	movs	r2, r3
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d0ce      	beq.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	0018      	movs	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	b004      	add	sp, #16
 8004258:	bd80      	pop	{r7, pc}

0800425a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004266:	e02b      	b.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	0018      	movs	r0, r3
 8004270:	f000 f86e 	bl	8004350 <I2C_IsAcknowledgeFailed>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d001      	beq.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e029      	b.n	80042d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	3301      	adds	r3, #1
 8004280:	d01e      	beq.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7ff f8a5 	bl	80033d0 <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d113      	bne.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	2220      	movs	r2, #32
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2241      	movs	r2, #65	; 0x41
 80042a8:	2120      	movs	r1, #32
 80042aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2242      	movs	r2, #66	; 0x42
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2240      	movs	r2, #64	; 0x40
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e007      	b.n	80042d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2202      	movs	r2, #2
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d1cc      	bne.n	8004268 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b004      	add	sp, #16
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e4:	e028      	b.n	8004338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 f82f 	bl	8004350 <I2C_IsAcknowledgeFailed>
 80042f2:	1e03      	subs	r3, r0, #0
 80042f4:	d001      	beq.n	80042fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e026      	b.n	8004348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fa:	f7ff f869 	bl	80033d0 <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	d302      	bcc.n	8004310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d113      	bne.n	8004338 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	2220      	movs	r2, #32
 8004316:	431a      	orrs	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2241      	movs	r2, #65	; 0x41
 8004320:	2120      	movs	r1, #32
 8004322:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2242      	movs	r2, #66	; 0x42
 8004328:	2100      	movs	r1, #0
 800432a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2240      	movs	r2, #64	; 0x40
 8004330:	2100      	movs	r1, #0
 8004332:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e007      	b.n	8004348 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2220      	movs	r2, #32
 8004340:	4013      	ands	r3, r2
 8004342:	2b20      	cmp	r3, #32
 8004344:	d1cf      	bne.n	80042e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b004      	add	sp, #16
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2210      	movs	r2, #16
 8004364:	4013      	ands	r3, r2
 8004366:	2b10      	cmp	r3, #16
 8004368:	d151      	bne.n	800440e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800436a:	e021      	b.n	80043b0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	3301      	adds	r3, #1
 8004370:	d01e      	beq.n	80043b0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7ff f82d 	bl	80033d0 <HAL_GetTick>
 8004376:	0002      	movs	r2, r0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_IsAcknowledgeFailed+0x38>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d113      	bne.n	80043b0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	2220      	movs	r2, #32
 800438e:	431a      	orrs	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2241      	movs	r2, #65	; 0x41
 8004398:	2120      	movs	r1, #32
 800439a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2242      	movs	r2, #66	; 0x42
 80043a0:	2100      	movs	r1, #0
 80043a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2240      	movs	r2, #64	; 0x40
 80043a8:	2100      	movs	r1, #0
 80043aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e02f      	b.n	8004410 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2220      	movs	r2, #32
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d1d6      	bne.n	800436c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2210      	movs	r2, #16
 80043c4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2220      	movs	r2, #32
 80043cc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7ff fee1 	bl	8004198 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	490d      	ldr	r1, [pc, #52]	; (8004418 <I2C_IsAcknowledgeFailed+0xc8>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	2204      	movs	r2, #4
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2241      	movs	r2, #65	; 0x41
 80043f6:	2120      	movs	r1, #32
 80043f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2242      	movs	r2, #66	; 0x42
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b004      	add	sp, #16
 8004416:	bd80      	pop	{r7, pc}
 8004418:	fe00e800 	.word	0xfe00e800

0800441c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	0008      	movs	r0, r1
 8004426:	0011      	movs	r1, r2
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	240a      	movs	r4, #10
 800442c:	193b      	adds	r3, r7, r4
 800442e:	1c02      	adds	r2, r0, #0
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	2009      	movs	r0, #9
 8004434:	183b      	adds	r3, r7, r0
 8004436:	1c0a      	adds	r2, r1, #0
 8004438:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	0d51      	lsrs	r1, r2, #21
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	00d2      	lsls	r2, r2, #3
 8004448:	400a      	ands	r2, r1
 800444a:	490e      	ldr	r1, [pc, #56]	; (8004484 <I2C_TransferConfig+0x68>)
 800444c:	430a      	orrs	r2, r1
 800444e:	43d2      	mvns	r2, r2
 8004450:	401a      	ands	r2, r3
 8004452:	0011      	movs	r1, r2
 8004454:	193b      	adds	r3, r7, r4
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	059b      	lsls	r3, r3, #22
 800445a:	0d9a      	lsrs	r2, r3, #22
 800445c:	183b      	adds	r3, r7, r0
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	0418      	lsls	r0, r3, #16
 8004462:	23ff      	movs	r3, #255	; 0xff
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	4003      	ands	r3, r0
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	431a      	orrs	r2, r3
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b005      	add	sp, #20
 8004480:	bd90      	pop	{r4, r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	03ff63ff 	.word	0x03ff63ff

08004488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2241      	movs	r2, #65	; 0x41
 8004496:	5c9b      	ldrb	r3, [r3, r2]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d138      	bne.n	8004510 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2240      	movs	r2, #64	; 0x40
 80044a2:	5c9b      	ldrb	r3, [r3, r2]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e032      	b.n	8004512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2240      	movs	r2, #64	; 0x40
 80044b0:	2101      	movs	r1, #1
 80044b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2241      	movs	r2, #65	; 0x41
 80044b8:	2124      	movs	r1, #36	; 0x24
 80044ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2101      	movs	r1, #1
 80044c8:	438a      	bics	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4911      	ldr	r1, [pc, #68]	; (800451c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80044d8:	400a      	ands	r2, r1
 80044da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6819      	ldr	r1, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2101      	movs	r1, #1
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2241      	movs	r2, #65	; 0x41
 8004500:	2120      	movs	r1, #32
 8004502:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2240      	movs	r2, #64	; 0x40
 8004508:	2100      	movs	r1, #0
 800450a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b002      	add	sp, #8
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	ffffefff 	.word	0xffffefff

08004520 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2241      	movs	r2, #65	; 0x41
 800452e:	5c9b      	ldrb	r3, [r3, r2]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b20      	cmp	r3, #32
 8004534:	d139      	bne.n	80045aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2240      	movs	r2, #64	; 0x40
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004540:	2302      	movs	r3, #2
 8004542:	e033      	b.n	80045ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2240      	movs	r2, #64	; 0x40
 8004548:	2101      	movs	r1, #1
 800454a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2241      	movs	r2, #65	; 0x41
 8004550:	2124      	movs	r1, #36	; 0x24
 8004552:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2101      	movs	r1, #1
 8004560:	438a      	bics	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a11      	ldr	r2, [pc, #68]	; (80045b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2101      	movs	r1, #1
 8004592:	430a      	orrs	r2, r1
 8004594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2241      	movs	r2, #65	; 0x41
 800459a:	2120      	movs	r1, #32
 800459c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2240      	movs	r2, #64	; 0x40
 80045a2:	2100      	movs	r1, #0
 80045a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e000      	b.n	80045ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
  }
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b004      	add	sp, #16
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	fffff0ff 	.word	0xfffff0ff

080045b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b8:	b5b0      	push	{r4, r5, r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f000 fbb4 	bl	8004d34 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045cc:	4bc3      	ldr	r3, [pc, #780]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	220c      	movs	r2, #12
 80045d2:	4013      	ands	r3, r2
 80045d4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d6:	4bc1      	ldr	r3, [pc, #772]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	2380      	movs	r3, #128	; 0x80
 80045dc:	025b      	lsls	r3, r3, #9
 80045de:	4013      	ands	r3, r2
 80045e0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2201      	movs	r2, #1
 80045e8:	4013      	ands	r3, r2
 80045ea:	d100      	bne.n	80045ee <HAL_RCC_OscConfig+0x36>
 80045ec:	e07e      	b.n	80046ec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d007      	beq.n	8004604 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	d112      	bne.n	8004620 <HAL_RCC_OscConfig+0x68>
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	025b      	lsls	r3, r3, #9
 8004600:	429a      	cmp	r2, r3
 8004602:	d10d      	bne.n	8004620 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004604:	4bb5      	ldr	r3, [pc, #724]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	4013      	ands	r3, r2
 800460e:	d100      	bne.n	8004612 <HAL_RCC_OscConfig+0x5a>
 8004610:	e06b      	b.n	80046ea <HAL_RCC_OscConfig+0x132>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d167      	bne.n	80046ea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f000 fb8a 	bl	8004d34 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	025b      	lsls	r3, r3, #9
 8004628:	429a      	cmp	r2, r3
 800462a:	d107      	bne.n	800463c <HAL_RCC_OscConfig+0x84>
 800462c:	4bab      	ldr	r3, [pc, #684]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4baa      	ldr	r3, [pc, #680]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	0249      	lsls	r1, r1, #9
 8004636:	430a      	orrs	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e027      	b.n	800468c <HAL_RCC_OscConfig+0xd4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	23a0      	movs	r3, #160	; 0xa0
 8004642:	02db      	lsls	r3, r3, #11
 8004644:	429a      	cmp	r2, r3
 8004646:	d10e      	bne.n	8004666 <HAL_RCC_OscConfig+0xae>
 8004648:	4ba4      	ldr	r3, [pc, #656]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4ba3      	ldr	r3, [pc, #652]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	02c9      	lsls	r1, r1, #11
 8004652:	430a      	orrs	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	4ba1      	ldr	r3, [pc, #644]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4ba0      	ldr	r3, [pc, #640]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	0249      	lsls	r1, r1, #9
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e012      	b.n	800468c <HAL_RCC_OscConfig+0xd4>
 8004666:	4b9d      	ldr	r3, [pc, #628]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b9c      	ldr	r3, [pc, #624]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800466c:	499c      	ldr	r1, [pc, #624]	; (80048e0 <HAL_RCC_OscConfig+0x328>)
 800466e:	400a      	ands	r2, r1
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	025b      	lsls	r3, r3, #9
 800467a:	4013      	ands	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4b96      	ldr	r3, [pc, #600]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b95      	ldr	r3, [pc, #596]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004686:	4997      	ldr	r1, [pc, #604]	; (80048e4 <HAL_RCC_OscConfig+0x32c>)
 8004688:	400a      	ands	r2, r1
 800468a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fe fe9c 	bl	80033d0 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800469c:	e009      	b.n	80046b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800469e:	f7fe fe97 	bl	80033d0 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b64      	cmp	r3, #100	; 0x64
 80046aa:	d902      	bls.n	80046b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	f000 fb41 	bl	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046b2:	4b8a      	ldr	r3, [pc, #552]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	029b      	lsls	r3, r3, #10
 80046ba:	4013      	ands	r3, r2
 80046bc:	d0ef      	beq.n	800469e <HAL_RCC_OscConfig+0xe6>
 80046be:	e015      	b.n	80046ec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fe fe86 	bl	80033d0 <HAL_GetTick>
 80046c4:	0003      	movs	r3, r0
 80046c6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ca:	f7fe fe81 	bl	80033d0 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b64      	cmp	r3, #100	; 0x64
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e32b      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046dc:	4b7f      	ldr	r3, [pc, #508]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	029b      	lsls	r3, r3, #10
 80046e4:	4013      	ands	r3, r2
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x112>
 80046e8:	e000      	b.n	80046ec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2202      	movs	r2, #2
 80046f2:	4013      	ands	r3, r2
 80046f4:	d100      	bne.n	80046f8 <HAL_RCC_OscConfig+0x140>
 80046f6:	e08c      	b.n	8004812 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d005      	beq.n	8004710 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d13f      	bne.n	800478a <HAL_RCC_OscConfig+0x1d2>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d13c      	bne.n	800478a <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004710:	4b72      	ldr	r3, [pc, #456]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2204      	movs	r2, #4
 8004716:	4013      	ands	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_RCC_OscConfig+0x16c>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e307      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004724:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4a6f      	ldr	r2, [pc, #444]	; (80048e8 <HAL_RCC_OscConfig+0x330>)
 800472a:	4013      	ands	r3, r2
 800472c:	0019      	movs	r1, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	4b69      	ldr	r3, [pc, #420]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800473a:	4b68      	ldr	r3, [pc, #416]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2209      	movs	r2, #9
 8004740:	4393      	bics	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800474c:	f000 fc44 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 8004750:	0001      	movs	r1, r0
 8004752:	4b62      	ldr	r3, [pc, #392]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	220f      	movs	r2, #15
 800475a:	4013      	ands	r3, r2
 800475c:	4a63      	ldr	r2, [pc, #396]	; (80048ec <HAL_RCC_OscConfig+0x334>)
 800475e:	5cd3      	ldrb	r3, [r2, r3]
 8004760:	000a      	movs	r2, r1
 8004762:	40da      	lsrs	r2, r3
 8004764:	4b62      	ldr	r3, [pc, #392]	; (80048f0 <HAL_RCC_OscConfig+0x338>)
 8004766:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004768:	4b62      	ldr	r3, [pc, #392]	; (80048f4 <HAL_RCC_OscConfig+0x33c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2513      	movs	r5, #19
 800476e:	197c      	adds	r4, r7, r5
 8004770:	0018      	movs	r0, r3
 8004772:	f7fe fde7 	bl	8003344 <HAL_InitTick>
 8004776:	0003      	movs	r3, r0
 8004778:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800477a:	197b      	adds	r3, r7, r5
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d047      	beq.n	8004812 <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 8004782:	2313      	movs	r3, #19
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	e2d4      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d027      	beq.n	80047e0 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004790:	4b52      	ldr	r3, [pc, #328]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2209      	movs	r2, #9
 8004796:	4393      	bics	r3, r2
 8004798:	0019      	movs	r1, r3
 800479a:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	430a      	orrs	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fe fe15 	bl	80033d0 <HAL_GetTick>
 80047a6:	0003      	movs	r3, r0
 80047a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fe fe10 	bl	80033d0 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e2ba      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2204      	movs	r2, #4
 80047c4:	4013      	ands	r3, r2
 80047c6:	d0f1      	beq.n	80047ac <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b44      	ldr	r3, [pc, #272]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4a46      	ldr	r2, [pc, #280]	; (80048e8 <HAL_RCC_OscConfig+0x330>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	0019      	movs	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	021a      	lsls	r2, r3, #8
 80047d8:	4b40      	ldr	r3, [pc, #256]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	e018      	b.n	8004812 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e0:	4b3e      	ldr	r3, [pc, #248]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80047e6:	2101      	movs	r1, #1
 80047e8:	438a      	bics	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fe fdf0 	bl	80033d0 <HAL_GetTick>
 80047f0:	0003      	movs	r3, r0
 80047f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fe fdeb 	bl	80033d0 <HAL_GetTick>
 80047fa:	0002      	movs	r2, r0
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e295      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004808:	4b34      	ldr	r3, [pc, #208]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2204      	movs	r2, #4
 800480e:	4013      	ands	r3, r2
 8004810:	d1f1      	bne.n	80047f6 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	4013      	ands	r3, r2
 800481a:	d100      	bne.n	800481e <HAL_RCC_OscConfig+0x266>
 800481c:	e0a3      	b.n	8004966 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d141      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004824:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4013      	ands	r3, r2
 800482e:	d005      	beq.n	800483c <HAL_RCC_OscConfig+0x284>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e27b      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <HAL_RCC_OscConfig+0x340>)
 8004842:	4013      	ands	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 800484c:	430a      	orrs	r2, r1
 800484e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004850:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	0a19      	lsrs	r1, r3, #8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	061a      	lsls	r2, r3, #24
 800485e:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	0b5b      	lsrs	r3, r3, #13
 800486a:	3301      	adds	r3, #1
 800486c:	2280      	movs	r2, #128	; 0x80
 800486e:	0212      	lsls	r2, r2, #8
 8004870:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004872:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	210f      	movs	r1, #15
 800487a:	400b      	ands	r3, r1
 800487c:	491b      	ldr	r1, [pc, #108]	; (80048ec <HAL_RCC_OscConfig+0x334>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <HAL_RCC_OscConfig+0x338>)
 8004884:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004886:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x33c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2513      	movs	r5, #19
 800488c:	197c      	adds	r4, r7, r5
 800488e:	0018      	movs	r0, r3
 8004890:	f7fe fd58 	bl	8003344 <HAL_InitTick>
 8004894:	0003      	movs	r3, r0
 8004896:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004898:	197b      	adds	r3, r7, r5
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d062      	beq.n	8004966 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 80048a0:	2313      	movs	r3, #19
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	e245      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d040      	beq.n	8004932 <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_OscConfig+0x324>)
 80048b6:	2180      	movs	r1, #128	; 0x80
 80048b8:	0049      	lsls	r1, r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fe fd87 	bl	80033d0 <HAL_GetTick>
 80048c2:	0003      	movs	r3, r0
 80048c4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048c6:	e019      	b.n	80048fc <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048c8:	f7fe fd82 	bl	80033d0 <HAL_GetTick>
 80048cc:	0002      	movs	r2, r0
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d912      	bls.n	80048fc <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e22c      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	40021000 	.word	0x40021000
 80048e0:	fffeffff 	.word	0xfffeffff
 80048e4:	fffbffff 	.word	0xfffbffff
 80048e8:	ffffe0ff 	.word	0xffffe0ff
 80048ec:	080085e8 	.word	0x080085e8
 80048f0:	20000028 	.word	0x20000028
 80048f4:	2000002c 	.word	0x2000002c
 80048f8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048fc:	4bc6      	ldr	r3, [pc, #792]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4013      	ands	r3, r2
 8004906:	d0df      	beq.n	80048c8 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004908:	4bc3      	ldr	r3, [pc, #780]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4ac3      	ldr	r2, [pc, #780]	; (8004c1c <HAL_RCC_OscConfig+0x664>)
 800490e:	4013      	ands	r3, r2
 8004910:	0019      	movs	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004916:	4bc0      	ldr	r3, [pc, #768]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800491c:	4bbe      	ldr	r3, [pc, #760]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	0a19      	lsrs	r1, r3, #8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	061a      	lsls	r2, r3, #24
 800492a:	4bbb      	ldr	r3, [pc, #748]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e019      	b.n	8004966 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004932:	4bb9      	ldr	r3, [pc, #740]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4bb8      	ldr	r3, [pc, #736]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004938:	49b9      	ldr	r1, [pc, #740]	; (8004c20 <HAL_RCC_OscConfig+0x668>)
 800493a:	400a      	ands	r2, r1
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7fe fd47 	bl	80033d0 <HAL_GetTick>
 8004942:	0003      	movs	r3, r0
 8004944:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004948:	f7fe fd42 	bl	80033d0 <HAL_GetTick>
 800494c:	0002      	movs	r2, r0
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1ec      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800495a:	4baf      	ldr	r3, [pc, #700]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4013      	ands	r3, r2
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2208      	movs	r2, #8
 800496c:	4013      	ands	r3, r2
 800496e:	d036      	beq.n	80049de <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d019      	beq.n	80049ac <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004978:	4ba7      	ldr	r3, [pc, #668]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 800497a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800497c:	4ba6      	ldr	r3, [pc, #664]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 800497e:	2101      	movs	r1, #1
 8004980:	430a      	orrs	r2, r1
 8004982:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004984:	f7fe fd24 	bl	80033d0 <HAL_GetTick>
 8004988:	0003      	movs	r3, r0
 800498a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800498e:	f7fe fd1f 	bl	80033d0 <HAL_GetTick>
 8004992:	0002      	movs	r2, r0
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e1c9      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049a0:	4b9d      	ldr	r3, [pc, #628]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	2202      	movs	r2, #2
 80049a6:	4013      	ands	r3, r2
 80049a8:	d0f1      	beq.n	800498e <HAL_RCC_OscConfig+0x3d6>
 80049aa:	e018      	b.n	80049de <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ac:	4b9a      	ldr	r3, [pc, #616]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 80049ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049b0:	4b99      	ldr	r3, [pc, #612]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 80049b2:	2101      	movs	r1, #1
 80049b4:	438a      	bics	r2, r1
 80049b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b8:	f7fe fd0a 	bl	80033d0 <HAL_GetTick>
 80049bc:	0003      	movs	r3, r0
 80049be:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fe fd05 	bl	80033d0 <HAL_GetTick>
 80049c6:	0002      	movs	r2, r0
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e1af      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049d4:	4b90      	ldr	r3, [pc, #576]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 80049d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d8:	2202      	movs	r2, #2
 80049da:	4013      	ands	r3, r2
 80049dc:	d1f1      	bne.n	80049c2 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2204      	movs	r2, #4
 80049e4:	4013      	ands	r3, r2
 80049e6:	d100      	bne.n	80049ea <HAL_RCC_OscConfig+0x432>
 80049e8:	e0af      	b.n	8004b4a <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2327      	movs	r3, #39	; 0x27
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b89      	ldr	r3, [pc, #548]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	055b      	lsls	r3, r3, #21
 80049fa:	4013      	ands	r3, r2
 80049fc:	d10a      	bne.n	8004a14 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	4b86      	ldr	r3, [pc, #536]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a02:	4b85      	ldr	r3, [pc, #532]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	0549      	lsls	r1, r1, #21
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004a0c:	2327      	movs	r3, #39	; 0x27
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	4b83      	ldr	r3, [pc, #524]	; (8004c24 <HAL_RCC_OscConfig+0x66c>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d11a      	bne.n	8004a56 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a20:	4b80      	ldr	r3, [pc, #512]	; (8004c24 <HAL_RCC_OscConfig+0x66c>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b7f      	ldr	r3, [pc, #508]	; (8004c24 <HAL_RCC_OscConfig+0x66c>)
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	0049      	lsls	r1, r1, #1
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2e:	f7fe fccf 	bl	80033d0 <HAL_GetTick>
 8004a32:	0003      	movs	r3, r0
 8004a34:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a38:	f7fe fcca 	bl	80033d0 <HAL_GetTick>
 8004a3c:	0002      	movs	r2, r0
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e174      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4a:	4b76      	ldr	r3, [pc, #472]	; (8004c24 <HAL_RCC_OscConfig+0x66c>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4013      	ands	r3, r2
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_OscConfig+0x4ba>
 8004a62:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a66:	4b6c      	ldr	r3, [pc, #432]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004a68:	2180      	movs	r1, #128	; 0x80
 8004a6a:	0049      	lsls	r1, r1, #1
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	651a      	str	r2, [r3, #80]	; 0x50
 8004a70:	e031      	b.n	8004ad6 <HAL_RCC_OscConfig+0x51e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x4dc>
 8004a7a:	4b67      	ldr	r3, [pc, #412]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a7e:	4b66      	ldr	r3, [pc, #408]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004a80:	4967      	ldr	r1, [pc, #412]	; (8004c20 <HAL_RCC_OscConfig+0x668>)
 8004a82:	400a      	ands	r2, r1
 8004a84:	651a      	str	r2, [r3, #80]	; 0x50
 8004a86:	4b64      	ldr	r3, [pc, #400]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a8a:	4b63      	ldr	r3, [pc, #396]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004a8c:	4966      	ldr	r1, [pc, #408]	; (8004c28 <HAL_RCC_OscConfig+0x670>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	651a      	str	r2, [r3, #80]	; 0x50
 8004a92:	e020      	b.n	8004ad6 <HAL_RCC_OscConfig+0x51e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	23a0      	movs	r3, #160	; 0xa0
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d10e      	bne.n	8004abe <HAL_RCC_OscConfig+0x506>
 8004aa0:	4b5d      	ldr	r3, [pc, #372]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aa4:	4b5c      	ldr	r3, [pc, #368]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	00c9      	lsls	r1, r1, #3
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	651a      	str	r2, [r3, #80]	; 0x50
 8004aae:	4b5a      	ldr	r3, [pc, #360]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ab2:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	0049      	lsls	r1, r1, #1
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	651a      	str	r2, [r3, #80]	; 0x50
 8004abc:	e00b      	b.n	8004ad6 <HAL_RCC_OscConfig+0x51e>
 8004abe:	4b56      	ldr	r3, [pc, #344]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004ac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ac2:	4b55      	ldr	r3, [pc, #340]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004ac4:	4956      	ldr	r1, [pc, #344]	; (8004c20 <HAL_RCC_OscConfig+0x668>)
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8004aca:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ace:	4b52      	ldr	r3, [pc, #328]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004ad0:	4955      	ldr	r1, [pc, #340]	; (8004c28 <HAL_RCC_OscConfig+0x670>)
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d015      	beq.n	8004b0a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ade:	f7fe fc77 	bl	80033d0 <HAL_GetTick>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ae6:	e009      	b.n	8004afc <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fc72 	bl	80033d0 <HAL_GetTick>
 8004aec:	0002      	movs	r2, r0
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	4a4e      	ldr	r2, [pc, #312]	; (8004c2c <HAL_RCC_OscConfig+0x674>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e11b      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004afc:	4b46      	ldr	r3, [pc, #280]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4013      	ands	r3, r2
 8004b06:	d0ef      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x530>
 8004b08:	e014      	b.n	8004b34 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0a:	f7fe fc61 	bl	80033d0 <HAL_GetTick>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b12:	e009      	b.n	8004b28 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b14:	f7fe fc5c 	bl	80033d0 <HAL_GetTick>
 8004b18:	0002      	movs	r2, r0
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	4a43      	ldr	r2, [pc, #268]	; (8004c2c <HAL_RCC_OscConfig+0x674>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e105      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b28:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4013      	ands	r3, r2
 8004b32:	d1ef      	bne.n	8004b14 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b34:	2327      	movs	r3, #39	; 0x27
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d105      	bne.n	8004b4a <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3e:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b42:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004b44:	493a      	ldr	r1, [pc, #232]	; (8004c30 <HAL_RCC_OscConfig+0x678>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	4013      	ands	r3, r2
 8004b52:	d049      	beq.n	8004be8 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d026      	beq.n	8004baa <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004b5c:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004b62:	2101      	movs	r1, #1
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004b6e:	2101      	movs	r1, #1
 8004b70:	430a      	orrs	r2, r1
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34
 8004b74:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <HAL_RCC_OscConfig+0x67c>)
 8004b76:	6a1a      	ldr	r2, [r3, #32]
 8004b78:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <HAL_RCC_OscConfig+0x67c>)
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	0189      	lsls	r1, r1, #6
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b82:	f7fe fc25 	bl	80033d0 <HAL_GetTick>
 8004b86:	0003      	movs	r3, r0
 8004b88:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b8c:	f7fe fc20 	bl	80033d0 <HAL_GetTick>
 8004b90:	0002      	movs	r2, r0
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0ca      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b9e:	4b1e      	ldr	r3, [pc, #120]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d0f1      	beq.n	8004b8c <HAL_RCC_OscConfig+0x5d4>
 8004ba8:	e01e      	b.n	8004be8 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004baa:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	438a      	bics	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <HAL_RCC_OscConfig+0x67c>)
 8004bb8:	6a1a      	ldr	r2, [r3, #32]
 8004bba:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <HAL_RCC_OscConfig+0x67c>)
 8004bbc:	491e      	ldr	r1, [pc, #120]	; (8004c38 <HAL_RCC_OscConfig+0x680>)
 8004bbe:	400a      	ands	r2, r1
 8004bc0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fe fc05 	bl	80033d0 <HAL_GetTick>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bcc:	f7fe fc00 	bl	80033d0 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0aa      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bde:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2202      	movs	r2, #2
 8004be4:	4013      	ands	r3, r2
 8004be6:	d1f1      	bne.n	8004bcc <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d100      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x63a>
 8004bf0:	e09f      	b.n	8004d32 <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	2b0c      	cmp	r3, #12
 8004bf6:	d100      	bne.n	8004bfa <HAL_RCC_OscConfig+0x642>
 8004bf8:	e078      	b.n	8004cec <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d159      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <HAL_RCC_OscConfig+0x660>)
 8004c08:	490c      	ldr	r1, [pc, #48]	; (8004c3c <HAL_RCC_OscConfig+0x684>)
 8004c0a:	400a      	ands	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fe fbdf 	bl	80033d0 <HAL_GetTick>
 8004c12:	0003      	movs	r3, r0
 8004c14:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004c16:	e01c      	b.n	8004c52 <HAL_RCC_OscConfig+0x69a>
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	ffff1fff 	.word	0xffff1fff
 8004c20:	fffffeff 	.word	0xfffffeff
 8004c24:	40007000 	.word	0x40007000
 8004c28:	fffffbff 	.word	0xfffffbff
 8004c2c:	00001388 	.word	0x00001388
 8004c30:	efffffff 	.word	0xefffffff
 8004c34:	40010000 	.word	0x40010000
 8004c38:	ffffdfff 	.word	0xffffdfff
 8004c3c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fe fbc6 	bl	80033d0 <HAL_GetTick>
 8004c44:	0002      	movs	r2, r0
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e070      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004c52:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	049b      	lsls	r3, r3, #18
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a37      	ldr	r2, [pc, #220]	; (8004d40 <HAL_RCC_OscConfig+0x788>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	0019      	movs	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c76:	431a      	orrs	r2, r3
 8004c78:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004c84:	2180      	movs	r1, #128	; 0x80
 8004c86:	0449      	lsls	r1, r1, #17
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fe fba0 	bl	80033d0 <HAL_GetTick>
 8004c90:	0003      	movs	r3, r0
 8004c92:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c96:	f7fe fb9b 	bl	80033d0 <HAL_GetTick>
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e045      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ca8:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	049b      	lsls	r3, r3, #18
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x6de>
 8004cb4:	e03d      	b.n	8004d32 <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b21      	ldr	r3, [pc, #132]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004cbc:	4921      	ldr	r1, [pc, #132]	; (8004d44 <HAL_RCC_OscConfig+0x78c>)
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fe fb85 	bl	80033d0 <HAL_GetTick>
 8004cc6:	0003      	movs	r3, r0
 8004cc8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fe fb80 	bl	80033d0 <HAL_GetTick>
 8004cd0:	0002      	movs	r2, r0
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e02a      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004cde:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	049b      	lsls	r3, r3, #18
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x714>
 8004cea:	e022      	b.n	8004d32 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e01d      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cf8:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <HAL_RCC_OscConfig+0x784>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	025b      	lsls	r3, r3, #9
 8004d04:	401a      	ands	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d10f      	bne.n	8004d2e <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	23f0      	movs	r3, #240	; 0xf0
 8004d12:	039b      	lsls	r3, r3, #14
 8004d14:	401a      	ands	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	23c0      	movs	r3, #192	; 0xc0
 8004d22:	041b      	lsls	r3, r3, #16
 8004d24:	401a      	ands	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d001      	beq.n	8004d32 <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	0018      	movs	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b00a      	add	sp, #40	; 0x28
 8004d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	ff02ffff 	.word	0xff02ffff
 8004d44:	feffffff 	.word	0xfeffffff

08004d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d48:	b5b0      	push	{r4, r5, r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e129      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d5c:	4b96      	ldr	r3, [pc, #600]	; (8004fb8 <HAL_RCC_ClockConfig+0x270>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d91e      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6a:	4b93      	ldr	r3, [pc, #588]	; (8004fb8 <HAL_RCC_ClockConfig+0x270>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4393      	bics	r3, r2
 8004d72:	0019      	movs	r1, r3
 8004d74:	4b90      	ldr	r3, [pc, #576]	; (8004fb8 <HAL_RCC_ClockConfig+0x270>)
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d7c:	f7fe fb28 	bl	80033d0 <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d84:	e009      	b.n	8004d9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d86:	f7fe fb23 	bl	80033d0 <HAL_GetTick>
 8004d8a:	0002      	movs	r2, r0
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	4a8a      	ldr	r2, [pc, #552]	; (8004fbc <HAL_RCC_ClockConfig+0x274>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e10a      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b87      	ldr	r3, [pc, #540]	; (8004fb8 <HAL_RCC_ClockConfig+0x270>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d1ee      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2202      	movs	r2, #2
 8004dae:	4013      	ands	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db2:	4b83      	ldr	r3, [pc, #524]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	22f0      	movs	r2, #240	; 0xf0
 8004db8:	4393      	bics	r3, r2
 8004dba:	0019      	movs	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b7f      	ldr	r3, [pc, #508]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0x8a>
 8004dd0:	e089      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dda:	4b79      	ldr	r3, [pc, #484]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	029b      	lsls	r3, r3, #10
 8004de2:	4013      	ands	r3, r2
 8004de4:	d120      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0e2      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004df2:	4b73      	ldr	r3, [pc, #460]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2380      	movs	r3, #128	; 0x80
 8004df8:	049b      	lsls	r3, r3, #18
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d114      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0d6      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d106      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	4013      	ands	r3, r2
 8004e12:	d109      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0cb      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e18:	4b69      	ldr	r3, [pc, #420]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4013      	ands	r3, r2
 8004e22:	d101      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0c3      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e28:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	4393      	bics	r3, r2
 8004e30:	0019      	movs	r1, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4b62      	ldr	r3, [pc, #392]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e3c:	f7fe fac8 	bl	80033d0 <HAL_GetTick>
 8004e40:	0003      	movs	r3, r0
 8004e42:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d111      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e4c:	e009      	b.n	8004e62 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4e:	f7fe fabf 	bl	80033d0 <HAL_GetTick>
 8004e52:	0002      	movs	r2, r0
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	4a58      	ldr	r2, [pc, #352]	; (8004fbc <HAL_RCC_ClockConfig+0x274>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e0a6      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e62:	4b57      	ldr	r3, [pc, #348]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	220c      	movs	r2, #12
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d1ef      	bne.n	8004e4e <HAL_RCC_ClockConfig+0x106>
 8004e6e:	e03a      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d111      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e78:	e009      	b.n	8004e8e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7a:	f7fe faa9 	bl	80033d0 <HAL_GetTick>
 8004e7e:	0002      	movs	r2, r0
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	4a4d      	ldr	r2, [pc, #308]	; (8004fbc <HAL_RCC_ClockConfig+0x274>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e090      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8e:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	220c      	movs	r2, #12
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	d1ef      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x132>
 8004e9a:	e024      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d11b      	bne.n	8004edc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ea4:	e009      	b.n	8004eba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea6:	f7fe fa93 	bl	80033d0 <HAL_GetTick>
 8004eaa:	0002      	movs	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	4a42      	ldr	r2, [pc, #264]	; (8004fbc <HAL_RCC_ClockConfig+0x274>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e07a      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eba:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	220c      	movs	r2, #12
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d1ef      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0x15e>
 8004ec6:	e00e      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec8:	f7fe fa82 	bl	80033d0 <HAL_GetTick>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	4a3a      	ldr	r2, [pc, #232]	; (8004fbc <HAL_RCC_ClockConfig+0x274>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e069      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004edc:	4b38      	ldr	r3, [pc, #224]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	220c      	movs	r2, #12
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee6:	4b34      	ldr	r3, [pc, #208]	; (8004fb8 <HAL_RCC_ClockConfig+0x270>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2201      	movs	r2, #1
 8004eec:	4013      	ands	r3, r2
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d21e      	bcs.n	8004f32 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef4:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <HAL_RCC_ClockConfig+0x270>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	4393      	bics	r3, r2
 8004efc:	0019      	movs	r1, r3
 8004efe:	4b2e      	ldr	r3, [pc, #184]	; (8004fb8 <HAL_RCC_ClockConfig+0x270>)
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f06:	f7fe fa63 	bl	80033d0 <HAL_GetTick>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	e009      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fe fa5e 	bl	80033d0 <HAL_GetTick>
 8004f14:	0002      	movs	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	4a28      	ldr	r2, [pc, #160]	; (8004fbc <HAL_RCC_ClockConfig+0x274>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e045      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f24:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <HAL_RCC_ClockConfig+0x270>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d1ee      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2204      	movs	r2, #4
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d009      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f3c:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <HAL_RCC_ClockConfig+0x27c>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	0019      	movs	r1, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2208      	movs	r2, #8
 8004f56:	4013      	ands	r3, r2
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f5a:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	4a1a      	ldr	r2, [pc, #104]	; (8004fc8 <HAL_RCC_ClockConfig+0x280>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	0019      	movs	r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	00da      	lsls	r2, r3, #3
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f70:	f000 f832 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 8004f74:	0001      	movs	r1, r0
 8004f76:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_RCC_ClockConfig+0x278>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	220f      	movs	r2, #15
 8004f7e:	4013      	ands	r3, r2
 8004f80:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x284>)
 8004f82:	5cd3      	ldrb	r3, [r2, r3]
 8004f84:	000a      	movs	r2, r1
 8004f86:	40da      	lsrs	r2, r3
 8004f88:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <HAL_RCC_ClockConfig+0x288>)
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <HAL_RCC_ClockConfig+0x28c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	250b      	movs	r5, #11
 8004f92:	197c      	adds	r4, r7, r5
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7fe f9d5 	bl	8003344 <HAL_InitTick>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004f9e:	197b      	adds	r3, r7, r5
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8004fa6:	230b      	movs	r3, #11
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	e000      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b004      	add	sp, #16
 8004fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fb8:	40022000 	.word	0x40022000
 8004fbc:	00001388 	.word	0x00001388
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	fffff8ff 	.word	0xfffff8ff
 8004fc8:	ffffc7ff 	.word	0xffffc7ff
 8004fcc:	080085e8 	.word	0x080085e8
 8004fd0:	20000028 	.word	0x20000028
 8004fd4:	2000002c 	.word	0x2000002c

08004fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fda:	b08f      	sub	sp, #60	; 0x3c
 8004fdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004fde:	4b4a      	ldr	r3, [pc, #296]	; (8005108 <HAL_RCC_GetSysClockFreq+0x130>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d00f      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x36>
 8004fee:	2b0c      	cmp	r3, #12
 8004ff0:	d010      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x3c>
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d000      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x20>
 8004ff6:	e073      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <HAL_RCC_GetSysClockFreq+0x130>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	4013      	ands	r3, r2
 8005000:	d002      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005002:	4b42      	ldr	r3, [pc, #264]	; (800510c <HAL_RCC_GetSysClockFreq+0x134>)
 8005004:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005006:	e079      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8005008:	4b41      	ldr	r3, [pc, #260]	; (8005110 <HAL_RCC_GetSysClockFreq+0x138>)
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800500c:	e076      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800500e:	4b41      	ldr	r3, [pc, #260]	; (8005114 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005010:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005012:	e073      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	0c9a      	lsrs	r2, r3, #18
 8005018:	230f      	movs	r3, #15
 800501a:	401a      	ands	r2, r3
 800501c:	4b3e      	ldr	r3, [pc, #248]	; (8005118 <HAL_RCC_GetSysClockFreq+0x140>)
 800501e:	5c9b      	ldrb	r3, [r3, r2]
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	0d9a      	lsrs	r2, r3, #22
 8005026:	2303      	movs	r3, #3
 8005028:	4013      	ands	r3, r2
 800502a:	3301      	adds	r3, #1
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800502e:	4b36      	ldr	r3, [pc, #216]	; (8005108 <HAL_RCC_GetSysClockFreq+0x130>)
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	025b      	lsls	r3, r3, #9
 8005036:	4013      	ands	r3, r2
 8005038:	d019      	beq.n	800506e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	4a34      	ldr	r2, [pc, #208]	; (8005114 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005044:	2300      	movs	r3, #0
 8005046:	69b8      	ldr	r0, [r7, #24]
 8005048:	69f9      	ldr	r1, [r7, #28]
 800504a:	f7fb fa39 	bl	80004c0 <__aeabi_lmul>
 800504e:	0003      	movs	r3, r0
 8005050:	000c      	movs	r4, r1
 8005052:	0018      	movs	r0, r3
 8005054:	0021      	movs	r1, r4
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f7fb fa0d 	bl	8000480 <__aeabi_uldivmod>
 8005066:	0003      	movs	r3, r0
 8005068:	000c      	movs	r4, r1
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
 800506c:	e035      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800506e:	4b26      	ldr	r3, [pc, #152]	; (8005108 <HAL_RCC_GetSysClockFreq+0x130>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2210      	movs	r2, #16
 8005074:	4013      	ands	r3, r2
 8005076:	d019      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_RCC_GetSysClockFreq+0x134>)
 8005082:	2300      	movs	r3, #0
 8005084:	68b8      	ldr	r0, [r7, #8]
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	f7fb fa1a 	bl	80004c0 <__aeabi_lmul>
 800508c:	0003      	movs	r3, r0
 800508e:	000c      	movs	r4, r1
 8005090:	0018      	movs	r0, r3
 8005092:	0021      	movs	r1, r4
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	2300      	movs	r3, #0
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f7fb f9ee 	bl	8000480 <__aeabi_uldivmod>
 80050a4:	0003      	movs	r3, r0
 80050a6:	000c      	movs	r4, r1
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
 80050aa:	e016      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	0018      	movs	r0, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	0019      	movs	r1, r3
 80050b4:	4a16      	ldr	r2, [pc, #88]	; (8005110 <HAL_RCC_GetSysClockFreq+0x138>)
 80050b6:	2300      	movs	r3, #0
 80050b8:	f7fb fa02 	bl	80004c0 <__aeabi_lmul>
 80050bc:	0003      	movs	r3, r0
 80050be:	000c      	movs	r4, r1
 80050c0:	0018      	movs	r0, r3
 80050c2:	0021      	movs	r1, r4
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	001d      	movs	r5, r3
 80050c8:	2300      	movs	r3, #0
 80050ca:	001e      	movs	r6, r3
 80050cc:	002a      	movs	r2, r5
 80050ce:	0033      	movs	r3, r6
 80050d0:	f7fb f9d6 	bl	8000480 <__aeabi_uldivmod>
 80050d4:	0003      	movs	r3, r0
 80050d6:	000c      	movs	r4, r1
 80050d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050de:	e00d      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80050e0:	4b09      	ldr	r3, [pc, #36]	; (8005108 <HAL_RCC_GetSysClockFreq+0x130>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	0b5b      	lsrs	r3, r3, #13
 80050e6:	2207      	movs	r2, #7
 80050e8:	4013      	ands	r3, r2
 80050ea:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	3301      	adds	r3, #1
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	0212      	lsls	r2, r2, #8
 80050f4:	409a      	lsls	r2, r3
 80050f6:	0013      	movs	r3, r2
 80050f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b00f      	add	sp, #60	; 0x3c
 8005104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	40021000 	.word	0x40021000
 800510c:	003d0900 	.word	0x003d0900
 8005110:	00f42400 	.word	0x00f42400
 8005114:	007a1200 	.word	0x007a1200
 8005118:	08008600 	.word	0x08008600

0800511c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <HAL_RCC_GetHCLKFreq+0x10>)
 8005122:	681b      	ldr	r3, [r3, #0]
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	20000028 	.word	0x20000028

08005130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005134:	f7ff fff2 	bl	800511c <HAL_RCC_GetHCLKFreq>
 8005138:	0001      	movs	r1, r0
 800513a:	4b06      	ldr	r3, [pc, #24]	; (8005154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	2207      	movs	r2, #7
 8005142:	4013      	ands	r3, r2
 8005144:	4a04      	ldr	r2, [pc, #16]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005146:	5cd3      	ldrb	r3, [r2, r3]
 8005148:	40d9      	lsrs	r1, r3
 800514a:	000b      	movs	r3, r1
}
 800514c:	0018      	movs	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	40021000 	.word	0x40021000
 8005158:	080085f8 	.word	0x080085f8

0800515c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005160:	f7ff ffdc 	bl	800511c <HAL_RCC_GetHCLKFreq>
 8005164:	0001      	movs	r1, r0
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	0adb      	lsrs	r3, r3, #11
 800516c:	2207      	movs	r2, #7
 800516e:	4013      	ands	r3, r2
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005172:	5cd3      	ldrb	r3, [r2, r3]
 8005174:	40d9      	lsrs	r1, r3
 8005176:	000b      	movs	r3, r1
}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	40021000 	.word	0x40021000
 8005184:	080085f8 	.word	0x080085f8

08005188 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005190:	2317      	movs	r3, #23
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2220      	movs	r2, #32
 800519e:	4013      	ands	r3, r2
 80051a0:	d106      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	4013      	ands	r3, r2
 80051ac:	d100      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80051ae:	e0d9      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051b0:	4b9c      	ldr	r3, [pc, #624]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	055b      	lsls	r3, r3, #21
 80051b8:	4013      	ands	r3, r2
 80051ba:	d10a      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051bc:	4b99      	ldr	r3, [pc, #612]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c0:	4b98      	ldr	r3, [pc, #608]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051c2:	2180      	movs	r1, #128	; 0x80
 80051c4:	0549      	lsls	r1, r1, #21
 80051c6:	430a      	orrs	r2, r1
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80051ca:	2317      	movs	r3, #23
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d2:	4b95      	ldr	r3, [pc, #596]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4013      	ands	r3, r2
 80051dc:	d11a      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051de:	4b92      	ldr	r3, [pc, #584]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b91      	ldr	r3, [pc, #580]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80051e4:	2180      	movs	r1, #128	; 0x80
 80051e6:	0049      	lsls	r1, r1, #1
 80051e8:	430a      	orrs	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ec:	f7fe f8f0 	bl	80033d0 <HAL_GetTick>
 80051f0:	0003      	movs	r3, r0
 80051f2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e008      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fe f8eb 	bl	80033d0 <HAL_GetTick>
 80051fa:	0002      	movs	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b64      	cmp	r3, #100	; 0x64
 8005202:	d901      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e108      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b87      	ldr	r3, [pc, #540]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4013      	ands	r3, r2
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005214:	4b83      	ldr	r3, [pc, #524]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	23c0      	movs	r3, #192	; 0xc0
 800521a:	039b      	lsls	r3, r3, #14
 800521c:	4013      	ands	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	23c0      	movs	r3, #192	; 0xc0
 8005226:	039b      	lsls	r3, r3, #14
 8005228:	4013      	ands	r3, r2
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	429a      	cmp	r2, r3
 800522e:	d107      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	23c0      	movs	r3, #192	; 0xc0
 8005236:	039b      	lsls	r3, r3, #14
 8005238:	4013      	ands	r3, r2
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	429a      	cmp	r2, r3
 800523e:	d013      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	23c0      	movs	r3, #192	; 0xc0
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	401a      	ands	r2, r3
 800524a:	23c0      	movs	r3, #192	; 0xc0
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	429a      	cmp	r2, r3
 8005250:	d10a      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005252:	4b74      	ldr	r3, [pc, #464]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	029b      	lsls	r3, r3, #10
 800525a:	401a      	ands	r2, r3
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	029b      	lsls	r3, r3, #10
 8005260:	429a      	cmp	r2, r3
 8005262:	d101      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0d8      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005268:	4b6e      	ldr	r3, [pc, #440]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800526a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800526c:	23c0      	movs	r3, #192	; 0xc0
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d049      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	23c0      	movs	r3, #192	; 0xc0
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	4013      	ands	r3, r2
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	429a      	cmp	r2, r3
 8005288:	d004      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2220      	movs	r2, #32
 8005290:	4013      	ands	r3, r2
 8005292:	d10d      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	23c0      	movs	r3, #192	; 0xc0
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	4013      	ands	r3, r2
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d034      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	4013      	ands	r3, r2
 80052ae:	d02e      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80052b0:	4b5c      	ldr	r3, [pc, #368]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b4:	4a5d      	ldr	r2, [pc, #372]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ba:	4b5a      	ldr	r3, [pc, #360]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052be:	4b59      	ldr	r3, [pc, #356]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	0309      	lsls	r1, r1, #12
 80052c4:	430a      	orrs	r2, r1
 80052c6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052c8:	4b56      	ldr	r3, [pc, #344]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052cc:	4b55      	ldr	r3, [pc, #340]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052ce:	4958      	ldr	r1, [pc, #352]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80052d0:	400a      	ands	r2, r1
 80052d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80052d4:	4b53      	ldr	r3, [pc, #332]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4013      	ands	r3, r2
 80052e2:	d014      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fe f874 	bl	80033d0 <HAL_GetTick>
 80052e8:	0003      	movs	r3, r0
 80052ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052ec:	e009      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fe f86f 	bl	80033d0 <HAL_GetTick>
 80052f2:	0002      	movs	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	4a4e      	ldr	r2, [pc, #312]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e08b      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005302:	4b48      	ldr	r3, [pc, #288]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4013      	ands	r3, r2
 800530c:	d0ef      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	23c0      	movs	r3, #192	; 0xc0
 8005314:	029b      	lsls	r3, r3, #10
 8005316:	401a      	ands	r2, r3
 8005318:	23c0      	movs	r3, #192	; 0xc0
 800531a:	029b      	lsls	r3, r3, #10
 800531c:	429a      	cmp	r2, r3
 800531e:	d10c      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005320:	4b40      	ldr	r3, [pc, #256]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a44      	ldr	r2, [pc, #272]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005326:	4013      	ands	r3, r2
 8005328:	0019      	movs	r1, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	23c0      	movs	r3, #192	; 0xc0
 8005330:	039b      	lsls	r3, r3, #14
 8005332:	401a      	ands	r2, r3
 8005334:	4b3b      	ldr	r3, [pc, #236]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	4b3a      	ldr	r3, [pc, #232]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800533c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	23c0      	movs	r3, #192	; 0xc0
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	401a      	ands	r2, r3
 8005348:	4b36      	ldr	r3, [pc, #216]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800534a:	430a      	orrs	r2, r1
 800534c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800534e:	2317      	movs	r3, #23
 8005350:	18fb      	adds	r3, r7, r3
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d105      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005358:	4b32      	ldr	r3, [pc, #200]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800535a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535c:	4b31      	ldr	r3, [pc, #196]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800535e:	4937      	ldr	r1, [pc, #220]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005360:	400a      	ands	r2, r1
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2201      	movs	r2, #1
 800536a:	4013      	ands	r3, r2
 800536c:	d009      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800536e:	4b2d      	ldr	r3, [pc, #180]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005372:	2203      	movs	r2, #3
 8005374:	4393      	bics	r3, r2
 8005376:	0019      	movs	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	4b29      	ldr	r3, [pc, #164]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800537e:	430a      	orrs	r2, r1
 8005380:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2202      	movs	r2, #2
 8005388:	4013      	ands	r3, r2
 800538a:	d009      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800538c:	4b25      	ldr	r3, [pc, #148]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800538e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005390:	220c      	movs	r2, #12
 8005392:	4393      	bics	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	4b22      	ldr	r3, [pc, #136]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800539c:	430a      	orrs	r2, r1
 800539e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2204      	movs	r2, #4
 80053a6:	4013      	ands	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053aa:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ae:	4a24      	ldr	r2, [pc, #144]	; (8005440 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695a      	ldr	r2, [r3, #20]
 80053b8:	4b1a      	ldr	r3, [pc, #104]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053ba:	430a      	orrs	r2, r1
 80053bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2208      	movs	r2, #8
 80053c4:	4013      	ands	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053c8:	4b16      	ldr	r3, [pc, #88]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053cc:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	0019      	movs	r1, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	4b13      	ldr	r3, [pc, #76]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053d8:	430a      	orrs	r2, r1
 80053da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2240      	movs	r2, #64	; 0x40
 80053e2:	4013      	ands	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053f6:	430a      	orrs	r2, r1
 80053f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	4013      	ands	r3, r2
 8005402:	d009      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005404:	4b07      	ldr	r3, [pc, #28]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005408:	4a10      	ldr	r2, [pc, #64]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800540a:	4013      	ands	r3, r2
 800540c:	0019      	movs	r1, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	4b04      	ldr	r3, [pc, #16]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005414:	430a      	orrs	r2, r1
 8005416:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b006      	add	sp, #24
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	40021000 	.word	0x40021000
 8005428:	40007000 	.word	0x40007000
 800542c:	fffcffff 	.word	0xfffcffff
 8005430:	fff7ffff 	.word	0xfff7ffff
 8005434:	00001388 	.word	0x00001388
 8005438:	ffcfffff 	.word	0xffcfffff
 800543c:	efffffff 	.word	0xefffffff
 8005440:	fffff3ff 	.word	0xfffff3ff
 8005444:	ffffcfff 	.word	0xffffcfff
 8005448:	fbffffff 	.word	0xfbffffff
 800544c:	fff3ffff 	.word	0xfff3ffff

08005450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e032      	b.n	80054c8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2239      	movs	r2, #57	; 0x39
 8005466:	5c9b      	ldrb	r3, [r3, r2]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2238      	movs	r2, #56	; 0x38
 8005472:	2100      	movs	r1, #0
 8005474:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0018      	movs	r0, r3
 800547a:	f7fd fe43 	bl	8003104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2239      	movs	r2, #57	; 0x39
 8005482:	2102      	movs	r1, #2
 8005484:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	0019      	movs	r1, r3
 8005490:	0010      	movs	r0, r2
 8005492:	f000 fa2f 	bl	80058f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	223e      	movs	r2, #62	; 0x3e
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	223a      	movs	r2, #58	; 0x3a
 80054a2:	2101      	movs	r1, #1
 80054a4:	5499      	strb	r1, [r3, r2]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	223b      	movs	r2, #59	; 0x3b
 80054aa:	2101      	movs	r1, #1
 80054ac:	5499      	strb	r1, [r3, r2]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	223c      	movs	r2, #60	; 0x3c
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	223d      	movs	r2, #61	; 0x3d
 80054ba:	2101      	movs	r1, #1
 80054bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2239      	movs	r2, #57	; 0x39
 80054c2:	2101      	movs	r1, #1
 80054c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	0018      	movs	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2239      	movs	r2, #57	; 0x39
 80054dc:	5c9b      	ldrb	r3, [r3, r2]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d001      	beq.n	80054e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e036      	b.n	8005556 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2239      	movs	r2, #57	; 0x39
 80054ec:	2102      	movs	r1, #2
 80054ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2101      	movs	r1, #1
 80054fc:	430a      	orrs	r2, r1
 80054fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	05db      	lsls	r3, r3, #23
 8005508:	429a      	cmp	r2, r3
 800550a:	d009      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x50>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a13      	ldr	r2, [pc, #76]	; (8005560 <HAL_TIM_Base_Start_IT+0x90>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_TIM_Base_Start_IT+0x50>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a12      	ldr	r2, [pc, #72]	; (8005564 <HAL_TIM_Base_Start_IT+0x94>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d111      	bne.n	8005544 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2207      	movs	r2, #7
 8005528:	4013      	ands	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b06      	cmp	r3, #6
 8005530:	d010      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2101      	movs	r1, #1
 800553e:	430a      	orrs	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	e007      	b.n	8005554 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2101      	movs	r1, #1
 8005550:	430a      	orrs	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	0018      	movs	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	b004      	add	sp, #16
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	40010800 	.word	0x40010800
 8005564:	40011400 	.word	0x40011400

08005568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2202      	movs	r2, #2
 8005578:	4013      	ands	r3, r2
 800557a:	2b02      	cmp	r3, #2
 800557c:	d124      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2202      	movs	r2, #2
 8005586:	4013      	ands	r3, r2
 8005588:	2b02      	cmp	r3, #2
 800558a:	d11d      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2203      	movs	r2, #3
 8005592:	4252      	negs	r2, r2
 8005594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2203      	movs	r2, #3
 80055a4:	4013      	ands	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	0018      	movs	r0, r3
 80055ac:	f000 f98a 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 80055b0:	e007      	b.n	80055c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 f97d 	bl	80058b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	0018      	movs	r0, r3
 80055be:	f000 f989 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2204      	movs	r2, #4
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d125      	bne.n	8005622 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2204      	movs	r2, #4
 80055de:	4013      	ands	r3, r2
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d11e      	bne.n	8005622 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2205      	movs	r2, #5
 80055ea:	4252      	negs	r2, r2
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	23c0      	movs	r3, #192	; 0xc0
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4013      	ands	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	0018      	movs	r0, r3
 8005606:	f000 f95d 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 800560a:	e007      	b.n	800561c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f000 f950 	bl	80058b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	0018      	movs	r0, r3
 8005618:	f000 f95c 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2208      	movs	r2, #8
 800562a:	4013      	ands	r3, r2
 800562c:	2b08      	cmp	r3, #8
 800562e:	d124      	bne.n	800567a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2208      	movs	r2, #8
 8005638:	4013      	ands	r3, r2
 800563a:	2b08      	cmp	r3, #8
 800563c:	d11d      	bne.n	800567a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2209      	movs	r2, #9
 8005644:	4252      	negs	r2, r2
 8005646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2204      	movs	r2, #4
 800564c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	2203      	movs	r2, #3
 8005656:	4013      	ands	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	0018      	movs	r0, r3
 800565e:	f000 f931 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 8005662:	e007      	b.n	8005674 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0018      	movs	r0, r3
 8005668:	f000 f924 	bl	80058b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	0018      	movs	r0, r3
 8005670:	f000 f930 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2210      	movs	r2, #16
 8005682:	4013      	ands	r3, r2
 8005684:	2b10      	cmp	r3, #16
 8005686:	d125      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2210      	movs	r2, #16
 8005690:	4013      	ands	r3, r2
 8005692:	2b10      	cmp	r3, #16
 8005694:	d11e      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2211      	movs	r2, #17
 800569c:	4252      	negs	r2, r2
 800569e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2208      	movs	r2, #8
 80056a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	23c0      	movs	r3, #192	; 0xc0
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4013      	ands	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	0018      	movs	r0, r3
 80056b8:	f000 f904 	bl	80058c4 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e007      	b.n	80056ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f000 f8f7 	bl	80058b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f000 f903 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2201      	movs	r2, #1
 80056dc:	4013      	ands	r3, r2
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d10f      	bne.n	8005702 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d108      	bne.n	8005702 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2202      	movs	r2, #2
 80056f6:	4252      	negs	r2, r2
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fd fc51 	bl	8002fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2240      	movs	r2, #64	; 0x40
 800570a:	4013      	ands	r3, r2
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d10f      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2240      	movs	r2, #64	; 0x40
 8005718:	4013      	ands	r3, r2
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d108      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2241      	movs	r2, #65	; 0x41
 8005724:	4252      	negs	r2, r2
 8005726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0018      	movs	r0, r3
 800572c:	f000 f8da 	bl	80058e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b002      	add	sp, #8
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2238      	movs	r2, #56	; 0x38
 8005746:	5c9b      	ldrb	r3, [r3, r2]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIM_ConfigClockSource+0x18>
 800574c:	2302      	movs	r3, #2
 800574e:	e0ab      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x170>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2238      	movs	r2, #56	; 0x38
 8005754:	2101      	movs	r1, #1
 8005756:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2239      	movs	r2, #57	; 0x39
 800575c:	2102      	movs	r1, #2
 800575e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2277      	movs	r2, #119	; 0x77
 800576c:	4393      	bics	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a4f      	ldr	r2, [pc, #316]	; (80058b0 <HAL_TIM_ConfigClockSource+0x178>)
 8005774:	4013      	ands	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d100      	bne.n	800578a <HAL_TIM_ConfigClockSource+0x52>
 8005788:	e06b      	b.n	8005862 <HAL_TIM_ConfigClockSource+0x12a>
 800578a:	d80e      	bhi.n	80057aa <HAL_TIM_ConfigClockSource+0x72>
 800578c:	2b10      	cmp	r3, #16
 800578e:	d100      	bne.n	8005792 <HAL_TIM_ConfigClockSource+0x5a>
 8005790:	e077      	b.n	8005882 <HAL_TIM_ConfigClockSource+0x14a>
 8005792:	d803      	bhi.n	800579c <HAL_TIM_ConfigClockSource+0x64>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d100      	bne.n	800579a <HAL_TIM_ConfigClockSource+0x62>
 8005798:	e073      	b.n	8005882 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800579a:	e07c      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800579c:	2b20      	cmp	r3, #32
 800579e:	d100      	bne.n	80057a2 <HAL_TIM_ConfigClockSource+0x6a>
 80057a0:	e06f      	b.n	8005882 <HAL_TIM_ConfigClockSource+0x14a>
 80057a2:	2b30      	cmp	r3, #48	; 0x30
 80057a4:	d100      	bne.n	80057a8 <HAL_TIM_ConfigClockSource+0x70>
 80057a6:	e06c      	b.n	8005882 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80057a8:	e075      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80057aa:	2b70      	cmp	r3, #112	; 0x70
 80057ac:	d00e      	beq.n	80057cc <HAL_TIM_ConfigClockSource+0x94>
 80057ae:	d804      	bhi.n	80057ba <HAL_TIM_ConfigClockSource+0x82>
 80057b0:	2b50      	cmp	r3, #80	; 0x50
 80057b2:	d036      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xea>
 80057b4:	2b60      	cmp	r3, #96	; 0x60
 80057b6:	d044      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80057b8:	e06d      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	0152      	lsls	r2, r2, #5
 80057be:	4293      	cmp	r3, r2
 80057c0:	d068      	beq.n	8005894 <HAL_TIM_ConfigClockSource+0x15c>
 80057c2:	2280      	movs	r2, #128	; 0x80
 80057c4:	0192      	lsls	r2, r2, #6
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d017      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80057ca:	e064      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6899      	ldr	r1, [r3, #8]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f000 f958 	bl	8005a90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2277      	movs	r2, #119	; 0x77
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	609a      	str	r2, [r3, #8]
      break;
 80057f8:	e04d      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6899      	ldr	r1, [r3, #8]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f000 f941 	bl	8005a90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	01c9      	lsls	r1, r1, #7
 800581c:	430a      	orrs	r2, r1
 800581e:	609a      	str	r2, [r3, #8]
      break;
 8005820:	e039      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	001a      	movs	r2, r3
 8005830:	f000 f8b4 	bl	800599c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2150      	movs	r1, #80	; 0x50
 800583a:	0018      	movs	r0, r3
 800583c:	f000 f90e 	bl	8005a5c <TIM_ITRx_SetConfig>
      break;
 8005840:	e029      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	001a      	movs	r2, r3
 8005850:	f000 f8d2 	bl	80059f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2160      	movs	r1, #96	; 0x60
 800585a:	0018      	movs	r0, r3
 800585c:	f000 f8fe 	bl	8005a5c <TIM_ITRx_SetConfig>
      break;
 8005860:	e019      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	001a      	movs	r2, r3
 8005870:	f000 f894 	bl	800599c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2140      	movs	r1, #64	; 0x40
 800587a:	0018      	movs	r0, r3
 800587c:	f000 f8ee 	bl	8005a5c <TIM_ITRx_SetConfig>
      break;
 8005880:	e009      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	0019      	movs	r1, r3
 800588c:	0010      	movs	r0, r2
 800588e:	f000 f8e5 	bl	8005a5c <TIM_ITRx_SetConfig>
        break;
 8005892:	e000      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005894:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2239      	movs	r2, #57	; 0x39
 800589a:	2101      	movs	r1, #1
 800589c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2238      	movs	r2, #56	; 0x38
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b004      	add	sp, #16
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	ffff00ff 	.word	0xffff00ff

080058b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b002      	add	sp, #8
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b002      	add	sp, #8
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058dc:	46c0      	nop			; (mov r8, r8)
 80058de:	46bd      	mov	sp, r7
 80058e0:	b002      	add	sp, #8
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ec:	46c0      	nop			; (mov r8, r8)
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b002      	add	sp, #8
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	2380      	movs	r3, #128	; 0x80
 8005908:	05db      	lsls	r3, r3, #23
 800590a:	429a      	cmp	r2, r3
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0x2a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <TIM_Base_SetConfig+0x9c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0x2a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <TIM_Base_SetConfig+0xa0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2270      	movs	r2, #112	; 0x70
 8005922:	4393      	bics	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	05db      	lsls	r3, r3, #23
 8005936:	429a      	cmp	r2, r3
 8005938:	d007      	beq.n	800594a <TIM_Base_SetConfig+0x56>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a14      	ldr	r2, [pc, #80]	; (8005990 <TIM_Base_SetConfig+0x9c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_Base_SetConfig+0x56>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a13      	ldr	r2, [pc, #76]	; (8005994 <TIM_Base_SetConfig+0xa0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d108      	bne.n	800595c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a12      	ldr	r2, [pc, #72]	; (8005998 <TIM_Base_SetConfig+0xa4>)
 800594e:	4013      	ands	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2280      	movs	r2, #128	; 0x80
 8005960:	4393      	bics	r3, r2
 8005962:	001a      	movs	r2, r3
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	615a      	str	r2, [r3, #20]
}
 8005988:	46c0      	nop			; (mov r8, r8)
 800598a:	46bd      	mov	sp, r7
 800598c:	b004      	add	sp, #16
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40010800 	.word	0x40010800
 8005994:	40011400 	.word	0x40011400
 8005998:	fffffcff 	.word	0xfffffcff

0800599c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	2201      	movs	r2, #1
 80059b4:	4393      	bics	r3, r2
 80059b6:	001a      	movs	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	22f0      	movs	r2, #240	; 0xf0
 80059c6:	4393      	bics	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	220a      	movs	r2, #10
 80059d8:	4393      	bics	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	46c0      	nop			; (mov r8, r8)
 80059f2:	46bd      	mov	sp, r7
 80059f4:	b006      	add	sp, #24
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	2210      	movs	r2, #16
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	001a      	movs	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4a0d      	ldr	r2, [pc, #52]	; (8005a58 <TIM_TI2_ConfigInputStage+0x60>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	031b      	lsls	r3, r3, #12
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	22a0      	movs	r2, #160	; 0xa0
 8005a34:	4393      	bics	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	46bd      	mov	sp, r7
 8005a52:	b006      	add	sp, #24
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	ffff0fff 	.word	0xffff0fff

08005a5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2270      	movs	r2, #112	; 0x70
 8005a70:	4393      	bics	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	609a      	str	r2, [r3, #8]
}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b004      	add	sp, #16
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <TIM_ETR_SetConfig+0x3c>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	609a      	str	r2, [r3, #8]
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b006      	add	sp, #24
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	ffff00ff 	.word	0xffff00ff

08005ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2238      	movs	r2, #56	; 0x38
 8005ade:	5c9b      	ldrb	r3, [r3, r2]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e042      	b.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2238      	movs	r2, #56	; 0x38
 8005aec:	2101      	movs	r1, #1
 8005aee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2239      	movs	r2, #57	; 0x39
 8005af4:	2102      	movs	r1, #2
 8005af6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2270      	movs	r2, #112	; 0x70
 8005b0c:	4393      	bics	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	05db      	lsls	r3, r3, #23
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0f      	ldr	r2, [pc, #60]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10c      	bne.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	4393      	bics	r3, r2
 8005b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2239      	movs	r2, #57	; 0x39
 8005b60:	2101      	movs	r1, #1
 8005b62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2238      	movs	r2, #56	; 0x38
 8005b68:	2100      	movs	r1, #0
 8005b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	b004      	add	sp, #16
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	40010800 	.word	0x40010800
 8005b7c:	40011400 	.word	0x40011400

08005b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e044      	b.n	8005c1c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d107      	bne.n	8005baa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2274      	movs	r2, #116	; 0x74
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f7fd facb 	bl	8003140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2224      	movs	r2, #36	; 0x24
 8005bae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2101      	movs	r1, #1
 8005bbc:	438a      	bics	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f000 fafe 	bl	80061c4 <UART_SetConfig>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e024      	b.n	8005c1c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 fd8f 	bl	8006700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	490d      	ldr	r1, [pc, #52]	; (8005c24 <HAL_UART_Init+0xa4>)
 8005bee:	400a      	ands	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	212a      	movs	r1, #42	; 0x2a
 8005bfe:	438a      	bics	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 fe27 	bl	8006868 <UART_CheckIdleState>
 8005c1a:	0003      	movs	r3, r0
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	ffffb7ff 	.word	0xffffb7ff

08005c28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	1dbb      	adds	r3, r7, #6
 8005c36:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d000      	beq.n	8005c42 <HAL_UART_Transmit+0x1a>
 8005c40:	e095      	b.n	8005d6e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_UART_Transmit+0x28>
 8005c48:	1dbb      	adds	r3, r7, #6
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e08d      	b.n	8005d70 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	015b      	lsls	r3, r3, #5
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d109      	bne.n	8005c74 <HAL_UART_Transmit+0x4c>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d001      	beq.n	8005c74 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e07d      	b.n	8005d70 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2274      	movs	r2, #116	; 0x74
 8005c78:	5c9b      	ldrb	r3, [r3, r2]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Transmit+0x5a>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e076      	b.n	8005d70 <HAL_UART_Transmit+0x148>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2274      	movs	r2, #116	; 0x74
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2280      	movs	r2, #128	; 0x80
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2221      	movs	r2, #33	; 0x21
 8005c96:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c98:	f7fd fb9a 	bl	80033d0 <HAL_GetTick>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1dba      	adds	r2, r7, #6
 8005ca4:	2150      	movs	r1, #80	; 0x50
 8005ca6:	8812      	ldrh	r2, [r2, #0]
 8005ca8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1dba      	adds	r2, r7, #6
 8005cae:	2152      	movs	r1, #82	; 0x52
 8005cb0:	8812      	ldrh	r2, [r2, #0]
 8005cb2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	015b      	lsls	r3, r3, #5
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d108      	bne.n	8005cd2 <HAL_UART_Transmit+0xaa>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	e003      	b.n	8005cda <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2274      	movs	r2, #116	; 0x74
 8005cde:	2100      	movs	r1, #0
 8005ce0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005ce2:	e02c      	b.n	8005d3e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	0013      	movs	r3, r2
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	f000 fe03 	bl	80068fc <UART_WaitOnFlagUntilTimeout>
 8005cf6:	1e03      	subs	r3, r0, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e038      	b.n	8005d70 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	001a      	movs	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	05d2      	lsls	r2, r2, #23
 8005d10:	0dd2      	lsrs	r2, r2, #23
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	3302      	adds	r3, #2
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	e007      	b.n	8005d2c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2252      	movs	r2, #82	; 0x52
 8005d30:	5a9b      	ldrh	r3, [r3, r2]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b299      	uxth	r1, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2252      	movs	r2, #82	; 0x52
 8005d3c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2252      	movs	r2, #82	; 0x52
 8005d42:	5a9b      	ldrh	r3, [r3, r2]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1cc      	bne.n	8005ce4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	0013      	movs	r3, r2
 8005d54:	2200      	movs	r2, #0
 8005d56:	2140      	movs	r1, #64	; 0x40
 8005d58:	f000 fdd0 	bl	80068fc <UART_WaitOnFlagUntilTimeout>
 8005d5c:	1e03      	subs	r3, r0, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e005      	b.n	8005d70 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	0018      	movs	r0, r3
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b008      	add	sp, #32
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4ab6      	ldr	r2, [pc, #728]	; (8006074 <HAL_UART_IRQHandler+0x2fc>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d112      	bne.n	8005dcc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	2220      	movs	r2, #32
 8005daa:	4013      	ands	r3, r2
 8005dac:	d00e      	beq.n	8005dcc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	2220      	movs	r2, #32
 8005db2:	4013      	ands	r3, r2
 8005db4:	d00a      	beq.n	8005dcc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d100      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x48>
 8005dbe:	e1d6      	b.n	800616e <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	0010      	movs	r0, r2
 8005dc8:	4798      	blx	r3
      }
      return;
 8005dca:	e1d0      	b.n	800616e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d100      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x5c>
 8005dd2:	e0d9      	b.n	8005f88 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d104      	bne.n	8005de6 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	4aa6      	ldr	r2, [pc, #664]	; (8006078 <HAL_UART_IRQHandler+0x300>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	d100      	bne.n	8005de6 <HAL_UART_IRQHandler+0x6e>
 8005de4:	e0d0      	b.n	8005f88 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2201      	movs	r2, #1
 8005dea:	4013      	ands	r3, r2
 8005dec:	d010      	beq.n	8005e10 <HAL_UART_IRQHandler+0x98>
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4013      	ands	r3, r2
 8005df6:	d00b      	beq.n	8005e10 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2280      	movs	r2, #128	; 0x80
 8005e04:	589b      	ldr	r3, [r3, r2]
 8005e06:	2201      	movs	r2, #1
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2180      	movs	r1, #128	; 0x80
 8005e0e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2202      	movs	r2, #2
 8005e14:	4013      	ands	r3, r2
 8005e16:	d00f      	beq.n	8005e38 <HAL_UART_IRQHandler+0xc0>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2202      	movs	r2, #2
 8005e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2280      	movs	r2, #128	; 0x80
 8005e2c:	589b      	ldr	r3, [r3, r2]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2180      	movs	r1, #128	; 0x80
 8005e36:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d00f      	beq.n	8005e60 <HAL_UART_IRQHandler+0xe8>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2201      	movs	r2, #1
 8005e44:	4013      	ands	r3, r2
 8005e46:	d00b      	beq.n	8005e60 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	589b      	ldr	r3, [r3, r2]
 8005e56:	2202      	movs	r2, #2
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2180      	movs	r1, #128	; 0x80
 8005e5e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2208      	movs	r2, #8
 8005e64:	4013      	ands	r3, r2
 8005e66:	d013      	beq.n	8005e90 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d103      	bne.n	8005e78 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2201      	movs	r2, #1
 8005e74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e76:	d00b      	beq.n	8005e90 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	589b      	ldr	r3, [r3, r2]
 8005e86:	2208      	movs	r2, #8
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	4013      	ands	r3, r2
 8005e98:	d011      	beq.n	8005ebe <HAL_UART_IRQHandler+0x146>
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	04db      	lsls	r3, r3, #19
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d00c      	beq.n	8005ebe <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2280      	movs	r2, #128	; 0x80
 8005eaa:	0112      	lsls	r2, r2, #4
 8005eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2280      	movs	r2, #128	; 0x80
 8005eb2:	589b      	ldr	r3, [r3, r2]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	589b      	ldr	r3, [r3, r2]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d100      	bne.n	8005eca <HAL_UART_IRQHandler+0x152>
 8005ec8:	e153      	b.n	8006172 <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d00c      	beq.n	8005eec <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d008      	beq.n	8005eec <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d004      	beq.n	8005eec <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	0010      	movs	r0, r2
 8005eea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	589b      	ldr	r3, [r3, r2]
 8005ef2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2240      	movs	r2, #64	; 0x40
 8005efc:	4013      	ands	r3, r2
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d003      	beq.n	8005f0a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2228      	movs	r2, #40	; 0x28
 8005f06:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f08:	d033      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 fd73 	bl	80069f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2240      	movs	r2, #64	; 0x40
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d123      	bne.n	8005f68 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2140      	movs	r1, #64	; 0x40
 8005f2c:	438a      	bics	r2, r1
 8005f2e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d012      	beq.n	8005f5e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	4a4f      	ldr	r2, [pc, #316]	; (800607c <HAL_UART_IRQHandler+0x304>)
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	0018      	movs	r0, r3
 8005f46:	f7fd fb8d 	bl	8003664 <HAL_DMA_Abort_IT>
 8005f4a:	1e03      	subs	r3, r0, #0
 8005f4c:	d01a      	beq.n	8005f84 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	0018      	movs	r0, r3
 8005f5a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	e012      	b.n	8005f84 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f000 f91b 	bl	800619c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f66:	e00d      	b.n	8005f84 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f000 f916 	bl	800619c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	e008      	b.n	8005f84 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 f911 	bl	800619c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	2100      	movs	r1, #0
 8005f80:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005f82:	e0f6      	b.n	8006172 <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f84:	46c0      	nop			; (mov r8, r8)
    return;
 8005f86:	e0f4      	b.n	8006172 <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d000      	beq.n	8005f92 <HAL_UART_IRQHandler+0x21a>
 8005f90:	e0b9      	b.n	8006106 <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2210      	movs	r2, #16
 8005f96:	4013      	ands	r3, r2
 8005f98:	d100      	bne.n	8005f9c <HAL_UART_IRQHandler+0x224>
 8005f9a:	e0b4      	b.n	8006106 <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2210      	movs	r2, #16
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d100      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x22e>
 8005fa4:	e0af      	b.n	8006106 <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2210      	movs	r2, #16
 8005fac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2240      	movs	r2, #64	; 0x40
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d163      	bne.n	8006084 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	2108      	movs	r1, #8
 8005fc6:	187b      	adds	r3, r7, r1
 8005fc8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d100      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x25c>
 8005fd2:	e0d0      	b.n	8006176 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2258      	movs	r2, #88	; 0x58
 8005fd8:	5a9b      	ldrh	r3, [r3, r2]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	18ba      	adds	r2, r7, r2
 8005fde:	8812      	ldrh	r2, [r2, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d300      	bcc.n	8005fe6 <HAL_UART_IRQHandler+0x26e>
 8005fe4:	e0c7      	b.n	8006176 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	18ba      	adds	r2, r7, r2
 8005fec:	215a      	movs	r1, #90	; 0x5a
 8005fee:	8812      	ldrh	r2, [r2, #0]
 8005ff0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d12a      	bne.n	8006056 <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	491d      	ldr	r1, [pc, #116]	; (8006080 <HAL_UART_IRQHandler+0x308>)
 800600c:	400a      	ands	r2, r1
 800600e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2101      	movs	r1, #1
 800601c:	438a      	bics	r2, r1
 800601e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2140      	movs	r1, #64	; 0x40
 800602c:	438a      	bics	r2, r1
 800602e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2110      	movs	r1, #16
 8006048:	438a      	bics	r2, r1
 800604a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006050:	0018      	movs	r0, r3
 8006052:	f7fd fac7 	bl	80035e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2258      	movs	r2, #88	; 0x58
 800605a:	5a9a      	ldrh	r2, [r3, r2]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	215a      	movs	r1, #90	; 0x5a
 8006060:	5a5b      	ldrh	r3, [r3, r1]
 8006062:	b29b      	uxth	r3, r3
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	0011      	movs	r1, r2
 800606c:	0018      	movs	r0, r3
 800606e:	f000 f89d 	bl	80061ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006072:	e080      	b.n	8006176 <HAL_UART_IRQHandler+0x3fe>
 8006074:	0000080f 	.word	0x0000080f
 8006078:	04000120 	.word	0x04000120
 800607c:	08006a59 	.word	0x08006a59
 8006080:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2258      	movs	r2, #88	; 0x58
 8006088:	5a99      	ldrh	r1, [r3, r2]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	225a      	movs	r2, #90	; 0x5a
 800608e:	5a9b      	ldrh	r3, [r3, r2]
 8006090:	b29a      	uxth	r2, r3
 8006092:	230a      	movs	r3, #10
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	1a8a      	subs	r2, r1, r2
 8006098:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	225a      	movs	r2, #90	; 0x5a
 800609e:	5a9b      	ldrh	r3, [r3, r2]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d100      	bne.n	80060a8 <HAL_UART_IRQHandler+0x330>
 80060a6:	e068      	b.n	800617a <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 80060a8:	230a      	movs	r3, #10
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d063      	beq.n	800617a <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4932      	ldr	r1, [pc, #200]	; (8006188 <HAL_UART_IRQHandler+0x410>)
 80060be:	400a      	ands	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2101      	movs	r1, #1
 80060ce:	438a      	bics	r2, r1
 80060d0:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2110      	movs	r1, #16
 80060f0:	438a      	bics	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060f4:	230a      	movs	r3, #10
 80060f6:	18fb      	adds	r3, r7, r3
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	0011      	movs	r1, r2
 80060fe:	0018      	movs	r0, r3
 8006100:	f000 f854 	bl	80061ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006104:	e039      	b.n	800617a <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	2380      	movs	r3, #128	; 0x80
 800610a:	035b      	lsls	r3, r3, #13
 800610c:	4013      	ands	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_UART_IRQHandler+0x3b6>
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	03db      	lsls	r3, r3, #15
 8006116:	4013      	ands	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2280      	movs	r2, #128	; 0x80
 8006120:	0352      	lsls	r2, r2, #13
 8006122:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	0018      	movs	r0, r3
 8006128:	f000 fcc7 	bl	8006aba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800612c:	e028      	b.n	8006180 <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	2280      	movs	r2, #128	; 0x80
 8006132:	4013      	ands	r3, r2
 8006134:	d00d      	beq.n	8006152 <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2280      	movs	r2, #128	; 0x80
 800613a:	4013      	ands	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01b      	beq.n	800617e <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	0010      	movs	r0, r2
 800614e:	4798      	blx	r3
    }
    return;
 8006150:	e015      	b.n	800617e <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2240      	movs	r2, #64	; 0x40
 8006156:	4013      	ands	r3, r2
 8006158:	d012      	beq.n	8006180 <HAL_UART_IRQHandler+0x408>
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2240      	movs	r2, #64	; 0x40
 800615e:	4013      	ands	r3, r2
 8006160:	d00e      	beq.n	8006180 <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	0018      	movs	r0, r3
 8006166:	f000 fc8e 	bl	8006a86 <UART_EndTransmit_IT>
    return;
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	e008      	b.n	8006180 <HAL_UART_IRQHandler+0x408>
      return;
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	e006      	b.n	8006180 <HAL_UART_IRQHandler+0x408>
    return;
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	e004      	b.n	8006180 <HAL_UART_IRQHandler+0x408>
      return;
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	e002      	b.n	8006180 <HAL_UART_IRQHandler+0x408>
      return;
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	e000      	b.n	8006180 <HAL_UART_IRQHandler+0x408>
    return;
 800617e:	46c0      	nop			; (mov r8, r8)
  }

}
 8006180:	46bd      	mov	sp, r7
 8006182:	b008      	add	sp, #32
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	fffffedf 	.word	0xfffffedf

0800618c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006194:	46c0      	nop			; (mov r8, r8)
 8006196:	46bd      	mov	sp, r7
 8006198:	b002      	add	sp, #8
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061a4:	46c0      	nop			; (mov r8, r8)
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b002      	add	sp, #8
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	000a      	movs	r2, r1
 80061b6:	1cbb      	adds	r3, r7, #2
 80061b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b002      	add	sp, #8
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c4:	b5b0      	push	{r4, r5, r7, lr}
 80061c6:	b08e      	sub	sp, #56	; 0x38
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061cc:	231a      	movs	r3, #26
 80061ce:	2218      	movs	r2, #24
 80061d0:	4694      	mov	ip, r2
 80061d2:	44bc      	add	ip, r7
 80061d4:	4463      	add	r3, ip
 80061d6:	2200      	movs	r2, #0
 80061d8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	431a      	orrs	r2, r3
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4aca      	ldr	r2, [pc, #808]	; (8006524 <UART_SetConfig+0x360>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	0019      	movs	r1, r3
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006204:	430a      	orrs	r2, r1
 8006206:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4ac6      	ldr	r2, [pc, #792]	; (8006528 <UART_SetConfig+0x364>)
 8006210:	4013      	ands	r3, r2
 8006212:	0019      	movs	r1, r3
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4ac0      	ldr	r2, [pc, #768]	; (800652c <UART_SetConfig+0x368>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006236:	4313      	orrs	r3, r2
 8006238:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4abb      	ldr	r2, [pc, #748]	; (8006530 <UART_SetConfig+0x36c>)
 8006242:	4013      	ands	r3, r2
 8006244:	0019      	movs	r1, r3
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800624c:	430a      	orrs	r2, r1
 800624e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4ab7      	ldr	r2, [pc, #732]	; (8006534 <UART_SetConfig+0x370>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d134      	bne.n	80062c4 <UART_SetConfig+0x100>
 800625a:	4bb7      	ldr	r3, [pc, #732]	; (8006538 <UART_SetConfig+0x374>)
 800625c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625e:	2203      	movs	r2, #3
 8006260:	4013      	ands	r3, r2
 8006262:	2b01      	cmp	r3, #1
 8006264:	d015      	beq.n	8006292 <UART_SetConfig+0xce>
 8006266:	d304      	bcc.n	8006272 <UART_SetConfig+0xae>
 8006268:	2b02      	cmp	r3, #2
 800626a:	d00a      	beq.n	8006282 <UART_SetConfig+0xbe>
 800626c:	2b03      	cmp	r3, #3
 800626e:	d018      	beq.n	80062a2 <UART_SetConfig+0xde>
 8006270:	e01f      	b.n	80062b2 <UART_SetConfig+0xee>
 8006272:	231b      	movs	r3, #27
 8006274:	2218      	movs	r2, #24
 8006276:	4694      	mov	ip, r2
 8006278:	44bc      	add	ip, r7
 800627a:	4463      	add	r3, ip
 800627c:	2201      	movs	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	e0ab      	b.n	80063da <UART_SetConfig+0x216>
 8006282:	231b      	movs	r3, #27
 8006284:	2218      	movs	r2, #24
 8006286:	4694      	mov	ip, r2
 8006288:	44bc      	add	ip, r7
 800628a:	4463      	add	r3, ip
 800628c:	2202      	movs	r2, #2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e0a3      	b.n	80063da <UART_SetConfig+0x216>
 8006292:	231b      	movs	r3, #27
 8006294:	2218      	movs	r2, #24
 8006296:	4694      	mov	ip, r2
 8006298:	44bc      	add	ip, r7
 800629a:	4463      	add	r3, ip
 800629c:	2204      	movs	r2, #4
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	e09b      	b.n	80063da <UART_SetConfig+0x216>
 80062a2:	231b      	movs	r3, #27
 80062a4:	2218      	movs	r2, #24
 80062a6:	4694      	mov	ip, r2
 80062a8:	44bc      	add	ip, r7
 80062aa:	4463      	add	r3, ip
 80062ac:	2208      	movs	r2, #8
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	e093      	b.n	80063da <UART_SetConfig+0x216>
 80062b2:	231b      	movs	r3, #27
 80062b4:	2218      	movs	r2, #24
 80062b6:	4694      	mov	ip, r2
 80062b8:	44bc      	add	ip, r7
 80062ba:	4463      	add	r3, ip
 80062bc:	2210      	movs	r2, #16
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	e08a      	b.n	80063da <UART_SetConfig+0x216>
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a9c      	ldr	r2, [pc, #624]	; (800653c <UART_SetConfig+0x378>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d137      	bne.n	800633e <UART_SetConfig+0x17a>
 80062ce:	4b9a      	ldr	r3, [pc, #616]	; (8006538 <UART_SetConfig+0x374>)
 80062d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d2:	220c      	movs	r2, #12
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d018      	beq.n	800630c <UART_SetConfig+0x148>
 80062da:	d802      	bhi.n	80062e2 <UART_SetConfig+0x11e>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <UART_SetConfig+0x128>
 80062e0:	e024      	b.n	800632c <UART_SetConfig+0x168>
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d00a      	beq.n	80062fc <UART_SetConfig+0x138>
 80062e6:	2b0c      	cmp	r3, #12
 80062e8:	d018      	beq.n	800631c <UART_SetConfig+0x158>
 80062ea:	e01f      	b.n	800632c <UART_SetConfig+0x168>
 80062ec:	231b      	movs	r3, #27
 80062ee:	2218      	movs	r2, #24
 80062f0:	4694      	mov	ip, r2
 80062f2:	44bc      	add	ip, r7
 80062f4:	4463      	add	r3, ip
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e06e      	b.n	80063da <UART_SetConfig+0x216>
 80062fc:	231b      	movs	r3, #27
 80062fe:	2218      	movs	r2, #24
 8006300:	4694      	mov	ip, r2
 8006302:	44bc      	add	ip, r7
 8006304:	4463      	add	r3, ip
 8006306:	2202      	movs	r2, #2
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	e066      	b.n	80063da <UART_SetConfig+0x216>
 800630c:	231b      	movs	r3, #27
 800630e:	2218      	movs	r2, #24
 8006310:	4694      	mov	ip, r2
 8006312:	44bc      	add	ip, r7
 8006314:	4463      	add	r3, ip
 8006316:	2204      	movs	r2, #4
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	e05e      	b.n	80063da <UART_SetConfig+0x216>
 800631c:	231b      	movs	r3, #27
 800631e:	2218      	movs	r2, #24
 8006320:	4694      	mov	ip, r2
 8006322:	44bc      	add	ip, r7
 8006324:	4463      	add	r3, ip
 8006326:	2208      	movs	r2, #8
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	e056      	b.n	80063da <UART_SetConfig+0x216>
 800632c:	231b      	movs	r3, #27
 800632e:	2218      	movs	r2, #24
 8006330:	4694      	mov	ip, r2
 8006332:	44bc      	add	ip, r7
 8006334:	4463      	add	r3, ip
 8006336:	2210      	movs	r2, #16
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	e04d      	b.n	80063da <UART_SetConfig+0x216>
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a7a      	ldr	r2, [pc, #488]	; (800652c <UART_SetConfig+0x368>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d141      	bne.n	80063cc <UART_SetConfig+0x208>
 8006348:	4b7b      	ldr	r3, [pc, #492]	; (8006538 <UART_SetConfig+0x374>)
 800634a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800634c:	23c0      	movs	r3, #192	; 0xc0
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	4013      	ands	r3, r2
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	00d2      	lsls	r2, r2, #3
 8006356:	4293      	cmp	r3, r2
 8006358:	d01f      	beq.n	800639a <UART_SetConfig+0x1d6>
 800635a:	2280      	movs	r2, #128	; 0x80
 800635c:	00d2      	lsls	r2, r2, #3
 800635e:	4293      	cmp	r3, r2
 8006360:	d802      	bhi.n	8006368 <UART_SetConfig+0x1a4>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <UART_SetConfig+0x1b6>
 8006366:	e028      	b.n	80063ba <UART_SetConfig+0x1f6>
 8006368:	2280      	movs	r2, #128	; 0x80
 800636a:	0112      	lsls	r2, r2, #4
 800636c:	4293      	cmp	r3, r2
 800636e:	d00c      	beq.n	800638a <UART_SetConfig+0x1c6>
 8006370:	22c0      	movs	r2, #192	; 0xc0
 8006372:	0112      	lsls	r2, r2, #4
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <UART_SetConfig+0x1e6>
 8006378:	e01f      	b.n	80063ba <UART_SetConfig+0x1f6>
 800637a:	231b      	movs	r3, #27
 800637c:	2218      	movs	r2, #24
 800637e:	4694      	mov	ip, r2
 8006380:	44bc      	add	ip, r7
 8006382:	4463      	add	r3, ip
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e027      	b.n	80063da <UART_SetConfig+0x216>
 800638a:	231b      	movs	r3, #27
 800638c:	2218      	movs	r2, #24
 800638e:	4694      	mov	ip, r2
 8006390:	44bc      	add	ip, r7
 8006392:	4463      	add	r3, ip
 8006394:	2202      	movs	r2, #2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e01f      	b.n	80063da <UART_SetConfig+0x216>
 800639a:	231b      	movs	r3, #27
 800639c:	2218      	movs	r2, #24
 800639e:	4694      	mov	ip, r2
 80063a0:	44bc      	add	ip, r7
 80063a2:	4463      	add	r3, ip
 80063a4:	2204      	movs	r2, #4
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e017      	b.n	80063da <UART_SetConfig+0x216>
 80063aa:	231b      	movs	r3, #27
 80063ac:	2218      	movs	r2, #24
 80063ae:	4694      	mov	ip, r2
 80063b0:	44bc      	add	ip, r7
 80063b2:	4463      	add	r3, ip
 80063b4:	2208      	movs	r2, #8
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	e00f      	b.n	80063da <UART_SetConfig+0x216>
 80063ba:	231b      	movs	r3, #27
 80063bc:	2218      	movs	r2, #24
 80063be:	4694      	mov	ip, r2
 80063c0:	44bc      	add	ip, r7
 80063c2:	4463      	add	r3, ip
 80063c4:	2210      	movs	r2, #16
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	e006      	b.n	80063da <UART_SetConfig+0x216>
 80063cc:	231b      	movs	r3, #27
 80063ce:	2218      	movs	r2, #24
 80063d0:	4694      	mov	ip, r2
 80063d2:	44bc      	add	ip, r7
 80063d4:	4463      	add	r3, ip
 80063d6:	2210      	movs	r2, #16
 80063d8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a53      	ldr	r2, [pc, #332]	; (800652c <UART_SetConfig+0x368>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d000      	beq.n	80063e6 <UART_SetConfig+0x222>
 80063e4:	e085      	b.n	80064f2 <UART_SetConfig+0x32e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063e6:	231b      	movs	r3, #27
 80063e8:	2218      	movs	r2, #24
 80063ea:	4694      	mov	ip, r2
 80063ec:	44bc      	add	ip, r7
 80063ee:	4463      	add	r3, ip
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d00d      	beq.n	8006412 <UART_SetConfig+0x24e>
 80063f6:	dc02      	bgt.n	80063fe <UART_SetConfig+0x23a>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <UART_SetConfig+0x244>
 80063fc:	e01d      	b.n	800643a <UART_SetConfig+0x276>
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d012      	beq.n	8006428 <UART_SetConfig+0x264>
 8006402:	2b08      	cmp	r3, #8
 8006404:	d015      	beq.n	8006432 <UART_SetConfig+0x26e>
 8006406:	e018      	b.n	800643a <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006408:	f7fe fe92 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 800640c:	0003      	movs	r3, r0
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006410:	e01d      	b.n	800644e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006412:	4b49      	ldr	r3, [pc, #292]	; (8006538 <UART_SetConfig+0x374>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2210      	movs	r2, #16
 8006418:	4013      	ands	r3, r2
 800641a:	d002      	beq.n	8006422 <UART_SetConfig+0x25e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800641c:	4b48      	ldr	r3, [pc, #288]	; (8006540 <UART_SetConfig+0x37c>)
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006420:	e015      	b.n	800644e <UART_SetConfig+0x28a>
          pclk = (uint32_t) HSI_VALUE;
 8006422:	4b48      	ldr	r3, [pc, #288]	; (8006544 <UART_SetConfig+0x380>)
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006426:	e012      	b.n	800644e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006428:	f7fe fdd6 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 800642c:	0003      	movs	r3, r0
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006430:	e00d      	b.n	800644e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006438:	e009      	b.n	800644e <UART_SetConfig+0x28a>
      default:
        pclk = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800643e:	231a      	movs	r3, #26
 8006440:	2218      	movs	r2, #24
 8006442:	4694      	mov	ip, r2
 8006444:	44bc      	add	ip, r7
 8006446:	4463      	add	r3, ip
 8006448:	2201      	movs	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
        break;
 800644c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d100      	bne.n	8006456 <UART_SetConfig+0x292>
 8006454:	e139      	b.n	80066ca <UART_SetConfig+0x506>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	0013      	movs	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	189b      	adds	r3, r3, r2
 8006460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006462:	429a      	cmp	r2, r3
 8006464:	d305      	bcc.n	8006472 <UART_SetConfig+0x2ae>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800646c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646e:	429a      	cmp	r2, r3
 8006470:	d907      	bls.n	8006482 <UART_SetConfig+0x2be>
      {
        ret = HAL_ERROR;
 8006472:	231a      	movs	r3, #26
 8006474:	2218      	movs	r2, #24
 8006476:	4694      	mov	ip, r2
 8006478:	44bc      	add	ip, r7
 800647a:	4463      	add	r3, ip
 800647c:	2201      	movs	r2, #1
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e123      	b.n	80066ca <UART_SetConfig+0x506>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	6939      	ldr	r1, [r7, #16]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	000b      	movs	r3, r1
 8006490:	0e1b      	lsrs	r3, r3, #24
 8006492:	0010      	movs	r0, r2
 8006494:	0205      	lsls	r5, r0, #8
 8006496:	431d      	orrs	r5, r3
 8006498:	000b      	movs	r3, r1
 800649a:	021c      	lsls	r4, r3, #8
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68b8      	ldr	r0, [r7, #8]
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	1900      	adds	r0, r0, r4
 80064ae:	4169      	adcs	r1, r5
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f7f9 ffdf 	bl	8000480 <__aeabi_uldivmod>
 80064c2:	0003      	movs	r3, r0
 80064c4:	000c      	movs	r4, r1
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <UART_SetConfig+0x384>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d908      	bls.n	80064e2 <UART_SetConfig+0x31e>
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	4a1e      	ldr	r2, [pc, #120]	; (800654c <UART_SetConfig+0x388>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d804      	bhi.n	80064e2 <UART_SetConfig+0x31e>
        {
          huart->Instance->BRR = usartdiv;
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064de:	60da      	str	r2, [r3, #12]
 80064e0:	e0f3      	b.n	80066ca <UART_SetConfig+0x506>
        }
        else
        {
          ret = HAL_ERROR;
 80064e2:	231a      	movs	r3, #26
 80064e4:	2218      	movs	r2, #24
 80064e6:	4694      	mov	ip, r2
 80064e8:	44bc      	add	ip, r7
 80064ea:	4463      	add	r3, ip
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	e0eb      	b.n	80066ca <UART_SetConfig+0x506>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d000      	beq.n	8006500 <UART_SetConfig+0x33c>
 80064fe:	e08b      	b.n	8006618 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8006500:	231b      	movs	r3, #27
 8006502:	2218      	movs	r2, #24
 8006504:	4694      	mov	ip, r2
 8006506:	44bc      	add	ip, r7
 8006508:	4463      	add	r3, ip
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d83a      	bhi.n	8006586 <UART_SetConfig+0x3c2>
 8006510:	009a      	lsls	r2, r3, #2
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <UART_SetConfig+0x38c>)
 8006514:	18d3      	adds	r3, r2, r3
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800651a:	f7fe fe09 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 800651e:	0003      	movs	r3, r0
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006522:	e03a      	b.n	800659a <UART_SetConfig+0x3d6>
 8006524:	efff69f3 	.word	0xefff69f3
 8006528:	ffffcfff 	.word	0xffffcfff
 800652c:	40004800 	.word	0x40004800
 8006530:	fffff4ff 	.word	0xfffff4ff
 8006534:	40013800 	.word	0x40013800
 8006538:	40021000 	.word	0x40021000
 800653c:	40004400 	.word	0x40004400
 8006540:	003d0900 	.word	0x003d0900
 8006544:	00f42400 	.word	0x00f42400
 8006548:	000002ff 	.word	0x000002ff
 800654c:	000fffff 	.word	0x000fffff
 8006550:	0800860c 	.word	0x0800860c
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006554:	f7fe fe02 	bl	800515c <HAL_RCC_GetPCLK2Freq>
 8006558:	0003      	movs	r3, r0
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800655c:	e01d      	b.n	800659a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800655e:	4b63      	ldr	r3, [pc, #396]	; (80066ec <UART_SetConfig+0x528>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2210      	movs	r2, #16
 8006564:	4013      	ands	r3, r2
 8006566:	d002      	beq.n	800656e <UART_SetConfig+0x3aa>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006568:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <UART_SetConfig+0x52c>)
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800656c:	e015      	b.n	800659a <UART_SetConfig+0x3d6>
          pclk = (uint32_t) HSI_VALUE;
 800656e:	4b61      	ldr	r3, [pc, #388]	; (80066f4 <UART_SetConfig+0x530>)
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006572:	e012      	b.n	800659a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006574:	f7fe fd30 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 8006578:	0003      	movs	r3, r0
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800657c:	e00d      	b.n	800659a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006584:	e009      	b.n	800659a <UART_SetConfig+0x3d6>
      default:
        pclk = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800658a:	231a      	movs	r3, #26
 800658c:	2218      	movs	r2, #24
 800658e:	4694      	mov	ip, r2
 8006590:	44bc      	add	ip, r7
 8006592:	4463      	add	r3, ip
 8006594:	2201      	movs	r2, #1
 8006596:	701a      	strb	r2, [r3, #0]
        break;
 8006598:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d100      	bne.n	80065a2 <UART_SetConfig+0x3de>
 80065a0:	e093      	b.n	80066ca <UART_SetConfig+0x506>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	005a      	lsls	r2, r3, #1
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	18d2      	adds	r2, r2, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	0019      	movs	r1, r3
 80065b4:	0010      	movs	r0, r2
 80065b6:	f7f9 fdaf 	bl	8000118 <__udivsi3>
 80065ba:	0003      	movs	r3, r0
 80065bc:	b29b      	uxth	r3, r3
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b0f      	cmp	r3, #15
 80065c4:	d920      	bls.n	8006608 <UART_SetConfig+0x444>
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	4a4b      	ldr	r2, [pc, #300]	; (80066f8 <UART_SetConfig+0x534>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d81c      	bhi.n	8006608 <UART_SetConfig+0x444>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	200e      	movs	r0, #14
 80065d4:	2418      	movs	r4, #24
 80065d6:	193b      	adds	r3, r7, r4
 80065d8:	181b      	adds	r3, r3, r0
 80065da:	210f      	movs	r1, #15
 80065dc:	438a      	bics	r2, r1
 80065de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2207      	movs	r2, #7
 80065e8:	4013      	ands	r3, r2
 80065ea:	b299      	uxth	r1, r3
 80065ec:	193b      	adds	r3, r7, r4
 80065ee:	181b      	adds	r3, r3, r0
 80065f0:	193a      	adds	r2, r7, r4
 80065f2:	1812      	adds	r2, r2, r0
 80065f4:	8812      	ldrh	r2, [r2, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	193a      	adds	r2, r7, r4
 8006600:	1812      	adds	r2, r2, r0
 8006602:	8812      	ldrh	r2, [r2, #0]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	e060      	b.n	80066ca <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8006608:	231a      	movs	r3, #26
 800660a:	2218      	movs	r2, #24
 800660c:	4694      	mov	ip, r2
 800660e:	44bc      	add	ip, r7
 8006610:	4463      	add	r3, ip
 8006612:	2201      	movs	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e058      	b.n	80066ca <UART_SetConfig+0x506>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006618:	231b      	movs	r3, #27
 800661a:	2218      	movs	r2, #24
 800661c:	4694      	mov	ip, r2
 800661e:	44bc      	add	ip, r7
 8006620:	4463      	add	r3, ip
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d822      	bhi.n	800666e <UART_SetConfig+0x4aa>
 8006628:	009a      	lsls	r2, r3, #2
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <UART_SetConfig+0x538>)
 800662c:	18d3      	adds	r3, r2, r3
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006632:	f7fe fd7d 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8006636:	0003      	movs	r3, r0
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800663a:	e022      	b.n	8006682 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fe fd8e 	bl	800515c <HAL_RCC_GetPCLK2Freq>
 8006640:	0003      	movs	r3, r0
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006644:	e01d      	b.n	8006682 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006646:	4b29      	ldr	r3, [pc, #164]	; (80066ec <UART_SetConfig+0x528>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2210      	movs	r2, #16
 800664c:	4013      	ands	r3, r2
 800664e:	d002      	beq.n	8006656 <UART_SetConfig+0x492>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006650:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <UART_SetConfig+0x52c>)
 8006652:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006654:	e015      	b.n	8006682 <UART_SetConfig+0x4be>
          pclk = (uint32_t) HSI_VALUE;
 8006656:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <UART_SetConfig+0x530>)
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800665a:	e012      	b.n	8006682 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800665c:	f7fe fcbc 	bl	8004fd8 <HAL_RCC_GetSysClockFreq>
 8006660:	0003      	movs	r3, r0
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006664:	e00d      	b.n	8006682 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800666c:	e009      	b.n	8006682 <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006672:	231a      	movs	r3, #26
 8006674:	2218      	movs	r2, #24
 8006676:	4694      	mov	ip, r2
 8006678:	44bc      	add	ip, r7
 800667a:	4463      	add	r3, ip
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
        break;
 8006680:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <UART_SetConfig+0x506>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	085a      	lsrs	r2, r3, #1
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	18d2      	adds	r2, r2, r3
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	0019      	movs	r1, r3
 8006698:	0010      	movs	r0, r2
 800669a:	f7f9 fd3d 	bl	8000118 <__udivsi3>
 800669e:	0003      	movs	r3, r0
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	d908      	bls.n	80066bc <UART_SetConfig+0x4f8>
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <UART_SetConfig+0x534>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d804      	bhi.n	80066bc <UART_SetConfig+0x4f8>
      {
        huart->Instance->BRR = usartdiv;
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b8:	60da      	str	r2, [r3, #12]
 80066ba:	e006      	b.n	80066ca <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 80066bc:	231a      	movs	r3, #26
 80066be:	2218      	movs	r2, #24
 80066c0:	4694      	mov	ip, r2
 80066c2:	44bc      	add	ip, r7
 80066c4:	4463      	add	r3, ip
 80066c6:	2201      	movs	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2200      	movs	r2, #0
 80066ce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	2200      	movs	r2, #0
 80066d4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066d6:	231a      	movs	r3, #26
 80066d8:	2218      	movs	r2, #24
 80066da:	4694      	mov	ip, r2
 80066dc:	44bc      	add	ip, r7
 80066de:	4463      	add	r3, ip
 80066e0:	781b      	ldrb	r3, [r3, #0]
}
 80066e2:	0018      	movs	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b00e      	add	sp, #56	; 0x38
 80066e8:	bdb0      	pop	{r4, r5, r7, pc}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	40021000 	.word	0x40021000
 80066f0:	003d0900 	.word	0x003d0900
 80066f4:	00f42400 	.word	0x00f42400
 80066f8:	0000ffff 	.word	0x0000ffff
 80066fc:	08008630 	.word	0x08008630

08006700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2201      	movs	r2, #1
 800670e:	4013      	ands	r3, r2
 8006710:	d00b      	beq.n	800672a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4a4a      	ldr	r2, [pc, #296]	; (8006844 <UART_AdvFeatureConfig+0x144>)
 800671a:	4013      	ands	r3, r2
 800671c:	0019      	movs	r1, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	2202      	movs	r2, #2
 8006730:	4013      	ands	r3, r2
 8006732:	d00b      	beq.n	800674c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	4a43      	ldr	r2, [pc, #268]	; (8006848 <UART_AdvFeatureConfig+0x148>)
 800673c:	4013      	ands	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	2204      	movs	r2, #4
 8006752:	4013      	ands	r3, r2
 8006754:	d00b      	beq.n	800676e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a3b      	ldr	r2, [pc, #236]	; (800684c <UART_AdvFeatureConfig+0x14c>)
 800675e:	4013      	ands	r3, r2
 8006760:	0019      	movs	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2208      	movs	r2, #8
 8006774:	4013      	ands	r3, r2
 8006776:	d00b      	beq.n	8006790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4a34      	ldr	r2, [pc, #208]	; (8006850 <UART_AdvFeatureConfig+0x150>)
 8006780:	4013      	ands	r3, r2
 8006782:	0019      	movs	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2210      	movs	r2, #16
 8006796:	4013      	ands	r3, r2
 8006798:	d00b      	beq.n	80067b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	4a2c      	ldr	r2, [pc, #176]	; (8006854 <UART_AdvFeatureConfig+0x154>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	0019      	movs	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	2220      	movs	r2, #32
 80067b8:	4013      	ands	r3, r2
 80067ba:	d00b      	beq.n	80067d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	4a25      	ldr	r2, [pc, #148]	; (8006858 <UART_AdvFeatureConfig+0x158>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	0019      	movs	r1, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	2240      	movs	r2, #64	; 0x40
 80067da:	4013      	ands	r3, r2
 80067dc:	d01d      	beq.n	800681a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4a1d      	ldr	r2, [pc, #116]	; (800685c <UART_AdvFeatureConfig+0x15c>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	0019      	movs	r1, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067fa:	2380      	movs	r3, #128	; 0x80
 80067fc:	035b      	lsls	r3, r3, #13
 80067fe:	429a      	cmp	r2, r3
 8006800:	d10b      	bne.n	800681a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4a15      	ldr	r2, [pc, #84]	; (8006860 <UART_AdvFeatureConfig+0x160>)
 800680a:	4013      	ands	r3, r2
 800680c:	0019      	movs	r1, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2280      	movs	r2, #128	; 0x80
 8006820:	4013      	ands	r3, r2
 8006822:	d00b      	beq.n	800683c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <UART_AdvFeatureConfig+0x164>)
 800682c:	4013      	ands	r3, r2
 800682e:	0019      	movs	r1, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	605a      	str	r2, [r3, #4]
  }
}
 800683c:	46c0      	nop			; (mov r8, r8)
 800683e:	46bd      	mov	sp, r7
 8006840:	b002      	add	sp, #8
 8006842:	bd80      	pop	{r7, pc}
 8006844:	fffdffff 	.word	0xfffdffff
 8006848:	fffeffff 	.word	0xfffeffff
 800684c:	fffbffff 	.word	0xfffbffff
 8006850:	ffff7fff 	.word	0xffff7fff
 8006854:	ffffefff 	.word	0xffffefff
 8006858:	ffffdfff 	.word	0xffffdfff
 800685c:	ffefffff 	.word	0xffefffff
 8006860:	ff9fffff 	.word	0xff9fffff
 8006864:	fff7ffff 	.word	0xfff7ffff

08006868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af02      	add	r7, sp, #8
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2280      	movs	r2, #128	; 0x80
 8006874:	2100      	movs	r1, #0
 8006876:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006878:	f7fc fdaa 	bl	80033d0 <HAL_GetTick>
 800687c:	0003      	movs	r3, r0
 800687e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2208      	movs	r2, #8
 8006888:	4013      	ands	r3, r2
 800688a:	2b08      	cmp	r3, #8
 800688c:	d10d      	bne.n	80068aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	2380      	movs	r3, #128	; 0x80
 8006892:	0399      	lsls	r1, r3, #14
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4b18      	ldr	r3, [pc, #96]	; (80068f8 <UART_CheckIdleState+0x90>)
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	0013      	movs	r3, r2
 800689c:	2200      	movs	r2, #0
 800689e:	f000 f82d 	bl	80068fc <UART_WaitOnFlagUntilTimeout>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	d001      	beq.n	80068aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e022      	b.n	80068f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2204      	movs	r2, #4
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d10d      	bne.n	80068d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	2380      	movs	r3, #128	; 0x80
 80068bc:	03d9      	lsls	r1, r3, #15
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <UART_CheckIdleState+0x90>)
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	0013      	movs	r3, r2
 80068c6:	2200      	movs	r2, #0
 80068c8:	f000 f818 	bl	80068fc <UART_WaitOnFlagUntilTimeout>
 80068cc:	1e03      	subs	r3, r0, #0
 80068ce:	d001      	beq.n	80068d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e00d      	b.n	80068f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2274      	movs	r2, #116	; 0x74
 80068ea:	2100      	movs	r1, #0
 80068ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	0018      	movs	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	b004      	add	sp, #16
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	01ffffff 	.word	0x01ffffff

080068fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	1dfb      	adds	r3, r7, #7
 800690a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690c:	e05e      	b.n	80069cc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	3301      	adds	r3, #1
 8006912:	d05b      	beq.n	80069cc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006914:	f7fc fd5c 	bl	80033d0 <HAL_GetTick>
 8006918:	0002      	movs	r2, r0
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	429a      	cmp	r2, r3
 8006922:	d302      	bcc.n	800692a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11b      	bne.n	8006962 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	492f      	ldr	r1, [pc, #188]	; (80069f4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006936:	400a      	ands	r2, r1
 8006938:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2101      	movs	r1, #1
 8006946:	438a      	bics	r2, r1
 8006948:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2220      	movs	r2, #32
 8006954:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2274      	movs	r2, #116	; 0x74
 800695a:	2100      	movs	r1, #0
 800695c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e044      	b.n	80069ec <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2204      	movs	r2, #4
 800696a:	4013      	ands	r3, r2
 800696c:	d02e      	beq.n	80069cc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	2380      	movs	r3, #128	; 0x80
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	401a      	ands	r2, r3
 800697a:	2380      	movs	r3, #128	; 0x80
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	429a      	cmp	r2, r3
 8006980:	d124      	bne.n	80069cc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	0112      	lsls	r2, r2, #4
 800698a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4917      	ldr	r1, [pc, #92]	; (80069f4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006998:	400a      	ands	r2, r1
 800699a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2101      	movs	r1, #1
 80069a8:	438a      	bics	r2, r1
 80069aa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	2120      	movs	r1, #32
 80069be:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2274      	movs	r2, #116	; 0x74
 80069c4:	2100      	movs	r1, #0
 80069c6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e00f      	b.n	80069ec <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4013      	ands	r3, r2
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	425a      	negs	r2, r3
 80069dc:	4153      	adcs	r3, r2
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	001a      	movs	r2, r3
 80069e2:	1dfb      	adds	r3, r7, #7
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d091      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	0018      	movs	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b004      	add	sp, #16
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	fffffe5f 	.word	0xfffffe5f

080069f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4912      	ldr	r1, [pc, #72]	; (8006a54 <UART_EndRxTransfer+0x5c>)
 8006a0c:	400a      	ands	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	438a      	bics	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d107      	bne.n	8006a38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2110      	movs	r1, #16
 8006a34:	438a      	bics	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	b002      	add	sp, #8
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	fffffedf 	.word	0xfffffedf

08006a58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	225a      	movs	r2, #90	; 0x5a
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2252      	movs	r2, #82	; 0x52
 8006a72:	2100      	movs	r1, #0
 8006a74:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7ff fb8f 	bl	800619c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b004      	add	sp, #16
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2140      	movs	r1, #64	; 0x40
 8006a9a:	438a      	bics	r2, r1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7ff fb6d 	bl	800618c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b002      	add	sp, #8
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	b002      	add	sp, #8
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <__errno>:
 8006acc:	4b01      	ldr	r3, [pc, #4]	; (8006ad4 <__errno+0x8>)
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	4770      	bx	lr
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	20000034 	.word	0x20000034

08006ad8 <__libc_init_array>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	2600      	movs	r6, #0
 8006adc:	4d0c      	ldr	r5, [pc, #48]	; (8006b10 <__libc_init_array+0x38>)
 8006ade:	4c0d      	ldr	r4, [pc, #52]	; (8006b14 <__libc_init_array+0x3c>)
 8006ae0:	1b64      	subs	r4, r4, r5
 8006ae2:	10a4      	asrs	r4, r4, #2
 8006ae4:	42a6      	cmp	r6, r4
 8006ae6:	d109      	bne.n	8006afc <__libc_init_array+0x24>
 8006ae8:	2600      	movs	r6, #0
 8006aea:	f001 fcc9 	bl	8008480 <_init>
 8006aee:	4d0a      	ldr	r5, [pc, #40]	; (8006b18 <__libc_init_array+0x40>)
 8006af0:	4c0a      	ldr	r4, [pc, #40]	; (8006b1c <__libc_init_array+0x44>)
 8006af2:	1b64      	subs	r4, r4, r5
 8006af4:	10a4      	asrs	r4, r4, #2
 8006af6:	42a6      	cmp	r6, r4
 8006af8:	d105      	bne.n	8006b06 <__libc_init_array+0x2e>
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
 8006afc:	00b3      	lsls	r3, r6, #2
 8006afe:	58eb      	ldr	r3, [r5, r3]
 8006b00:	4798      	blx	r3
 8006b02:	3601      	adds	r6, #1
 8006b04:	e7ee      	b.n	8006ae4 <__libc_init_array+0xc>
 8006b06:	00b3      	lsls	r3, r6, #2
 8006b08:	58eb      	ldr	r3, [r5, r3]
 8006b0a:	4798      	blx	r3
 8006b0c:	3601      	adds	r6, #1
 8006b0e:	e7f2      	b.n	8006af6 <__libc_init_array+0x1e>
 8006b10:	080086d8 	.word	0x080086d8
 8006b14:	080086d8 	.word	0x080086d8
 8006b18:	080086d8 	.word	0x080086d8
 8006b1c:	080086dc 	.word	0x080086dc

08006b20 <memset>:
 8006b20:	0003      	movs	r3, r0
 8006b22:	1812      	adds	r2, r2, r0
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d100      	bne.n	8006b2a <memset+0xa>
 8006b28:	4770      	bx	lr
 8006b2a:	7019      	strb	r1, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	e7f9      	b.n	8006b24 <memset+0x4>

08006b30 <siprintf>:
 8006b30:	b40e      	push	{r1, r2, r3}
 8006b32:	b500      	push	{lr}
 8006b34:	490b      	ldr	r1, [pc, #44]	; (8006b64 <siprintf+0x34>)
 8006b36:	b09c      	sub	sp, #112	; 0x70
 8006b38:	ab1d      	add	r3, sp, #116	; 0x74
 8006b3a:	9002      	str	r0, [sp, #8]
 8006b3c:	9006      	str	r0, [sp, #24]
 8006b3e:	9107      	str	r1, [sp, #28]
 8006b40:	9104      	str	r1, [sp, #16]
 8006b42:	4809      	ldr	r0, [pc, #36]	; (8006b68 <siprintf+0x38>)
 8006b44:	4909      	ldr	r1, [pc, #36]	; (8006b6c <siprintf+0x3c>)
 8006b46:	cb04      	ldmia	r3!, {r2}
 8006b48:	9105      	str	r1, [sp, #20]
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	a902      	add	r1, sp, #8
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	f000 f870 	bl	8006c34 <_svfiprintf_r>
 8006b54:	2300      	movs	r3, #0
 8006b56:	9a02      	ldr	r2, [sp, #8]
 8006b58:	7013      	strb	r3, [r2, #0]
 8006b5a:	b01c      	add	sp, #112	; 0x70
 8006b5c:	bc08      	pop	{r3}
 8006b5e:	b003      	add	sp, #12
 8006b60:	4718      	bx	r3
 8006b62:	46c0      	nop			; (mov r8, r8)
 8006b64:	7fffffff 	.word	0x7fffffff
 8006b68:	20000034 	.word	0x20000034
 8006b6c:	ffff0208 	.word	0xffff0208

08006b70 <__ssputs_r>:
 8006b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b72:	688e      	ldr	r6, [r1, #8]
 8006b74:	b085      	sub	sp, #20
 8006b76:	0007      	movs	r7, r0
 8006b78:	000c      	movs	r4, r1
 8006b7a:	9203      	str	r2, [sp, #12]
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	429e      	cmp	r6, r3
 8006b80:	d83c      	bhi.n	8006bfc <__ssputs_r+0x8c>
 8006b82:	2390      	movs	r3, #144	; 0x90
 8006b84:	898a      	ldrh	r2, [r1, #12]
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	421a      	tst	r2, r3
 8006b8a:	d034      	beq.n	8006bf6 <__ssputs_r+0x86>
 8006b8c:	2503      	movs	r5, #3
 8006b8e:	6909      	ldr	r1, [r1, #16]
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	1a5b      	subs	r3, r3, r1
 8006b94:	9302      	str	r3, [sp, #8]
 8006b96:	6963      	ldr	r3, [r4, #20]
 8006b98:	9802      	ldr	r0, [sp, #8]
 8006b9a:	435d      	muls	r5, r3
 8006b9c:	0feb      	lsrs	r3, r5, #31
 8006b9e:	195d      	adds	r5, r3, r5
 8006ba0:	9b01      	ldr	r3, [sp, #4]
 8006ba2:	106d      	asrs	r5, r5, #1
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	181b      	adds	r3, r3, r0
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	d900      	bls.n	8006bae <__ssputs_r+0x3e>
 8006bac:	001d      	movs	r5, r3
 8006bae:	0553      	lsls	r3, r2, #21
 8006bb0:	d532      	bpl.n	8006c18 <__ssputs_r+0xa8>
 8006bb2:	0029      	movs	r1, r5
 8006bb4:	0038      	movs	r0, r7
 8006bb6:	f000 fb23 	bl	8007200 <_malloc_r>
 8006bba:	1e06      	subs	r6, r0, #0
 8006bbc:	d109      	bne.n	8006bd2 <__ssputs_r+0x62>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	603b      	str	r3, [r7, #0]
 8006bc2:	2340      	movs	r3, #64	; 0x40
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	89a2      	ldrh	r2, [r4, #12]
 8006bc8:	4240      	negs	r0, r0
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	b005      	add	sp, #20
 8006bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd2:	9a02      	ldr	r2, [sp, #8]
 8006bd4:	6921      	ldr	r1, [r4, #16]
 8006bd6:	f000 faac 	bl	8007132 <memcpy>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <__ssputs_r+0xc0>)
 8006bde:	401a      	ands	r2, r3
 8006be0:	2380      	movs	r3, #128	; 0x80
 8006be2:	4313      	orrs	r3, r2
 8006be4:	81a3      	strh	r3, [r4, #12]
 8006be6:	9b02      	ldr	r3, [sp, #8]
 8006be8:	6126      	str	r6, [r4, #16]
 8006bea:	18f6      	adds	r6, r6, r3
 8006bec:	6026      	str	r6, [r4, #0]
 8006bee:	6165      	str	r5, [r4, #20]
 8006bf0:	9e01      	ldr	r6, [sp, #4]
 8006bf2:	1aed      	subs	r5, r5, r3
 8006bf4:	60a5      	str	r5, [r4, #8]
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	429e      	cmp	r6, r3
 8006bfa:	d900      	bls.n	8006bfe <__ssputs_r+0x8e>
 8006bfc:	9e01      	ldr	r6, [sp, #4]
 8006bfe:	0032      	movs	r2, r6
 8006c00:	9903      	ldr	r1, [sp, #12]
 8006c02:	6820      	ldr	r0, [r4, #0]
 8006c04:	f000 fa9e 	bl	8007144 <memmove>
 8006c08:	68a3      	ldr	r3, [r4, #8]
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	1b9b      	subs	r3, r3, r6
 8006c0e:	60a3      	str	r3, [r4, #8]
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	199e      	adds	r6, r3, r6
 8006c14:	6026      	str	r6, [r4, #0]
 8006c16:	e7da      	b.n	8006bce <__ssputs_r+0x5e>
 8006c18:	002a      	movs	r2, r5
 8006c1a:	0038      	movs	r0, r7
 8006c1c:	f000 fb4e 	bl	80072bc <_realloc_r>
 8006c20:	1e06      	subs	r6, r0, #0
 8006c22:	d1e0      	bne.n	8006be6 <__ssputs_r+0x76>
 8006c24:	6921      	ldr	r1, [r4, #16]
 8006c26:	0038      	movs	r0, r7
 8006c28:	f000 faa0 	bl	800716c <_free_r>
 8006c2c:	e7c7      	b.n	8006bbe <__ssputs_r+0x4e>
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	fffffb7f 	.word	0xfffffb7f

08006c34 <_svfiprintf_r>:
 8006c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c36:	b0a1      	sub	sp, #132	; 0x84
 8006c38:	9003      	str	r0, [sp, #12]
 8006c3a:	001d      	movs	r5, r3
 8006c3c:	898b      	ldrh	r3, [r1, #12]
 8006c3e:	000f      	movs	r7, r1
 8006c40:	0016      	movs	r6, r2
 8006c42:	061b      	lsls	r3, r3, #24
 8006c44:	d511      	bpl.n	8006c6a <_svfiprintf_r+0x36>
 8006c46:	690b      	ldr	r3, [r1, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10e      	bne.n	8006c6a <_svfiprintf_r+0x36>
 8006c4c:	2140      	movs	r1, #64	; 0x40
 8006c4e:	f000 fad7 	bl	8007200 <_malloc_r>
 8006c52:	6038      	str	r0, [r7, #0]
 8006c54:	6138      	str	r0, [r7, #16]
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d105      	bne.n	8006c66 <_svfiprintf_r+0x32>
 8006c5a:	230c      	movs	r3, #12
 8006c5c:	9a03      	ldr	r2, [sp, #12]
 8006c5e:	3801      	subs	r0, #1
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	b021      	add	sp, #132	; 0x84
 8006c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c66:	2340      	movs	r3, #64	; 0x40
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	ac08      	add	r4, sp, #32
 8006c6e:	6163      	str	r3, [r4, #20]
 8006c70:	3320      	adds	r3, #32
 8006c72:	7663      	strb	r3, [r4, #25]
 8006c74:	3310      	adds	r3, #16
 8006c76:	76a3      	strb	r3, [r4, #26]
 8006c78:	9507      	str	r5, [sp, #28]
 8006c7a:	0035      	movs	r5, r6
 8006c7c:	782b      	ldrb	r3, [r5, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <_svfiprintf_r+0x52>
 8006c82:	2b25      	cmp	r3, #37	; 0x25
 8006c84:	d146      	bne.n	8006d14 <_svfiprintf_r+0xe0>
 8006c86:	1bab      	subs	r3, r5, r6
 8006c88:	9305      	str	r3, [sp, #20]
 8006c8a:	d00c      	beq.n	8006ca6 <_svfiprintf_r+0x72>
 8006c8c:	0032      	movs	r2, r6
 8006c8e:	0039      	movs	r1, r7
 8006c90:	9803      	ldr	r0, [sp, #12]
 8006c92:	f7ff ff6d 	bl	8006b70 <__ssputs_r>
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d100      	bne.n	8006c9c <_svfiprintf_r+0x68>
 8006c9a:	e0ae      	b.n	8006dfa <_svfiprintf_r+0x1c6>
 8006c9c:	6962      	ldr	r2, [r4, #20]
 8006c9e:	9b05      	ldr	r3, [sp, #20]
 8006ca0:	4694      	mov	ip, r2
 8006ca2:	4463      	add	r3, ip
 8006ca4:	6163      	str	r3, [r4, #20]
 8006ca6:	782b      	ldrb	r3, [r5, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d100      	bne.n	8006cae <_svfiprintf_r+0x7a>
 8006cac:	e0a5      	b.n	8006dfa <_svfiprintf_r+0x1c6>
 8006cae:	2201      	movs	r2, #1
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4252      	negs	r2, r2
 8006cb4:	6062      	str	r2, [r4, #4]
 8006cb6:	a904      	add	r1, sp, #16
 8006cb8:	3254      	adds	r2, #84	; 0x54
 8006cba:	1852      	adds	r2, r2, r1
 8006cbc:	1c6e      	adds	r6, r5, #1
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	60e3      	str	r3, [r4, #12]
 8006cc2:	60a3      	str	r3, [r4, #8]
 8006cc4:	7013      	strb	r3, [r2, #0]
 8006cc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8006cc8:	7831      	ldrb	r1, [r6, #0]
 8006cca:	2205      	movs	r2, #5
 8006ccc:	4853      	ldr	r0, [pc, #332]	; (8006e1c <_svfiprintf_r+0x1e8>)
 8006cce:	f000 fa25 	bl	800711c <memchr>
 8006cd2:	1c75      	adds	r5, r6, #1
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d11f      	bne.n	8006d18 <_svfiprintf_r+0xe4>
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	06d3      	lsls	r3, r2, #27
 8006cdc:	d504      	bpl.n	8006ce8 <_svfiprintf_r+0xb4>
 8006cde:	2353      	movs	r3, #83	; 0x53
 8006ce0:	a904      	add	r1, sp, #16
 8006ce2:	185b      	adds	r3, r3, r1
 8006ce4:	2120      	movs	r1, #32
 8006ce6:	7019      	strb	r1, [r3, #0]
 8006ce8:	0713      	lsls	r3, r2, #28
 8006cea:	d504      	bpl.n	8006cf6 <_svfiprintf_r+0xc2>
 8006cec:	2353      	movs	r3, #83	; 0x53
 8006cee:	a904      	add	r1, sp, #16
 8006cf0:	185b      	adds	r3, r3, r1
 8006cf2:	212b      	movs	r1, #43	; 0x2b
 8006cf4:	7019      	strb	r1, [r3, #0]
 8006cf6:	7833      	ldrb	r3, [r6, #0]
 8006cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cfa:	d016      	beq.n	8006d2a <_svfiprintf_r+0xf6>
 8006cfc:	0035      	movs	r5, r6
 8006cfe:	2100      	movs	r1, #0
 8006d00:	200a      	movs	r0, #10
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	782a      	ldrb	r2, [r5, #0]
 8006d06:	1c6e      	adds	r6, r5, #1
 8006d08:	3a30      	subs	r2, #48	; 0x30
 8006d0a:	2a09      	cmp	r2, #9
 8006d0c:	d94e      	bls.n	8006dac <_svfiprintf_r+0x178>
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	d018      	beq.n	8006d44 <_svfiprintf_r+0x110>
 8006d12:	e010      	b.n	8006d36 <_svfiprintf_r+0x102>
 8006d14:	3501      	adds	r5, #1
 8006d16:	e7b1      	b.n	8006c7c <_svfiprintf_r+0x48>
 8006d18:	4b40      	ldr	r3, [pc, #256]	; (8006e1c <_svfiprintf_r+0x1e8>)
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	1ac0      	subs	r0, r0, r3
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4083      	lsls	r3, r0
 8006d22:	4313      	orrs	r3, r2
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	002e      	movs	r6, r5
 8006d28:	e7ce      	b.n	8006cc8 <_svfiprintf_r+0x94>
 8006d2a:	9b07      	ldr	r3, [sp, #28]
 8006d2c:	1d19      	adds	r1, r3, #4
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	9107      	str	r1, [sp, #28]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	db01      	blt.n	8006d3a <_svfiprintf_r+0x106>
 8006d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d38:	e004      	b.n	8006d44 <_svfiprintf_r+0x110>
 8006d3a:	425b      	negs	r3, r3
 8006d3c:	60e3      	str	r3, [r4, #12]
 8006d3e:	2302      	movs	r3, #2
 8006d40:	4313      	orrs	r3, r2
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	782b      	ldrb	r3, [r5, #0]
 8006d46:	2b2e      	cmp	r3, #46	; 0x2e
 8006d48:	d10a      	bne.n	8006d60 <_svfiprintf_r+0x12c>
 8006d4a:	786b      	ldrb	r3, [r5, #1]
 8006d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4e:	d135      	bne.n	8006dbc <_svfiprintf_r+0x188>
 8006d50:	9b07      	ldr	r3, [sp, #28]
 8006d52:	3502      	adds	r5, #2
 8006d54:	1d1a      	adds	r2, r3, #4
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	9207      	str	r2, [sp, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	db2b      	blt.n	8006db6 <_svfiprintf_r+0x182>
 8006d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d60:	4e2f      	ldr	r6, [pc, #188]	; (8006e20 <_svfiprintf_r+0x1ec>)
 8006d62:	7829      	ldrb	r1, [r5, #0]
 8006d64:	2203      	movs	r2, #3
 8006d66:	0030      	movs	r0, r6
 8006d68:	f000 f9d8 	bl	800711c <memchr>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d006      	beq.n	8006d7e <_svfiprintf_r+0x14a>
 8006d70:	2340      	movs	r3, #64	; 0x40
 8006d72:	1b80      	subs	r0, r0, r6
 8006d74:	4083      	lsls	r3, r0
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	3501      	adds	r5, #1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	7829      	ldrb	r1, [r5, #0]
 8006d80:	2206      	movs	r2, #6
 8006d82:	4828      	ldr	r0, [pc, #160]	; (8006e24 <_svfiprintf_r+0x1f0>)
 8006d84:	1c6e      	adds	r6, r5, #1
 8006d86:	7621      	strb	r1, [r4, #24]
 8006d88:	f000 f9c8 	bl	800711c <memchr>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d03c      	beq.n	8006e0a <_svfiprintf_r+0x1d6>
 8006d90:	4b25      	ldr	r3, [pc, #148]	; (8006e28 <_svfiprintf_r+0x1f4>)
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d125      	bne.n	8006de2 <_svfiprintf_r+0x1ae>
 8006d96:	2207      	movs	r2, #7
 8006d98:	9b07      	ldr	r3, [sp, #28]
 8006d9a:	3307      	adds	r3, #7
 8006d9c:	4393      	bics	r3, r2
 8006d9e:	3308      	adds	r3, #8
 8006da0:	9307      	str	r3, [sp, #28]
 8006da2:	6963      	ldr	r3, [r4, #20]
 8006da4:	9a04      	ldr	r2, [sp, #16]
 8006da6:	189b      	adds	r3, r3, r2
 8006da8:	6163      	str	r3, [r4, #20]
 8006daa:	e766      	b.n	8006c7a <_svfiprintf_r+0x46>
 8006dac:	4343      	muls	r3, r0
 8006dae:	2101      	movs	r1, #1
 8006db0:	189b      	adds	r3, r3, r2
 8006db2:	0035      	movs	r5, r6
 8006db4:	e7a6      	b.n	8006d04 <_svfiprintf_r+0xd0>
 8006db6:	2301      	movs	r3, #1
 8006db8:	425b      	negs	r3, r3
 8006dba:	e7d0      	b.n	8006d5e <_svfiprintf_r+0x12a>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	200a      	movs	r0, #10
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	3501      	adds	r5, #1
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	7829      	ldrb	r1, [r5, #0]
 8006dc8:	1c6e      	adds	r6, r5, #1
 8006dca:	3930      	subs	r1, #48	; 0x30
 8006dcc:	2909      	cmp	r1, #9
 8006dce:	d903      	bls.n	8006dd8 <_svfiprintf_r+0x1a4>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0c5      	beq.n	8006d60 <_svfiprintf_r+0x12c>
 8006dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd6:	e7c3      	b.n	8006d60 <_svfiprintf_r+0x12c>
 8006dd8:	4342      	muls	r2, r0
 8006dda:	2301      	movs	r3, #1
 8006ddc:	1852      	adds	r2, r2, r1
 8006dde:	0035      	movs	r5, r6
 8006de0:	e7f1      	b.n	8006dc6 <_svfiprintf_r+0x192>
 8006de2:	ab07      	add	r3, sp, #28
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	003a      	movs	r2, r7
 8006de8:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <_svfiprintf_r+0x1f8>)
 8006dea:	0021      	movs	r1, r4
 8006dec:	9803      	ldr	r0, [sp, #12]
 8006dee:	e000      	b.n	8006df2 <_svfiprintf_r+0x1be>
 8006df0:	bf00      	nop
 8006df2:	9004      	str	r0, [sp, #16]
 8006df4:	9b04      	ldr	r3, [sp, #16]
 8006df6:	3301      	adds	r3, #1
 8006df8:	d1d3      	bne.n	8006da2 <_svfiprintf_r+0x16e>
 8006dfa:	89bb      	ldrh	r3, [r7, #12]
 8006dfc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006dfe:	065b      	lsls	r3, r3, #25
 8006e00:	d400      	bmi.n	8006e04 <_svfiprintf_r+0x1d0>
 8006e02:	e72e      	b.n	8006c62 <_svfiprintf_r+0x2e>
 8006e04:	2001      	movs	r0, #1
 8006e06:	4240      	negs	r0, r0
 8006e08:	e72b      	b.n	8006c62 <_svfiprintf_r+0x2e>
 8006e0a:	ab07      	add	r3, sp, #28
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	003a      	movs	r2, r7
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <_svfiprintf_r+0x1f8>)
 8006e12:	0021      	movs	r1, r4
 8006e14:	9803      	ldr	r0, [sp, #12]
 8006e16:	f000 f879 	bl	8006f0c <_printf_i>
 8006e1a:	e7ea      	b.n	8006df2 <_svfiprintf_r+0x1be>
 8006e1c:	08008654 	.word	0x08008654
 8006e20:	0800865a 	.word	0x0800865a
 8006e24:	0800865e 	.word	0x0800865e
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	08006b71 	.word	0x08006b71

08006e30 <_printf_common>:
 8006e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e32:	0015      	movs	r5, r2
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	688a      	ldr	r2, [r1, #8]
 8006e38:	690b      	ldr	r3, [r1, #16]
 8006e3a:	9000      	str	r0, [sp, #0]
 8006e3c:	000c      	movs	r4, r1
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	da00      	bge.n	8006e44 <_printf_common+0x14>
 8006e42:	0013      	movs	r3, r2
 8006e44:	0022      	movs	r2, r4
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	3243      	adds	r2, #67	; 0x43
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	2a00      	cmp	r2, #0
 8006e4e:	d001      	beq.n	8006e54 <_printf_common+0x24>
 8006e50:	3301      	adds	r3, #1
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	069b      	lsls	r3, r3, #26
 8006e58:	d502      	bpl.n	8006e60 <_printf_common+0x30>
 8006e5a:	682b      	ldr	r3, [r5, #0]
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	2706      	movs	r7, #6
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	401f      	ands	r7, r3
 8006e66:	d027      	beq.n	8006eb8 <_printf_common+0x88>
 8006e68:	0023      	movs	r3, r4
 8006e6a:	3343      	adds	r3, #67	; 0x43
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	1e5a      	subs	r2, r3, #1
 8006e70:	4193      	sbcs	r3, r2
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	0692      	lsls	r2, r2, #26
 8006e76:	d430      	bmi.n	8006eda <_printf_common+0xaa>
 8006e78:	0022      	movs	r2, r4
 8006e7a:	9901      	ldr	r1, [sp, #4]
 8006e7c:	3243      	adds	r2, #67	; 0x43
 8006e7e:	9800      	ldr	r0, [sp, #0]
 8006e80:	9e08      	ldr	r6, [sp, #32]
 8006e82:	47b0      	blx	r6
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d025      	beq.n	8006ed4 <_printf_common+0xa4>
 8006e88:	2306      	movs	r3, #6
 8006e8a:	6820      	ldr	r0, [r4, #0]
 8006e8c:	682a      	ldr	r2, [r5, #0]
 8006e8e:	68e1      	ldr	r1, [r4, #12]
 8006e90:	4003      	ands	r3, r0
 8006e92:	2500      	movs	r5, #0
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d103      	bne.n	8006ea0 <_printf_common+0x70>
 8006e98:	1a8d      	subs	r5, r1, r2
 8006e9a:	43eb      	mvns	r3, r5
 8006e9c:	17db      	asrs	r3, r3, #31
 8006e9e:	401d      	ands	r5, r3
 8006ea0:	68a3      	ldr	r3, [r4, #8]
 8006ea2:	6922      	ldr	r2, [r4, #16]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	dd01      	ble.n	8006eac <_printf_common+0x7c>
 8006ea8:	1a9b      	subs	r3, r3, r2
 8006eaa:	18ed      	adds	r5, r5, r3
 8006eac:	2700      	movs	r7, #0
 8006eae:	42bd      	cmp	r5, r7
 8006eb0:	d120      	bne.n	8006ef4 <_printf_common+0xc4>
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	e010      	b.n	8006ed8 <_printf_common+0xa8>
 8006eb6:	3701      	adds	r7, #1
 8006eb8:	68e3      	ldr	r3, [r4, #12]
 8006eba:	682a      	ldr	r2, [r5, #0]
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	42bb      	cmp	r3, r7
 8006ec0:	ddd2      	ble.n	8006e68 <_printf_common+0x38>
 8006ec2:	0022      	movs	r2, r4
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	3219      	adds	r2, #25
 8006ec8:	9901      	ldr	r1, [sp, #4]
 8006eca:	9800      	ldr	r0, [sp, #0]
 8006ecc:	9e08      	ldr	r6, [sp, #32]
 8006ece:	47b0      	blx	r6
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d1f0      	bne.n	8006eb6 <_printf_common+0x86>
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	4240      	negs	r0, r0
 8006ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eda:	2030      	movs	r0, #48	; 0x30
 8006edc:	18e1      	adds	r1, r4, r3
 8006ede:	3143      	adds	r1, #67	; 0x43
 8006ee0:	7008      	strb	r0, [r1, #0]
 8006ee2:	0021      	movs	r1, r4
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	3145      	adds	r1, #69	; 0x45
 8006ee8:	7809      	ldrb	r1, [r1, #0]
 8006eea:	18a2      	adds	r2, r4, r2
 8006eec:	3243      	adds	r2, #67	; 0x43
 8006eee:	3302      	adds	r3, #2
 8006ef0:	7011      	strb	r1, [r2, #0]
 8006ef2:	e7c1      	b.n	8006e78 <_printf_common+0x48>
 8006ef4:	0022      	movs	r2, r4
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	321a      	adds	r2, #26
 8006efa:	9901      	ldr	r1, [sp, #4]
 8006efc:	9800      	ldr	r0, [sp, #0]
 8006efe:	9e08      	ldr	r6, [sp, #32]
 8006f00:	47b0      	blx	r6
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d0e6      	beq.n	8006ed4 <_printf_common+0xa4>
 8006f06:	3701      	adds	r7, #1
 8006f08:	e7d1      	b.n	8006eae <_printf_common+0x7e>
	...

08006f0c <_printf_i>:
 8006f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0e:	b089      	sub	sp, #36	; 0x24
 8006f10:	9204      	str	r2, [sp, #16]
 8006f12:	000a      	movs	r2, r1
 8006f14:	3243      	adds	r2, #67	; 0x43
 8006f16:	9305      	str	r3, [sp, #20]
 8006f18:	9003      	str	r0, [sp, #12]
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	7e0a      	ldrb	r2, [r1, #24]
 8006f1e:	000c      	movs	r4, r1
 8006f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f22:	2a6e      	cmp	r2, #110	; 0x6e
 8006f24:	d100      	bne.n	8006f28 <_printf_i+0x1c>
 8006f26:	e086      	b.n	8007036 <_printf_i+0x12a>
 8006f28:	d81f      	bhi.n	8006f6a <_printf_i+0x5e>
 8006f2a:	2a63      	cmp	r2, #99	; 0x63
 8006f2c:	d033      	beq.n	8006f96 <_printf_i+0x8a>
 8006f2e:	d808      	bhi.n	8006f42 <_printf_i+0x36>
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	d100      	bne.n	8006f36 <_printf_i+0x2a>
 8006f34:	e08c      	b.n	8007050 <_printf_i+0x144>
 8006f36:	2a58      	cmp	r2, #88	; 0x58
 8006f38:	d04d      	beq.n	8006fd6 <_printf_i+0xca>
 8006f3a:	0025      	movs	r5, r4
 8006f3c:	3542      	adds	r5, #66	; 0x42
 8006f3e:	702a      	strb	r2, [r5, #0]
 8006f40:	e030      	b.n	8006fa4 <_printf_i+0x98>
 8006f42:	2a64      	cmp	r2, #100	; 0x64
 8006f44:	d001      	beq.n	8006f4a <_printf_i+0x3e>
 8006f46:	2a69      	cmp	r2, #105	; 0x69
 8006f48:	d1f7      	bne.n	8006f3a <_printf_i+0x2e>
 8006f4a:	6819      	ldr	r1, [r3, #0]
 8006f4c:	6825      	ldr	r5, [r4, #0]
 8006f4e:	1d0a      	adds	r2, r1, #4
 8006f50:	0628      	lsls	r0, r5, #24
 8006f52:	d529      	bpl.n	8006fa8 <_printf_i+0x9c>
 8006f54:	6808      	ldr	r0, [r1, #0]
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	da03      	bge.n	8006f64 <_printf_i+0x58>
 8006f5c:	232d      	movs	r3, #45	; 0x2d
 8006f5e:	9a02      	ldr	r2, [sp, #8]
 8006f60:	4240      	negs	r0, r0
 8006f62:	7013      	strb	r3, [r2, #0]
 8006f64:	4e6b      	ldr	r6, [pc, #428]	; (8007114 <_printf_i+0x208>)
 8006f66:	270a      	movs	r7, #10
 8006f68:	e04f      	b.n	800700a <_printf_i+0xfe>
 8006f6a:	2a73      	cmp	r2, #115	; 0x73
 8006f6c:	d074      	beq.n	8007058 <_printf_i+0x14c>
 8006f6e:	d808      	bhi.n	8006f82 <_printf_i+0x76>
 8006f70:	2a6f      	cmp	r2, #111	; 0x6f
 8006f72:	d01f      	beq.n	8006fb4 <_printf_i+0xa8>
 8006f74:	2a70      	cmp	r2, #112	; 0x70
 8006f76:	d1e0      	bne.n	8006f3a <_printf_i+0x2e>
 8006f78:	2220      	movs	r2, #32
 8006f7a:	6809      	ldr	r1, [r1, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	6022      	str	r2, [r4, #0]
 8006f80:	e003      	b.n	8006f8a <_printf_i+0x7e>
 8006f82:	2a75      	cmp	r2, #117	; 0x75
 8006f84:	d016      	beq.n	8006fb4 <_printf_i+0xa8>
 8006f86:	2a78      	cmp	r2, #120	; 0x78
 8006f88:	d1d7      	bne.n	8006f3a <_printf_i+0x2e>
 8006f8a:	0022      	movs	r2, r4
 8006f8c:	2178      	movs	r1, #120	; 0x78
 8006f8e:	3245      	adds	r2, #69	; 0x45
 8006f90:	7011      	strb	r1, [r2, #0]
 8006f92:	4e61      	ldr	r6, [pc, #388]	; (8007118 <_printf_i+0x20c>)
 8006f94:	e022      	b.n	8006fdc <_printf_i+0xd0>
 8006f96:	0025      	movs	r5, r4
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	3542      	adds	r5, #66	; 0x42
 8006f9c:	1d11      	adds	r1, r2, #4
 8006f9e:	6019      	str	r1, [r3, #0]
 8006fa0:	6813      	ldr	r3, [r2, #0]
 8006fa2:	702b      	strb	r3, [r5, #0]
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e065      	b.n	8007074 <_printf_i+0x168>
 8006fa8:	6808      	ldr	r0, [r1, #0]
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	0669      	lsls	r1, r5, #25
 8006fae:	d5d3      	bpl.n	8006f58 <_printf_i+0x4c>
 8006fb0:	b200      	sxth	r0, r0
 8006fb2:	e7d1      	b.n	8006f58 <_printf_i+0x4c>
 8006fb4:	6819      	ldr	r1, [r3, #0]
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	1d08      	adds	r0, r1, #4
 8006fba:	6018      	str	r0, [r3, #0]
 8006fbc:	6808      	ldr	r0, [r1, #0]
 8006fbe:	062e      	lsls	r6, r5, #24
 8006fc0:	d505      	bpl.n	8006fce <_printf_i+0xc2>
 8006fc2:	4e54      	ldr	r6, [pc, #336]	; (8007114 <_printf_i+0x208>)
 8006fc4:	2708      	movs	r7, #8
 8006fc6:	2a6f      	cmp	r2, #111	; 0x6f
 8006fc8:	d01b      	beq.n	8007002 <_printf_i+0xf6>
 8006fca:	270a      	movs	r7, #10
 8006fcc:	e019      	b.n	8007002 <_printf_i+0xf6>
 8006fce:	066d      	lsls	r5, r5, #25
 8006fd0:	d5f7      	bpl.n	8006fc2 <_printf_i+0xb6>
 8006fd2:	b280      	uxth	r0, r0
 8006fd4:	e7f5      	b.n	8006fc2 <_printf_i+0xb6>
 8006fd6:	3145      	adds	r1, #69	; 0x45
 8006fd8:	4e4e      	ldr	r6, [pc, #312]	; (8007114 <_printf_i+0x208>)
 8006fda:	700a      	strb	r2, [r1, #0]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	1d01      	adds	r1, r0, #4
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	6019      	str	r1, [r3, #0]
 8006fe6:	0615      	lsls	r5, r2, #24
 8006fe8:	d521      	bpl.n	800702e <_printf_i+0x122>
 8006fea:	07d3      	lsls	r3, r2, #31
 8006fec:	d502      	bpl.n	8006ff4 <_printf_i+0xe8>
 8006fee:	2320      	movs	r3, #32
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	6022      	str	r2, [r4, #0]
 8006ff4:	2710      	movs	r7, #16
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d103      	bne.n	8007002 <_printf_i+0xf6>
 8006ffa:	2320      	movs	r3, #32
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	439a      	bics	r2, r3
 8007000:	6022      	str	r2, [r4, #0]
 8007002:	0023      	movs	r3, r4
 8007004:	2200      	movs	r2, #0
 8007006:	3343      	adds	r3, #67	; 0x43
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	6863      	ldr	r3, [r4, #4]
 800700c:	60a3      	str	r3, [r4, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	db58      	blt.n	80070c4 <_printf_i+0x1b8>
 8007012:	2204      	movs	r2, #4
 8007014:	6821      	ldr	r1, [r4, #0]
 8007016:	4391      	bics	r1, r2
 8007018:	6021      	str	r1, [r4, #0]
 800701a:	2800      	cmp	r0, #0
 800701c:	d154      	bne.n	80070c8 <_printf_i+0x1bc>
 800701e:	9d02      	ldr	r5, [sp, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d05a      	beq.n	80070da <_printf_i+0x1ce>
 8007024:	0025      	movs	r5, r4
 8007026:	7833      	ldrb	r3, [r6, #0]
 8007028:	3542      	adds	r5, #66	; 0x42
 800702a:	702b      	strb	r3, [r5, #0]
 800702c:	e055      	b.n	80070da <_printf_i+0x1ce>
 800702e:	0655      	lsls	r5, r2, #25
 8007030:	d5db      	bpl.n	8006fea <_printf_i+0xde>
 8007032:	b280      	uxth	r0, r0
 8007034:	e7d9      	b.n	8006fea <_printf_i+0xde>
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	680d      	ldr	r5, [r1, #0]
 800703a:	1d10      	adds	r0, r2, #4
 800703c:	6949      	ldr	r1, [r1, #20]
 800703e:	6018      	str	r0, [r3, #0]
 8007040:	6813      	ldr	r3, [r2, #0]
 8007042:	062e      	lsls	r6, r5, #24
 8007044:	d501      	bpl.n	800704a <_printf_i+0x13e>
 8007046:	6019      	str	r1, [r3, #0]
 8007048:	e002      	b.n	8007050 <_printf_i+0x144>
 800704a:	066d      	lsls	r5, r5, #25
 800704c:	d5fb      	bpl.n	8007046 <_printf_i+0x13a>
 800704e:	8019      	strh	r1, [r3, #0]
 8007050:	2300      	movs	r3, #0
 8007052:	9d02      	ldr	r5, [sp, #8]
 8007054:	6123      	str	r3, [r4, #16]
 8007056:	e04f      	b.n	80070f8 <_printf_i+0x1ec>
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	1d11      	adds	r1, r2, #4
 800705c:	6019      	str	r1, [r3, #0]
 800705e:	6815      	ldr	r5, [r2, #0]
 8007060:	2100      	movs	r1, #0
 8007062:	6862      	ldr	r2, [r4, #4]
 8007064:	0028      	movs	r0, r5
 8007066:	f000 f859 	bl	800711c <memchr>
 800706a:	2800      	cmp	r0, #0
 800706c:	d001      	beq.n	8007072 <_printf_i+0x166>
 800706e:	1b40      	subs	r0, r0, r5
 8007070:	6060      	str	r0, [r4, #4]
 8007072:	6863      	ldr	r3, [r4, #4]
 8007074:	6123      	str	r3, [r4, #16]
 8007076:	2300      	movs	r3, #0
 8007078:	9a02      	ldr	r2, [sp, #8]
 800707a:	7013      	strb	r3, [r2, #0]
 800707c:	e03c      	b.n	80070f8 <_printf_i+0x1ec>
 800707e:	6923      	ldr	r3, [r4, #16]
 8007080:	002a      	movs	r2, r5
 8007082:	9904      	ldr	r1, [sp, #16]
 8007084:	9803      	ldr	r0, [sp, #12]
 8007086:	9d05      	ldr	r5, [sp, #20]
 8007088:	47a8      	blx	r5
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	d03e      	beq.n	800710c <_printf_i+0x200>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	079b      	lsls	r3, r3, #30
 8007092:	d415      	bmi.n	80070c0 <_printf_i+0x1b4>
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	68e0      	ldr	r0, [r4, #12]
 8007098:	4298      	cmp	r0, r3
 800709a:	da39      	bge.n	8007110 <_printf_i+0x204>
 800709c:	0018      	movs	r0, r3
 800709e:	e037      	b.n	8007110 <_printf_i+0x204>
 80070a0:	0022      	movs	r2, r4
 80070a2:	2301      	movs	r3, #1
 80070a4:	3219      	adds	r2, #25
 80070a6:	9904      	ldr	r1, [sp, #16]
 80070a8:	9803      	ldr	r0, [sp, #12]
 80070aa:	9e05      	ldr	r6, [sp, #20]
 80070ac:	47b0      	blx	r6
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d02c      	beq.n	800710c <_printf_i+0x200>
 80070b2:	3501      	adds	r5, #1
 80070b4:	68e3      	ldr	r3, [r4, #12]
 80070b6:	9a07      	ldr	r2, [sp, #28]
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	42ab      	cmp	r3, r5
 80070bc:	dcf0      	bgt.n	80070a0 <_printf_i+0x194>
 80070be:	e7e9      	b.n	8007094 <_printf_i+0x188>
 80070c0:	2500      	movs	r5, #0
 80070c2:	e7f7      	b.n	80070b4 <_printf_i+0x1a8>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d0ad      	beq.n	8007024 <_printf_i+0x118>
 80070c8:	9d02      	ldr	r5, [sp, #8]
 80070ca:	0039      	movs	r1, r7
 80070cc:	f7f9 f8aa 	bl	8000224 <__aeabi_uidivmod>
 80070d0:	5c73      	ldrb	r3, [r6, r1]
 80070d2:	3d01      	subs	r5, #1
 80070d4:	702b      	strb	r3, [r5, #0]
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d1f7      	bne.n	80070ca <_printf_i+0x1be>
 80070da:	2f08      	cmp	r7, #8
 80070dc:	d109      	bne.n	80070f2 <_printf_i+0x1e6>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	07db      	lsls	r3, r3, #31
 80070e2:	d506      	bpl.n	80070f2 <_printf_i+0x1e6>
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	6922      	ldr	r2, [r4, #16]
 80070e8:	4293      	cmp	r3, r2
 80070ea:	dc02      	bgt.n	80070f2 <_printf_i+0x1e6>
 80070ec:	2330      	movs	r3, #48	; 0x30
 80070ee:	3d01      	subs	r5, #1
 80070f0:	702b      	strb	r3, [r5, #0]
 80070f2:	9b02      	ldr	r3, [sp, #8]
 80070f4:	1b5b      	subs	r3, r3, r5
 80070f6:	6123      	str	r3, [r4, #16]
 80070f8:	9b05      	ldr	r3, [sp, #20]
 80070fa:	aa07      	add	r2, sp, #28
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	0021      	movs	r1, r4
 8007100:	9b04      	ldr	r3, [sp, #16]
 8007102:	9803      	ldr	r0, [sp, #12]
 8007104:	f7ff fe94 	bl	8006e30 <_printf_common>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d1b8      	bne.n	800707e <_printf_i+0x172>
 800710c:	2001      	movs	r0, #1
 800710e:	4240      	negs	r0, r0
 8007110:	b009      	add	sp, #36	; 0x24
 8007112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007114:	08008665 	.word	0x08008665
 8007118:	08008676 	.word	0x08008676

0800711c <memchr>:
 800711c:	b2c9      	uxtb	r1, r1
 800711e:	1882      	adds	r2, r0, r2
 8007120:	4290      	cmp	r0, r2
 8007122:	d101      	bne.n	8007128 <memchr+0xc>
 8007124:	2000      	movs	r0, #0
 8007126:	4770      	bx	lr
 8007128:	7803      	ldrb	r3, [r0, #0]
 800712a:	428b      	cmp	r3, r1
 800712c:	d0fb      	beq.n	8007126 <memchr+0xa>
 800712e:	3001      	adds	r0, #1
 8007130:	e7f6      	b.n	8007120 <memchr+0x4>

08007132 <memcpy>:
 8007132:	2300      	movs	r3, #0
 8007134:	b510      	push	{r4, lr}
 8007136:	429a      	cmp	r2, r3
 8007138:	d100      	bne.n	800713c <memcpy+0xa>
 800713a:	bd10      	pop	{r4, pc}
 800713c:	5ccc      	ldrb	r4, [r1, r3]
 800713e:	54c4      	strb	r4, [r0, r3]
 8007140:	3301      	adds	r3, #1
 8007142:	e7f8      	b.n	8007136 <memcpy+0x4>

08007144 <memmove>:
 8007144:	b510      	push	{r4, lr}
 8007146:	4288      	cmp	r0, r1
 8007148:	d902      	bls.n	8007150 <memmove+0xc>
 800714a:	188b      	adds	r3, r1, r2
 800714c:	4298      	cmp	r0, r3
 800714e:	d303      	bcc.n	8007158 <memmove+0x14>
 8007150:	2300      	movs	r3, #0
 8007152:	e007      	b.n	8007164 <memmove+0x20>
 8007154:	5c8b      	ldrb	r3, [r1, r2]
 8007156:	5483      	strb	r3, [r0, r2]
 8007158:	3a01      	subs	r2, #1
 800715a:	d2fb      	bcs.n	8007154 <memmove+0x10>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	5ccc      	ldrb	r4, [r1, r3]
 8007160:	54c4      	strb	r4, [r0, r3]
 8007162:	3301      	adds	r3, #1
 8007164:	429a      	cmp	r2, r3
 8007166:	d1fa      	bne.n	800715e <memmove+0x1a>
 8007168:	e7f8      	b.n	800715c <memmove+0x18>
	...

0800716c <_free_r>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	0005      	movs	r5, r0
 8007170:	2900      	cmp	r1, #0
 8007172:	d010      	beq.n	8007196 <_free_r+0x2a>
 8007174:	1f0c      	subs	r4, r1, #4
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	da00      	bge.n	800717e <_free_r+0x12>
 800717c:	18e4      	adds	r4, r4, r3
 800717e:	0028      	movs	r0, r5
 8007180:	f000 f8d4 	bl	800732c <__malloc_lock>
 8007184:	4a1d      	ldr	r2, [pc, #116]	; (80071fc <_free_r+0x90>)
 8007186:	6813      	ldr	r3, [r2, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <_free_r+0x2c>
 800718c:	6063      	str	r3, [r4, #4]
 800718e:	6014      	str	r4, [r2, #0]
 8007190:	0028      	movs	r0, r5
 8007192:	f000 f8cc 	bl	800732e <__malloc_unlock>
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	42a3      	cmp	r3, r4
 800719a:	d909      	bls.n	80071b0 <_free_r+0x44>
 800719c:	6821      	ldr	r1, [r4, #0]
 800719e:	1860      	adds	r0, r4, r1
 80071a0:	4283      	cmp	r3, r0
 80071a2:	d1f3      	bne.n	800718c <_free_r+0x20>
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	1841      	adds	r1, r0, r1
 80071aa:	6021      	str	r1, [r4, #0]
 80071ac:	e7ee      	b.n	800718c <_free_r+0x20>
 80071ae:	0013      	movs	r3, r2
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	d001      	beq.n	80071ba <_free_r+0x4e>
 80071b6:	42a2      	cmp	r2, r4
 80071b8:	d9f9      	bls.n	80071ae <_free_r+0x42>
 80071ba:	6819      	ldr	r1, [r3, #0]
 80071bc:	1858      	adds	r0, r3, r1
 80071be:	42a0      	cmp	r0, r4
 80071c0:	d10b      	bne.n	80071da <_free_r+0x6e>
 80071c2:	6820      	ldr	r0, [r4, #0]
 80071c4:	1809      	adds	r1, r1, r0
 80071c6:	1858      	adds	r0, r3, r1
 80071c8:	6019      	str	r1, [r3, #0]
 80071ca:	4282      	cmp	r2, r0
 80071cc:	d1e0      	bne.n	8007190 <_free_r+0x24>
 80071ce:	6810      	ldr	r0, [r2, #0]
 80071d0:	6852      	ldr	r2, [r2, #4]
 80071d2:	1841      	adds	r1, r0, r1
 80071d4:	6019      	str	r1, [r3, #0]
 80071d6:	605a      	str	r2, [r3, #4]
 80071d8:	e7da      	b.n	8007190 <_free_r+0x24>
 80071da:	42a0      	cmp	r0, r4
 80071dc:	d902      	bls.n	80071e4 <_free_r+0x78>
 80071de:	230c      	movs	r3, #12
 80071e0:	602b      	str	r3, [r5, #0]
 80071e2:	e7d5      	b.n	8007190 <_free_r+0x24>
 80071e4:	6821      	ldr	r1, [r4, #0]
 80071e6:	1860      	adds	r0, r4, r1
 80071e8:	4282      	cmp	r2, r0
 80071ea:	d103      	bne.n	80071f4 <_free_r+0x88>
 80071ec:	6810      	ldr	r0, [r2, #0]
 80071ee:	6852      	ldr	r2, [r2, #4]
 80071f0:	1841      	adds	r1, r0, r1
 80071f2:	6021      	str	r1, [r4, #0]
 80071f4:	6062      	str	r2, [r4, #4]
 80071f6:	605c      	str	r4, [r3, #4]
 80071f8:	e7ca      	b.n	8007190 <_free_r+0x24>
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	200000dc 	.word	0x200000dc

08007200 <_malloc_r>:
 8007200:	2303      	movs	r3, #3
 8007202:	b570      	push	{r4, r5, r6, lr}
 8007204:	1ccd      	adds	r5, r1, #3
 8007206:	439d      	bics	r5, r3
 8007208:	3508      	adds	r5, #8
 800720a:	0006      	movs	r6, r0
 800720c:	2d0c      	cmp	r5, #12
 800720e:	d21e      	bcs.n	800724e <_malloc_r+0x4e>
 8007210:	250c      	movs	r5, #12
 8007212:	42a9      	cmp	r1, r5
 8007214:	d81d      	bhi.n	8007252 <_malloc_r+0x52>
 8007216:	0030      	movs	r0, r6
 8007218:	f000 f888 	bl	800732c <__malloc_lock>
 800721c:	4a25      	ldr	r2, [pc, #148]	; (80072b4 <_malloc_r+0xb4>)
 800721e:	6814      	ldr	r4, [r2, #0]
 8007220:	0021      	movs	r1, r4
 8007222:	2900      	cmp	r1, #0
 8007224:	d119      	bne.n	800725a <_malloc_r+0x5a>
 8007226:	4c24      	ldr	r4, [pc, #144]	; (80072b8 <_malloc_r+0xb8>)
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <_malloc_r+0x36>
 800722e:	0030      	movs	r0, r6
 8007230:	f000 f86a 	bl	8007308 <_sbrk_r>
 8007234:	6020      	str	r0, [r4, #0]
 8007236:	0029      	movs	r1, r5
 8007238:	0030      	movs	r0, r6
 800723a:	f000 f865 	bl	8007308 <_sbrk_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	d12b      	bne.n	800729a <_malloc_r+0x9a>
 8007242:	230c      	movs	r3, #12
 8007244:	0030      	movs	r0, r6
 8007246:	6033      	str	r3, [r6, #0]
 8007248:	f000 f871 	bl	800732e <__malloc_unlock>
 800724c:	e003      	b.n	8007256 <_malloc_r+0x56>
 800724e:	2d00      	cmp	r5, #0
 8007250:	dadf      	bge.n	8007212 <_malloc_r+0x12>
 8007252:	230c      	movs	r3, #12
 8007254:	6033      	str	r3, [r6, #0]
 8007256:	2000      	movs	r0, #0
 8007258:	bd70      	pop	{r4, r5, r6, pc}
 800725a:	680b      	ldr	r3, [r1, #0]
 800725c:	1b5b      	subs	r3, r3, r5
 800725e:	d419      	bmi.n	8007294 <_malloc_r+0x94>
 8007260:	2b0b      	cmp	r3, #11
 8007262:	d903      	bls.n	800726c <_malloc_r+0x6c>
 8007264:	600b      	str	r3, [r1, #0]
 8007266:	18cc      	adds	r4, r1, r3
 8007268:	6025      	str	r5, [r4, #0]
 800726a:	e003      	b.n	8007274 <_malloc_r+0x74>
 800726c:	684b      	ldr	r3, [r1, #4]
 800726e:	428c      	cmp	r4, r1
 8007270:	d10d      	bne.n	800728e <_malloc_r+0x8e>
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	0030      	movs	r0, r6
 8007276:	f000 f85a 	bl	800732e <__malloc_unlock>
 800727a:	0020      	movs	r0, r4
 800727c:	2207      	movs	r2, #7
 800727e:	300b      	adds	r0, #11
 8007280:	1d23      	adds	r3, r4, #4
 8007282:	4390      	bics	r0, r2
 8007284:	1ac3      	subs	r3, r0, r3
 8007286:	d0e7      	beq.n	8007258 <_malloc_r+0x58>
 8007288:	425a      	negs	r2, r3
 800728a:	50e2      	str	r2, [r4, r3]
 800728c:	e7e4      	b.n	8007258 <_malloc_r+0x58>
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	000c      	movs	r4, r1
 8007292:	e7ef      	b.n	8007274 <_malloc_r+0x74>
 8007294:	000c      	movs	r4, r1
 8007296:	6849      	ldr	r1, [r1, #4]
 8007298:	e7c3      	b.n	8007222 <_malloc_r+0x22>
 800729a:	2303      	movs	r3, #3
 800729c:	1cc4      	adds	r4, r0, #3
 800729e:	439c      	bics	r4, r3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d0e1      	beq.n	8007268 <_malloc_r+0x68>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	0030      	movs	r0, r6
 80072a8:	f000 f82e 	bl	8007308 <_sbrk_r>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d1db      	bne.n	8007268 <_malloc_r+0x68>
 80072b0:	e7c7      	b.n	8007242 <_malloc_r+0x42>
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	200000dc 	.word	0x200000dc
 80072b8:	200000e0 	.word	0x200000e0

080072bc <_realloc_r>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	0007      	movs	r7, r0
 80072c0:	000d      	movs	r5, r1
 80072c2:	0016      	movs	r6, r2
 80072c4:	2900      	cmp	r1, #0
 80072c6:	d105      	bne.n	80072d4 <_realloc_r+0x18>
 80072c8:	0011      	movs	r1, r2
 80072ca:	f7ff ff99 	bl	8007200 <_malloc_r>
 80072ce:	0004      	movs	r4, r0
 80072d0:	0020      	movs	r0, r4
 80072d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	d103      	bne.n	80072e0 <_realloc_r+0x24>
 80072d8:	f7ff ff48 	bl	800716c <_free_r>
 80072dc:	0034      	movs	r4, r6
 80072de:	e7f7      	b.n	80072d0 <_realloc_r+0x14>
 80072e0:	f000 f826 	bl	8007330 <_malloc_usable_size_r>
 80072e4:	002c      	movs	r4, r5
 80072e6:	42b0      	cmp	r0, r6
 80072e8:	d2f2      	bcs.n	80072d0 <_realloc_r+0x14>
 80072ea:	0031      	movs	r1, r6
 80072ec:	0038      	movs	r0, r7
 80072ee:	f7ff ff87 	bl	8007200 <_malloc_r>
 80072f2:	1e04      	subs	r4, r0, #0
 80072f4:	d0ec      	beq.n	80072d0 <_realloc_r+0x14>
 80072f6:	0029      	movs	r1, r5
 80072f8:	0032      	movs	r2, r6
 80072fa:	f7ff ff1a 	bl	8007132 <memcpy>
 80072fe:	0029      	movs	r1, r5
 8007300:	0038      	movs	r0, r7
 8007302:	f7ff ff33 	bl	800716c <_free_r>
 8007306:	e7e3      	b.n	80072d0 <_realloc_r+0x14>

08007308 <_sbrk_r>:
 8007308:	2300      	movs	r3, #0
 800730a:	b570      	push	{r4, r5, r6, lr}
 800730c:	4c06      	ldr	r4, [pc, #24]	; (8007328 <_sbrk_r+0x20>)
 800730e:	0005      	movs	r5, r0
 8007310:	0008      	movs	r0, r1
 8007312:	6023      	str	r3, [r4, #0]
 8007314:	f7fb ff90 	bl	8003238 <_sbrk>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d103      	bne.n	8007324 <_sbrk_r+0x1c>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d000      	beq.n	8007324 <_sbrk_r+0x1c>
 8007322:	602b      	str	r3, [r5, #0]
 8007324:	bd70      	pop	{r4, r5, r6, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	20000288 	.word	0x20000288

0800732c <__malloc_lock>:
 800732c:	4770      	bx	lr

0800732e <__malloc_unlock>:
 800732e:	4770      	bx	lr

08007330 <_malloc_usable_size_r>:
 8007330:	1f0b      	subs	r3, r1, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	1f18      	subs	r0, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	da01      	bge.n	800733e <_malloc_usable_size_r+0xe>
 800733a:	580b      	ldr	r3, [r1, r0]
 800733c:	18c0      	adds	r0, r0, r3
 800733e:	4770      	bx	lr

08007340 <pow>:
 8007340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007342:	2400      	movs	r4, #0
 8007344:	b091      	sub	sp, #68	; 0x44
 8007346:	001f      	movs	r7, r3
 8007348:	9000      	str	r0, [sp, #0]
 800734a:	9101      	str	r1, [sp, #4]
 800734c:	0016      	movs	r6, r2
 800734e:	f000 f9e7 	bl	8007720 <__ieee754_pow>
 8007352:	4bbe      	ldr	r3, [pc, #760]	; (800764c <pow+0x30c>)
 8007354:	9002      	str	r0, [sp, #8]
 8007356:	9103      	str	r1, [sp, #12]
 8007358:	571c      	ldrsb	r4, [r3, r4]
 800735a:	1c63      	adds	r3, r4, #1
 800735c:	d100      	bne.n	8007360 <pow+0x20>
 800735e:	e0d4      	b.n	800750a <pow+0x1ca>
 8007360:	0032      	movs	r2, r6
 8007362:	003b      	movs	r3, r7
 8007364:	0030      	movs	r0, r6
 8007366:	0039      	movs	r1, r7
 8007368:	f7fa fe76 	bl	8002058 <__aeabi_dcmpun>
 800736c:	1e05      	subs	r5, r0, #0
 800736e:	d000      	beq.n	8007372 <pow+0x32>
 8007370:	e0cb      	b.n	800750a <pow+0x1ca>
 8007372:	9a00      	ldr	r2, [sp, #0]
 8007374:	9b01      	ldr	r3, [sp, #4]
 8007376:	0010      	movs	r0, r2
 8007378:	0019      	movs	r1, r3
 800737a:	f7fa fe6d 	bl	8002058 <__aeabi_dcmpun>
 800737e:	2200      	movs	r2, #0
 8007380:	9005      	str	r0, [sp, #20]
 8007382:	2800      	cmp	r0, #0
 8007384:	d01e      	beq.n	80073c4 <pow+0x84>
 8007386:	2300      	movs	r3, #0
 8007388:	0030      	movs	r0, r6
 800738a:	0039      	movs	r1, r7
 800738c:	f7f9 f84a 	bl	8000424 <__aeabi_dcmpeq>
 8007390:	2800      	cmp	r0, #0
 8007392:	d100      	bne.n	8007396 <pow+0x56>
 8007394:	e0b9      	b.n	800750a <pow+0x1ca>
 8007396:	2301      	movs	r3, #1
 8007398:	9306      	str	r3, [sp, #24]
 800739a:	4bad      	ldr	r3, [pc, #692]	; (8007650 <pow+0x310>)
 800739c:	950e      	str	r5, [sp, #56]	; 0x38
 800739e:	9307      	str	r3, [sp, #28]
 80073a0:	9a00      	ldr	r2, [sp, #0]
 80073a2:	9b01      	ldr	r3, [sp, #4]
 80073a4:	9208      	str	r2, [sp, #32]
 80073a6:	9309      	str	r3, [sp, #36]	; 0x24
 80073a8:	2200      	movs	r2, #0
 80073aa:	4baa      	ldr	r3, [pc, #680]	; (8007654 <pow+0x314>)
 80073ac:	960a      	str	r6, [sp, #40]	; 0x28
 80073ae:	970b      	str	r7, [sp, #44]	; 0x2c
 80073b0:	920c      	str	r2, [sp, #48]	; 0x30
 80073b2:	930d      	str	r3, [sp, #52]	; 0x34
 80073b4:	2c02      	cmp	r4, #2
 80073b6:	d033      	beq.n	8007420 <pow+0xe0>
 80073b8:	a806      	add	r0, sp, #24
 80073ba:	f000 ff65 	bl	8008288 <matherr>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d125      	bne.n	800740e <pow+0xce>
 80073c2:	e059      	b.n	8007478 <pow+0x138>
 80073c4:	2300      	movs	r3, #0
 80073c6:	9800      	ldr	r0, [sp, #0]
 80073c8:	9901      	ldr	r1, [sp, #4]
 80073ca:	f7f9 f82b 	bl	8000424 <__aeabi_dcmpeq>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d057      	beq.n	8007482 <pow+0x142>
 80073d2:	2200      	movs	r2, #0
 80073d4:	2300      	movs	r3, #0
 80073d6:	0030      	movs	r0, r6
 80073d8:	0039      	movs	r1, r7
 80073da:	f7f9 f823 	bl	8000424 <__aeabi_dcmpeq>
 80073de:	1e05      	subs	r5, r0, #0
 80073e0:	d021      	beq.n	8007426 <pow+0xe6>
 80073e2:	2301      	movs	r3, #1
 80073e4:	9306      	str	r3, [sp, #24]
 80073e6:	4b9a      	ldr	r3, [pc, #616]	; (8007650 <pow+0x310>)
 80073e8:	960a      	str	r6, [sp, #40]	; 0x28
 80073ea:	970b      	str	r7, [sp, #44]	; 0x2c
 80073ec:	9307      	str	r3, [sp, #28]
 80073ee:	9b05      	ldr	r3, [sp, #20]
 80073f0:	930e      	str	r3, [sp, #56]	; 0x38
 80073f2:	9a00      	ldr	r2, [sp, #0]
 80073f4:	9b01      	ldr	r3, [sp, #4]
 80073f6:	9208      	str	r2, [sp, #32]
 80073f8:	9309      	str	r3, [sp, #36]	; 0x24
 80073fa:	2200      	movs	r2, #0
 80073fc:	2300      	movs	r3, #0
 80073fe:	920c      	str	r2, [sp, #48]	; 0x30
 8007400:	930d      	str	r3, [sp, #52]	; 0x34
 8007402:	2c00      	cmp	r4, #0
 8007404:	d0d8      	beq.n	80073b8 <pow+0x78>
 8007406:	2200      	movs	r2, #0
 8007408:	4b92      	ldr	r3, [pc, #584]	; (8007654 <pow+0x314>)
 800740a:	920c      	str	r2, [sp, #48]	; 0x30
 800740c:	930d      	str	r3, [sp, #52]	; 0x34
 800740e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <pow+0xe0>
 8007416:	f7ff fb59 	bl	8006acc <__errno>
 800741a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	6003      	str	r3, [r0, #0]
 8007420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007422:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007424:	e06f      	b.n	8007506 <pow+0x1c6>
 8007426:	0030      	movs	r0, r6
 8007428:	0039      	movs	r1, r7
 800742a:	f000 ff25 	bl	8008278 <finite>
 800742e:	2800      	cmp	r0, #0
 8007430:	d06b      	beq.n	800750a <pow+0x1ca>
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	0030      	movs	r0, r6
 8007438:	0039      	movs	r1, r7
 800743a:	f7f8 fff9 	bl	8000430 <__aeabi_dcmplt>
 800743e:	2800      	cmp	r0, #0
 8007440:	d063      	beq.n	800750a <pow+0x1ca>
 8007442:	2301      	movs	r3, #1
 8007444:	9306      	str	r3, [sp, #24]
 8007446:	4b82      	ldr	r3, [pc, #520]	; (8007650 <pow+0x310>)
 8007448:	950e      	str	r5, [sp, #56]	; 0x38
 800744a:	9307      	str	r3, [sp, #28]
 800744c:	9b00      	ldr	r3, [sp, #0]
 800744e:	9c01      	ldr	r4, [sp, #4]
 8007450:	9308      	str	r3, [sp, #32]
 8007452:	9409      	str	r4, [sp, #36]	; 0x24
 8007454:	4b7d      	ldr	r3, [pc, #500]	; (800764c <pow+0x30c>)
 8007456:	960a      	str	r6, [sp, #40]	; 0x28
 8007458:	970b      	str	r7, [sp, #44]	; 0x2c
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b25b      	sxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d104      	bne.n	800746c <pow+0x12c>
 8007462:	2300      	movs	r3, #0
 8007464:	2400      	movs	r4, #0
 8007466:	930c      	str	r3, [sp, #48]	; 0x30
 8007468:	940d      	str	r4, [sp, #52]	; 0x34
 800746a:	e7a5      	b.n	80073b8 <pow+0x78>
 800746c:	2000      	movs	r0, #0
 800746e:	497a      	ldr	r1, [pc, #488]	; (8007658 <pow+0x318>)
 8007470:	900c      	str	r0, [sp, #48]	; 0x30
 8007472:	910d      	str	r1, [sp, #52]	; 0x34
 8007474:	2b02      	cmp	r3, #2
 8007476:	d19f      	bne.n	80073b8 <pow+0x78>
 8007478:	f7ff fb28 	bl	8006acc <__errno>
 800747c:	2321      	movs	r3, #33	; 0x21
 800747e:	6003      	str	r3, [r0, #0]
 8007480:	e7c5      	b.n	800740e <pow+0xce>
 8007482:	9802      	ldr	r0, [sp, #8]
 8007484:	9903      	ldr	r1, [sp, #12]
 8007486:	f000 fef7 	bl	8008278 <finite>
 800748a:	9005      	str	r0, [sp, #20]
 800748c:	2800      	cmp	r0, #0
 800748e:	d000      	beq.n	8007492 <pow+0x152>
 8007490:	e0a5      	b.n	80075de <pow+0x29e>
 8007492:	9800      	ldr	r0, [sp, #0]
 8007494:	9901      	ldr	r1, [sp, #4]
 8007496:	f000 feef 	bl	8008278 <finite>
 800749a:	2800      	cmp	r0, #0
 800749c:	d100      	bne.n	80074a0 <pow+0x160>
 800749e:	e09e      	b.n	80075de <pow+0x29e>
 80074a0:	0030      	movs	r0, r6
 80074a2:	0039      	movs	r1, r7
 80074a4:	f000 fee8 	bl	8008278 <finite>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d100      	bne.n	80074ae <pow+0x16e>
 80074ac:	e097      	b.n	80075de <pow+0x29e>
 80074ae:	2500      	movs	r5, #0
 80074b0:	4b66      	ldr	r3, [pc, #408]	; (800764c <pow+0x30c>)
 80074b2:	ac06      	add	r4, sp, #24
 80074b4:	575d      	ldrsb	r5, [r3, r5]
 80074b6:	9a02      	ldr	r2, [sp, #8]
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	0019      	movs	r1, r3
 80074bc:	0010      	movs	r0, r2
 80074be:	f7fa fdcb 	bl	8002058 <__aeabi_dcmpun>
 80074c2:	4b63      	ldr	r3, [pc, #396]	; (8007650 <pow+0x310>)
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d031      	beq.n	800752c <pow+0x1ec>
 80074c8:	2201      	movs	r2, #1
 80074ca:	6063      	str	r3, [r4, #4]
 80074cc:	9b05      	ldr	r3, [sp, #20]
 80074ce:	9206      	str	r2, [sp, #24]
 80074d0:	6223      	str	r3, [r4, #32]
 80074d2:	6126      	str	r6, [r4, #16]
 80074d4:	6167      	str	r7, [r4, #20]
 80074d6:	9a00      	ldr	r2, [sp, #0]
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	60a2      	str	r2, [r4, #8]
 80074dc:	60e3      	str	r3, [r4, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	2300      	movs	r3, #0
 80074e2:	2d00      	cmp	r5, #0
 80074e4:	d115      	bne.n	8007512 <pow+0x1d2>
 80074e6:	61a2      	str	r2, [r4, #24]
 80074e8:	61e3      	str	r3, [r4, #28]
 80074ea:	0020      	movs	r0, r4
 80074ec:	f000 fecc 	bl	8008288 <matherr>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d016      	beq.n	8007522 <pow+0x1e2>
 80074f4:	6a23      	ldr	r3, [r4, #32]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <pow+0x1c2>
 80074fa:	f7ff fae7 	bl	8006acc <__errno>
 80074fe:	6a23      	ldr	r3, [r4, #32]
 8007500:	6003      	str	r3, [r0, #0]
 8007502:	69a3      	ldr	r3, [r4, #24]
 8007504:	69e4      	ldr	r4, [r4, #28]
 8007506:	9302      	str	r3, [sp, #8]
 8007508:	9403      	str	r4, [sp, #12]
 800750a:	9802      	ldr	r0, [sp, #8]
 800750c:	9903      	ldr	r1, [sp, #12]
 800750e:	b011      	add	sp, #68	; 0x44
 8007510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007512:	0010      	movs	r0, r2
 8007514:	0019      	movs	r1, r3
 8007516:	f7f9 fbdb 	bl	8000cd0 <__aeabi_ddiv>
 800751a:	61a0      	str	r0, [r4, #24]
 800751c:	61e1      	str	r1, [r4, #28]
 800751e:	2d02      	cmp	r5, #2
 8007520:	d1e3      	bne.n	80074ea <pow+0x1aa>
 8007522:	f7ff fad3 	bl	8006acc <__errno>
 8007526:	2321      	movs	r3, #33	; 0x21
 8007528:	6003      	str	r3, [r0, #0]
 800752a:	e7e3      	b.n	80074f4 <pow+0x1b4>
 800752c:	2203      	movs	r2, #3
 800752e:	6126      	str	r6, [r4, #16]
 8007530:	6167      	str	r7, [r4, #20]
 8007532:	9206      	str	r2, [sp, #24]
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	6220      	str	r0, [r4, #32]
 8007538:	9a00      	ldr	r2, [sp, #0]
 800753a:	9b01      	ldr	r3, [sp, #4]
 800753c:	0030      	movs	r0, r6
 800753e:	60a2      	str	r2, [r4, #8]
 8007540:	60e3      	str	r3, [r4, #12]
 8007542:	0039      	movs	r1, r7
 8007544:	2200      	movs	r2, #0
 8007546:	4b45      	ldr	r3, [pc, #276]	; (800765c <pow+0x31c>)
 8007548:	f7f9 ffcc 	bl	80014e4 <__aeabi_dmul>
 800754c:	0006      	movs	r6, r0
 800754e:	000f      	movs	r7, r1
 8007550:	2d00      	cmp	r5, #0
 8007552:	d124      	bne.n	800759e <pow+0x25e>
 8007554:	9800      	ldr	r0, [sp, #0]
 8007556:	9901      	ldr	r1, [sp, #4]
 8007558:	22e0      	movs	r2, #224	; 0xe0
 800755a:	4b41      	ldr	r3, [pc, #260]	; (8007660 <pow+0x320>)
 800755c:	0612      	lsls	r2, r2, #24
 800755e:	61a2      	str	r2, [r4, #24]
 8007560:	61e3      	str	r3, [r4, #28]
 8007562:	2200      	movs	r2, #0
 8007564:	2300      	movs	r3, #0
 8007566:	f7f8 ff63 	bl	8000430 <__aeabi_dcmplt>
 800756a:	2800      	cmp	r0, #0
 800756c:	d030      	beq.n	80075d0 <pow+0x290>
 800756e:	0030      	movs	r0, r6
 8007570:	0039      	movs	r1, r7
 8007572:	f000 fe91 	bl	8008298 <rint>
 8007576:	0032      	movs	r2, r6
 8007578:	003b      	movs	r3, r7
 800757a:	f7f8 ff53 	bl	8000424 <__aeabi_dcmpeq>
 800757e:	2800      	cmp	r0, #0
 8007580:	d104      	bne.n	800758c <pow+0x24c>
 8007582:	22e0      	movs	r2, #224	; 0xe0
 8007584:	4b37      	ldr	r3, [pc, #220]	; (8007664 <pow+0x324>)
 8007586:	0612      	lsls	r2, r2, #24
 8007588:	61a2      	str	r2, [r4, #24]
 800758a:	61e3      	str	r3, [r4, #28]
 800758c:	4b2f      	ldr	r3, [pc, #188]	; (800764c <pow+0x30c>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b25b      	sxtb	r3, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d11c      	bne.n	80075d0 <pow+0x290>
 8007596:	f7ff fa99 	bl	8006acc <__errno>
 800759a:	2322      	movs	r3, #34	; 0x22
 800759c:	e7c4      	b.n	8007528 <pow+0x1e8>
 800759e:	2200      	movs	r2, #0
 80075a0:	9800      	ldr	r0, [sp, #0]
 80075a2:	9901      	ldr	r1, [sp, #4]
 80075a4:	4b30      	ldr	r3, [pc, #192]	; (8007668 <pow+0x328>)
 80075a6:	61a2      	str	r2, [r4, #24]
 80075a8:	61e3      	str	r3, [r4, #28]
 80075aa:	2200      	movs	r2, #0
 80075ac:	2300      	movs	r3, #0
 80075ae:	f7f8 ff3f 	bl	8000430 <__aeabi_dcmplt>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d0ea      	beq.n	800758c <pow+0x24c>
 80075b6:	0030      	movs	r0, r6
 80075b8:	0039      	movs	r1, r7
 80075ba:	f000 fe6d 	bl	8008298 <rint>
 80075be:	0032      	movs	r2, r6
 80075c0:	003b      	movs	r3, r7
 80075c2:	f7f8 ff2f 	bl	8000424 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d1e0      	bne.n	800758c <pow+0x24c>
 80075ca:	2200      	movs	r2, #0
 80075cc:	4b22      	ldr	r3, [pc, #136]	; (8007658 <pow+0x318>)
 80075ce:	e7db      	b.n	8007588 <pow+0x248>
 80075d0:	0020      	movs	r0, r4
 80075d2:	f000 fe59 	bl	8008288 <matherr>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d000      	beq.n	80075dc <pow+0x29c>
 80075da:	e78b      	b.n	80074f4 <pow+0x1b4>
 80075dc:	e7db      	b.n	8007596 <pow+0x256>
 80075de:	2200      	movs	r2, #0
 80075e0:	9802      	ldr	r0, [sp, #8]
 80075e2:	9903      	ldr	r1, [sp, #12]
 80075e4:	2300      	movs	r3, #0
 80075e6:	f7f8 ff1d 	bl	8000424 <__aeabi_dcmpeq>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d100      	bne.n	80075f0 <pow+0x2b0>
 80075ee:	e78c      	b.n	800750a <pow+0x1ca>
 80075f0:	9800      	ldr	r0, [sp, #0]
 80075f2:	9901      	ldr	r1, [sp, #4]
 80075f4:	f000 fe40 	bl	8008278 <finite>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d100      	bne.n	80075fe <pow+0x2be>
 80075fc:	e785      	b.n	800750a <pow+0x1ca>
 80075fe:	0030      	movs	r0, r6
 8007600:	0039      	movs	r1, r7
 8007602:	f000 fe39 	bl	8008278 <finite>
 8007606:	2800      	cmp	r0, #0
 8007608:	d100      	bne.n	800760c <pow+0x2cc>
 800760a:	e77e      	b.n	800750a <pow+0x1ca>
 800760c:	2304      	movs	r3, #4
 800760e:	9306      	str	r3, [sp, #24]
 8007610:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <pow+0x310>)
 8007612:	960a      	str	r6, [sp, #40]	; 0x28
 8007614:	970b      	str	r7, [sp, #44]	; 0x2c
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	2300      	movs	r3, #0
 800761a:	930e      	str	r3, [sp, #56]	; 0x38
 800761c:	9b00      	ldr	r3, [sp, #0]
 800761e:	9c01      	ldr	r4, [sp, #4]
 8007620:	9308      	str	r3, [sp, #32]
 8007622:	9409      	str	r4, [sp, #36]	; 0x24
 8007624:	2300      	movs	r3, #0
 8007626:	2400      	movs	r4, #0
 8007628:	930c      	str	r3, [sp, #48]	; 0x30
 800762a:	940d      	str	r4, [sp, #52]	; 0x34
 800762c:	4b07      	ldr	r3, [pc, #28]	; (800764c <pow+0x30c>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b25b      	sxtb	r3, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d103      	bne.n	800763e <pow+0x2fe>
 8007636:	f7ff fa49 	bl	8006acc <__errno>
 800763a:	2322      	movs	r3, #34	; 0x22
 800763c:	e71f      	b.n	800747e <pow+0x13e>
 800763e:	a806      	add	r0, sp, #24
 8007640:	f000 fe22 	bl	8008288 <matherr>
 8007644:	2800      	cmp	r0, #0
 8007646:	d000      	beq.n	800764a <pow+0x30a>
 8007648:	e6e1      	b.n	800740e <pow+0xce>
 800764a:	e7f4      	b.n	8007636 <pow+0x2f6>
 800764c:	20000098 	.word	0x20000098
 8007650:	08008687 	.word	0x08008687
 8007654:	3ff00000 	.word	0x3ff00000
 8007658:	fff00000 	.word	0xfff00000
 800765c:	3fe00000 	.word	0x3fe00000
 8007660:	47efffff 	.word	0x47efffff
 8007664:	c7efffff 	.word	0xc7efffff
 8007668:	7ff00000 	.word	0x7ff00000

0800766c <sqrt>:
 800766c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766e:	b08f      	sub	sp, #60	; 0x3c
 8007670:	0004      	movs	r4, r0
 8007672:	000d      	movs	r5, r1
 8007674:	f000 fd4a 	bl	800810c <__ieee754_sqrt>
 8007678:	4b27      	ldr	r3, [pc, #156]	; (8007718 <sqrt+0xac>)
 800767a:	9000      	str	r0, [sp, #0]
 800767c:	9101      	str	r1, [sp, #4]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	b25b      	sxtb	r3, r3
 8007682:	9302      	str	r3, [sp, #8]
 8007684:	3301      	adds	r3, #1
 8007686:	d033      	beq.n	80076f0 <sqrt+0x84>
 8007688:	0022      	movs	r2, r4
 800768a:	002b      	movs	r3, r5
 800768c:	0020      	movs	r0, r4
 800768e:	0029      	movs	r1, r5
 8007690:	f7fa fce2 	bl	8002058 <__aeabi_dcmpun>
 8007694:	9003      	str	r0, [sp, #12]
 8007696:	2800      	cmp	r0, #0
 8007698:	d12a      	bne.n	80076f0 <sqrt+0x84>
 800769a:	2600      	movs	r6, #0
 800769c:	2700      	movs	r7, #0
 800769e:	0032      	movs	r2, r6
 80076a0:	003b      	movs	r3, r7
 80076a2:	0020      	movs	r0, r4
 80076a4:	0029      	movs	r1, r5
 80076a6:	f7f8 fec3 	bl	8000430 <__aeabi_dcmplt>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d020      	beq.n	80076f0 <sqrt+0x84>
 80076ae:	2301      	movs	r3, #1
 80076b0:	9304      	str	r3, [sp, #16]
 80076b2:	4b1a      	ldr	r3, [pc, #104]	; (800771c <sqrt+0xb0>)
 80076b4:	9408      	str	r4, [sp, #32]
 80076b6:	9509      	str	r5, [sp, #36]	; 0x24
 80076b8:	9305      	str	r3, [sp, #20]
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	9406      	str	r4, [sp, #24]
 80076be:	9507      	str	r5, [sp, #28]
 80076c0:	930c      	str	r3, [sp, #48]	; 0x30
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d117      	bne.n	80076f8 <sqrt+0x8c>
 80076c8:	960a      	str	r6, [sp, #40]	; 0x28
 80076ca:	970b      	str	r7, [sp, #44]	; 0x2c
 80076cc:	a804      	add	r0, sp, #16
 80076ce:	f000 fddb 	bl	8008288 <matherr>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d01b      	beq.n	800770e <sqrt+0xa2>
 80076d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076d8:	9302      	str	r3, [sp, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <sqrt+0x7c>
 80076de:	f7ff f9f5 	bl	8006acc <__errno>
 80076e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	6003      	str	r3, [r0, #0]
 80076e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	9401      	str	r4, [sp, #4]
 80076f0:	9800      	ldr	r0, [sp, #0]
 80076f2:	9901      	ldr	r1, [sp, #4]
 80076f4:	b00f      	add	sp, #60	; 0x3c
 80076f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f8:	003b      	movs	r3, r7
 80076fa:	0032      	movs	r2, r6
 80076fc:	0030      	movs	r0, r6
 80076fe:	0039      	movs	r1, r7
 8007700:	f7f9 fae6 	bl	8000cd0 <__aeabi_ddiv>
 8007704:	9b02      	ldr	r3, [sp, #8]
 8007706:	900a      	str	r0, [sp, #40]	; 0x28
 8007708:	910b      	str	r1, [sp, #44]	; 0x2c
 800770a:	2b02      	cmp	r3, #2
 800770c:	d1de      	bne.n	80076cc <sqrt+0x60>
 800770e:	f7ff f9dd 	bl	8006acc <__errno>
 8007712:	2321      	movs	r3, #33	; 0x21
 8007714:	6003      	str	r3, [r0, #0]
 8007716:	e7de      	b.n	80076d6 <sqrt+0x6a>
 8007718:	20000098 	.word	0x20000098
 800771c:	0800868b 	.word	0x0800868b

08007720 <__ieee754_pow>:
 8007720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007722:	b095      	sub	sp, #84	; 0x54
 8007724:	9202      	str	r2, [sp, #8]
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	000e      	movs	r6, r1
 800772c:	9902      	ldr	r1, [sp, #8]
 800772e:	005d      	lsls	r5, r3, #1
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	000b      	movs	r3, r1
 8007734:	086d      	lsrs	r5, r5, #1
 8007736:	0007      	movs	r7, r0
 8007738:	432b      	orrs	r3, r5
 800773a:	d101      	bne.n	8007740 <__ieee754_pow+0x20>
 800773c:	f000 fcad 	bl	800809a <__ieee754_pow+0x97a>
 8007740:	4b7e      	ldr	r3, [pc, #504]	; (800793c <__ieee754_pow+0x21c>)
 8007742:	0074      	lsls	r4, r6, #1
 8007744:	9608      	str	r6, [sp, #32]
 8007746:	9000      	str	r0, [sp, #0]
 8007748:	0864      	lsrs	r4, r4, #1
 800774a:	469c      	mov	ip, r3
 800774c:	429c      	cmp	r4, r3
 800774e:	dc0b      	bgt.n	8007768 <__ieee754_pow+0x48>
 8007750:	d104      	bne.n	800775c <__ieee754_pow+0x3c>
 8007752:	2800      	cmp	r0, #0
 8007754:	d108      	bne.n	8007768 <__ieee754_pow+0x48>
 8007756:	42a5      	cmp	r5, r4
 8007758:	dc0c      	bgt.n	8007774 <__ieee754_pow+0x54>
 800775a:	e001      	b.n	8007760 <__ieee754_pow+0x40>
 800775c:	429d      	cmp	r5, r3
 800775e:	dc03      	bgt.n	8007768 <__ieee754_pow+0x48>
 8007760:	4565      	cmp	r5, ip
 8007762:	d10d      	bne.n	8007780 <__ieee754_pow+0x60>
 8007764:	2900      	cmp	r1, #0
 8007766:	d00b      	beq.n	8007780 <__ieee754_pow+0x60>
 8007768:	4b75      	ldr	r3, [pc, #468]	; (8007940 <__ieee754_pow+0x220>)
 800776a:	18e4      	adds	r4, r4, r3
 800776c:	4327      	orrs	r7, r4
 800776e:	d101      	bne.n	8007774 <__ieee754_pow+0x54>
 8007770:	f000 fc93 	bl	800809a <__ieee754_pow+0x97a>
 8007774:	4873      	ldr	r0, [pc, #460]	; (8007944 <__ieee754_pow+0x224>)
 8007776:	f000 fd89 	bl	800828c <nan>
 800777a:	9000      	str	r0, [sp, #0]
 800777c:	9101      	str	r1, [sp, #4]
 800777e:	e061      	b.n	8007844 <__ieee754_pow+0x124>
 8007780:	2300      	movs	r3, #0
 8007782:	9306      	str	r3, [sp, #24]
 8007784:	2e00      	cmp	r6, #0
 8007786:	da17      	bge.n	80077b8 <__ieee754_pow+0x98>
 8007788:	4a6f      	ldr	r2, [pc, #444]	; (8007948 <__ieee754_pow+0x228>)
 800778a:	4295      	cmp	r5, r2
 800778c:	dc4d      	bgt.n	800782a <__ieee754_pow+0x10a>
 800778e:	4a6f      	ldr	r2, [pc, #444]	; (800794c <__ieee754_pow+0x22c>)
 8007790:	4295      	cmp	r5, r2
 8007792:	dd11      	ble.n	80077b8 <__ieee754_pow+0x98>
 8007794:	4b6e      	ldr	r3, [pc, #440]	; (8007950 <__ieee754_pow+0x230>)
 8007796:	152a      	asrs	r2, r5, #20
 8007798:	18d2      	adds	r2, r2, r3
 800779a:	2a14      	cmp	r2, #20
 800779c:	dd25      	ble.n	80077ea <__ieee754_pow+0xca>
 800779e:	2034      	movs	r0, #52	; 0x34
 80077a0:	1a82      	subs	r2, r0, r2
 80077a2:	9802      	ldr	r0, [sp, #8]
 80077a4:	40d0      	lsrs	r0, r2
 80077a6:	0003      	movs	r3, r0
 80077a8:	4093      	lsls	r3, r2
 80077aa:	428b      	cmp	r3, r1
 80077ac:	d104      	bne.n	80077b8 <__ieee754_pow+0x98>
 80077ae:	2201      	movs	r2, #1
 80077b0:	4010      	ands	r0, r2
 80077b2:	1892      	adds	r2, r2, r2
 80077b4:	1a13      	subs	r3, r2, r0
 80077b6:	9306      	str	r3, [sp, #24]
 80077b8:	2900      	cmp	r1, #0
 80077ba:	d15e      	bne.n	800787a <__ieee754_pow+0x15a>
 80077bc:	4565      	cmp	r5, ip
 80077be:	d123      	bne.n	8007808 <__ieee754_pow+0xe8>
 80077c0:	4b5f      	ldr	r3, [pc, #380]	; (8007940 <__ieee754_pow+0x220>)
 80077c2:	18e3      	adds	r3, r4, r3
 80077c4:	431f      	orrs	r7, r3
 80077c6:	d101      	bne.n	80077cc <__ieee754_pow+0xac>
 80077c8:	f000 fc67 	bl	800809a <__ieee754_pow+0x97a>
 80077cc:	4b5f      	ldr	r3, [pc, #380]	; (800794c <__ieee754_pow+0x22c>)
 80077ce:	429c      	cmp	r4, r3
 80077d0:	dd2d      	ble.n	800782e <__ieee754_pow+0x10e>
 80077d2:	9b02      	ldr	r3, [sp, #8]
 80077d4:	9c03      	ldr	r4, [sp, #12]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	9401      	str	r4, [sp, #4]
 80077da:	9b04      	ldr	r3, [sp, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	da31      	bge.n	8007844 <__ieee754_pow+0x124>
 80077e0:	2300      	movs	r3, #0
 80077e2:	2400      	movs	r4, #0
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	9401      	str	r4, [sp, #4]
 80077e8:	e02c      	b.n	8007844 <__ieee754_pow+0x124>
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d145      	bne.n	800787a <__ieee754_pow+0x15a>
 80077ee:	2314      	movs	r3, #20
 80077f0:	1a9a      	subs	r2, r3, r2
 80077f2:	002b      	movs	r3, r5
 80077f4:	4113      	asrs	r3, r2
 80077f6:	0019      	movs	r1, r3
 80077f8:	4091      	lsls	r1, r2
 80077fa:	42a9      	cmp	r1, r5
 80077fc:	d104      	bne.n	8007808 <__ieee754_pow+0xe8>
 80077fe:	2201      	movs	r2, #1
 8007800:	4013      	ands	r3, r2
 8007802:	1892      	adds	r2, r2, r2
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	9306      	str	r3, [sp, #24]
 8007808:	4b52      	ldr	r3, [pc, #328]	; (8007954 <__ieee754_pow+0x234>)
 800780a:	429d      	cmp	r5, r3
 800780c:	d11e      	bne.n	800784c <__ieee754_pow+0x12c>
 800780e:	0038      	movs	r0, r7
 8007810:	0031      	movs	r1, r6
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	9000      	str	r0, [sp, #0]
 8007816:	9101      	str	r1, [sp, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	da13      	bge.n	8007844 <__ieee754_pow+0x124>
 800781c:	003a      	movs	r2, r7
 800781e:	0033      	movs	r3, r6
 8007820:	2000      	movs	r0, #0
 8007822:	494c      	ldr	r1, [pc, #304]	; (8007954 <__ieee754_pow+0x234>)
 8007824:	f7f9 fa54 	bl	8000cd0 <__aeabi_ddiv>
 8007828:	e7a7      	b.n	800777a <__ieee754_pow+0x5a>
 800782a:	2302      	movs	r3, #2
 800782c:	e7c3      	b.n	80077b6 <__ieee754_pow+0x96>
 800782e:	9b04      	ldr	r3, [sp, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	dad5      	bge.n	80077e0 <__ieee754_pow+0xc0>
 8007834:	2280      	movs	r2, #128	; 0x80
 8007836:	0612      	lsls	r2, r2, #24
 8007838:	4694      	mov	ip, r2
 800783a:	9b02      	ldr	r3, [sp, #8]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	4463      	add	r3, ip
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	9800      	ldr	r0, [sp, #0]
 8007846:	9901      	ldr	r1, [sp, #4]
 8007848:	b015      	add	sp, #84	; 0x54
 800784a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	9a04      	ldr	r2, [sp, #16]
 8007850:	05db      	lsls	r3, r3, #23
 8007852:	429a      	cmp	r2, r3
 8007854:	d106      	bne.n	8007864 <__ieee754_pow+0x144>
 8007856:	003a      	movs	r2, r7
 8007858:	0033      	movs	r3, r6
 800785a:	0038      	movs	r0, r7
 800785c:	0031      	movs	r1, r6
 800785e:	f7f9 fe41 	bl	80014e4 <__aeabi_dmul>
 8007862:	e78a      	b.n	800777a <__ieee754_pow+0x5a>
 8007864:	4b3c      	ldr	r3, [pc, #240]	; (8007958 <__ieee754_pow+0x238>)
 8007866:	9a04      	ldr	r2, [sp, #16]
 8007868:	429a      	cmp	r2, r3
 800786a:	d106      	bne.n	800787a <__ieee754_pow+0x15a>
 800786c:	2e00      	cmp	r6, #0
 800786e:	db04      	blt.n	800787a <__ieee754_pow+0x15a>
 8007870:	0038      	movs	r0, r7
 8007872:	0031      	movs	r1, r6
 8007874:	f000 fc4a 	bl	800810c <__ieee754_sqrt>
 8007878:	e77f      	b.n	800777a <__ieee754_pow+0x5a>
 800787a:	0038      	movs	r0, r7
 800787c:	0031      	movs	r1, r6
 800787e:	f000 fcf7 	bl	8008270 <fabs>
 8007882:	9000      	str	r0, [sp, #0]
 8007884:	9101      	str	r1, [sp, #4]
 8007886:	2f00      	cmp	r7, #0
 8007888:	d12e      	bne.n	80078e8 <__ieee754_pow+0x1c8>
 800788a:	2c00      	cmp	r4, #0
 800788c:	d004      	beq.n	8007898 <__ieee754_pow+0x178>
 800788e:	4a31      	ldr	r2, [pc, #196]	; (8007954 <__ieee754_pow+0x234>)
 8007890:	00b3      	lsls	r3, r6, #2
 8007892:	089b      	lsrs	r3, r3, #2
 8007894:	4293      	cmp	r3, r2
 8007896:	d127      	bne.n	80078e8 <__ieee754_pow+0x1c8>
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	da07      	bge.n	80078ae <__ieee754_pow+0x18e>
 800789e:	9a00      	ldr	r2, [sp, #0]
 80078a0:	9b01      	ldr	r3, [sp, #4]
 80078a2:	2000      	movs	r0, #0
 80078a4:	492b      	ldr	r1, [pc, #172]	; (8007954 <__ieee754_pow+0x234>)
 80078a6:	f7f9 fa13 	bl	8000cd0 <__aeabi_ddiv>
 80078aa:	9000      	str	r0, [sp, #0]
 80078ac:	9101      	str	r1, [sp, #4]
 80078ae:	9b08      	ldr	r3, [sp, #32]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dac7      	bge.n	8007844 <__ieee754_pow+0x124>
 80078b4:	4b22      	ldr	r3, [pc, #136]	; (8007940 <__ieee754_pow+0x220>)
 80078b6:	18e4      	adds	r4, r4, r3
 80078b8:	9b06      	ldr	r3, [sp, #24]
 80078ba:	431c      	orrs	r4, r3
 80078bc:	d108      	bne.n	80078d0 <__ieee754_pow+0x1b0>
 80078be:	9a00      	ldr	r2, [sp, #0]
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	0010      	movs	r0, r2
 80078c4:	0019      	movs	r1, r3
 80078c6:	f7fa f87f 	bl	80019c8 <__aeabi_dsub>
 80078ca:	0002      	movs	r2, r0
 80078cc:	000b      	movs	r3, r1
 80078ce:	e7a9      	b.n	8007824 <__ieee754_pow+0x104>
 80078d0:	9b06      	ldr	r3, [sp, #24]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d1b6      	bne.n	8007844 <__ieee754_pow+0x124>
 80078d6:	9800      	ldr	r0, [sp, #0]
 80078d8:	2180      	movs	r1, #128	; 0x80
 80078da:	0002      	movs	r2, r0
 80078dc:	9801      	ldr	r0, [sp, #4]
 80078de:	0609      	lsls	r1, r1, #24
 80078e0:	1843      	adds	r3, r0, r1
 80078e2:	9200      	str	r2, [sp, #0]
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	e7ad      	b.n	8007844 <__ieee754_pow+0x124>
 80078e8:	0ff3      	lsrs	r3, r6, #31
 80078ea:	3b01      	subs	r3, #1
 80078ec:	9310      	str	r3, [sp, #64]	; 0x40
 80078ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078f0:	9b06      	ldr	r3, [sp, #24]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	d104      	bne.n	8007900 <__ieee754_pow+0x1e0>
 80078f6:	003a      	movs	r2, r7
 80078f8:	0033      	movs	r3, r6
 80078fa:	0038      	movs	r0, r7
 80078fc:	0031      	movs	r1, r6
 80078fe:	e7e2      	b.n	80078c6 <__ieee754_pow+0x1a6>
 8007900:	4b16      	ldr	r3, [pc, #88]	; (800795c <__ieee754_pow+0x23c>)
 8007902:	429d      	cmp	r5, r3
 8007904:	dc00      	bgt.n	8007908 <__ieee754_pow+0x1e8>
 8007906:	e0f7      	b.n	8007af8 <__ieee754_pow+0x3d8>
 8007908:	4b15      	ldr	r3, [pc, #84]	; (8007960 <__ieee754_pow+0x240>)
 800790a:	429d      	cmp	r5, r3
 800790c:	dd0b      	ble.n	8007926 <__ieee754_pow+0x206>
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <__ieee754_pow+0x22c>)
 8007910:	429c      	cmp	r4, r3
 8007912:	dc0e      	bgt.n	8007932 <__ieee754_pow+0x212>
 8007914:	9b04      	ldr	r3, [sp, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	db00      	blt.n	800791c <__ieee754_pow+0x1fc>
 800791a:	e761      	b.n	80077e0 <__ieee754_pow+0xc0>
 800791c:	4a11      	ldr	r2, [pc, #68]	; (8007964 <__ieee754_pow+0x244>)
 800791e:	4b12      	ldr	r3, [pc, #72]	; (8007968 <__ieee754_pow+0x248>)
 8007920:	0010      	movs	r0, r2
 8007922:	0019      	movs	r1, r3
 8007924:	e79b      	b.n	800785e <__ieee754_pow+0x13e>
 8007926:	4b11      	ldr	r3, [pc, #68]	; (800796c <__ieee754_pow+0x24c>)
 8007928:	429c      	cmp	r4, r3
 800792a:	ddf3      	ble.n	8007914 <__ieee754_pow+0x1f4>
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <__ieee754_pow+0x234>)
 800792e:	429c      	cmp	r4, r3
 8007930:	dd1e      	ble.n	8007970 <__ieee754_pow+0x250>
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	dcf1      	bgt.n	800791c <__ieee754_pow+0x1fc>
 8007938:	e752      	b.n	80077e0 <__ieee754_pow+0xc0>
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	7ff00000 	.word	0x7ff00000
 8007940:	c0100000 	.word	0xc0100000
 8007944:	08008659 	.word	0x08008659
 8007948:	433fffff 	.word	0x433fffff
 800794c:	3fefffff 	.word	0x3fefffff
 8007950:	fffffc01 	.word	0xfffffc01
 8007954:	3ff00000 	.word	0x3ff00000
 8007958:	3fe00000 	.word	0x3fe00000
 800795c:	41e00000 	.word	0x41e00000
 8007960:	43f00000 	.word	0x43f00000
 8007964:	8800759c 	.word	0x8800759c
 8007968:	7e37e43c 	.word	0x7e37e43c
 800796c:	3feffffe 	.word	0x3feffffe
 8007970:	2200      	movs	r2, #0
 8007972:	9800      	ldr	r0, [sp, #0]
 8007974:	9901      	ldr	r1, [sp, #4]
 8007976:	4b52      	ldr	r3, [pc, #328]	; (8007ac0 <__ieee754_pow+0x3a0>)
 8007978:	f7fa f826 	bl	80019c8 <__aeabi_dsub>
 800797c:	22c0      	movs	r2, #192	; 0xc0
 800797e:	4b51      	ldr	r3, [pc, #324]	; (8007ac4 <__ieee754_pow+0x3a4>)
 8007980:	05d2      	lsls	r2, r2, #23
 8007982:	0006      	movs	r6, r0
 8007984:	000f      	movs	r7, r1
 8007986:	f7f9 fdad 	bl	80014e4 <__aeabi_dmul>
 800798a:	4a4f      	ldr	r2, [pc, #316]	; (8007ac8 <__ieee754_pow+0x3a8>)
 800798c:	9000      	str	r0, [sp, #0]
 800798e:	9101      	str	r1, [sp, #4]
 8007990:	4b4e      	ldr	r3, [pc, #312]	; (8007acc <__ieee754_pow+0x3ac>)
 8007992:	0030      	movs	r0, r6
 8007994:	0039      	movs	r1, r7
 8007996:	f7f9 fda5 	bl	80014e4 <__aeabi_dmul>
 800799a:	2200      	movs	r2, #0
 800799c:	9004      	str	r0, [sp, #16]
 800799e:	9105      	str	r1, [sp, #20]
 80079a0:	4b4b      	ldr	r3, [pc, #300]	; (8007ad0 <__ieee754_pow+0x3b0>)
 80079a2:	0030      	movs	r0, r6
 80079a4:	0039      	movs	r1, r7
 80079a6:	f7f9 fd9d 	bl	80014e4 <__aeabi_dmul>
 80079aa:	0002      	movs	r2, r0
 80079ac:	000b      	movs	r3, r1
 80079ae:	4849      	ldr	r0, [pc, #292]	; (8007ad4 <__ieee754_pow+0x3b4>)
 80079b0:	4949      	ldr	r1, [pc, #292]	; (8007ad8 <__ieee754_pow+0x3b8>)
 80079b2:	f7fa f809 	bl	80019c8 <__aeabi_dsub>
 80079b6:	0032      	movs	r2, r6
 80079b8:	003b      	movs	r3, r7
 80079ba:	f7f9 fd93 	bl	80014e4 <__aeabi_dmul>
 80079be:	0002      	movs	r2, r0
 80079c0:	000b      	movs	r3, r1
 80079c2:	2000      	movs	r0, #0
 80079c4:	4945      	ldr	r1, [pc, #276]	; (8007adc <__ieee754_pow+0x3bc>)
 80079c6:	f7f9 ffff 	bl	80019c8 <__aeabi_dsub>
 80079ca:	0032      	movs	r2, r6
 80079cc:	0004      	movs	r4, r0
 80079ce:	000d      	movs	r5, r1
 80079d0:	003b      	movs	r3, r7
 80079d2:	0030      	movs	r0, r6
 80079d4:	0039      	movs	r1, r7
 80079d6:	f7f9 fd85 	bl	80014e4 <__aeabi_dmul>
 80079da:	0002      	movs	r2, r0
 80079dc:	000b      	movs	r3, r1
 80079de:	0020      	movs	r0, r4
 80079e0:	0029      	movs	r1, r5
 80079e2:	f7f9 fd7f 	bl	80014e4 <__aeabi_dmul>
 80079e6:	4a3e      	ldr	r2, [pc, #248]	; (8007ae0 <__ieee754_pow+0x3c0>)
 80079e8:	4b36      	ldr	r3, [pc, #216]	; (8007ac4 <__ieee754_pow+0x3a4>)
 80079ea:	f7f9 fd7b 	bl	80014e4 <__aeabi_dmul>
 80079ee:	0002      	movs	r2, r0
 80079f0:	000b      	movs	r3, r1
 80079f2:	9804      	ldr	r0, [sp, #16]
 80079f4:	9905      	ldr	r1, [sp, #20]
 80079f6:	f7f9 ffe7 	bl	80019c8 <__aeabi_dsub>
 80079fa:	0002      	movs	r2, r0
 80079fc:	000b      	movs	r3, r1
 80079fe:	0004      	movs	r4, r0
 8007a00:	000d      	movs	r5, r1
 8007a02:	9800      	ldr	r0, [sp, #0]
 8007a04:	9901      	ldr	r1, [sp, #4]
 8007a06:	f7f8 fe47 	bl	8000698 <__aeabi_dadd>
 8007a0a:	9a00      	ldr	r2, [sp, #0]
 8007a0c:	9b01      	ldr	r3, [sp, #4]
 8007a0e:	2000      	movs	r0, #0
 8007a10:	9004      	str	r0, [sp, #16]
 8007a12:	9105      	str	r1, [sp, #20]
 8007a14:	f7f9 ffd8 	bl	80019c8 <__aeabi_dsub>
 8007a18:	0002      	movs	r2, r0
 8007a1a:	000b      	movs	r3, r1
 8007a1c:	0020      	movs	r0, r4
 8007a1e:	0029      	movs	r1, r5
 8007a20:	f7f9 ffd2 	bl	80019c8 <__aeabi_dsub>
 8007a24:	9b06      	ldr	r3, [sp, #24]
 8007a26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	0006      	movs	r6, r0
 8007a2c:	000f      	movs	r7, r1
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	d000      	beq.n	8007a34 <__ieee754_pow+0x314>
 8007a32:	e1de      	b.n	8007df2 <__ieee754_pow+0x6d2>
 8007a34:	2300      	movs	r3, #0
 8007a36:	4c2b      	ldr	r4, [pc, #172]	; (8007ae4 <__ieee754_pow+0x3c4>)
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	9401      	str	r4, [sp, #4]
 8007a3c:	9c02      	ldr	r4, [sp, #8]
 8007a3e:	9d03      	ldr	r5, [sp, #12]
 8007a40:	9802      	ldr	r0, [sp, #8]
 8007a42:	9903      	ldr	r1, [sp, #12]
 8007a44:	2400      	movs	r4, #0
 8007a46:	002b      	movs	r3, r5
 8007a48:	0022      	movs	r2, r4
 8007a4a:	f7f9 ffbd 	bl	80019c8 <__aeabi_dsub>
 8007a4e:	9a04      	ldr	r2, [sp, #16]
 8007a50:	9b05      	ldr	r3, [sp, #20]
 8007a52:	f7f9 fd47 	bl	80014e4 <__aeabi_dmul>
 8007a56:	9a02      	ldr	r2, [sp, #8]
 8007a58:	9b03      	ldr	r3, [sp, #12]
 8007a5a:	9006      	str	r0, [sp, #24]
 8007a5c:	9107      	str	r1, [sp, #28]
 8007a5e:	0030      	movs	r0, r6
 8007a60:	0039      	movs	r1, r7
 8007a62:	f7f9 fd3f 	bl	80014e4 <__aeabi_dmul>
 8007a66:	0002      	movs	r2, r0
 8007a68:	000b      	movs	r3, r1
 8007a6a:	9806      	ldr	r0, [sp, #24]
 8007a6c:	9907      	ldr	r1, [sp, #28]
 8007a6e:	f7f8 fe13 	bl	8000698 <__aeabi_dadd>
 8007a72:	0022      	movs	r2, r4
 8007a74:	002b      	movs	r3, r5
 8007a76:	9006      	str	r0, [sp, #24]
 8007a78:	9107      	str	r1, [sp, #28]
 8007a7a:	9804      	ldr	r0, [sp, #16]
 8007a7c:	9905      	ldr	r1, [sp, #20]
 8007a7e:	f7f9 fd31 	bl	80014e4 <__aeabi_dmul>
 8007a82:	0006      	movs	r6, r0
 8007a84:	000f      	movs	r7, r1
 8007a86:	000b      	movs	r3, r1
 8007a88:	0002      	movs	r2, r0
 8007a8a:	9806      	ldr	r0, [sp, #24]
 8007a8c:	9907      	ldr	r1, [sp, #28]
 8007a8e:	9604      	str	r6, [sp, #16]
 8007a90:	9705      	str	r7, [sp, #20]
 8007a92:	f7f8 fe01 	bl	8000698 <__aeabi_dadd>
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <__ieee754_pow+0x3c8>)
 8007a98:	0005      	movs	r5, r0
 8007a9a:	000c      	movs	r4, r1
 8007a9c:	9108      	str	r1, [sp, #32]
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	dc00      	bgt.n	8007aa4 <__ieee754_pow+0x384>
 8007aa2:	e2d8      	b.n	8008056 <__ieee754_pow+0x936>
 8007aa4:	4b11      	ldr	r3, [pc, #68]	; (8007aec <__ieee754_pow+0x3cc>)
 8007aa6:	18cb      	adds	r3, r1, r3
 8007aa8:	4303      	orrs	r3, r0
 8007aaa:	d100      	bne.n	8007aae <__ieee754_pow+0x38e>
 8007aac:	e1da      	b.n	8007e64 <__ieee754_pow+0x744>
 8007aae:	9800      	ldr	r0, [sp, #0]
 8007ab0:	9901      	ldr	r1, [sp, #4]
 8007ab2:	4a0f      	ldr	r2, [pc, #60]	; (8007af0 <__ieee754_pow+0x3d0>)
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <__ieee754_pow+0x3d4>)
 8007ab6:	f7f9 fd15 	bl	80014e4 <__aeabi_dmul>
 8007aba:	4a0d      	ldr	r2, [pc, #52]	; (8007af0 <__ieee754_pow+0x3d0>)
 8007abc:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <__ieee754_pow+0x3d4>)
 8007abe:	e6ce      	b.n	800785e <__ieee754_pow+0x13e>
 8007ac0:	3ff00000 	.word	0x3ff00000
 8007ac4:	3ff71547 	.word	0x3ff71547
 8007ac8:	f85ddf44 	.word	0xf85ddf44
 8007acc:	3e54ae0b 	.word	0x3e54ae0b
 8007ad0:	3fd00000 	.word	0x3fd00000
 8007ad4:	55555555 	.word	0x55555555
 8007ad8:	3fd55555 	.word	0x3fd55555
 8007adc:	3fe00000 	.word	0x3fe00000
 8007ae0:	652b82fe 	.word	0x652b82fe
 8007ae4:	bff00000 	.word	0xbff00000
 8007ae8:	408fffff 	.word	0x408fffff
 8007aec:	bf700000 	.word	0xbf700000
 8007af0:	8800759c 	.word	0x8800759c
 8007af4:	7e37e43c 	.word	0x7e37e43c
 8007af8:	4bbf      	ldr	r3, [pc, #764]	; (8007df8 <__ieee754_pow+0x6d8>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	429c      	cmp	r4, r3
 8007afe:	dc0a      	bgt.n	8007b16 <__ieee754_pow+0x3f6>
 8007b00:	9800      	ldr	r0, [sp, #0]
 8007b02:	9901      	ldr	r1, [sp, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	4bbd      	ldr	r3, [pc, #756]	; (8007dfc <__ieee754_pow+0x6dc>)
 8007b08:	f7f9 fcec 	bl	80014e4 <__aeabi_dmul>
 8007b0c:	2235      	movs	r2, #53	; 0x35
 8007b0e:	9000      	str	r0, [sp, #0]
 8007b10:	9101      	str	r1, [sp, #4]
 8007b12:	9c01      	ldr	r4, [sp, #4]
 8007b14:	4252      	negs	r2, r2
 8007b16:	49ba      	ldr	r1, [pc, #744]	; (8007e00 <__ieee754_pow+0x6e0>)
 8007b18:	1523      	asrs	r3, r4, #20
 8007b1a:	185b      	adds	r3, r3, r1
 8007b1c:	189b      	adds	r3, r3, r2
 8007b1e:	0324      	lsls	r4, r4, #12
 8007b20:	4db8      	ldr	r5, [pc, #736]	; (8007e04 <__ieee754_pow+0x6e4>)
 8007b22:	4ab9      	ldr	r2, [pc, #740]	; (8007e08 <__ieee754_pow+0x6e8>)
 8007b24:	930d      	str	r3, [sp, #52]	; 0x34
 8007b26:	0b23      	lsrs	r3, r4, #12
 8007b28:	431d      	orrs	r5, r3
 8007b2a:	2400      	movs	r4, #0
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	dd09      	ble.n	8007b44 <__ieee754_pow+0x424>
 8007b30:	4ab6      	ldr	r2, [pc, #728]	; (8007e0c <__ieee754_pow+0x6ec>)
 8007b32:	3401      	adds	r4, #1
 8007b34:	4293      	cmp	r3, r2
 8007b36:	dd05      	ble.n	8007b44 <__ieee754_pow+0x424>
 8007b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b3a:	191b      	adds	r3, r3, r4
 8007b3c:	2400      	movs	r4, #0
 8007b3e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b40:	4bb3      	ldr	r3, [pc, #716]	; (8007e10 <__ieee754_pow+0x6f0>)
 8007b42:	18ed      	adds	r5, r5, r3
 8007b44:	9800      	ldr	r0, [sp, #0]
 8007b46:	9901      	ldr	r1, [sp, #4]
 8007b48:	0029      	movs	r1, r5
 8007b4a:	00e3      	lsls	r3, r4, #3
 8007b4c:	9311      	str	r3, [sp, #68]	; 0x44
 8007b4e:	4bb1      	ldr	r3, [pc, #708]	; (8007e14 <__ieee754_pow+0x6f4>)
 8007b50:	00e2      	lsls	r2, r4, #3
 8007b52:	189b      	adds	r3, r3, r2
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	900e      	str	r0, [sp, #56]	; 0x38
 8007b5a:	910f      	str	r1, [sp, #60]	; 0x3c
 8007b5c:	920a      	str	r2, [sp, #40]	; 0x28
 8007b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b60:	f7f9 ff32 	bl	80019c8 <__aeabi_dsub>
 8007b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b68:	0006      	movs	r6, r0
 8007b6a:	000f      	movs	r7, r1
 8007b6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b70:	f7f8 fd92 	bl	8000698 <__aeabi_dadd>
 8007b74:	0002      	movs	r2, r0
 8007b76:	000b      	movs	r3, r1
 8007b78:	2000      	movs	r0, #0
 8007b7a:	49a2      	ldr	r1, [pc, #648]	; (8007e04 <__ieee754_pow+0x6e4>)
 8007b7c:	f7f9 f8a8 	bl	8000cd0 <__aeabi_ddiv>
 8007b80:	9012      	str	r0, [sp, #72]	; 0x48
 8007b82:	9113      	str	r1, [sp, #76]	; 0x4c
 8007b84:	0002      	movs	r2, r0
 8007b86:	000b      	movs	r3, r1
 8007b88:	0030      	movs	r0, r6
 8007b8a:	0039      	movs	r1, r7
 8007b8c:	f7f9 fcaa 	bl	80014e4 <__aeabi_dmul>
 8007b90:	9008      	str	r0, [sp, #32]
 8007b92:	9109      	str	r1, [sp, #36]	; 0x24
 8007b94:	9a08      	ldr	r2, [sp, #32]
 8007b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b98:	2180      	movs	r1, #128	; 0x80
 8007b9a:	9204      	str	r2, [sp, #16]
 8007b9c:	9305      	str	r3, [sp, #20]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	0589      	lsls	r1, r1, #22
 8007ba2:	106d      	asrs	r5, r5, #1
 8007ba4:	430d      	orrs	r5, r1
 8007ba6:	2180      	movs	r1, #128	; 0x80
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	9a04      	ldr	r2, [sp, #16]
 8007bac:	9b05      	ldr	r3, [sp, #20]
 8007bae:	9200      	str	r2, [sp, #0]
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	0309      	lsls	r1, r1, #12
 8007bb6:	186d      	adds	r5, r5, r1
 8007bb8:	04a4      	lsls	r4, r4, #18
 8007bba:	192b      	adds	r3, r5, r4
 8007bbc:	9800      	ldr	r0, [sp, #0]
 8007bbe:	9901      	ldr	r1, [sp, #4]
 8007bc0:	0014      	movs	r4, r2
 8007bc2:	001d      	movs	r5, r3
 8007bc4:	f7f9 fc8e 	bl	80014e4 <__aeabi_dmul>
 8007bc8:	0002      	movs	r2, r0
 8007bca:	000b      	movs	r3, r1
 8007bcc:	0030      	movs	r0, r6
 8007bce:	0039      	movs	r1, r7
 8007bd0:	f7f9 fefa 	bl	80019c8 <__aeabi_dsub>
 8007bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd8:	0006      	movs	r6, r0
 8007bda:	000f      	movs	r7, r1
 8007bdc:	0020      	movs	r0, r4
 8007bde:	0029      	movs	r1, r5
 8007be0:	f7f9 fef2 	bl	80019c8 <__aeabi_dsub>
 8007be4:	0002      	movs	r2, r0
 8007be6:	000b      	movs	r3, r1
 8007be8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007bea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bec:	f7f9 feec 	bl	80019c8 <__aeabi_dsub>
 8007bf0:	9a00      	ldr	r2, [sp, #0]
 8007bf2:	9b01      	ldr	r3, [sp, #4]
 8007bf4:	f7f9 fc76 	bl	80014e4 <__aeabi_dmul>
 8007bf8:	0002      	movs	r2, r0
 8007bfa:	000b      	movs	r3, r1
 8007bfc:	0030      	movs	r0, r6
 8007bfe:	0039      	movs	r1, r7
 8007c00:	f7f9 fee2 	bl	80019c8 <__aeabi_dsub>
 8007c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c08:	f7f9 fc6c 	bl	80014e4 <__aeabi_dmul>
 8007c0c:	9a08      	ldr	r2, [sp, #32]
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	900a      	str	r0, [sp, #40]	; 0x28
 8007c12:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c14:	0010      	movs	r0, r2
 8007c16:	0019      	movs	r1, r3
 8007c18:	f7f9 fc64 	bl	80014e4 <__aeabi_dmul>
 8007c1c:	0006      	movs	r6, r0
 8007c1e:	000f      	movs	r7, r1
 8007c20:	4a7d      	ldr	r2, [pc, #500]	; (8007e18 <__ieee754_pow+0x6f8>)
 8007c22:	4b7e      	ldr	r3, [pc, #504]	; (8007e1c <__ieee754_pow+0x6fc>)
 8007c24:	f7f9 fc5e 	bl	80014e4 <__aeabi_dmul>
 8007c28:	4a7d      	ldr	r2, [pc, #500]	; (8007e20 <__ieee754_pow+0x700>)
 8007c2a:	4b7e      	ldr	r3, [pc, #504]	; (8007e24 <__ieee754_pow+0x704>)
 8007c2c:	f7f8 fd34 	bl	8000698 <__aeabi_dadd>
 8007c30:	0032      	movs	r2, r6
 8007c32:	003b      	movs	r3, r7
 8007c34:	f7f9 fc56 	bl	80014e4 <__aeabi_dmul>
 8007c38:	4a7b      	ldr	r2, [pc, #492]	; (8007e28 <__ieee754_pow+0x708>)
 8007c3a:	4b7c      	ldr	r3, [pc, #496]	; (8007e2c <__ieee754_pow+0x70c>)
 8007c3c:	f7f8 fd2c 	bl	8000698 <__aeabi_dadd>
 8007c40:	0032      	movs	r2, r6
 8007c42:	003b      	movs	r3, r7
 8007c44:	f7f9 fc4e 	bl	80014e4 <__aeabi_dmul>
 8007c48:	4a79      	ldr	r2, [pc, #484]	; (8007e30 <__ieee754_pow+0x710>)
 8007c4a:	4b7a      	ldr	r3, [pc, #488]	; (8007e34 <__ieee754_pow+0x714>)
 8007c4c:	f7f8 fd24 	bl	8000698 <__aeabi_dadd>
 8007c50:	0032      	movs	r2, r6
 8007c52:	003b      	movs	r3, r7
 8007c54:	f7f9 fc46 	bl	80014e4 <__aeabi_dmul>
 8007c58:	4a77      	ldr	r2, [pc, #476]	; (8007e38 <__ieee754_pow+0x718>)
 8007c5a:	4b78      	ldr	r3, [pc, #480]	; (8007e3c <__ieee754_pow+0x71c>)
 8007c5c:	f7f8 fd1c 	bl	8000698 <__aeabi_dadd>
 8007c60:	0032      	movs	r2, r6
 8007c62:	003b      	movs	r3, r7
 8007c64:	f7f9 fc3e 	bl	80014e4 <__aeabi_dmul>
 8007c68:	4a75      	ldr	r2, [pc, #468]	; (8007e40 <__ieee754_pow+0x720>)
 8007c6a:	4b76      	ldr	r3, [pc, #472]	; (8007e44 <__ieee754_pow+0x724>)
 8007c6c:	f7f8 fd14 	bl	8000698 <__aeabi_dadd>
 8007c70:	0032      	movs	r2, r6
 8007c72:	0004      	movs	r4, r0
 8007c74:	000d      	movs	r5, r1
 8007c76:	003b      	movs	r3, r7
 8007c78:	0030      	movs	r0, r6
 8007c7a:	0039      	movs	r1, r7
 8007c7c:	f7f9 fc32 	bl	80014e4 <__aeabi_dmul>
 8007c80:	0002      	movs	r2, r0
 8007c82:	000b      	movs	r3, r1
 8007c84:	0020      	movs	r0, r4
 8007c86:	0029      	movs	r1, r5
 8007c88:	f7f9 fc2c 	bl	80014e4 <__aeabi_dmul>
 8007c8c:	9a00      	ldr	r2, [sp, #0]
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	0004      	movs	r4, r0
 8007c92:	000d      	movs	r5, r1
 8007c94:	9808      	ldr	r0, [sp, #32]
 8007c96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c98:	f7f8 fcfe 	bl	8000698 <__aeabi_dadd>
 8007c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca0:	f7f9 fc20 	bl	80014e4 <__aeabi_dmul>
 8007ca4:	0022      	movs	r2, r4
 8007ca6:	002b      	movs	r3, r5
 8007ca8:	f7f8 fcf6 	bl	8000698 <__aeabi_dadd>
 8007cac:	9a00      	ldr	r2, [sp, #0]
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	900e      	str	r0, [sp, #56]	; 0x38
 8007cb2:	910f      	str	r1, [sp, #60]	; 0x3c
 8007cb4:	0010      	movs	r0, r2
 8007cb6:	0019      	movs	r1, r3
 8007cb8:	f7f9 fc14 	bl	80014e4 <__aeabi_dmul>
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4b62      	ldr	r3, [pc, #392]	; (8007e48 <__ieee754_pow+0x728>)
 8007cc0:	0004      	movs	r4, r0
 8007cc2:	000d      	movs	r5, r1
 8007cc4:	f7f8 fce8 	bl	8000698 <__aeabi_dadd>
 8007cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ccc:	f7f8 fce4 	bl	8000698 <__aeabi_dadd>
 8007cd0:	9e04      	ldr	r6, [sp, #16]
 8007cd2:	000f      	movs	r7, r1
 8007cd4:	0032      	movs	r2, r6
 8007cd6:	000b      	movs	r3, r1
 8007cd8:	9800      	ldr	r0, [sp, #0]
 8007cda:	9901      	ldr	r1, [sp, #4]
 8007cdc:	f7f9 fc02 	bl	80014e4 <__aeabi_dmul>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	9000      	str	r0, [sp, #0]
 8007ce4:	9101      	str	r1, [sp, #4]
 8007ce6:	4b58      	ldr	r3, [pc, #352]	; (8007e48 <__ieee754_pow+0x728>)
 8007ce8:	0030      	movs	r0, r6
 8007cea:	0039      	movs	r1, r7
 8007cec:	f7f9 fe6c 	bl	80019c8 <__aeabi_dsub>
 8007cf0:	0022      	movs	r2, r4
 8007cf2:	002b      	movs	r3, r5
 8007cf4:	f7f9 fe68 	bl	80019c8 <__aeabi_dsub>
 8007cf8:	0002      	movs	r2, r0
 8007cfa:	000b      	movs	r3, r1
 8007cfc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007cfe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d00:	f7f9 fe62 	bl	80019c8 <__aeabi_dsub>
 8007d04:	9a08      	ldr	r2, [sp, #32]
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	f7f9 fbec 	bl	80014e4 <__aeabi_dmul>
 8007d0c:	0032      	movs	r2, r6
 8007d0e:	0004      	movs	r4, r0
 8007d10:	000d      	movs	r5, r1
 8007d12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d16:	003b      	movs	r3, r7
 8007d18:	f7f9 fbe4 	bl	80014e4 <__aeabi_dmul>
 8007d1c:	0002      	movs	r2, r0
 8007d1e:	000b      	movs	r3, r1
 8007d20:	0020      	movs	r0, r4
 8007d22:	0029      	movs	r1, r5
 8007d24:	f7f8 fcb8 	bl	8000698 <__aeabi_dadd>
 8007d28:	0004      	movs	r4, r0
 8007d2a:	000d      	movs	r5, r1
 8007d2c:	0002      	movs	r2, r0
 8007d2e:	000b      	movs	r3, r1
 8007d30:	9800      	ldr	r0, [sp, #0]
 8007d32:	9901      	ldr	r1, [sp, #4]
 8007d34:	f7f8 fcb0 	bl	8000698 <__aeabi_dadd>
 8007d38:	22e0      	movs	r2, #224	; 0xe0
 8007d3a:	9e04      	ldr	r6, [sp, #16]
 8007d3c:	0612      	lsls	r2, r2, #24
 8007d3e:	4b43      	ldr	r3, [pc, #268]	; (8007e4c <__ieee754_pow+0x72c>)
 8007d40:	0030      	movs	r0, r6
 8007d42:	000f      	movs	r7, r1
 8007d44:	f7f9 fbce 	bl	80014e4 <__aeabi_dmul>
 8007d48:	9008      	str	r0, [sp, #32]
 8007d4a:	9109      	str	r1, [sp, #36]	; 0x24
 8007d4c:	9a00      	ldr	r2, [sp, #0]
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	0030      	movs	r0, r6
 8007d52:	0039      	movs	r1, r7
 8007d54:	f7f9 fe38 	bl	80019c8 <__aeabi_dsub>
 8007d58:	0002      	movs	r2, r0
 8007d5a:	000b      	movs	r3, r1
 8007d5c:	0020      	movs	r0, r4
 8007d5e:	0029      	movs	r1, r5
 8007d60:	f7f9 fe32 	bl	80019c8 <__aeabi_dsub>
 8007d64:	4a3a      	ldr	r2, [pc, #232]	; (8007e50 <__ieee754_pow+0x730>)
 8007d66:	4b39      	ldr	r3, [pc, #228]	; (8007e4c <__ieee754_pow+0x72c>)
 8007d68:	f7f9 fbbc 	bl	80014e4 <__aeabi_dmul>
 8007d6c:	4a39      	ldr	r2, [pc, #228]	; (8007e54 <__ieee754_pow+0x734>)
 8007d6e:	0004      	movs	r4, r0
 8007d70:	000d      	movs	r5, r1
 8007d72:	4b39      	ldr	r3, [pc, #228]	; (8007e58 <__ieee754_pow+0x738>)
 8007d74:	0030      	movs	r0, r6
 8007d76:	0039      	movs	r1, r7
 8007d78:	f7f9 fbb4 	bl	80014e4 <__aeabi_dmul>
 8007d7c:	0002      	movs	r2, r0
 8007d7e:	000b      	movs	r3, r1
 8007d80:	0020      	movs	r0, r4
 8007d82:	0029      	movs	r1, r5
 8007d84:	f7f8 fc88 	bl	8000698 <__aeabi_dadd>
 8007d88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d8a:	4b34      	ldr	r3, [pc, #208]	; (8007e5c <__ieee754_pow+0x73c>)
 8007d8c:	189b      	adds	r3, r3, r2
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f7f8 fc81 	bl	8000698 <__aeabi_dadd>
 8007d96:	9000      	str	r0, [sp, #0]
 8007d98:	9101      	str	r1, [sp, #4]
 8007d9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d9c:	f7fa f978 	bl	8002090 <__aeabi_i2d>
 8007da0:	0004      	movs	r4, r0
 8007da2:	000d      	movs	r5, r1
 8007da4:	9808      	ldr	r0, [sp, #32]
 8007da6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007da8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007daa:	4b2d      	ldr	r3, [pc, #180]	; (8007e60 <__ieee754_pow+0x740>)
 8007dac:	189b      	adds	r3, r3, r2
 8007dae:	681e      	ldr	r6, [r3, #0]
 8007db0:	685f      	ldr	r7, [r3, #4]
 8007db2:	9a00      	ldr	r2, [sp, #0]
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	f7f8 fc6f 	bl	8000698 <__aeabi_dadd>
 8007dba:	0032      	movs	r2, r6
 8007dbc:	003b      	movs	r3, r7
 8007dbe:	f7f8 fc6b 	bl	8000698 <__aeabi_dadd>
 8007dc2:	0022      	movs	r2, r4
 8007dc4:	002b      	movs	r3, r5
 8007dc6:	f7f8 fc67 	bl	8000698 <__aeabi_dadd>
 8007dca:	9804      	ldr	r0, [sp, #16]
 8007dcc:	0022      	movs	r2, r4
 8007dce:	002b      	movs	r3, r5
 8007dd0:	9004      	str	r0, [sp, #16]
 8007dd2:	9105      	str	r1, [sp, #20]
 8007dd4:	f7f9 fdf8 	bl	80019c8 <__aeabi_dsub>
 8007dd8:	0032      	movs	r2, r6
 8007dda:	003b      	movs	r3, r7
 8007ddc:	f7f9 fdf4 	bl	80019c8 <__aeabi_dsub>
 8007de0:	9a08      	ldr	r2, [sp, #32]
 8007de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de4:	f7f9 fdf0 	bl	80019c8 <__aeabi_dsub>
 8007de8:	0002      	movs	r2, r0
 8007dea:	000b      	movs	r3, r1
 8007dec:	9800      	ldr	r0, [sp, #0]
 8007dee:	9901      	ldr	r1, [sp, #4]
 8007df0:	e616      	b.n	8007a20 <__ieee754_pow+0x300>
 8007df2:	2300      	movs	r3, #0
 8007df4:	4c03      	ldr	r4, [pc, #12]	; (8007e04 <__ieee754_pow+0x6e4>)
 8007df6:	e61f      	b.n	8007a38 <__ieee754_pow+0x318>
 8007df8:	000fffff 	.word	0x000fffff
 8007dfc:	43400000 	.word	0x43400000
 8007e00:	fffffc01 	.word	0xfffffc01
 8007e04:	3ff00000 	.word	0x3ff00000
 8007e08:	0003988e 	.word	0x0003988e
 8007e0c:	000bb679 	.word	0x000bb679
 8007e10:	fff00000 	.word	0xfff00000
 8007e14:	08008690 	.word	0x08008690
 8007e18:	4a454eef 	.word	0x4a454eef
 8007e1c:	3fca7e28 	.word	0x3fca7e28
 8007e20:	93c9db65 	.word	0x93c9db65
 8007e24:	3fcd864a 	.word	0x3fcd864a
 8007e28:	a91d4101 	.word	0xa91d4101
 8007e2c:	3fd17460 	.word	0x3fd17460
 8007e30:	518f264d 	.word	0x518f264d
 8007e34:	3fd55555 	.word	0x3fd55555
 8007e38:	db6fabff 	.word	0xdb6fabff
 8007e3c:	3fdb6db6 	.word	0x3fdb6db6
 8007e40:	33333303 	.word	0x33333303
 8007e44:	3fe33333 	.word	0x3fe33333
 8007e48:	40080000 	.word	0x40080000
 8007e4c:	3feec709 	.word	0x3feec709
 8007e50:	dc3a03fd 	.word	0xdc3a03fd
 8007e54:	145b01f5 	.word	0x145b01f5
 8007e58:	be3e2fe0 	.word	0xbe3e2fe0
 8007e5c:	080086b0 	.word	0x080086b0
 8007e60:	080086a0 	.word	0x080086a0
 8007e64:	4a8f      	ldr	r2, [pc, #572]	; (80080a4 <__ieee754_pow+0x984>)
 8007e66:	4b90      	ldr	r3, [pc, #576]	; (80080a8 <__ieee754_pow+0x988>)
 8007e68:	9806      	ldr	r0, [sp, #24]
 8007e6a:	9907      	ldr	r1, [sp, #28]
 8007e6c:	f7f8 fc14 	bl	8000698 <__aeabi_dadd>
 8007e70:	0032      	movs	r2, r6
 8007e72:	9002      	str	r0, [sp, #8]
 8007e74:	9103      	str	r1, [sp, #12]
 8007e76:	003b      	movs	r3, r7
 8007e78:	0028      	movs	r0, r5
 8007e7a:	0021      	movs	r1, r4
 8007e7c:	f7f9 fda4 	bl	80019c8 <__aeabi_dsub>
 8007e80:	0002      	movs	r2, r0
 8007e82:	000b      	movs	r3, r1
 8007e84:	9802      	ldr	r0, [sp, #8]
 8007e86:	9903      	ldr	r1, [sp, #12]
 8007e88:	f7f8 fae6 	bl	8000458 <__aeabi_dcmpgt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d000      	beq.n	8007e92 <__ieee754_pow+0x772>
 8007e90:	e60d      	b.n	8007aae <__ieee754_pow+0x38e>
 8007e92:	2100      	movs	r1, #0
 8007e94:	4a85      	ldr	r2, [pc, #532]	; (80080ac <__ieee754_pow+0x98c>)
 8007e96:	0063      	lsls	r3, r4, #1
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	9102      	str	r1, [sp, #8]
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	dd25      	ble.n	8007eec <__ieee754_pow+0x7cc>
 8007ea0:	4a83      	ldr	r2, [pc, #524]	; (80080b0 <__ieee754_pow+0x990>)
 8007ea2:	151b      	asrs	r3, r3, #20
 8007ea4:	189b      	adds	r3, r3, r2
 8007ea6:	2280      	movs	r2, #128	; 0x80
 8007ea8:	0352      	lsls	r2, r2, #13
 8007eaa:	4694      	mov	ip, r2
 8007eac:	411a      	asrs	r2, r3
 8007eae:	1914      	adds	r4, r2, r4
 8007eb0:	0060      	lsls	r0, r4, #1
 8007eb2:	4b80      	ldr	r3, [pc, #512]	; (80080b4 <__ieee754_pow+0x994>)
 8007eb4:	0d40      	lsrs	r0, r0, #21
 8007eb6:	4d80      	ldr	r5, [pc, #512]	; (80080b8 <__ieee754_pow+0x998>)
 8007eb8:	18c0      	adds	r0, r0, r3
 8007eba:	4105      	asrs	r5, r0
 8007ebc:	0021      	movs	r1, r4
 8007ebe:	43a9      	bics	r1, r5
 8007ec0:	000b      	movs	r3, r1
 8007ec2:	4661      	mov	r1, ip
 8007ec4:	0324      	lsls	r4, r4, #12
 8007ec6:	0b24      	lsrs	r4, r4, #12
 8007ec8:	4321      	orrs	r1, r4
 8007eca:	2414      	movs	r4, #20
 8007ecc:	1a20      	subs	r0, r4, r0
 8007ece:	4101      	asrs	r1, r0
 8007ed0:	9102      	str	r1, [sp, #8]
 8007ed2:	9908      	ldr	r1, [sp, #32]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2900      	cmp	r1, #0
 8007ed8:	da02      	bge.n	8007ee0 <__ieee754_pow+0x7c0>
 8007eda:	9902      	ldr	r1, [sp, #8]
 8007edc:	4249      	negs	r1, r1
 8007ede:	9102      	str	r1, [sp, #8]
 8007ee0:	0030      	movs	r0, r6
 8007ee2:	0039      	movs	r1, r7
 8007ee4:	f7f9 fd70 	bl	80019c8 <__aeabi_dsub>
 8007ee8:	9004      	str	r0, [sp, #16]
 8007eea:	9105      	str	r1, [sp, #20]
 8007eec:	9a06      	ldr	r2, [sp, #24]
 8007eee:	9b07      	ldr	r3, [sp, #28]
 8007ef0:	9804      	ldr	r0, [sp, #16]
 8007ef2:	9905      	ldr	r1, [sp, #20]
 8007ef4:	2600      	movs	r6, #0
 8007ef6:	f7f8 fbcf 	bl	8000698 <__aeabi_dadd>
 8007efa:	2200      	movs	r2, #0
 8007efc:	4b6f      	ldr	r3, [pc, #444]	; (80080bc <__ieee754_pow+0x99c>)
 8007efe:	0030      	movs	r0, r6
 8007f00:	000f      	movs	r7, r1
 8007f02:	f7f9 faef 	bl	80014e4 <__aeabi_dmul>
 8007f06:	9a04      	ldr	r2, [sp, #16]
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	9008      	str	r0, [sp, #32]
 8007f0c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f0e:	0030      	movs	r0, r6
 8007f10:	0039      	movs	r1, r7
 8007f12:	f7f9 fd59 	bl	80019c8 <__aeabi_dsub>
 8007f16:	0002      	movs	r2, r0
 8007f18:	000b      	movs	r3, r1
 8007f1a:	9806      	ldr	r0, [sp, #24]
 8007f1c:	9907      	ldr	r1, [sp, #28]
 8007f1e:	f7f9 fd53 	bl	80019c8 <__aeabi_dsub>
 8007f22:	4a67      	ldr	r2, [pc, #412]	; (80080c0 <__ieee754_pow+0x9a0>)
 8007f24:	4b67      	ldr	r3, [pc, #412]	; (80080c4 <__ieee754_pow+0x9a4>)
 8007f26:	f7f9 fadd 	bl	80014e4 <__aeabi_dmul>
 8007f2a:	4a67      	ldr	r2, [pc, #412]	; (80080c8 <__ieee754_pow+0x9a8>)
 8007f2c:	0004      	movs	r4, r0
 8007f2e:	000d      	movs	r5, r1
 8007f30:	4b66      	ldr	r3, [pc, #408]	; (80080cc <__ieee754_pow+0x9ac>)
 8007f32:	0030      	movs	r0, r6
 8007f34:	0039      	movs	r1, r7
 8007f36:	f7f9 fad5 	bl	80014e4 <__aeabi_dmul>
 8007f3a:	0002      	movs	r2, r0
 8007f3c:	000b      	movs	r3, r1
 8007f3e:	0020      	movs	r0, r4
 8007f40:	0029      	movs	r1, r5
 8007f42:	f7f8 fba9 	bl	8000698 <__aeabi_dadd>
 8007f46:	0004      	movs	r4, r0
 8007f48:	000d      	movs	r5, r1
 8007f4a:	0002      	movs	r2, r0
 8007f4c:	000b      	movs	r3, r1
 8007f4e:	9808      	ldr	r0, [sp, #32]
 8007f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f52:	f7f8 fba1 	bl	8000698 <__aeabi_dadd>
 8007f56:	9a08      	ldr	r2, [sp, #32]
 8007f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5a:	0006      	movs	r6, r0
 8007f5c:	000f      	movs	r7, r1
 8007f5e:	f7f9 fd33 	bl	80019c8 <__aeabi_dsub>
 8007f62:	0002      	movs	r2, r0
 8007f64:	000b      	movs	r3, r1
 8007f66:	0020      	movs	r0, r4
 8007f68:	0029      	movs	r1, r5
 8007f6a:	f7f9 fd2d 	bl	80019c8 <__aeabi_dsub>
 8007f6e:	0032      	movs	r2, r6
 8007f70:	9004      	str	r0, [sp, #16]
 8007f72:	9105      	str	r1, [sp, #20]
 8007f74:	003b      	movs	r3, r7
 8007f76:	0030      	movs	r0, r6
 8007f78:	0039      	movs	r1, r7
 8007f7a:	f7f9 fab3 	bl	80014e4 <__aeabi_dmul>
 8007f7e:	0004      	movs	r4, r0
 8007f80:	000d      	movs	r5, r1
 8007f82:	4a53      	ldr	r2, [pc, #332]	; (80080d0 <__ieee754_pow+0x9b0>)
 8007f84:	4b53      	ldr	r3, [pc, #332]	; (80080d4 <__ieee754_pow+0x9b4>)
 8007f86:	f7f9 faad 	bl	80014e4 <__aeabi_dmul>
 8007f8a:	4a53      	ldr	r2, [pc, #332]	; (80080d8 <__ieee754_pow+0x9b8>)
 8007f8c:	4b53      	ldr	r3, [pc, #332]	; (80080dc <__ieee754_pow+0x9bc>)
 8007f8e:	f7f9 fd1b 	bl	80019c8 <__aeabi_dsub>
 8007f92:	0022      	movs	r2, r4
 8007f94:	002b      	movs	r3, r5
 8007f96:	f7f9 faa5 	bl	80014e4 <__aeabi_dmul>
 8007f9a:	4a51      	ldr	r2, [pc, #324]	; (80080e0 <__ieee754_pow+0x9c0>)
 8007f9c:	4b51      	ldr	r3, [pc, #324]	; (80080e4 <__ieee754_pow+0x9c4>)
 8007f9e:	f7f8 fb7b 	bl	8000698 <__aeabi_dadd>
 8007fa2:	0022      	movs	r2, r4
 8007fa4:	002b      	movs	r3, r5
 8007fa6:	f7f9 fa9d 	bl	80014e4 <__aeabi_dmul>
 8007faa:	4a4f      	ldr	r2, [pc, #316]	; (80080e8 <__ieee754_pow+0x9c8>)
 8007fac:	4b4f      	ldr	r3, [pc, #316]	; (80080ec <__ieee754_pow+0x9cc>)
 8007fae:	f7f9 fd0b 	bl	80019c8 <__aeabi_dsub>
 8007fb2:	0022      	movs	r2, r4
 8007fb4:	002b      	movs	r3, r5
 8007fb6:	f7f9 fa95 	bl	80014e4 <__aeabi_dmul>
 8007fba:	4a4d      	ldr	r2, [pc, #308]	; (80080f0 <__ieee754_pow+0x9d0>)
 8007fbc:	4b4d      	ldr	r3, [pc, #308]	; (80080f4 <__ieee754_pow+0x9d4>)
 8007fbe:	f7f8 fb6b 	bl	8000698 <__aeabi_dadd>
 8007fc2:	0022      	movs	r2, r4
 8007fc4:	002b      	movs	r3, r5
 8007fc6:	f7f9 fa8d 	bl	80014e4 <__aeabi_dmul>
 8007fca:	0002      	movs	r2, r0
 8007fcc:	000b      	movs	r3, r1
 8007fce:	0030      	movs	r0, r6
 8007fd0:	0039      	movs	r1, r7
 8007fd2:	f7f9 fcf9 	bl	80019c8 <__aeabi_dsub>
 8007fd6:	0004      	movs	r4, r0
 8007fd8:	000d      	movs	r5, r1
 8007fda:	0002      	movs	r2, r0
 8007fdc:	000b      	movs	r3, r1
 8007fde:	0030      	movs	r0, r6
 8007fe0:	0039      	movs	r1, r7
 8007fe2:	f7f9 fa7f 	bl	80014e4 <__aeabi_dmul>
 8007fe6:	2380      	movs	r3, #128	; 0x80
 8007fe8:	9006      	str	r0, [sp, #24]
 8007fea:	9107      	str	r1, [sp, #28]
 8007fec:	2200      	movs	r2, #0
 8007fee:	05db      	lsls	r3, r3, #23
 8007ff0:	0020      	movs	r0, r4
 8007ff2:	0029      	movs	r1, r5
 8007ff4:	f7f9 fce8 	bl	80019c8 <__aeabi_dsub>
 8007ff8:	0002      	movs	r2, r0
 8007ffa:	000b      	movs	r3, r1
 8007ffc:	9806      	ldr	r0, [sp, #24]
 8007ffe:	9907      	ldr	r1, [sp, #28]
 8008000:	f7f8 fe66 	bl	8000cd0 <__aeabi_ddiv>
 8008004:	9a04      	ldr	r2, [sp, #16]
 8008006:	9b05      	ldr	r3, [sp, #20]
 8008008:	0004      	movs	r4, r0
 800800a:	000d      	movs	r5, r1
 800800c:	0030      	movs	r0, r6
 800800e:	0039      	movs	r1, r7
 8008010:	f7f9 fa68 	bl	80014e4 <__aeabi_dmul>
 8008014:	9a04      	ldr	r2, [sp, #16]
 8008016:	9b05      	ldr	r3, [sp, #20]
 8008018:	f7f8 fb3e 	bl	8000698 <__aeabi_dadd>
 800801c:	0002      	movs	r2, r0
 800801e:	000b      	movs	r3, r1
 8008020:	0020      	movs	r0, r4
 8008022:	0029      	movs	r1, r5
 8008024:	f7f9 fcd0 	bl	80019c8 <__aeabi_dsub>
 8008028:	0032      	movs	r2, r6
 800802a:	003b      	movs	r3, r7
 800802c:	f7f9 fccc 	bl	80019c8 <__aeabi_dsub>
 8008030:	0002      	movs	r2, r0
 8008032:	000b      	movs	r3, r1
 8008034:	2000      	movs	r0, #0
 8008036:	4930      	ldr	r1, [pc, #192]	; (80080f8 <__ieee754_pow+0x9d8>)
 8008038:	f7f9 fcc6 	bl	80019c8 <__aeabi_dsub>
 800803c:	9b02      	ldr	r3, [sp, #8]
 800803e:	051b      	lsls	r3, r3, #20
 8008040:	185b      	adds	r3, r3, r1
 8008042:	151a      	asrs	r2, r3, #20
 8008044:	2a00      	cmp	r2, #0
 8008046:	dc26      	bgt.n	8008096 <__ieee754_pow+0x976>
 8008048:	9a02      	ldr	r2, [sp, #8]
 800804a:	f000 f9ad 	bl	80083a8 <scalbn>
 800804e:	9a00      	ldr	r2, [sp, #0]
 8008050:	9b01      	ldr	r3, [sp, #4]
 8008052:	f7ff fc04 	bl	800785e <__ieee754_pow+0x13e>
 8008056:	4a29      	ldr	r2, [pc, #164]	; (80080fc <__ieee754_pow+0x9dc>)
 8008058:	004b      	lsls	r3, r1, #1
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	4293      	cmp	r3, r2
 800805e:	dc00      	bgt.n	8008062 <__ieee754_pow+0x942>
 8008060:	e717      	b.n	8007e92 <__ieee754_pow+0x772>
 8008062:	4b27      	ldr	r3, [pc, #156]	; (8008100 <__ieee754_pow+0x9e0>)
 8008064:	18cb      	adds	r3, r1, r3
 8008066:	4303      	orrs	r3, r0
 8008068:	d009      	beq.n	800807e <__ieee754_pow+0x95e>
 800806a:	9800      	ldr	r0, [sp, #0]
 800806c:	9901      	ldr	r1, [sp, #4]
 800806e:	4a25      	ldr	r2, [pc, #148]	; (8008104 <__ieee754_pow+0x9e4>)
 8008070:	4b25      	ldr	r3, [pc, #148]	; (8008108 <__ieee754_pow+0x9e8>)
 8008072:	f7f9 fa37 	bl	80014e4 <__aeabi_dmul>
 8008076:	4a23      	ldr	r2, [pc, #140]	; (8008104 <__ieee754_pow+0x9e4>)
 8008078:	4b23      	ldr	r3, [pc, #140]	; (8008108 <__ieee754_pow+0x9e8>)
 800807a:	f7ff fbf0 	bl	800785e <__ieee754_pow+0x13e>
 800807e:	0032      	movs	r2, r6
 8008080:	003b      	movs	r3, r7
 8008082:	f7f9 fca1 	bl	80019c8 <__aeabi_dsub>
 8008086:	9a06      	ldr	r2, [sp, #24]
 8008088:	9b07      	ldr	r3, [sp, #28]
 800808a:	f7f8 f9ef 	bl	800046c <__aeabi_dcmpge>
 800808e:	2800      	cmp	r0, #0
 8008090:	d100      	bne.n	8008094 <__ieee754_pow+0x974>
 8008092:	e6fe      	b.n	8007e92 <__ieee754_pow+0x772>
 8008094:	e7e9      	b.n	800806a <__ieee754_pow+0x94a>
 8008096:	0019      	movs	r1, r3
 8008098:	e7d9      	b.n	800804e <__ieee754_pow+0x92e>
 800809a:	2300      	movs	r3, #0
 800809c:	4c16      	ldr	r4, [pc, #88]	; (80080f8 <__ieee754_pow+0x9d8>)
 800809e:	f7ff fba1 	bl	80077e4 <__ieee754_pow+0xc4>
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	652b82fe 	.word	0x652b82fe
 80080a8:	3c971547 	.word	0x3c971547
 80080ac:	3fe00000 	.word	0x3fe00000
 80080b0:	fffffc02 	.word	0xfffffc02
 80080b4:	fffffc01 	.word	0xfffffc01
 80080b8:	000fffff 	.word	0x000fffff
 80080bc:	3fe62e43 	.word	0x3fe62e43
 80080c0:	fefa39ef 	.word	0xfefa39ef
 80080c4:	3fe62e42 	.word	0x3fe62e42
 80080c8:	0ca86c39 	.word	0x0ca86c39
 80080cc:	be205c61 	.word	0xbe205c61
 80080d0:	72bea4d0 	.word	0x72bea4d0
 80080d4:	3e663769 	.word	0x3e663769
 80080d8:	c5d26bf1 	.word	0xc5d26bf1
 80080dc:	3ebbbd41 	.word	0x3ebbbd41
 80080e0:	af25de2c 	.word	0xaf25de2c
 80080e4:	3f11566a 	.word	0x3f11566a
 80080e8:	16bebd93 	.word	0x16bebd93
 80080ec:	3f66c16c 	.word	0x3f66c16c
 80080f0:	5555553e 	.word	0x5555553e
 80080f4:	3fc55555 	.word	0x3fc55555
 80080f8:	3ff00000 	.word	0x3ff00000
 80080fc:	4090cbff 	.word	0x4090cbff
 8008100:	3f6f3400 	.word	0x3f6f3400
 8008104:	c2f8f359 	.word	0xc2f8f359
 8008108:	01a56e1f 	.word	0x01a56e1f

0800810c <__ieee754_sqrt>:
 800810c:	4b55      	ldr	r3, [pc, #340]	; (8008264 <__ieee754_sqrt+0x158>)
 800810e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008110:	001a      	movs	r2, r3
 8008112:	0005      	movs	r5, r0
 8008114:	000c      	movs	r4, r1
 8008116:	400a      	ands	r2, r1
 8008118:	429a      	cmp	r2, r3
 800811a:	d10f      	bne.n	800813c <__ieee754_sqrt+0x30>
 800811c:	0002      	movs	r2, r0
 800811e:	000b      	movs	r3, r1
 8008120:	f7f9 f9e0 	bl	80014e4 <__aeabi_dmul>
 8008124:	0002      	movs	r2, r0
 8008126:	000b      	movs	r3, r1
 8008128:	0028      	movs	r0, r5
 800812a:	0021      	movs	r1, r4
 800812c:	f7f8 fab4 	bl	8000698 <__aeabi_dadd>
 8008130:	0005      	movs	r5, r0
 8008132:	000c      	movs	r4, r1
 8008134:	0028      	movs	r0, r5
 8008136:	0021      	movs	r1, r4
 8008138:	b003      	add	sp, #12
 800813a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800813c:	0002      	movs	r2, r0
 800813e:	2900      	cmp	r1, #0
 8008140:	dc10      	bgt.n	8008164 <__ieee754_sqrt+0x58>
 8008142:	004b      	lsls	r3, r1, #1
 8008144:	085b      	lsrs	r3, r3, #1
 8008146:	4303      	orrs	r3, r0
 8008148:	d0f4      	beq.n	8008134 <__ieee754_sqrt+0x28>
 800814a:	2000      	movs	r0, #0
 800814c:	4281      	cmp	r1, r0
 800814e:	d100      	bne.n	8008152 <__ieee754_sqrt+0x46>
 8008150:	e07f      	b.n	8008252 <__ieee754_sqrt+0x146>
 8008152:	000b      	movs	r3, r1
 8008154:	0028      	movs	r0, r5
 8008156:	f7f9 fc37 	bl	80019c8 <__aeabi_dsub>
 800815a:	0002      	movs	r2, r0
 800815c:	000b      	movs	r3, r1
 800815e:	f7f8 fdb7 	bl	8000cd0 <__aeabi_ddiv>
 8008162:	e7e5      	b.n	8008130 <__ieee754_sqrt+0x24>
 8008164:	1508      	asrs	r0, r1, #20
 8008166:	d074      	beq.n	8008252 <__ieee754_sqrt+0x146>
 8008168:	4b3f      	ldr	r3, [pc, #252]	; (8008268 <__ieee754_sqrt+0x15c>)
 800816a:	0309      	lsls	r1, r1, #12
 800816c:	18c0      	adds	r0, r0, r3
 800816e:	2380      	movs	r3, #128	; 0x80
 8008170:	0b09      	lsrs	r1, r1, #12
 8008172:	035b      	lsls	r3, r3, #13
 8008174:	4319      	orrs	r1, r3
 8008176:	07c3      	lsls	r3, r0, #31
 8008178:	d503      	bpl.n	8008182 <__ieee754_sqrt+0x76>
 800817a:	0fd3      	lsrs	r3, r2, #31
 800817c:	0049      	lsls	r1, r1, #1
 800817e:	18c9      	adds	r1, r1, r3
 8008180:	0052      	lsls	r2, r2, #1
 8008182:	2400      	movs	r4, #0
 8008184:	1043      	asrs	r3, r0, #1
 8008186:	0049      	lsls	r1, r1, #1
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	2580      	movs	r5, #128	; 0x80
 800818c:	0fd3      	lsrs	r3, r2, #31
 800818e:	18cb      	adds	r3, r1, r3
 8008190:	0020      	movs	r0, r4
 8008192:	2116      	movs	r1, #22
 8008194:	0052      	lsls	r2, r2, #1
 8008196:	03ad      	lsls	r5, r5, #14
 8008198:	1946      	adds	r6, r0, r5
 800819a:	429e      	cmp	r6, r3
 800819c:	dc02      	bgt.n	80081a4 <__ieee754_sqrt+0x98>
 800819e:	1970      	adds	r0, r6, r5
 80081a0:	1b9b      	subs	r3, r3, r6
 80081a2:	1964      	adds	r4, r4, r5
 80081a4:	0fd6      	lsrs	r6, r2, #31
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	3901      	subs	r1, #1
 80081aa:	199b      	adds	r3, r3, r6
 80081ac:	0052      	lsls	r2, r2, #1
 80081ae:	086d      	lsrs	r5, r5, #1
 80081b0:	2900      	cmp	r1, #0
 80081b2:	d1f1      	bne.n	8008198 <__ieee754_sqrt+0x8c>
 80081b4:	2520      	movs	r5, #32
 80081b6:	2680      	movs	r6, #128	; 0x80
 80081b8:	46ac      	mov	ip, r5
 80081ba:	9100      	str	r1, [sp, #0]
 80081bc:	0636      	lsls	r6, r6, #24
 80081be:	9d00      	ldr	r5, [sp, #0]
 80081c0:	1977      	adds	r7, r6, r5
 80081c2:	4283      	cmp	r3, r0
 80081c4:	dc02      	bgt.n	80081cc <__ieee754_sqrt+0xc0>
 80081c6:	d112      	bne.n	80081ee <__ieee754_sqrt+0xe2>
 80081c8:	4297      	cmp	r7, r2
 80081ca:	d810      	bhi.n	80081ee <__ieee754_sqrt+0xe2>
 80081cc:	19bd      	adds	r5, r7, r6
 80081ce:	9500      	str	r5, [sp, #0]
 80081d0:	0005      	movs	r5, r0
 80081d2:	2f00      	cmp	r7, #0
 80081d4:	da03      	bge.n	80081de <__ieee754_sqrt+0xd2>
 80081d6:	9d00      	ldr	r5, [sp, #0]
 80081d8:	43ed      	mvns	r5, r5
 80081da:	0fed      	lsrs	r5, r5, #31
 80081dc:	1945      	adds	r5, r0, r5
 80081de:	1a1b      	subs	r3, r3, r0
 80081e0:	42ba      	cmp	r2, r7
 80081e2:	4180      	sbcs	r0, r0
 80081e4:	4240      	negs	r0, r0
 80081e6:	1a1b      	subs	r3, r3, r0
 80081e8:	0028      	movs	r0, r5
 80081ea:	1bd2      	subs	r2, r2, r7
 80081ec:	1989      	adds	r1, r1, r6
 80081ee:	0fd5      	lsrs	r5, r2, #31
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	18eb      	adds	r3, r5, r3
 80081f4:	2501      	movs	r5, #1
 80081f6:	426d      	negs	r5, r5
 80081f8:	44ac      	add	ip, r5
 80081fa:	4665      	mov	r5, ip
 80081fc:	0052      	lsls	r2, r2, #1
 80081fe:	0876      	lsrs	r6, r6, #1
 8008200:	2d00      	cmp	r5, #0
 8008202:	d1dc      	bne.n	80081be <__ieee754_sqrt+0xb2>
 8008204:	4313      	orrs	r3, r2
 8008206:	d003      	beq.n	8008210 <__ieee754_sqrt+0x104>
 8008208:	1c4b      	adds	r3, r1, #1
 800820a:	d127      	bne.n	800825c <__ieee754_sqrt+0x150>
 800820c:	4661      	mov	r1, ip
 800820e:	3401      	adds	r4, #1
 8008210:	4b16      	ldr	r3, [pc, #88]	; (800826c <__ieee754_sqrt+0x160>)
 8008212:	1060      	asrs	r0, r4, #1
 8008214:	18c0      	adds	r0, r0, r3
 8008216:	0849      	lsrs	r1, r1, #1
 8008218:	07e3      	lsls	r3, r4, #31
 800821a:	d502      	bpl.n	8008222 <__ieee754_sqrt+0x116>
 800821c:	2380      	movs	r3, #128	; 0x80
 800821e:	061b      	lsls	r3, r3, #24
 8008220:	4319      	orrs	r1, r3
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	000d      	movs	r5, r1
 8008226:	051c      	lsls	r4, r3, #20
 8008228:	1823      	adds	r3, r4, r0
 800822a:	001c      	movs	r4, r3
 800822c:	e782      	b.n	8008134 <__ieee754_sqrt+0x28>
 800822e:	0ad1      	lsrs	r1, r2, #11
 8008230:	3b15      	subs	r3, #21
 8008232:	0552      	lsls	r2, r2, #21
 8008234:	2900      	cmp	r1, #0
 8008236:	d0fa      	beq.n	800822e <__ieee754_sqrt+0x122>
 8008238:	2480      	movs	r4, #128	; 0x80
 800823a:	0364      	lsls	r4, r4, #13
 800823c:	4221      	tst	r1, r4
 800823e:	d00a      	beq.n	8008256 <__ieee754_sqrt+0x14a>
 8008240:	2420      	movs	r4, #32
 8008242:	0016      	movs	r6, r2
 8008244:	1a24      	subs	r4, r4, r0
 8008246:	40e6      	lsrs	r6, r4
 8008248:	1e45      	subs	r5, r0, #1
 800824a:	4082      	lsls	r2, r0
 800824c:	4331      	orrs	r1, r6
 800824e:	1b58      	subs	r0, r3, r5
 8008250:	e78a      	b.n	8008168 <__ieee754_sqrt+0x5c>
 8008252:	2300      	movs	r3, #0
 8008254:	e7ee      	b.n	8008234 <__ieee754_sqrt+0x128>
 8008256:	0049      	lsls	r1, r1, #1
 8008258:	3001      	adds	r0, #1
 800825a:	e7ef      	b.n	800823c <__ieee754_sqrt+0x130>
 800825c:	2301      	movs	r3, #1
 800825e:	3101      	adds	r1, #1
 8008260:	4399      	bics	r1, r3
 8008262:	e7d5      	b.n	8008210 <__ieee754_sqrt+0x104>
 8008264:	7ff00000 	.word	0x7ff00000
 8008268:	fffffc01 	.word	0xfffffc01
 800826c:	3fe00000 	.word	0x3fe00000

08008270 <fabs>:
 8008270:	0049      	lsls	r1, r1, #1
 8008272:	084b      	lsrs	r3, r1, #1
 8008274:	0019      	movs	r1, r3
 8008276:	4770      	bx	lr

08008278 <finite>:
 8008278:	0048      	lsls	r0, r1, #1
 800827a:	4b02      	ldr	r3, [pc, #8]	; (8008284 <finite+0xc>)
 800827c:	0840      	lsrs	r0, r0, #1
 800827e:	18c0      	adds	r0, r0, r3
 8008280:	0fc0      	lsrs	r0, r0, #31
 8008282:	4770      	bx	lr
 8008284:	80100000 	.word	0x80100000

08008288 <matherr>:
 8008288:	2000      	movs	r0, #0
 800828a:	4770      	bx	lr

0800828c <nan>:
 800828c:	2000      	movs	r0, #0
 800828e:	4901      	ldr	r1, [pc, #4]	; (8008294 <nan+0x8>)
 8008290:	4770      	bx	lr
 8008292:	46c0      	nop			; (mov r8, r8)
 8008294:	7ff80000 	.word	0x7ff80000

08008298 <rint>:
 8008298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800829a:	004a      	lsls	r2, r1, #1
 800829c:	4e3e      	ldr	r6, [pc, #248]	; (8008398 <rint+0x100>)
 800829e:	0d52      	lsrs	r2, r2, #21
 80082a0:	b085      	sub	sp, #20
 80082a2:	1996      	adds	r6, r2, r6
 80082a4:	000d      	movs	r5, r1
 80082a6:	9101      	str	r1, [sp, #4]
 80082a8:	0003      	movs	r3, r0
 80082aa:	0fcc      	lsrs	r4, r1, #31
 80082ac:	2e13      	cmp	r6, #19
 80082ae:	dc57      	bgt.n	8008360 <rint+0xc8>
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	da2a      	bge.n	800830a <rint+0x72>
 80082b4:	004a      	lsls	r2, r1, #1
 80082b6:	0852      	lsrs	r2, r2, #1
 80082b8:	4302      	orrs	r2, r0
 80082ba:	d024      	beq.n	8008306 <rint+0x6e>
 80082bc:	030a      	lsls	r2, r1, #12
 80082be:	0b12      	lsrs	r2, r2, #12
 80082c0:	4302      	orrs	r2, r0
 80082c2:	4253      	negs	r3, r2
 80082c4:	4313      	orrs	r3, r2
 80082c6:	2280      	movs	r2, #128	; 0x80
 80082c8:	0c4d      	lsrs	r5, r1, #17
 80082ca:	0312      	lsls	r2, r2, #12
 80082cc:	0b1b      	lsrs	r3, r3, #12
 80082ce:	4013      	ands	r3, r2
 80082d0:	046d      	lsls	r5, r5, #17
 80082d2:	432b      	orrs	r3, r5
 80082d4:	0019      	movs	r1, r3
 80082d6:	4b31      	ldr	r3, [pc, #196]	; (800839c <rint+0x104>)
 80082d8:	00e2      	lsls	r2, r4, #3
 80082da:	189b      	adds	r3, r3, r2
 80082dc:	681e      	ldr	r6, [r3, #0]
 80082de:	685f      	ldr	r7, [r3, #4]
 80082e0:	0002      	movs	r2, r0
 80082e2:	000b      	movs	r3, r1
 80082e4:	0030      	movs	r0, r6
 80082e6:	0039      	movs	r1, r7
 80082e8:	f7f8 f9d6 	bl	8000698 <__aeabi_dadd>
 80082ec:	9002      	str	r0, [sp, #8]
 80082ee:	9103      	str	r1, [sp, #12]
 80082f0:	9802      	ldr	r0, [sp, #8]
 80082f2:	9903      	ldr	r1, [sp, #12]
 80082f4:	003b      	movs	r3, r7
 80082f6:	0032      	movs	r2, r6
 80082f8:	f7f9 fb66 	bl	80019c8 <__aeabi_dsub>
 80082fc:	004b      	lsls	r3, r1, #1
 80082fe:	085b      	lsrs	r3, r3, #1
 8008300:	07e4      	lsls	r4, r4, #31
 8008302:	4323      	orrs	r3, r4
 8008304:	0019      	movs	r1, r3
 8008306:	b005      	add	sp, #20
 8008308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830a:	4a25      	ldr	r2, [pc, #148]	; (80083a0 <rint+0x108>)
 800830c:	4132      	asrs	r2, r6
 800830e:	0017      	movs	r7, r2
 8008310:	400f      	ands	r7, r1
 8008312:	4307      	orrs	r7, r0
 8008314:	d0f7      	beq.n	8008306 <rint+0x6e>
 8008316:	0852      	lsrs	r2, r2, #1
 8008318:	0011      	movs	r1, r2
 800831a:	4029      	ands	r1, r5
 800831c:	430b      	orrs	r3, r1
 800831e:	d00a      	beq.n	8008336 <rint+0x9e>
 8008320:	2300      	movs	r3, #0
 8008322:	2e13      	cmp	r6, #19
 8008324:	d101      	bne.n	800832a <rint+0x92>
 8008326:	2380      	movs	r3, #128	; 0x80
 8008328:	061b      	lsls	r3, r3, #24
 800832a:	2780      	movs	r7, #128	; 0x80
 800832c:	02ff      	lsls	r7, r7, #11
 800832e:	4137      	asrs	r7, r6
 8008330:	4395      	bics	r5, r2
 8008332:	432f      	orrs	r7, r5
 8008334:	9701      	str	r7, [sp, #4]
 8008336:	9901      	ldr	r1, [sp, #4]
 8008338:	001a      	movs	r2, r3
 800833a:	000b      	movs	r3, r1
 800833c:	4917      	ldr	r1, [pc, #92]	; (800839c <rint+0x104>)
 800833e:	00e4      	lsls	r4, r4, #3
 8008340:	190c      	adds	r4, r1, r4
 8008342:	6865      	ldr	r5, [r4, #4]
 8008344:	6824      	ldr	r4, [r4, #0]
 8008346:	0020      	movs	r0, r4
 8008348:	0029      	movs	r1, r5
 800834a:	f7f8 f9a5 	bl	8000698 <__aeabi_dadd>
 800834e:	9002      	str	r0, [sp, #8]
 8008350:	9103      	str	r1, [sp, #12]
 8008352:	9802      	ldr	r0, [sp, #8]
 8008354:	9903      	ldr	r1, [sp, #12]
 8008356:	0022      	movs	r2, r4
 8008358:	002b      	movs	r3, r5
 800835a:	f7f9 fb35 	bl	80019c8 <__aeabi_dsub>
 800835e:	e7d2      	b.n	8008306 <rint+0x6e>
 8008360:	2e33      	cmp	r6, #51	; 0x33
 8008362:	dd08      	ble.n	8008376 <rint+0xde>
 8008364:	2380      	movs	r3, #128	; 0x80
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	429e      	cmp	r6, r3
 800836a:	d1cc      	bne.n	8008306 <rint+0x6e>
 800836c:	0002      	movs	r2, r0
 800836e:	000b      	movs	r3, r1
 8008370:	f7f8 f992 	bl	8000698 <__aeabi_dadd>
 8008374:	e7c7      	b.n	8008306 <rint+0x6e>
 8008376:	2601      	movs	r6, #1
 8008378:	4d0a      	ldr	r5, [pc, #40]	; (80083a4 <rint+0x10c>)
 800837a:	4276      	negs	r6, r6
 800837c:	1952      	adds	r2, r2, r5
 800837e:	40d6      	lsrs	r6, r2
 8008380:	4206      	tst	r6, r0
 8008382:	d0c0      	beq.n	8008306 <rint+0x6e>
 8008384:	0876      	lsrs	r6, r6, #1
 8008386:	4206      	tst	r6, r0
 8008388:	d0d5      	beq.n	8008336 <rint+0x9e>
 800838a:	2180      	movs	r1, #128	; 0x80
 800838c:	05c9      	lsls	r1, r1, #23
 800838e:	4111      	asrs	r1, r2
 8008390:	43b3      	bics	r3, r6
 8008392:	430b      	orrs	r3, r1
 8008394:	e7cf      	b.n	8008336 <rint+0x9e>
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	fffffc01 	.word	0xfffffc01
 800839c:	080086c0 	.word	0x080086c0
 80083a0:	000fffff 	.word	0x000fffff
 80083a4:	fffffbed 	.word	0xfffffbed

080083a8 <scalbn>:
 80083a8:	004b      	lsls	r3, r1, #1
 80083aa:	b570      	push	{r4, r5, r6, lr}
 80083ac:	0d5b      	lsrs	r3, r3, #21
 80083ae:	0014      	movs	r4, r2
 80083b0:	000a      	movs	r2, r1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10d      	bne.n	80083d2 <scalbn+0x2a>
 80083b6:	004b      	lsls	r3, r1, #1
 80083b8:	085b      	lsrs	r3, r3, #1
 80083ba:	4303      	orrs	r3, r0
 80083bc:	d010      	beq.n	80083e0 <scalbn+0x38>
 80083be:	4b21      	ldr	r3, [pc, #132]	; (8008444 <scalbn+0x9c>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	f7f9 f88f 	bl	80014e4 <__aeabi_dmul>
 80083c6:	4b20      	ldr	r3, [pc, #128]	; (8008448 <scalbn+0xa0>)
 80083c8:	429c      	cmp	r4, r3
 80083ca:	da0a      	bge.n	80083e2 <scalbn+0x3a>
 80083cc:	4a1f      	ldr	r2, [pc, #124]	; (800844c <scalbn+0xa4>)
 80083ce:	4b20      	ldr	r3, [pc, #128]	; (8008450 <scalbn+0xa8>)
 80083d0:	e017      	b.n	8008402 <scalbn+0x5a>
 80083d2:	4d20      	ldr	r5, [pc, #128]	; (8008454 <scalbn+0xac>)
 80083d4:	42ab      	cmp	r3, r5
 80083d6:	d108      	bne.n	80083ea <scalbn+0x42>
 80083d8:	0002      	movs	r2, r0
 80083da:	000b      	movs	r3, r1
 80083dc:	f7f8 f95c 	bl	8000698 <__aeabi_dadd>
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	000a      	movs	r2, r1
 80083e4:	004b      	lsls	r3, r1, #1
 80083e6:	0d5b      	lsrs	r3, r3, #21
 80083e8:	3b36      	subs	r3, #54	; 0x36
 80083ea:	4d1b      	ldr	r5, [pc, #108]	; (8008458 <scalbn+0xb0>)
 80083ec:	18e3      	adds	r3, r4, r3
 80083ee:	42ab      	cmp	r3, r5
 80083f0:	dd0a      	ble.n	8008408 <scalbn+0x60>
 80083f2:	0002      	movs	r2, r0
 80083f4:	000b      	movs	r3, r1
 80083f6:	4819      	ldr	r0, [pc, #100]	; (800845c <scalbn+0xb4>)
 80083f8:	4919      	ldr	r1, [pc, #100]	; (8008460 <scalbn+0xb8>)
 80083fa:	f000 f839 	bl	8008470 <copysign>
 80083fe:	4a17      	ldr	r2, [pc, #92]	; (800845c <scalbn+0xb4>)
 8008400:	4b17      	ldr	r3, [pc, #92]	; (8008460 <scalbn+0xb8>)
 8008402:	f7f9 f86f 	bl	80014e4 <__aeabi_dmul>
 8008406:	e7eb      	b.n	80083e0 <scalbn+0x38>
 8008408:	2b00      	cmp	r3, #0
 800840a:	dd05      	ble.n	8008418 <scalbn+0x70>
 800840c:	4c15      	ldr	r4, [pc, #84]	; (8008464 <scalbn+0xbc>)
 800840e:	051b      	lsls	r3, r3, #20
 8008410:	4022      	ands	r2, r4
 8008412:	431a      	orrs	r2, r3
 8008414:	0011      	movs	r1, r2
 8008416:	e7e3      	b.n	80083e0 <scalbn+0x38>
 8008418:	001d      	movs	r5, r3
 800841a:	3535      	adds	r5, #53	; 0x35
 800841c:	da09      	bge.n	8008432 <scalbn+0x8a>
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <scalbn+0xc0>)
 8008420:	0002      	movs	r2, r0
 8008422:	429c      	cmp	r4, r3
 8008424:	dce6      	bgt.n	80083f4 <scalbn+0x4c>
 8008426:	000b      	movs	r3, r1
 8008428:	4808      	ldr	r0, [pc, #32]	; (800844c <scalbn+0xa4>)
 800842a:	4909      	ldr	r1, [pc, #36]	; (8008450 <scalbn+0xa8>)
 800842c:	f000 f820 	bl	8008470 <copysign>
 8008430:	e7cc      	b.n	80083cc <scalbn+0x24>
 8008432:	4c0c      	ldr	r4, [pc, #48]	; (8008464 <scalbn+0xbc>)
 8008434:	3336      	adds	r3, #54	; 0x36
 8008436:	4022      	ands	r2, r4
 8008438:	051b      	lsls	r3, r3, #20
 800843a:	4313      	orrs	r3, r2
 800843c:	0019      	movs	r1, r3
 800843e:	2200      	movs	r2, #0
 8008440:	4b0a      	ldr	r3, [pc, #40]	; (800846c <scalbn+0xc4>)
 8008442:	e7de      	b.n	8008402 <scalbn+0x5a>
 8008444:	43500000 	.word	0x43500000
 8008448:	ffff3cb0 	.word	0xffff3cb0
 800844c:	c2f8f359 	.word	0xc2f8f359
 8008450:	01a56e1f 	.word	0x01a56e1f
 8008454:	000007ff 	.word	0x000007ff
 8008458:	000007fe 	.word	0x000007fe
 800845c:	8800759c 	.word	0x8800759c
 8008460:	7e37e43c 	.word	0x7e37e43c
 8008464:	800fffff 	.word	0x800fffff
 8008468:	0000c350 	.word	0x0000c350
 800846c:	3c900000 	.word	0x3c900000

08008470 <copysign>:
 8008470:	b530      	push	{r4, r5, lr}
 8008472:	004a      	lsls	r2, r1, #1
 8008474:	0fdb      	lsrs	r3, r3, #31
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	0852      	lsrs	r2, r2, #1
 800847a:	431a      	orrs	r2, r3
 800847c:	0011      	movs	r1, r2
 800847e:	bd30      	pop	{r4, r5, pc}

08008480 <_init>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr

0800848c <_fini>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr
