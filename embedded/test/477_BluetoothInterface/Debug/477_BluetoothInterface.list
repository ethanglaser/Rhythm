
477_BluetoothInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008828  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080088e8  080088e8  000188e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b18  08008b18  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b20  08008b20  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008b28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200000a0  08008bc8  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08008bc8  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f621  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000218d  00000000  00000000  0002f6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f88  00000000  00000000  00031878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00032800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015429  00000000  00000000  000336a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4be  00000000  00000000  00048ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000812b9  00000000  00000000  00054f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6240  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f18  00000000  00000000  000d62bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080088d0 	.word	0x080088d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	080088d0 	.word	0x080088d0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c10      	adds	r0, r2, #0
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	1c19      	adds	r1, r3, #0
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 fffd 	bl	8001240 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 ff55 	bl	8001100 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 ffef 	bl	8001240 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 ffe5 	bl	8001240 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 ff77 	bl	8001178 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 ff6d 	bl	8001178 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_uldivmod>:
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d111      	bne.n	80002d4 <__aeabi_uldivmod+0x28>
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	d10f      	bne.n	80002d4 <__aeabi_uldivmod+0x28>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	d100      	bne.n	80002ba <__aeabi_uldivmod+0xe>
 80002b8:	2800      	cmp	r0, #0
 80002ba:	d002      	beq.n	80002c2 <__aeabi_uldivmod+0x16>
 80002bc:	2100      	movs	r1, #0
 80002be:	43c9      	mvns	r1, r1
 80002c0:	1c08      	adds	r0, r1, #0
 80002c2:	b407      	push	{r0, r1, r2}
 80002c4:	4802      	ldr	r0, [pc, #8]	; (80002d0 <__aeabi_uldivmod+0x24>)
 80002c6:	a102      	add	r1, pc, #8	; (adr r1, 80002d0 <__aeabi_uldivmod+0x24>)
 80002c8:	1840      	adds	r0, r0, r1
 80002ca:	9002      	str	r0, [sp, #8]
 80002cc:	bd03      	pop	{r0, r1, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	ffffff5d 	.word	0xffffff5d
 80002d4:	b403      	push	{r0, r1}
 80002d6:	4668      	mov	r0, sp
 80002d8:	b501      	push	{r0, lr}
 80002da:	9802      	ldr	r0, [sp, #8]
 80002dc:	f000 f830 	bl	8000340 <__udivmoddi4>
 80002e0:	9b01      	ldr	r3, [sp, #4]
 80002e2:	469e      	mov	lr, r3
 80002e4:	b002      	add	sp, #8
 80002e6:	bc0c      	pop	{r2, r3}
 80002e8:	4770      	bx	lr
 80002ea:	46c0      	nop			; (mov r8, r8)

080002ec <__aeabi_lmul>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	46ce      	mov	lr, r9
 80002f0:	4647      	mov	r7, r8
 80002f2:	0415      	lsls	r5, r2, #16
 80002f4:	0c2d      	lsrs	r5, r5, #16
 80002f6:	002e      	movs	r6, r5
 80002f8:	b580      	push	{r7, lr}
 80002fa:	0407      	lsls	r7, r0, #16
 80002fc:	0c14      	lsrs	r4, r2, #16
 80002fe:	0c3f      	lsrs	r7, r7, #16
 8000300:	4699      	mov	r9, r3
 8000302:	0c03      	lsrs	r3, r0, #16
 8000304:	437e      	muls	r6, r7
 8000306:	435d      	muls	r5, r3
 8000308:	4367      	muls	r7, r4
 800030a:	4363      	muls	r3, r4
 800030c:	197f      	adds	r7, r7, r5
 800030e:	0c34      	lsrs	r4, r6, #16
 8000310:	19e4      	adds	r4, r4, r7
 8000312:	469c      	mov	ip, r3
 8000314:	42a5      	cmp	r5, r4
 8000316:	d903      	bls.n	8000320 <__aeabi_lmul+0x34>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	025b      	lsls	r3, r3, #9
 800031c:	4698      	mov	r8, r3
 800031e:	44c4      	add	ip, r8
 8000320:	464b      	mov	r3, r9
 8000322:	4343      	muls	r3, r0
 8000324:	4351      	muls	r1, r2
 8000326:	0c25      	lsrs	r5, r4, #16
 8000328:	0436      	lsls	r6, r6, #16
 800032a:	4465      	add	r5, ip
 800032c:	0c36      	lsrs	r6, r6, #16
 800032e:	0424      	lsls	r4, r4, #16
 8000330:	19a4      	adds	r4, r4, r6
 8000332:	195b      	adds	r3, r3, r5
 8000334:	1859      	adds	r1, r3, r1
 8000336:	0020      	movs	r0, r4
 8000338:	bc0c      	pop	{r2, r3}
 800033a:	4690      	mov	r8, r2
 800033c:	4699      	mov	r9, r3
 800033e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000340 <__udivmoddi4>:
 8000340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000342:	464f      	mov	r7, r9
 8000344:	4646      	mov	r6, r8
 8000346:	46d6      	mov	lr, sl
 8000348:	b5c0      	push	{r6, r7, lr}
 800034a:	0004      	movs	r4, r0
 800034c:	b082      	sub	sp, #8
 800034e:	000d      	movs	r5, r1
 8000350:	4691      	mov	r9, r2
 8000352:	4698      	mov	r8, r3
 8000354:	428b      	cmp	r3, r1
 8000356:	d82f      	bhi.n	80003b8 <__udivmoddi4+0x78>
 8000358:	d02c      	beq.n	80003b4 <__udivmoddi4+0x74>
 800035a:	4641      	mov	r1, r8
 800035c:	4648      	mov	r0, r9
 800035e:	f001 fe05 	bl	8001f6c <__clzdi2>
 8000362:	0029      	movs	r1, r5
 8000364:	0006      	movs	r6, r0
 8000366:	0020      	movs	r0, r4
 8000368:	f001 fe00 	bl	8001f6c <__clzdi2>
 800036c:	1a33      	subs	r3, r6, r0
 800036e:	469c      	mov	ip, r3
 8000370:	3b20      	subs	r3, #32
 8000372:	469a      	mov	sl, r3
 8000374:	d500      	bpl.n	8000378 <__udivmoddi4+0x38>
 8000376:	e076      	b.n	8000466 <__udivmoddi4+0x126>
 8000378:	464b      	mov	r3, r9
 800037a:	4652      	mov	r2, sl
 800037c:	4093      	lsls	r3, r2
 800037e:	001f      	movs	r7, r3
 8000380:	464b      	mov	r3, r9
 8000382:	4662      	mov	r2, ip
 8000384:	4093      	lsls	r3, r2
 8000386:	001e      	movs	r6, r3
 8000388:	42af      	cmp	r7, r5
 800038a:	d828      	bhi.n	80003de <__udivmoddi4+0x9e>
 800038c:	d025      	beq.n	80003da <__udivmoddi4+0x9a>
 800038e:	4653      	mov	r3, sl
 8000390:	1ba4      	subs	r4, r4, r6
 8000392:	41bd      	sbcs	r5, r7
 8000394:	2b00      	cmp	r3, #0
 8000396:	da00      	bge.n	800039a <__udivmoddi4+0x5a>
 8000398:	e07b      	b.n	8000492 <__udivmoddi4+0x152>
 800039a:	2200      	movs	r2, #0
 800039c:	2300      	movs	r3, #0
 800039e:	9200      	str	r2, [sp, #0]
 80003a0:	9301      	str	r3, [sp, #4]
 80003a2:	2301      	movs	r3, #1
 80003a4:	4652      	mov	r2, sl
 80003a6:	4093      	lsls	r3, r2
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	2301      	movs	r3, #1
 80003ac:	4662      	mov	r2, ip
 80003ae:	4093      	lsls	r3, r2
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	e018      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003b4:	4282      	cmp	r2, r0
 80003b6:	d9d0      	bls.n	800035a <__udivmoddi4+0x1a>
 80003b8:	2200      	movs	r2, #0
 80003ba:	2300      	movs	r3, #0
 80003bc:	9200      	str	r2, [sp, #0]
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <__udivmoddi4+0x8a>
 80003c6:	601c      	str	r4, [r3, #0]
 80003c8:	605d      	str	r5, [r3, #4]
 80003ca:	9800      	ldr	r0, [sp, #0]
 80003cc:	9901      	ldr	r1, [sp, #4]
 80003ce:	b002      	add	sp, #8
 80003d0:	bc1c      	pop	{r2, r3, r4}
 80003d2:	4690      	mov	r8, r2
 80003d4:	4699      	mov	r9, r3
 80003d6:	46a2      	mov	sl, r4
 80003d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003da:	42a3      	cmp	r3, r4
 80003dc:	d9d7      	bls.n	800038e <__udivmoddi4+0x4e>
 80003de:	2200      	movs	r2, #0
 80003e0:	2300      	movs	r3, #0
 80003e2:	9200      	str	r2, [sp, #0]
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	4663      	mov	r3, ip
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0e9      	beq.n	80003c0 <__udivmoddi4+0x80>
 80003ec:	07fb      	lsls	r3, r7, #31
 80003ee:	4698      	mov	r8, r3
 80003f0:	4641      	mov	r1, r8
 80003f2:	0872      	lsrs	r2, r6, #1
 80003f4:	430a      	orrs	r2, r1
 80003f6:	087b      	lsrs	r3, r7, #1
 80003f8:	4666      	mov	r6, ip
 80003fa:	e00e      	b.n	800041a <__udivmoddi4+0xda>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	d101      	bne.n	8000404 <__udivmoddi4+0xc4>
 8000400:	42a2      	cmp	r2, r4
 8000402:	d80c      	bhi.n	800041e <__udivmoddi4+0xde>
 8000404:	1aa4      	subs	r4, r4, r2
 8000406:	419d      	sbcs	r5, r3
 8000408:	2001      	movs	r0, #1
 800040a:	1924      	adds	r4, r4, r4
 800040c:	416d      	adcs	r5, r5
 800040e:	2100      	movs	r1, #0
 8000410:	3e01      	subs	r6, #1
 8000412:	1824      	adds	r4, r4, r0
 8000414:	414d      	adcs	r5, r1
 8000416:	2e00      	cmp	r6, #0
 8000418:	d006      	beq.n	8000428 <__udivmoddi4+0xe8>
 800041a:	42ab      	cmp	r3, r5
 800041c:	d9ee      	bls.n	80003fc <__udivmoddi4+0xbc>
 800041e:	3e01      	subs	r6, #1
 8000420:	1924      	adds	r4, r4, r4
 8000422:	416d      	adcs	r5, r5
 8000424:	2e00      	cmp	r6, #0
 8000426:	d1f8      	bne.n	800041a <__udivmoddi4+0xda>
 8000428:	9800      	ldr	r0, [sp, #0]
 800042a:	9901      	ldr	r1, [sp, #4]
 800042c:	4653      	mov	r3, sl
 800042e:	1900      	adds	r0, r0, r4
 8000430:	4169      	adcs	r1, r5
 8000432:	2b00      	cmp	r3, #0
 8000434:	db23      	blt.n	800047e <__udivmoddi4+0x13e>
 8000436:	002b      	movs	r3, r5
 8000438:	4652      	mov	r2, sl
 800043a:	40d3      	lsrs	r3, r2
 800043c:	002a      	movs	r2, r5
 800043e:	4664      	mov	r4, ip
 8000440:	40e2      	lsrs	r2, r4
 8000442:	001c      	movs	r4, r3
 8000444:	4653      	mov	r3, sl
 8000446:	0015      	movs	r5, r2
 8000448:	2b00      	cmp	r3, #0
 800044a:	db2d      	blt.n	80004a8 <__udivmoddi4+0x168>
 800044c:	0026      	movs	r6, r4
 800044e:	4657      	mov	r7, sl
 8000450:	40be      	lsls	r6, r7
 8000452:	0033      	movs	r3, r6
 8000454:	0026      	movs	r6, r4
 8000456:	4667      	mov	r7, ip
 8000458:	40be      	lsls	r6, r7
 800045a:	0032      	movs	r2, r6
 800045c:	1a80      	subs	r0, r0, r2
 800045e:	4199      	sbcs	r1, r3
 8000460:	9000      	str	r0, [sp, #0]
 8000462:	9101      	str	r1, [sp, #4]
 8000464:	e7ac      	b.n	80003c0 <__udivmoddi4+0x80>
 8000466:	4662      	mov	r2, ip
 8000468:	2320      	movs	r3, #32
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	464a      	mov	r2, r9
 800046e:	40da      	lsrs	r2, r3
 8000470:	4661      	mov	r1, ip
 8000472:	0013      	movs	r3, r2
 8000474:	4642      	mov	r2, r8
 8000476:	408a      	lsls	r2, r1
 8000478:	0017      	movs	r7, r2
 800047a:	431f      	orrs	r7, r3
 800047c:	e780      	b.n	8000380 <__udivmoddi4+0x40>
 800047e:	4662      	mov	r2, ip
 8000480:	2320      	movs	r3, #32
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	002a      	movs	r2, r5
 8000486:	4666      	mov	r6, ip
 8000488:	409a      	lsls	r2, r3
 800048a:	0023      	movs	r3, r4
 800048c:	40f3      	lsrs	r3, r6
 800048e:	4313      	orrs	r3, r2
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0xfc>
 8000492:	4662      	mov	r2, ip
 8000494:	2320      	movs	r3, #32
 8000496:	2100      	movs	r1, #0
 8000498:	1a9b      	subs	r3, r3, r2
 800049a:	2200      	movs	r2, #0
 800049c:	9100      	str	r1, [sp, #0]
 800049e:	9201      	str	r2, [sp, #4]
 80004a0:	2201      	movs	r2, #1
 80004a2:	40da      	lsrs	r2, r3
 80004a4:	9201      	str	r2, [sp, #4]
 80004a6:	e780      	b.n	80003aa <__udivmoddi4+0x6a>
 80004a8:	2320      	movs	r3, #32
 80004aa:	4662      	mov	r2, ip
 80004ac:	0026      	movs	r6, r4
 80004ae:	1a9b      	subs	r3, r3, r2
 80004b0:	40de      	lsrs	r6, r3
 80004b2:	002f      	movs	r7, r5
 80004b4:	46b0      	mov	r8, r6
 80004b6:	4666      	mov	r6, ip
 80004b8:	40b7      	lsls	r7, r6
 80004ba:	4646      	mov	r6, r8
 80004bc:	003b      	movs	r3, r7
 80004be:	4333      	orrs	r3, r6
 80004c0:	e7c8      	b.n	8000454 <__udivmoddi4+0x114>
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_dadd>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	464f      	mov	r7, r9
 80004c8:	4646      	mov	r6, r8
 80004ca:	46d6      	mov	lr, sl
 80004cc:	000c      	movs	r4, r1
 80004ce:	0309      	lsls	r1, r1, #12
 80004d0:	b5c0      	push	{r6, r7, lr}
 80004d2:	0a49      	lsrs	r1, r1, #9
 80004d4:	0f47      	lsrs	r7, r0, #29
 80004d6:	005e      	lsls	r6, r3, #1
 80004d8:	4339      	orrs	r1, r7
 80004da:	031f      	lsls	r7, r3, #12
 80004dc:	0fdb      	lsrs	r3, r3, #31
 80004de:	469c      	mov	ip, r3
 80004e0:	0065      	lsls	r5, r4, #1
 80004e2:	0a7b      	lsrs	r3, r7, #9
 80004e4:	0f57      	lsrs	r7, r2, #29
 80004e6:	431f      	orrs	r7, r3
 80004e8:	0d6d      	lsrs	r5, r5, #21
 80004ea:	0fe4      	lsrs	r4, r4, #31
 80004ec:	0d76      	lsrs	r6, r6, #21
 80004ee:	46a1      	mov	r9, r4
 80004f0:	00c0      	lsls	r0, r0, #3
 80004f2:	46b8      	mov	r8, r7
 80004f4:	00d2      	lsls	r2, r2, #3
 80004f6:	1bab      	subs	r3, r5, r6
 80004f8:	4564      	cmp	r4, ip
 80004fa:	d07b      	beq.n	80005f4 <__aeabi_dadd+0x130>
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	dd5f      	ble.n	80005c0 <__aeabi_dadd+0xfc>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d000      	beq.n	8000506 <__aeabi_dadd+0x42>
 8000504:	e0a4      	b.n	8000650 <__aeabi_dadd+0x18c>
 8000506:	003e      	movs	r6, r7
 8000508:	4316      	orrs	r6, r2
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x4a>
 800050c:	e112      	b.n	8000734 <__aeabi_dadd+0x270>
 800050e:	1e5e      	subs	r6, r3, #1
 8000510:	2e00      	cmp	r6, #0
 8000512:	d000      	beq.n	8000516 <__aeabi_dadd+0x52>
 8000514:	e19e      	b.n	8000854 <__aeabi_dadd+0x390>
 8000516:	1a87      	subs	r7, r0, r2
 8000518:	4643      	mov	r3, r8
 800051a:	42b8      	cmp	r0, r7
 800051c:	4180      	sbcs	r0, r0
 800051e:	2501      	movs	r5, #1
 8000520:	1ac9      	subs	r1, r1, r3
 8000522:	4240      	negs	r0, r0
 8000524:	1a09      	subs	r1, r1, r0
 8000526:	020b      	lsls	r3, r1, #8
 8000528:	d400      	bmi.n	800052c <__aeabi_dadd+0x68>
 800052a:	e131      	b.n	8000790 <__aeabi_dadd+0x2cc>
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	0a4e      	lsrs	r6, r1, #9
 8000530:	2e00      	cmp	r6, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_dadd+0x72>
 8000534:	e16e      	b.n	8000814 <__aeabi_dadd+0x350>
 8000536:	0030      	movs	r0, r6
 8000538:	f001 fcfa 	bl	8001f30 <__clzsi2>
 800053c:	0003      	movs	r3, r0
 800053e:	3b08      	subs	r3, #8
 8000540:	2b1f      	cmp	r3, #31
 8000542:	dd00      	ble.n	8000546 <__aeabi_dadd+0x82>
 8000544:	e161      	b.n	800080a <__aeabi_dadd+0x346>
 8000546:	2220      	movs	r2, #32
 8000548:	0039      	movs	r1, r7
 800054a:	1ad2      	subs	r2, r2, r3
 800054c:	409e      	lsls	r6, r3
 800054e:	40d1      	lsrs	r1, r2
 8000550:	409f      	lsls	r7, r3
 8000552:	430e      	orrs	r6, r1
 8000554:	429d      	cmp	r5, r3
 8000556:	dd00      	ble.n	800055a <__aeabi_dadd+0x96>
 8000558:	e151      	b.n	80007fe <__aeabi_dadd+0x33a>
 800055a:	1b5d      	subs	r5, r3, r5
 800055c:	1c6b      	adds	r3, r5, #1
 800055e:	2b1f      	cmp	r3, #31
 8000560:	dd00      	ble.n	8000564 <__aeabi_dadd+0xa0>
 8000562:	e17c      	b.n	800085e <__aeabi_dadd+0x39a>
 8000564:	2120      	movs	r1, #32
 8000566:	1ac9      	subs	r1, r1, r3
 8000568:	003d      	movs	r5, r7
 800056a:	0030      	movs	r0, r6
 800056c:	408f      	lsls	r7, r1
 800056e:	4088      	lsls	r0, r1
 8000570:	40dd      	lsrs	r5, r3
 8000572:	1e79      	subs	r1, r7, #1
 8000574:	418f      	sbcs	r7, r1
 8000576:	0031      	movs	r1, r6
 8000578:	2207      	movs	r2, #7
 800057a:	4328      	orrs	r0, r5
 800057c:	40d9      	lsrs	r1, r3
 800057e:	2500      	movs	r5, #0
 8000580:	4307      	orrs	r7, r0
 8000582:	403a      	ands	r2, r7
 8000584:	2a00      	cmp	r2, #0
 8000586:	d009      	beq.n	800059c <__aeabi_dadd+0xd8>
 8000588:	230f      	movs	r3, #15
 800058a:	403b      	ands	r3, r7
 800058c:	2b04      	cmp	r3, #4
 800058e:	d005      	beq.n	800059c <__aeabi_dadd+0xd8>
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	42bb      	cmp	r3, r7
 8000594:	41bf      	sbcs	r7, r7
 8000596:	427f      	negs	r7, r7
 8000598:	19c9      	adds	r1, r1, r7
 800059a:	001f      	movs	r7, r3
 800059c:	020b      	lsls	r3, r1, #8
 800059e:	d400      	bmi.n	80005a2 <__aeabi_dadd+0xde>
 80005a0:	e226      	b.n	80009f0 <__aeabi_dadd+0x52c>
 80005a2:	1c6a      	adds	r2, r5, #1
 80005a4:	4bc6      	ldr	r3, [pc, #792]	; (80008c0 <__aeabi_dadd+0x3fc>)
 80005a6:	0555      	lsls	r5, r2, #21
 80005a8:	0d6d      	lsrs	r5, r5, #21
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d100      	bne.n	80005b0 <__aeabi_dadd+0xec>
 80005ae:	e106      	b.n	80007be <__aeabi_dadd+0x2fa>
 80005b0:	4ac4      	ldr	r2, [pc, #784]	; (80008c4 <__aeabi_dadd+0x400>)
 80005b2:	08ff      	lsrs	r7, r7, #3
 80005b4:	400a      	ands	r2, r1
 80005b6:	0753      	lsls	r3, r2, #29
 80005b8:	0252      	lsls	r2, r2, #9
 80005ba:	433b      	orrs	r3, r7
 80005bc:	0b12      	lsrs	r2, r2, #12
 80005be:	e08e      	b.n	80006de <__aeabi_dadd+0x21a>
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d000      	beq.n	80005c6 <__aeabi_dadd+0x102>
 80005c4:	e0b8      	b.n	8000738 <__aeabi_dadd+0x274>
 80005c6:	1c6b      	adds	r3, r5, #1
 80005c8:	055b      	lsls	r3, r3, #21
 80005ca:	0d5b      	lsrs	r3, r3, #21
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x10e>
 80005d0:	e130      	b.n	8000834 <__aeabi_dadd+0x370>
 80005d2:	1a87      	subs	r7, r0, r2
 80005d4:	4643      	mov	r3, r8
 80005d6:	42b8      	cmp	r0, r7
 80005d8:	41b6      	sbcs	r6, r6
 80005da:	1acb      	subs	r3, r1, r3
 80005dc:	4276      	negs	r6, r6
 80005de:	1b9e      	subs	r6, r3, r6
 80005e0:	0233      	lsls	r3, r6, #8
 80005e2:	d500      	bpl.n	80005e6 <__aeabi_dadd+0x122>
 80005e4:	e14c      	b.n	8000880 <__aeabi_dadd+0x3bc>
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	d1a1      	bne.n	8000530 <__aeabi_dadd+0x6c>
 80005ec:	2200      	movs	r2, #0
 80005ee:	2400      	movs	r4, #0
 80005f0:	2500      	movs	r5, #0
 80005f2:	e070      	b.n	80006d6 <__aeabi_dadd+0x212>
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dc00      	bgt.n	80005fa <__aeabi_dadd+0x136>
 80005f8:	e0e5      	b.n	80007c6 <__aeabi_dadd+0x302>
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x13c>
 80005fe:	e083      	b.n	8000708 <__aeabi_dadd+0x244>
 8000600:	4eaf      	ldr	r6, [pc, #700]	; (80008c0 <__aeabi_dadd+0x3fc>)
 8000602:	42b5      	cmp	r5, r6
 8000604:	d060      	beq.n	80006c8 <__aeabi_dadd+0x204>
 8000606:	2680      	movs	r6, #128	; 0x80
 8000608:	0436      	lsls	r6, r6, #16
 800060a:	4337      	orrs	r7, r6
 800060c:	46b8      	mov	r8, r7
 800060e:	2b38      	cmp	r3, #56	; 0x38
 8000610:	dc00      	bgt.n	8000614 <__aeabi_dadd+0x150>
 8000612:	e13e      	b.n	8000892 <__aeabi_dadd+0x3ce>
 8000614:	4643      	mov	r3, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	001f      	movs	r7, r3
 800061a:	1e7a      	subs	r2, r7, #1
 800061c:	4197      	sbcs	r7, r2
 800061e:	183f      	adds	r7, r7, r0
 8000620:	4287      	cmp	r7, r0
 8000622:	4180      	sbcs	r0, r0
 8000624:	4240      	negs	r0, r0
 8000626:	1809      	adds	r1, r1, r0
 8000628:	020b      	lsls	r3, r1, #8
 800062a:	d400      	bmi.n	800062e <__aeabi_dadd+0x16a>
 800062c:	e0b0      	b.n	8000790 <__aeabi_dadd+0x2cc>
 800062e:	4ba4      	ldr	r3, [pc, #656]	; (80008c0 <__aeabi_dadd+0x3fc>)
 8000630:	3501      	adds	r5, #1
 8000632:	429d      	cmp	r5, r3
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0x174>
 8000636:	e0c3      	b.n	80007c0 <__aeabi_dadd+0x2fc>
 8000638:	4aa2      	ldr	r2, [pc, #648]	; (80008c4 <__aeabi_dadd+0x400>)
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	400a      	ands	r2, r1
 800063e:	2101      	movs	r1, #1
 8000640:	400f      	ands	r7, r1
 8000642:	431f      	orrs	r7, r3
 8000644:	0851      	lsrs	r1, r2, #1
 8000646:	07d3      	lsls	r3, r2, #31
 8000648:	2207      	movs	r2, #7
 800064a:	431f      	orrs	r7, r3
 800064c:	403a      	ands	r2, r7
 800064e:	e799      	b.n	8000584 <__aeabi_dadd+0xc0>
 8000650:	4e9b      	ldr	r6, [pc, #620]	; (80008c0 <__aeabi_dadd+0x3fc>)
 8000652:	42b5      	cmp	r5, r6
 8000654:	d038      	beq.n	80006c8 <__aeabi_dadd+0x204>
 8000656:	2680      	movs	r6, #128	; 0x80
 8000658:	0436      	lsls	r6, r6, #16
 800065a:	4337      	orrs	r7, r6
 800065c:	46b8      	mov	r8, r7
 800065e:	2b38      	cmp	r3, #56	; 0x38
 8000660:	dd00      	ble.n	8000664 <__aeabi_dadd+0x1a0>
 8000662:	e0dc      	b.n	800081e <__aeabi_dadd+0x35a>
 8000664:	2b1f      	cmp	r3, #31
 8000666:	dc00      	bgt.n	800066a <__aeabi_dadd+0x1a6>
 8000668:	e130      	b.n	80008cc <__aeabi_dadd+0x408>
 800066a:	001e      	movs	r6, r3
 800066c:	4647      	mov	r7, r8
 800066e:	3e20      	subs	r6, #32
 8000670:	40f7      	lsrs	r7, r6
 8000672:	46bc      	mov	ip, r7
 8000674:	2b20      	cmp	r3, #32
 8000676:	d004      	beq.n	8000682 <__aeabi_dadd+0x1be>
 8000678:	2640      	movs	r6, #64	; 0x40
 800067a:	1af3      	subs	r3, r6, r3
 800067c:	4646      	mov	r6, r8
 800067e:	409e      	lsls	r6, r3
 8000680:	4332      	orrs	r2, r6
 8000682:	0017      	movs	r7, r2
 8000684:	4663      	mov	r3, ip
 8000686:	1e7a      	subs	r2, r7, #1
 8000688:	4197      	sbcs	r7, r2
 800068a:	431f      	orrs	r7, r3
 800068c:	e0cc      	b.n	8000828 <__aeabi_dadd+0x364>
 800068e:	2b00      	cmp	r3, #0
 8000690:	d100      	bne.n	8000694 <__aeabi_dadd+0x1d0>
 8000692:	e204      	b.n	8000a9e <__aeabi_dadd+0x5da>
 8000694:	4643      	mov	r3, r8
 8000696:	4313      	orrs	r3, r2
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x1d8>
 800069a:	e159      	b.n	8000950 <__aeabi_dadd+0x48c>
 800069c:	074b      	lsls	r3, r1, #29
 800069e:	08c0      	lsrs	r0, r0, #3
 80006a0:	4318      	orrs	r0, r3
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	08c9      	lsrs	r1, r1, #3
 80006a6:	031b      	lsls	r3, r3, #12
 80006a8:	4219      	tst	r1, r3
 80006aa:	d008      	beq.n	80006be <__aeabi_dadd+0x1fa>
 80006ac:	4645      	mov	r5, r8
 80006ae:	08ed      	lsrs	r5, r5, #3
 80006b0:	421d      	tst	r5, r3
 80006b2:	d104      	bne.n	80006be <__aeabi_dadd+0x1fa>
 80006b4:	4643      	mov	r3, r8
 80006b6:	08d0      	lsrs	r0, r2, #3
 80006b8:	0759      	lsls	r1, r3, #29
 80006ba:	4308      	orrs	r0, r1
 80006bc:	0029      	movs	r1, r5
 80006be:	0f42      	lsrs	r2, r0, #29
 80006c0:	00c9      	lsls	r1, r1, #3
 80006c2:	4d7f      	ldr	r5, [pc, #508]	; (80008c0 <__aeabi_dadd+0x3fc>)
 80006c4:	4311      	orrs	r1, r2
 80006c6:	00c0      	lsls	r0, r0, #3
 80006c8:	074b      	lsls	r3, r1, #29
 80006ca:	08ca      	lsrs	r2, r1, #3
 80006cc:	497c      	ldr	r1, [pc, #496]	; (80008c0 <__aeabi_dadd+0x3fc>)
 80006ce:	08c0      	lsrs	r0, r0, #3
 80006d0:	4303      	orrs	r3, r0
 80006d2:	428d      	cmp	r5, r1
 80006d4:	d068      	beq.n	80007a8 <__aeabi_dadd+0x2e4>
 80006d6:	0312      	lsls	r2, r2, #12
 80006d8:	056d      	lsls	r5, r5, #21
 80006da:	0b12      	lsrs	r2, r2, #12
 80006dc:	0d6d      	lsrs	r5, r5, #21
 80006de:	2100      	movs	r1, #0
 80006e0:	0312      	lsls	r2, r2, #12
 80006e2:	0018      	movs	r0, r3
 80006e4:	0b13      	lsrs	r3, r2, #12
 80006e6:	0d0a      	lsrs	r2, r1, #20
 80006e8:	0512      	lsls	r2, r2, #20
 80006ea:	431a      	orrs	r2, r3
 80006ec:	4b76      	ldr	r3, [pc, #472]	; (80008c8 <__aeabi_dadd+0x404>)
 80006ee:	052d      	lsls	r5, r5, #20
 80006f0:	4013      	ands	r3, r2
 80006f2:	432b      	orrs	r3, r5
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	07e4      	lsls	r4, r4, #31
 80006f8:	085b      	lsrs	r3, r3, #1
 80006fa:	4323      	orrs	r3, r4
 80006fc:	0019      	movs	r1, r3
 80006fe:	bc1c      	pop	{r2, r3, r4}
 8000700:	4690      	mov	r8, r2
 8000702:	4699      	mov	r9, r3
 8000704:	46a2      	mov	sl, r4
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000708:	003e      	movs	r6, r7
 800070a:	4316      	orrs	r6, r2
 800070c:	d012      	beq.n	8000734 <__aeabi_dadd+0x270>
 800070e:	1e5e      	subs	r6, r3, #1
 8000710:	2e00      	cmp	r6, #0
 8000712:	d000      	beq.n	8000716 <__aeabi_dadd+0x252>
 8000714:	e100      	b.n	8000918 <__aeabi_dadd+0x454>
 8000716:	1887      	adds	r7, r0, r2
 8000718:	4287      	cmp	r7, r0
 800071a:	4180      	sbcs	r0, r0
 800071c:	4441      	add	r1, r8
 800071e:	4240      	negs	r0, r0
 8000720:	1809      	adds	r1, r1, r0
 8000722:	2501      	movs	r5, #1
 8000724:	020b      	lsls	r3, r1, #8
 8000726:	d533      	bpl.n	8000790 <__aeabi_dadd+0x2cc>
 8000728:	2502      	movs	r5, #2
 800072a:	e785      	b.n	8000638 <__aeabi_dadd+0x174>
 800072c:	4664      	mov	r4, ip
 800072e:	0033      	movs	r3, r6
 8000730:	4641      	mov	r1, r8
 8000732:	0010      	movs	r0, r2
 8000734:	001d      	movs	r5, r3
 8000736:	e7c7      	b.n	80006c8 <__aeabi_dadd+0x204>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d000      	beq.n	800073e <__aeabi_dadd+0x27a>
 800073c:	e0da      	b.n	80008f4 <__aeabi_dadd+0x430>
 800073e:	000c      	movs	r4, r1
 8000740:	4304      	orrs	r4, r0
 8000742:	d0f3      	beq.n	800072c <__aeabi_dadd+0x268>
 8000744:	1c5c      	adds	r4, r3, #1
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x286>
 8000748:	e19f      	b.n	8000a8a <__aeabi_dadd+0x5c6>
 800074a:	4c5d      	ldr	r4, [pc, #372]	; (80008c0 <__aeabi_dadd+0x3fc>)
 800074c:	42a6      	cmp	r6, r4
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x28e>
 8000750:	e12f      	b.n	80009b2 <__aeabi_dadd+0x4ee>
 8000752:	43db      	mvns	r3, r3
 8000754:	2b38      	cmp	r3, #56	; 0x38
 8000756:	dd00      	ble.n	800075a <__aeabi_dadd+0x296>
 8000758:	e166      	b.n	8000a28 <__aeabi_dadd+0x564>
 800075a:	2b1f      	cmp	r3, #31
 800075c:	dd00      	ble.n	8000760 <__aeabi_dadd+0x29c>
 800075e:	e183      	b.n	8000a68 <__aeabi_dadd+0x5a4>
 8000760:	2420      	movs	r4, #32
 8000762:	0005      	movs	r5, r0
 8000764:	1ae4      	subs	r4, r4, r3
 8000766:	000f      	movs	r7, r1
 8000768:	40dd      	lsrs	r5, r3
 800076a:	40d9      	lsrs	r1, r3
 800076c:	40a0      	lsls	r0, r4
 800076e:	4643      	mov	r3, r8
 8000770:	40a7      	lsls	r7, r4
 8000772:	1a5b      	subs	r3, r3, r1
 8000774:	1e44      	subs	r4, r0, #1
 8000776:	41a0      	sbcs	r0, r4
 8000778:	4698      	mov	r8, r3
 800077a:	432f      	orrs	r7, r5
 800077c:	4338      	orrs	r0, r7
 800077e:	1a17      	subs	r7, r2, r0
 8000780:	42ba      	cmp	r2, r7
 8000782:	4192      	sbcs	r2, r2
 8000784:	4643      	mov	r3, r8
 8000786:	4252      	negs	r2, r2
 8000788:	1a99      	subs	r1, r3, r2
 800078a:	4664      	mov	r4, ip
 800078c:	0035      	movs	r5, r6
 800078e:	e6ca      	b.n	8000526 <__aeabi_dadd+0x62>
 8000790:	2207      	movs	r2, #7
 8000792:	403a      	ands	r2, r7
 8000794:	2a00      	cmp	r2, #0
 8000796:	d000      	beq.n	800079a <__aeabi_dadd+0x2d6>
 8000798:	e6f6      	b.n	8000588 <__aeabi_dadd+0xc4>
 800079a:	074b      	lsls	r3, r1, #29
 800079c:	08ca      	lsrs	r2, r1, #3
 800079e:	4948      	ldr	r1, [pc, #288]	; (80008c0 <__aeabi_dadd+0x3fc>)
 80007a0:	08ff      	lsrs	r7, r7, #3
 80007a2:	433b      	orrs	r3, r7
 80007a4:	428d      	cmp	r5, r1
 80007a6:	d196      	bne.n	80006d6 <__aeabi_dadd+0x212>
 80007a8:	0019      	movs	r1, r3
 80007aa:	4311      	orrs	r1, r2
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x2ec>
 80007ae:	e19e      	b.n	8000aee <__aeabi_dadd+0x62a>
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0309      	lsls	r1, r1, #12
 80007b4:	430a      	orrs	r2, r1
 80007b6:	0312      	lsls	r2, r2, #12
 80007b8:	0b12      	lsrs	r2, r2, #12
 80007ba:	4d41      	ldr	r5, [pc, #260]	; (80008c0 <__aeabi_dadd+0x3fc>)
 80007bc:	e78f      	b.n	80006de <__aeabi_dadd+0x21a>
 80007be:	0015      	movs	r5, r2
 80007c0:	2200      	movs	r2, #0
 80007c2:	2300      	movs	r3, #0
 80007c4:	e78b      	b.n	80006de <__aeabi_dadd+0x21a>
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_dadd+0x308>
 80007ca:	e0c7      	b.n	800095c <__aeabi_dadd+0x498>
 80007cc:	1c6b      	adds	r3, r5, #1
 80007ce:	055f      	lsls	r7, r3, #21
 80007d0:	0d7f      	lsrs	r7, r7, #21
 80007d2:	2f01      	cmp	r7, #1
 80007d4:	dc00      	bgt.n	80007d8 <__aeabi_dadd+0x314>
 80007d6:	e0f1      	b.n	80009bc <__aeabi_dadd+0x4f8>
 80007d8:	4d39      	ldr	r5, [pc, #228]	; (80008c0 <__aeabi_dadd+0x3fc>)
 80007da:	42ab      	cmp	r3, r5
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dadd+0x31c>
 80007de:	e0b9      	b.n	8000954 <__aeabi_dadd+0x490>
 80007e0:	1885      	adds	r5, r0, r2
 80007e2:	000a      	movs	r2, r1
 80007e4:	4285      	cmp	r5, r0
 80007e6:	4189      	sbcs	r1, r1
 80007e8:	4442      	add	r2, r8
 80007ea:	4249      	negs	r1, r1
 80007ec:	1851      	adds	r1, r2, r1
 80007ee:	2207      	movs	r2, #7
 80007f0:	07cf      	lsls	r7, r1, #31
 80007f2:	086d      	lsrs	r5, r5, #1
 80007f4:	432f      	orrs	r7, r5
 80007f6:	0849      	lsrs	r1, r1, #1
 80007f8:	403a      	ands	r2, r7
 80007fa:	001d      	movs	r5, r3
 80007fc:	e6c2      	b.n	8000584 <__aeabi_dadd+0xc0>
 80007fe:	2207      	movs	r2, #7
 8000800:	4930      	ldr	r1, [pc, #192]	; (80008c4 <__aeabi_dadd+0x400>)
 8000802:	1aed      	subs	r5, r5, r3
 8000804:	4031      	ands	r1, r6
 8000806:	403a      	ands	r2, r7
 8000808:	e6bc      	b.n	8000584 <__aeabi_dadd+0xc0>
 800080a:	003e      	movs	r6, r7
 800080c:	3828      	subs	r0, #40	; 0x28
 800080e:	4086      	lsls	r6, r0
 8000810:	2700      	movs	r7, #0
 8000812:	e69f      	b.n	8000554 <__aeabi_dadd+0x90>
 8000814:	0038      	movs	r0, r7
 8000816:	f001 fb8b 	bl	8001f30 <__clzsi2>
 800081a:	3020      	adds	r0, #32
 800081c:	e68e      	b.n	800053c <__aeabi_dadd+0x78>
 800081e:	4643      	mov	r3, r8
 8000820:	4313      	orrs	r3, r2
 8000822:	001f      	movs	r7, r3
 8000824:	1e7a      	subs	r2, r7, #1
 8000826:	4197      	sbcs	r7, r2
 8000828:	1bc7      	subs	r7, r0, r7
 800082a:	42b8      	cmp	r0, r7
 800082c:	4180      	sbcs	r0, r0
 800082e:	4240      	negs	r0, r0
 8000830:	1a09      	subs	r1, r1, r0
 8000832:	e678      	b.n	8000526 <__aeabi_dadd+0x62>
 8000834:	000e      	movs	r6, r1
 8000836:	003b      	movs	r3, r7
 8000838:	4306      	orrs	r6, r0
 800083a:	4313      	orrs	r3, r2
 800083c:	2d00      	cmp	r5, #0
 800083e:	d161      	bne.n	8000904 <__aeabi_dadd+0x440>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d000      	beq.n	8000846 <__aeabi_dadd+0x382>
 8000844:	e0f4      	b.n	8000a30 <__aeabi_dadd+0x56c>
 8000846:	2b00      	cmp	r3, #0
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x388>
 800084a:	e11b      	b.n	8000a84 <__aeabi_dadd+0x5c0>
 800084c:	4664      	mov	r4, ip
 800084e:	0039      	movs	r1, r7
 8000850:	0010      	movs	r0, r2
 8000852:	e739      	b.n	80006c8 <__aeabi_dadd+0x204>
 8000854:	4f1a      	ldr	r7, [pc, #104]	; (80008c0 <__aeabi_dadd+0x3fc>)
 8000856:	42bb      	cmp	r3, r7
 8000858:	d07a      	beq.n	8000950 <__aeabi_dadd+0x48c>
 800085a:	0033      	movs	r3, r6
 800085c:	e6ff      	b.n	800065e <__aeabi_dadd+0x19a>
 800085e:	0030      	movs	r0, r6
 8000860:	3d1f      	subs	r5, #31
 8000862:	40e8      	lsrs	r0, r5
 8000864:	2b20      	cmp	r3, #32
 8000866:	d003      	beq.n	8000870 <__aeabi_dadd+0x3ac>
 8000868:	2140      	movs	r1, #64	; 0x40
 800086a:	1acb      	subs	r3, r1, r3
 800086c:	409e      	lsls	r6, r3
 800086e:	4337      	orrs	r7, r6
 8000870:	1e7b      	subs	r3, r7, #1
 8000872:	419f      	sbcs	r7, r3
 8000874:	2207      	movs	r2, #7
 8000876:	4307      	orrs	r7, r0
 8000878:	403a      	ands	r2, r7
 800087a:	2100      	movs	r1, #0
 800087c:	2500      	movs	r5, #0
 800087e:	e789      	b.n	8000794 <__aeabi_dadd+0x2d0>
 8000880:	1a17      	subs	r7, r2, r0
 8000882:	4643      	mov	r3, r8
 8000884:	42ba      	cmp	r2, r7
 8000886:	41b6      	sbcs	r6, r6
 8000888:	1a59      	subs	r1, r3, r1
 800088a:	4276      	negs	r6, r6
 800088c:	1b8e      	subs	r6, r1, r6
 800088e:	4664      	mov	r4, ip
 8000890:	e64e      	b.n	8000530 <__aeabi_dadd+0x6c>
 8000892:	2b1f      	cmp	r3, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0x3d4>
 8000896:	e0ad      	b.n	80009f4 <__aeabi_dadd+0x530>
 8000898:	2620      	movs	r6, #32
 800089a:	4647      	mov	r7, r8
 800089c:	1af6      	subs	r6, r6, r3
 800089e:	40b7      	lsls	r7, r6
 80008a0:	46b9      	mov	r9, r7
 80008a2:	0017      	movs	r7, r2
 80008a4:	46b2      	mov	sl, r6
 80008a6:	40df      	lsrs	r7, r3
 80008a8:	464e      	mov	r6, r9
 80008aa:	433e      	orrs	r6, r7
 80008ac:	0037      	movs	r7, r6
 80008ae:	4656      	mov	r6, sl
 80008b0:	40b2      	lsls	r2, r6
 80008b2:	1e56      	subs	r6, r2, #1
 80008b4:	41b2      	sbcs	r2, r6
 80008b6:	4317      	orrs	r7, r2
 80008b8:	4642      	mov	r2, r8
 80008ba:	40da      	lsrs	r2, r3
 80008bc:	1889      	adds	r1, r1, r2
 80008be:	e6ae      	b.n	800061e <__aeabi_dadd+0x15a>
 80008c0:	000007ff 	.word	0x000007ff
 80008c4:	ff7fffff 	.word	0xff7fffff
 80008c8:	800fffff 	.word	0x800fffff
 80008cc:	2620      	movs	r6, #32
 80008ce:	4647      	mov	r7, r8
 80008d0:	1af6      	subs	r6, r6, r3
 80008d2:	40b7      	lsls	r7, r6
 80008d4:	46b9      	mov	r9, r7
 80008d6:	0017      	movs	r7, r2
 80008d8:	46b2      	mov	sl, r6
 80008da:	40df      	lsrs	r7, r3
 80008dc:	464e      	mov	r6, r9
 80008de:	433e      	orrs	r6, r7
 80008e0:	0037      	movs	r7, r6
 80008e2:	4656      	mov	r6, sl
 80008e4:	40b2      	lsls	r2, r6
 80008e6:	1e56      	subs	r6, r2, #1
 80008e8:	41b2      	sbcs	r2, r6
 80008ea:	4317      	orrs	r7, r2
 80008ec:	4642      	mov	r2, r8
 80008ee:	40da      	lsrs	r2, r3
 80008f0:	1a89      	subs	r1, r1, r2
 80008f2:	e799      	b.n	8000828 <__aeabi_dadd+0x364>
 80008f4:	4c7f      	ldr	r4, [pc, #508]	; (8000af4 <__aeabi_dadd+0x630>)
 80008f6:	42a6      	cmp	r6, r4
 80008f8:	d05b      	beq.n	80009b2 <__aeabi_dadd+0x4ee>
 80008fa:	2480      	movs	r4, #128	; 0x80
 80008fc:	0424      	lsls	r4, r4, #16
 80008fe:	425b      	negs	r3, r3
 8000900:	4321      	orrs	r1, r4
 8000902:	e727      	b.n	8000754 <__aeabi_dadd+0x290>
 8000904:	2e00      	cmp	r6, #0
 8000906:	d10c      	bne.n	8000922 <__aeabi_dadd+0x45e>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x44a>
 800090c:	e0cb      	b.n	8000aa6 <__aeabi_dadd+0x5e2>
 800090e:	4664      	mov	r4, ip
 8000910:	0039      	movs	r1, r7
 8000912:	0010      	movs	r0, r2
 8000914:	4d77      	ldr	r5, [pc, #476]	; (8000af4 <__aeabi_dadd+0x630>)
 8000916:	e6d7      	b.n	80006c8 <__aeabi_dadd+0x204>
 8000918:	4f76      	ldr	r7, [pc, #472]	; (8000af4 <__aeabi_dadd+0x630>)
 800091a:	42bb      	cmp	r3, r7
 800091c:	d018      	beq.n	8000950 <__aeabi_dadd+0x48c>
 800091e:	0033      	movs	r3, r6
 8000920:	e675      	b.n	800060e <__aeabi_dadd+0x14a>
 8000922:	2b00      	cmp	r3, #0
 8000924:	d014      	beq.n	8000950 <__aeabi_dadd+0x48c>
 8000926:	074b      	lsls	r3, r1, #29
 8000928:	08c0      	lsrs	r0, r0, #3
 800092a:	4318      	orrs	r0, r3
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	08c9      	lsrs	r1, r1, #3
 8000930:	031b      	lsls	r3, r3, #12
 8000932:	4219      	tst	r1, r3
 8000934:	d007      	beq.n	8000946 <__aeabi_dadd+0x482>
 8000936:	08fc      	lsrs	r4, r7, #3
 8000938:	421c      	tst	r4, r3
 800093a:	d104      	bne.n	8000946 <__aeabi_dadd+0x482>
 800093c:	0779      	lsls	r1, r7, #29
 800093e:	08d0      	lsrs	r0, r2, #3
 8000940:	4308      	orrs	r0, r1
 8000942:	46e1      	mov	r9, ip
 8000944:	0021      	movs	r1, r4
 8000946:	464c      	mov	r4, r9
 8000948:	0f42      	lsrs	r2, r0, #29
 800094a:	00c9      	lsls	r1, r1, #3
 800094c:	4311      	orrs	r1, r2
 800094e:	00c0      	lsls	r0, r0, #3
 8000950:	4d68      	ldr	r5, [pc, #416]	; (8000af4 <__aeabi_dadd+0x630>)
 8000952:	e6b9      	b.n	80006c8 <__aeabi_dadd+0x204>
 8000954:	001d      	movs	r5, r3
 8000956:	2200      	movs	r2, #0
 8000958:	2300      	movs	r3, #0
 800095a:	e6c0      	b.n	80006de <__aeabi_dadd+0x21a>
 800095c:	2d00      	cmp	r5, #0
 800095e:	d15b      	bne.n	8000a18 <__aeabi_dadd+0x554>
 8000960:	000d      	movs	r5, r1
 8000962:	4305      	orrs	r5, r0
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x4a4>
 8000966:	e6e2      	b.n	800072e <__aeabi_dadd+0x26a>
 8000968:	1c5d      	adds	r5, r3, #1
 800096a:	d100      	bne.n	800096e <__aeabi_dadd+0x4aa>
 800096c:	e0b0      	b.n	8000ad0 <__aeabi_dadd+0x60c>
 800096e:	4d61      	ldr	r5, [pc, #388]	; (8000af4 <__aeabi_dadd+0x630>)
 8000970:	42ae      	cmp	r6, r5
 8000972:	d01f      	beq.n	80009b4 <__aeabi_dadd+0x4f0>
 8000974:	43db      	mvns	r3, r3
 8000976:	2b38      	cmp	r3, #56	; 0x38
 8000978:	dc71      	bgt.n	8000a5e <__aeabi_dadd+0x59a>
 800097a:	2b1f      	cmp	r3, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x4bc>
 800097e:	e096      	b.n	8000aae <__aeabi_dadd+0x5ea>
 8000980:	2520      	movs	r5, #32
 8000982:	000f      	movs	r7, r1
 8000984:	1aed      	subs	r5, r5, r3
 8000986:	40af      	lsls	r7, r5
 8000988:	46b9      	mov	r9, r7
 800098a:	0007      	movs	r7, r0
 800098c:	46aa      	mov	sl, r5
 800098e:	40df      	lsrs	r7, r3
 8000990:	464d      	mov	r5, r9
 8000992:	433d      	orrs	r5, r7
 8000994:	002f      	movs	r7, r5
 8000996:	4655      	mov	r5, sl
 8000998:	40a8      	lsls	r0, r5
 800099a:	40d9      	lsrs	r1, r3
 800099c:	1e45      	subs	r5, r0, #1
 800099e:	41a8      	sbcs	r0, r5
 80009a0:	4488      	add	r8, r1
 80009a2:	4307      	orrs	r7, r0
 80009a4:	18bf      	adds	r7, r7, r2
 80009a6:	4297      	cmp	r7, r2
 80009a8:	4192      	sbcs	r2, r2
 80009aa:	4251      	negs	r1, r2
 80009ac:	4441      	add	r1, r8
 80009ae:	0035      	movs	r5, r6
 80009b0:	e63a      	b.n	8000628 <__aeabi_dadd+0x164>
 80009b2:	4664      	mov	r4, ip
 80009b4:	0035      	movs	r5, r6
 80009b6:	4641      	mov	r1, r8
 80009b8:	0010      	movs	r0, r2
 80009ba:	e685      	b.n	80006c8 <__aeabi_dadd+0x204>
 80009bc:	000b      	movs	r3, r1
 80009be:	4303      	orrs	r3, r0
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d000      	beq.n	80009c6 <__aeabi_dadd+0x502>
 80009c4:	e663      	b.n	800068e <__aeabi_dadd+0x1ca>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f5      	beq.n	80009b6 <__aeabi_dadd+0x4f2>
 80009ca:	4643      	mov	r3, r8
 80009cc:	4313      	orrs	r3, r2
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x50e>
 80009d0:	e67a      	b.n	80006c8 <__aeabi_dadd+0x204>
 80009d2:	1887      	adds	r7, r0, r2
 80009d4:	4287      	cmp	r7, r0
 80009d6:	4180      	sbcs	r0, r0
 80009d8:	2207      	movs	r2, #7
 80009da:	4441      	add	r1, r8
 80009dc:	4240      	negs	r0, r0
 80009de:	1809      	adds	r1, r1, r0
 80009e0:	403a      	ands	r2, r7
 80009e2:	020b      	lsls	r3, r1, #8
 80009e4:	d400      	bmi.n	80009e8 <__aeabi_dadd+0x524>
 80009e6:	e6d5      	b.n	8000794 <__aeabi_dadd+0x2d0>
 80009e8:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <__aeabi_dadd+0x634>)
 80009ea:	3501      	adds	r5, #1
 80009ec:	4019      	ands	r1, r3
 80009ee:	e5c9      	b.n	8000584 <__aeabi_dadd+0xc0>
 80009f0:	0038      	movs	r0, r7
 80009f2:	e669      	b.n	80006c8 <__aeabi_dadd+0x204>
 80009f4:	001e      	movs	r6, r3
 80009f6:	4647      	mov	r7, r8
 80009f8:	3e20      	subs	r6, #32
 80009fa:	40f7      	lsrs	r7, r6
 80009fc:	46bc      	mov	ip, r7
 80009fe:	2b20      	cmp	r3, #32
 8000a00:	d004      	beq.n	8000a0c <__aeabi_dadd+0x548>
 8000a02:	2640      	movs	r6, #64	; 0x40
 8000a04:	1af3      	subs	r3, r6, r3
 8000a06:	4646      	mov	r6, r8
 8000a08:	409e      	lsls	r6, r3
 8000a0a:	4332      	orrs	r2, r6
 8000a0c:	0017      	movs	r7, r2
 8000a0e:	4663      	mov	r3, ip
 8000a10:	1e7a      	subs	r2, r7, #1
 8000a12:	4197      	sbcs	r7, r2
 8000a14:	431f      	orrs	r7, r3
 8000a16:	e602      	b.n	800061e <__aeabi_dadd+0x15a>
 8000a18:	4d36      	ldr	r5, [pc, #216]	; (8000af4 <__aeabi_dadd+0x630>)
 8000a1a:	42ae      	cmp	r6, r5
 8000a1c:	d0ca      	beq.n	80009b4 <__aeabi_dadd+0x4f0>
 8000a1e:	2580      	movs	r5, #128	; 0x80
 8000a20:	042d      	lsls	r5, r5, #16
 8000a22:	425b      	negs	r3, r3
 8000a24:	4329      	orrs	r1, r5
 8000a26:	e7a6      	b.n	8000976 <__aeabi_dadd+0x4b2>
 8000a28:	4308      	orrs	r0, r1
 8000a2a:	1e41      	subs	r1, r0, #1
 8000a2c:	4188      	sbcs	r0, r1
 8000a2e:	e6a6      	b.n	800077e <__aeabi_dadd+0x2ba>
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x572>
 8000a34:	e648      	b.n	80006c8 <__aeabi_dadd+0x204>
 8000a36:	1a87      	subs	r7, r0, r2
 8000a38:	4643      	mov	r3, r8
 8000a3a:	42b8      	cmp	r0, r7
 8000a3c:	41b6      	sbcs	r6, r6
 8000a3e:	1acb      	subs	r3, r1, r3
 8000a40:	4276      	negs	r6, r6
 8000a42:	1b9e      	subs	r6, r3, r6
 8000a44:	0233      	lsls	r3, r6, #8
 8000a46:	d54b      	bpl.n	8000ae0 <__aeabi_dadd+0x61c>
 8000a48:	1a17      	subs	r7, r2, r0
 8000a4a:	4643      	mov	r3, r8
 8000a4c:	42ba      	cmp	r2, r7
 8000a4e:	4192      	sbcs	r2, r2
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	4252      	negs	r2, r2
 8000a54:	1a89      	subs	r1, r1, r2
 8000a56:	2207      	movs	r2, #7
 8000a58:	4664      	mov	r4, ip
 8000a5a:	403a      	ands	r2, r7
 8000a5c:	e592      	b.n	8000584 <__aeabi_dadd+0xc0>
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	000f      	movs	r7, r1
 8000a62:	1e79      	subs	r1, r7, #1
 8000a64:	418f      	sbcs	r7, r1
 8000a66:	e79d      	b.n	80009a4 <__aeabi_dadd+0x4e0>
 8000a68:	001c      	movs	r4, r3
 8000a6a:	000f      	movs	r7, r1
 8000a6c:	3c20      	subs	r4, #32
 8000a6e:	40e7      	lsrs	r7, r4
 8000a70:	2b20      	cmp	r3, #32
 8000a72:	d003      	beq.n	8000a7c <__aeabi_dadd+0x5b8>
 8000a74:	2440      	movs	r4, #64	; 0x40
 8000a76:	1ae3      	subs	r3, r4, r3
 8000a78:	4099      	lsls	r1, r3
 8000a7a:	4308      	orrs	r0, r1
 8000a7c:	1e41      	subs	r1, r0, #1
 8000a7e:	4188      	sbcs	r0, r1
 8000a80:	4338      	orrs	r0, r7
 8000a82:	e67c      	b.n	800077e <__aeabi_dadd+0x2ba>
 8000a84:	2200      	movs	r2, #0
 8000a86:	2400      	movs	r4, #0
 8000a88:	e625      	b.n	80006d6 <__aeabi_dadd+0x212>
 8000a8a:	1a17      	subs	r7, r2, r0
 8000a8c:	4643      	mov	r3, r8
 8000a8e:	42ba      	cmp	r2, r7
 8000a90:	4192      	sbcs	r2, r2
 8000a92:	1a59      	subs	r1, r3, r1
 8000a94:	4252      	negs	r2, r2
 8000a96:	1a89      	subs	r1, r1, r2
 8000a98:	4664      	mov	r4, ip
 8000a9a:	0035      	movs	r5, r6
 8000a9c:	e543      	b.n	8000526 <__aeabi_dadd+0x62>
 8000a9e:	4641      	mov	r1, r8
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	4d14      	ldr	r5, [pc, #80]	; (8000af4 <__aeabi_dadd+0x630>)
 8000aa4:	e610      	b.n	80006c8 <__aeabi_dadd+0x204>
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	2400      	movs	r4, #0
 8000aaa:	0312      	lsls	r2, r2, #12
 8000aac:	e680      	b.n	80007b0 <__aeabi_dadd+0x2ec>
 8000aae:	001d      	movs	r5, r3
 8000ab0:	000f      	movs	r7, r1
 8000ab2:	3d20      	subs	r5, #32
 8000ab4:	40ef      	lsrs	r7, r5
 8000ab6:	46bc      	mov	ip, r7
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	d003      	beq.n	8000ac4 <__aeabi_dadd+0x600>
 8000abc:	2540      	movs	r5, #64	; 0x40
 8000abe:	1aeb      	subs	r3, r5, r3
 8000ac0:	4099      	lsls	r1, r3
 8000ac2:	4308      	orrs	r0, r1
 8000ac4:	0007      	movs	r7, r0
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	1e78      	subs	r0, r7, #1
 8000aca:	4187      	sbcs	r7, r0
 8000acc:	431f      	orrs	r7, r3
 8000ace:	e769      	b.n	80009a4 <__aeabi_dadd+0x4e0>
 8000ad0:	1887      	adds	r7, r0, r2
 8000ad2:	4297      	cmp	r7, r2
 8000ad4:	419b      	sbcs	r3, r3
 8000ad6:	4441      	add	r1, r8
 8000ad8:	425b      	negs	r3, r3
 8000ada:	18c9      	adds	r1, r1, r3
 8000adc:	0035      	movs	r5, r6
 8000ade:	e5a3      	b.n	8000628 <__aeabi_dadd+0x164>
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	4333      	orrs	r3, r6
 8000ae4:	d0ce      	beq.n	8000a84 <__aeabi_dadd+0x5c0>
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	0031      	movs	r1, r6
 8000aea:	403a      	ands	r2, r7
 8000aec:	e652      	b.n	8000794 <__aeabi_dadd+0x2d0>
 8000aee:	2300      	movs	r3, #0
 8000af0:	001a      	movs	r2, r3
 8000af2:	e5f4      	b.n	80006de <__aeabi_dadd+0x21a>
 8000af4:	000007ff 	.word	0x000007ff
 8000af8:	ff7fffff 	.word	0xff7fffff

08000afc <__aeabi_ddiv>:
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	4657      	mov	r7, sl
 8000b00:	46de      	mov	lr, fp
 8000b02:	464e      	mov	r6, r9
 8000b04:	4645      	mov	r5, r8
 8000b06:	b5e0      	push	{r5, r6, r7, lr}
 8000b08:	4683      	mov	fp, r0
 8000b0a:	0007      	movs	r7, r0
 8000b0c:	030e      	lsls	r6, r1, #12
 8000b0e:	0048      	lsls	r0, r1, #1
 8000b10:	b085      	sub	sp, #20
 8000b12:	4692      	mov	sl, r2
 8000b14:	001c      	movs	r4, r3
 8000b16:	0b36      	lsrs	r6, r6, #12
 8000b18:	0d40      	lsrs	r0, r0, #21
 8000b1a:	0fcd      	lsrs	r5, r1, #31
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_ddiv+0x26>
 8000b20:	e09d      	b.n	8000c5e <__aeabi_ddiv+0x162>
 8000b22:	4b95      	ldr	r3, [pc, #596]	; (8000d78 <__aeabi_ddiv+0x27c>)
 8000b24:	4298      	cmp	r0, r3
 8000b26:	d039      	beq.n	8000b9c <__aeabi_ddiv+0xa0>
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	00f6      	lsls	r6, r6, #3
 8000b2c:	041b      	lsls	r3, r3, #16
 8000b2e:	431e      	orrs	r6, r3
 8000b30:	4a92      	ldr	r2, [pc, #584]	; (8000d7c <__aeabi_ddiv+0x280>)
 8000b32:	0f7b      	lsrs	r3, r7, #29
 8000b34:	4333      	orrs	r3, r6
 8000b36:	4699      	mov	r9, r3
 8000b38:	4694      	mov	ip, r2
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	4463      	add	r3, ip
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2300      	movs	r3, #0
 8000b42:	2600      	movs	r6, #0
 8000b44:	00ff      	lsls	r7, r7, #3
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	0323      	lsls	r3, r4, #12
 8000b4a:	0b1b      	lsrs	r3, r3, #12
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	0063      	lsls	r3, r4, #1
 8000b50:	0fe4      	lsrs	r4, r4, #31
 8000b52:	4652      	mov	r2, sl
 8000b54:	0d5b      	lsrs	r3, r3, #21
 8000b56:	9401      	str	r4, [sp, #4]
 8000b58:	d100      	bne.n	8000b5c <__aeabi_ddiv+0x60>
 8000b5a:	e0b3      	b.n	8000cc4 <__aeabi_ddiv+0x1c8>
 8000b5c:	4986      	ldr	r1, [pc, #536]	; (8000d78 <__aeabi_ddiv+0x27c>)
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d100      	bne.n	8000b64 <__aeabi_ddiv+0x68>
 8000b62:	e09e      	b.n	8000ca2 <__aeabi_ddiv+0x1a6>
 8000b64:	4642      	mov	r2, r8
 8000b66:	00d1      	lsls	r1, r2, #3
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	0412      	lsls	r2, r2, #16
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	4651      	mov	r1, sl
 8000b70:	0f49      	lsrs	r1, r1, #29
 8000b72:	4311      	orrs	r1, r2
 8000b74:	468b      	mov	fp, r1
 8000b76:	4981      	ldr	r1, [pc, #516]	; (8000d7c <__aeabi_ddiv+0x280>)
 8000b78:	4652      	mov	r2, sl
 8000b7a:	468c      	mov	ip, r1
 8000b7c:	9900      	ldr	r1, [sp, #0]
 8000b7e:	4463      	add	r3, ip
 8000b80:	1acb      	subs	r3, r1, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	002b      	movs	r3, r5
 8000b8a:	4063      	eors	r3, r4
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	2e0f      	cmp	r6, #15
 8000b90:	d900      	bls.n	8000b94 <__aeabi_ddiv+0x98>
 8000b92:	e105      	b.n	8000da0 <__aeabi_ddiv+0x2a4>
 8000b94:	4b7a      	ldr	r3, [pc, #488]	; (8000d80 <__aeabi_ddiv+0x284>)
 8000b96:	00b6      	lsls	r6, r6, #2
 8000b98:	599b      	ldr	r3, [r3, r6]
 8000b9a:	469f      	mov	pc, r3
 8000b9c:	465b      	mov	r3, fp
 8000b9e:	4333      	orrs	r3, r6
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_ddiv+0xaa>
 8000ba4:	e0b8      	b.n	8000d18 <__aeabi_ddiv+0x21c>
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	2608      	movs	r6, #8
 8000baa:	2700      	movs	r7, #0
 8000bac:	9000      	str	r0, [sp, #0]
 8000bae:	9302      	str	r3, [sp, #8]
 8000bb0:	e7ca      	b.n	8000b48 <__aeabi_ddiv+0x4c>
 8000bb2:	46cb      	mov	fp, r9
 8000bb4:	003a      	movs	r2, r7
 8000bb6:	9902      	ldr	r1, [sp, #8]
 8000bb8:	9501      	str	r5, [sp, #4]
 8000bba:	9b01      	ldr	r3, [sp, #4]
 8000bbc:	469a      	mov	sl, r3
 8000bbe:	2902      	cmp	r1, #2
 8000bc0:	d027      	beq.n	8000c12 <__aeabi_ddiv+0x116>
 8000bc2:	2903      	cmp	r1, #3
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_ddiv+0xcc>
 8000bc6:	e280      	b.n	80010ca <__aeabi_ddiv+0x5ce>
 8000bc8:	2901      	cmp	r1, #1
 8000bca:	d044      	beq.n	8000c56 <__aeabi_ddiv+0x15a>
 8000bcc:	496d      	ldr	r1, [pc, #436]	; (8000d84 <__aeabi_ddiv+0x288>)
 8000bce:	9b00      	ldr	r3, [sp, #0]
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	4463      	add	r3, ip
 8000bd4:	001c      	movs	r4, r3
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	dd38      	ble.n	8000c4c <__aeabi_ddiv+0x150>
 8000bda:	0753      	lsls	r3, r2, #29
 8000bdc:	d000      	beq.n	8000be0 <__aeabi_ddiv+0xe4>
 8000bde:	e213      	b.n	8001008 <__aeabi_ddiv+0x50c>
 8000be0:	08d2      	lsrs	r2, r2, #3
 8000be2:	465b      	mov	r3, fp
 8000be4:	01db      	lsls	r3, r3, #7
 8000be6:	d509      	bpl.n	8000bfc <__aeabi_ddiv+0x100>
 8000be8:	4659      	mov	r1, fp
 8000bea:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <__aeabi_ddiv+0x28c>)
 8000bec:	4019      	ands	r1, r3
 8000bee:	468b      	mov	fp, r1
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	00c9      	lsls	r1, r1, #3
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	9b00      	ldr	r3, [sp, #0]
 8000bf8:	4463      	add	r3, ip
 8000bfa:	001c      	movs	r4, r3
 8000bfc:	4b63      	ldr	r3, [pc, #396]	; (8000d8c <__aeabi_ddiv+0x290>)
 8000bfe:	429c      	cmp	r4, r3
 8000c00:	dc07      	bgt.n	8000c12 <__aeabi_ddiv+0x116>
 8000c02:	465b      	mov	r3, fp
 8000c04:	0564      	lsls	r4, r4, #21
 8000c06:	075f      	lsls	r7, r3, #29
 8000c08:	025b      	lsls	r3, r3, #9
 8000c0a:	4317      	orrs	r7, r2
 8000c0c:	0b1b      	lsrs	r3, r3, #12
 8000c0e:	0d62      	lsrs	r2, r4, #21
 8000c10:	e002      	b.n	8000c18 <__aeabi_ddiv+0x11c>
 8000c12:	2300      	movs	r3, #0
 8000c14:	2700      	movs	r7, #0
 8000c16:	4a58      	ldr	r2, [pc, #352]	; (8000d78 <__aeabi_ddiv+0x27c>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	031b      	lsls	r3, r3, #12
 8000c1c:	0b1c      	lsrs	r4, r3, #12
 8000c1e:	0d0b      	lsrs	r3, r1, #20
 8000c20:	051b      	lsls	r3, r3, #20
 8000c22:	4323      	orrs	r3, r4
 8000c24:	0514      	lsls	r4, r2, #20
 8000c26:	4a5a      	ldr	r2, [pc, #360]	; (8000d90 <__aeabi_ddiv+0x294>)
 8000c28:	0038      	movs	r0, r7
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	431c      	orrs	r4, r3
 8000c2e:	4653      	mov	r3, sl
 8000c30:	0064      	lsls	r4, r4, #1
 8000c32:	07db      	lsls	r3, r3, #31
 8000c34:	0864      	lsrs	r4, r4, #1
 8000c36:	431c      	orrs	r4, r3
 8000c38:	0021      	movs	r1, r4
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c3e:	4690      	mov	r8, r2
 8000c40:	4699      	mov	r9, r3
 8000c42:	46a2      	mov	sl, r4
 8000c44:	46ab      	mov	fp, r5
 8000c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4252      	negs	r2, r2
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	1b1b      	subs	r3, r3, r4
 8000c50:	2b38      	cmp	r3, #56	; 0x38
 8000c52:	dc00      	bgt.n	8000c56 <__aeabi_ddiv+0x15a>
 8000c54:	e1ad      	b.n	8000fb2 <__aeabi_ddiv+0x4b6>
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2700      	movs	r7, #0
 8000c5c:	e7dc      	b.n	8000c18 <__aeabi_ddiv+0x11c>
 8000c5e:	465b      	mov	r3, fp
 8000c60:	4333      	orrs	r3, r6
 8000c62:	4699      	mov	r9, r3
 8000c64:	d05e      	beq.n	8000d24 <__aeabi_ddiv+0x228>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_ddiv+0x170>
 8000c6a:	e18a      	b.n	8000f82 <__aeabi_ddiv+0x486>
 8000c6c:	0030      	movs	r0, r6
 8000c6e:	f001 f95f 	bl	8001f30 <__clzsi2>
 8000c72:	0003      	movs	r3, r0
 8000c74:	3b0b      	subs	r3, #11
 8000c76:	2b1c      	cmp	r3, #28
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_ddiv+0x180>
 8000c7a:	e17b      	b.n	8000f74 <__aeabi_ddiv+0x478>
 8000c7c:	221d      	movs	r2, #29
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	465a      	mov	r2, fp
 8000c82:	0001      	movs	r1, r0
 8000c84:	40da      	lsrs	r2, r3
 8000c86:	3908      	subs	r1, #8
 8000c88:	408e      	lsls	r6, r1
 8000c8a:	0013      	movs	r3, r2
 8000c8c:	465f      	mov	r7, fp
 8000c8e:	4333      	orrs	r3, r6
 8000c90:	4699      	mov	r9, r3
 8000c92:	408f      	lsls	r7, r1
 8000c94:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <__aeabi_ddiv+0x298>)
 8000c96:	2600      	movs	r6, #0
 8000c98:	1a1b      	subs	r3, r3, r0
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	e752      	b.n	8000b48 <__aeabi_ddiv+0x4c>
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	493b      	ldr	r1, [pc, #236]	; (8000d98 <__aeabi_ddiv+0x29c>)
 8000caa:	469b      	mov	fp, r3
 8000cac:	468c      	mov	ip, r1
 8000cae:	9b00      	ldr	r3, [sp, #0]
 8000cb0:	4463      	add	r3, ip
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	465b      	mov	r3, fp
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d13b      	bne.n	8000d32 <__aeabi_ddiv+0x236>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	431e      	orrs	r6, r3
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	e761      	b.n	8000b88 <__aeabi_ddiv+0x8c>
 8000cc4:	4643      	mov	r3, r8
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	469b      	mov	fp, r3
 8000cca:	d037      	beq.n	8000d3c <__aeabi_ddiv+0x240>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_ddiv+0x1d8>
 8000cd2:	e162      	b.n	8000f9a <__aeabi_ddiv+0x49e>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	f001 f92b 	bl	8001f30 <__clzsi2>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	3b0b      	subs	r3, #11
 8000cde:	2b1c      	cmp	r3, #28
 8000ce0:	dd00      	ble.n	8000ce4 <__aeabi_ddiv+0x1e8>
 8000ce2:	e153      	b.n	8000f8c <__aeabi_ddiv+0x490>
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	3a08      	subs	r2, #8
 8000cea:	4091      	lsls	r1, r2
 8000cec:	4688      	mov	r8, r1
 8000cee:	211d      	movs	r1, #29
 8000cf0:	1acb      	subs	r3, r1, r3
 8000cf2:	4651      	mov	r1, sl
 8000cf4:	40d9      	lsrs	r1, r3
 8000cf6:	000b      	movs	r3, r1
 8000cf8:	4641      	mov	r1, r8
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	469b      	mov	fp, r3
 8000cfe:	4653      	mov	r3, sl
 8000d00:	4093      	lsls	r3, r2
 8000d02:	001a      	movs	r2, r3
 8000d04:	9b00      	ldr	r3, [sp, #0]
 8000d06:	4925      	ldr	r1, [pc, #148]	; (8000d9c <__aeabi_ddiv+0x2a0>)
 8000d08:	469c      	mov	ip, r3
 8000d0a:	4460      	add	r0, ip
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	468c      	mov	ip, r1
 8000d10:	4463      	add	r3, ip
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2100      	movs	r1, #0
 8000d16:	e737      	b.n	8000b88 <__aeabi_ddiv+0x8c>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	46b1      	mov	r9, r6
 8000d1c:	9000      	str	r0, [sp, #0]
 8000d1e:	260c      	movs	r6, #12
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	e711      	b.n	8000b48 <__aeabi_ddiv+0x4c>
 8000d24:	2300      	movs	r3, #0
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2604      	movs	r6, #4
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	9302      	str	r3, [sp, #8]
 8000d30:	e70a      	b.n	8000b48 <__aeabi_ddiv+0x4c>
 8000d32:	2303      	movs	r3, #3
 8000d34:	46c3      	mov	fp, r8
 8000d36:	431e      	orrs	r6, r3
 8000d38:	2103      	movs	r1, #3
 8000d3a:	e725      	b.n	8000b88 <__aeabi_ddiv+0x8c>
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	431e      	orrs	r6, r3
 8000d40:	2200      	movs	r2, #0
 8000d42:	2101      	movs	r1, #1
 8000d44:	e720      	b.n	8000b88 <__aeabi_ddiv+0x8c>
 8000d46:	2300      	movs	r3, #0
 8000d48:	469a      	mov	sl, r3
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	031b      	lsls	r3, r3, #12
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <__aeabi_ddiv+0x27c>)
 8000d52:	e761      	b.n	8000c18 <__aeabi_ddiv+0x11c>
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	4649      	mov	r1, r9
 8000d58:	031b      	lsls	r3, r3, #12
 8000d5a:	4219      	tst	r1, r3
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_ddiv+0x264>
 8000d5e:	e0e2      	b.n	8000f26 <__aeabi_ddiv+0x42a>
 8000d60:	4659      	mov	r1, fp
 8000d62:	4219      	tst	r1, r3
 8000d64:	d000      	beq.n	8000d68 <__aeabi_ddiv+0x26c>
 8000d66:	e0de      	b.n	8000f26 <__aeabi_ddiv+0x42a>
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	031b      	lsls	r3, r3, #12
 8000d6c:	0017      	movs	r7, r2
 8000d6e:	0b1b      	lsrs	r3, r3, #12
 8000d70:	46a2      	mov	sl, r4
 8000d72:	4a01      	ldr	r2, [pc, #4]	; (8000d78 <__aeabi_ddiv+0x27c>)
 8000d74:	e750      	b.n	8000c18 <__aeabi_ddiv+0x11c>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	000007ff 	.word	0x000007ff
 8000d7c:	fffffc01 	.word	0xfffffc01
 8000d80:	080089ac 	.word	0x080089ac
 8000d84:	000003ff 	.word	0x000003ff
 8000d88:	feffffff 	.word	0xfeffffff
 8000d8c:	000007fe 	.word	0x000007fe
 8000d90:	800fffff 	.word	0x800fffff
 8000d94:	fffffc0d 	.word	0xfffffc0d
 8000d98:	fffff801 	.word	0xfffff801
 8000d9c:	000003f3 	.word	0x000003f3
 8000da0:	45d9      	cmp	r9, fp
 8000da2:	d900      	bls.n	8000da6 <__aeabi_ddiv+0x2aa>
 8000da4:	e0cb      	b.n	8000f3e <__aeabi_ddiv+0x442>
 8000da6:	d100      	bne.n	8000daa <__aeabi_ddiv+0x2ae>
 8000da8:	e0c6      	b.n	8000f38 <__aeabi_ddiv+0x43c>
 8000daa:	003c      	movs	r4, r7
 8000dac:	4648      	mov	r0, r9
 8000dae:	2700      	movs	r7, #0
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	465b      	mov	r3, fp
 8000db8:	0e16      	lsrs	r6, r2, #24
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	431e      	orrs	r6, r3
 8000dbe:	0213      	lsls	r3, r2, #8
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	0433      	lsls	r3, r6, #16
 8000dc4:	0c1b      	lsrs	r3, r3, #16
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	0c31      	lsrs	r1, r6, #16
 8000dca:	9101      	str	r1, [sp, #4]
 8000dcc:	f7ff fa2a 	bl	8000224 <__aeabi_uidivmod>
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	4342      	muls	r2, r0
 8000dd4:	040b      	lsls	r3, r1, #16
 8000dd6:	0c21      	lsrs	r1, r4, #16
 8000dd8:	0005      	movs	r5, r0
 8000dda:	4319      	orrs	r1, r3
 8000ddc:	428a      	cmp	r2, r1
 8000dde:	d907      	bls.n	8000df0 <__aeabi_ddiv+0x2f4>
 8000de0:	1989      	adds	r1, r1, r6
 8000de2:	3d01      	subs	r5, #1
 8000de4:	428e      	cmp	r6, r1
 8000de6:	d803      	bhi.n	8000df0 <__aeabi_ddiv+0x2f4>
 8000de8:	428a      	cmp	r2, r1
 8000dea:	d901      	bls.n	8000df0 <__aeabi_ddiv+0x2f4>
 8000dec:	1e85      	subs	r5, r0, #2
 8000dee:	1989      	adds	r1, r1, r6
 8000df0:	1a88      	subs	r0, r1, r2
 8000df2:	9901      	ldr	r1, [sp, #4]
 8000df4:	f7ff fa16 	bl	8000224 <__aeabi_uidivmod>
 8000df8:	0409      	lsls	r1, r1, #16
 8000dfa:	468c      	mov	ip, r1
 8000dfc:	464a      	mov	r2, r9
 8000dfe:	0421      	lsls	r1, r4, #16
 8000e00:	4664      	mov	r4, ip
 8000e02:	4342      	muls	r2, r0
 8000e04:	0c09      	lsrs	r1, r1, #16
 8000e06:	0003      	movs	r3, r0
 8000e08:	4321      	orrs	r1, r4
 8000e0a:	428a      	cmp	r2, r1
 8000e0c:	d904      	bls.n	8000e18 <__aeabi_ddiv+0x31c>
 8000e0e:	1989      	adds	r1, r1, r6
 8000e10:	3b01      	subs	r3, #1
 8000e12:	428e      	cmp	r6, r1
 8000e14:	d800      	bhi.n	8000e18 <__aeabi_ddiv+0x31c>
 8000e16:	e0f1      	b.n	8000ffc <__aeabi_ddiv+0x500>
 8000e18:	042d      	lsls	r5, r5, #16
 8000e1a:	431d      	orrs	r5, r3
 8000e1c:	46ab      	mov	fp, r5
 8000e1e:	4643      	mov	r3, r8
 8000e20:	1a89      	subs	r1, r1, r2
 8000e22:	4642      	mov	r2, r8
 8000e24:	0c28      	lsrs	r0, r5, #16
 8000e26:	0412      	lsls	r2, r2, #16
 8000e28:	0c1d      	lsrs	r5, r3, #16
 8000e2a:	465b      	mov	r3, fp
 8000e2c:	0c14      	lsrs	r4, r2, #16
 8000e2e:	0022      	movs	r2, r4
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	435a      	muls	r2, r3
 8000e36:	9403      	str	r4, [sp, #12]
 8000e38:	436b      	muls	r3, r5
 8000e3a:	4344      	muls	r4, r0
 8000e3c:	9502      	str	r5, [sp, #8]
 8000e3e:	4368      	muls	r0, r5
 8000e40:	191b      	adds	r3, r3, r4
 8000e42:	0c15      	lsrs	r5, r2, #16
 8000e44:	18eb      	adds	r3, r5, r3
 8000e46:	429c      	cmp	r4, r3
 8000e48:	d903      	bls.n	8000e52 <__aeabi_ddiv+0x356>
 8000e4a:	2480      	movs	r4, #128	; 0x80
 8000e4c:	0264      	lsls	r4, r4, #9
 8000e4e:	46a4      	mov	ip, r4
 8000e50:	4460      	add	r0, ip
 8000e52:	0c1c      	lsrs	r4, r3, #16
 8000e54:	0415      	lsls	r5, r2, #16
 8000e56:	041b      	lsls	r3, r3, #16
 8000e58:	0c2d      	lsrs	r5, r5, #16
 8000e5a:	1820      	adds	r0, r4, r0
 8000e5c:	195d      	adds	r5, r3, r5
 8000e5e:	4281      	cmp	r1, r0
 8000e60:	d377      	bcc.n	8000f52 <__aeabi_ddiv+0x456>
 8000e62:	d073      	beq.n	8000f4c <__aeabi_ddiv+0x450>
 8000e64:	1a0c      	subs	r4, r1, r0
 8000e66:	4aa2      	ldr	r2, [pc, #648]	; (80010f0 <__aeabi_ddiv+0x5f4>)
 8000e68:	1b7d      	subs	r5, r7, r5
 8000e6a:	42af      	cmp	r7, r5
 8000e6c:	41bf      	sbcs	r7, r7
 8000e6e:	4694      	mov	ip, r2
 8000e70:	9b00      	ldr	r3, [sp, #0]
 8000e72:	427f      	negs	r7, r7
 8000e74:	4463      	add	r3, ip
 8000e76:	1be0      	subs	r0, r4, r7
 8000e78:	001c      	movs	r4, r3
 8000e7a:	4286      	cmp	r6, r0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x384>
 8000e7e:	e0db      	b.n	8001038 <__aeabi_ddiv+0x53c>
 8000e80:	9901      	ldr	r1, [sp, #4]
 8000e82:	f7ff f9cf 	bl	8000224 <__aeabi_uidivmod>
 8000e86:	464a      	mov	r2, r9
 8000e88:	4342      	muls	r2, r0
 8000e8a:	040b      	lsls	r3, r1, #16
 8000e8c:	0c29      	lsrs	r1, r5, #16
 8000e8e:	0007      	movs	r7, r0
 8000e90:	4319      	orrs	r1, r3
 8000e92:	428a      	cmp	r2, r1
 8000e94:	d907      	bls.n	8000ea6 <__aeabi_ddiv+0x3aa>
 8000e96:	1989      	adds	r1, r1, r6
 8000e98:	3f01      	subs	r7, #1
 8000e9a:	428e      	cmp	r6, r1
 8000e9c:	d803      	bhi.n	8000ea6 <__aeabi_ddiv+0x3aa>
 8000e9e:	428a      	cmp	r2, r1
 8000ea0:	d901      	bls.n	8000ea6 <__aeabi_ddiv+0x3aa>
 8000ea2:	1e87      	subs	r7, r0, #2
 8000ea4:	1989      	adds	r1, r1, r6
 8000ea6:	1a88      	subs	r0, r1, r2
 8000ea8:	9901      	ldr	r1, [sp, #4]
 8000eaa:	f7ff f9bb 	bl	8000224 <__aeabi_uidivmod>
 8000eae:	0409      	lsls	r1, r1, #16
 8000eb0:	464a      	mov	r2, r9
 8000eb2:	4689      	mov	r9, r1
 8000eb4:	0429      	lsls	r1, r5, #16
 8000eb6:	464d      	mov	r5, r9
 8000eb8:	4342      	muls	r2, r0
 8000eba:	0c09      	lsrs	r1, r1, #16
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	4329      	orrs	r1, r5
 8000ec0:	428a      	cmp	r2, r1
 8000ec2:	d907      	bls.n	8000ed4 <__aeabi_ddiv+0x3d8>
 8000ec4:	1989      	adds	r1, r1, r6
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	428e      	cmp	r6, r1
 8000eca:	d803      	bhi.n	8000ed4 <__aeabi_ddiv+0x3d8>
 8000ecc:	428a      	cmp	r2, r1
 8000ece:	d901      	bls.n	8000ed4 <__aeabi_ddiv+0x3d8>
 8000ed0:	1e83      	subs	r3, r0, #2
 8000ed2:	1989      	adds	r1, r1, r6
 8000ed4:	043f      	lsls	r7, r7, #16
 8000ed6:	1a89      	subs	r1, r1, r2
 8000ed8:	003a      	movs	r2, r7
 8000eda:	9f03      	ldr	r7, [sp, #12]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	0038      	movs	r0, r7
 8000ee0:	0413      	lsls	r3, r2, #16
 8000ee2:	0c1b      	lsrs	r3, r3, #16
 8000ee4:	4358      	muls	r0, r3
 8000ee6:	4681      	mov	r9, r0
 8000ee8:	9802      	ldr	r0, [sp, #8]
 8000eea:	0c15      	lsrs	r5, r2, #16
 8000eec:	436f      	muls	r7, r5
 8000eee:	4343      	muls	r3, r0
 8000ef0:	4345      	muls	r5, r0
 8000ef2:	4648      	mov	r0, r9
 8000ef4:	0c00      	lsrs	r0, r0, #16
 8000ef6:	4684      	mov	ip, r0
 8000ef8:	19db      	adds	r3, r3, r7
 8000efa:	4463      	add	r3, ip
 8000efc:	429f      	cmp	r7, r3
 8000efe:	d903      	bls.n	8000f08 <__aeabi_ddiv+0x40c>
 8000f00:	2080      	movs	r0, #128	; 0x80
 8000f02:	0240      	lsls	r0, r0, #9
 8000f04:	4684      	mov	ip, r0
 8000f06:	4465      	add	r5, ip
 8000f08:	4648      	mov	r0, r9
 8000f0a:	0c1f      	lsrs	r7, r3, #16
 8000f0c:	0400      	lsls	r0, r0, #16
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	0c00      	lsrs	r0, r0, #16
 8000f12:	197d      	adds	r5, r7, r5
 8000f14:	1818      	adds	r0, r3, r0
 8000f16:	42a9      	cmp	r1, r5
 8000f18:	d200      	bcs.n	8000f1c <__aeabi_ddiv+0x420>
 8000f1a:	e084      	b.n	8001026 <__aeabi_ddiv+0x52a>
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x424>
 8000f1e:	e07f      	b.n	8001020 <__aeabi_ddiv+0x524>
 8000f20:	2301      	movs	r3, #1
 8000f22:	431a      	orrs	r2, r3
 8000f24:	e657      	b.n	8000bd6 <__aeabi_ddiv+0xda>
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	464a      	mov	r2, r9
 8000f2a:	031b      	lsls	r3, r3, #12
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	031b      	lsls	r3, r3, #12
 8000f30:	0b1b      	lsrs	r3, r3, #12
 8000f32:	46aa      	mov	sl, r5
 8000f34:	4a6f      	ldr	r2, [pc, #444]	; (80010f4 <__aeabi_ddiv+0x5f8>)
 8000f36:	e66f      	b.n	8000c18 <__aeabi_ddiv+0x11c>
 8000f38:	42ba      	cmp	r2, r7
 8000f3a:	d900      	bls.n	8000f3e <__aeabi_ddiv+0x442>
 8000f3c:	e735      	b.n	8000daa <__aeabi_ddiv+0x2ae>
 8000f3e:	464b      	mov	r3, r9
 8000f40:	07dc      	lsls	r4, r3, #31
 8000f42:	0858      	lsrs	r0, r3, #1
 8000f44:	087b      	lsrs	r3, r7, #1
 8000f46:	431c      	orrs	r4, r3
 8000f48:	07ff      	lsls	r7, r7, #31
 8000f4a:	e734      	b.n	8000db6 <__aeabi_ddiv+0x2ba>
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	42af      	cmp	r7, r5
 8000f50:	d289      	bcs.n	8000e66 <__aeabi_ddiv+0x36a>
 8000f52:	4447      	add	r7, r8
 8000f54:	4547      	cmp	r7, r8
 8000f56:	41a4      	sbcs	r4, r4
 8000f58:	465b      	mov	r3, fp
 8000f5a:	4264      	negs	r4, r4
 8000f5c:	19a4      	adds	r4, r4, r6
 8000f5e:	1864      	adds	r4, r4, r1
 8000f60:	3b01      	subs	r3, #1
 8000f62:	42a6      	cmp	r6, r4
 8000f64:	d21e      	bcs.n	8000fa4 <__aeabi_ddiv+0x4a8>
 8000f66:	42a0      	cmp	r0, r4
 8000f68:	d86d      	bhi.n	8001046 <__aeabi_ddiv+0x54a>
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_ddiv+0x472>
 8000f6c:	e0b6      	b.n	80010dc <__aeabi_ddiv+0x5e0>
 8000f6e:	1a24      	subs	r4, r4, r0
 8000f70:	469b      	mov	fp, r3
 8000f72:	e778      	b.n	8000e66 <__aeabi_ddiv+0x36a>
 8000f74:	0003      	movs	r3, r0
 8000f76:	465a      	mov	r2, fp
 8000f78:	3b28      	subs	r3, #40	; 0x28
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	2700      	movs	r7, #0
 8000f7e:	4691      	mov	r9, r2
 8000f80:	e688      	b.n	8000c94 <__aeabi_ddiv+0x198>
 8000f82:	4658      	mov	r0, fp
 8000f84:	f000 ffd4 	bl	8001f30 <__clzsi2>
 8000f88:	3020      	adds	r0, #32
 8000f8a:	e672      	b.n	8000c72 <__aeabi_ddiv+0x176>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	4652      	mov	r2, sl
 8000f90:	3b28      	subs	r3, #40	; 0x28
 8000f92:	409a      	lsls	r2, r3
 8000f94:	4693      	mov	fp, r2
 8000f96:	2200      	movs	r2, #0
 8000f98:	e6b4      	b.n	8000d04 <__aeabi_ddiv+0x208>
 8000f9a:	4650      	mov	r0, sl
 8000f9c:	f000 ffc8 	bl	8001f30 <__clzsi2>
 8000fa0:	3020      	adds	r0, #32
 8000fa2:	e69a      	b.n	8000cda <__aeabi_ddiv+0x1de>
 8000fa4:	42a6      	cmp	r6, r4
 8000fa6:	d1e2      	bne.n	8000f6e <__aeabi_ddiv+0x472>
 8000fa8:	45b8      	cmp	r8, r7
 8000faa:	d9dc      	bls.n	8000f66 <__aeabi_ddiv+0x46a>
 8000fac:	1a34      	subs	r4, r6, r0
 8000fae:	469b      	mov	fp, r3
 8000fb0:	e759      	b.n	8000e66 <__aeabi_ddiv+0x36a>
 8000fb2:	2b1f      	cmp	r3, #31
 8000fb4:	dc65      	bgt.n	8001082 <__aeabi_ddiv+0x586>
 8000fb6:	4c50      	ldr	r4, [pc, #320]	; (80010f8 <__aeabi_ddiv+0x5fc>)
 8000fb8:	9900      	ldr	r1, [sp, #0]
 8000fba:	46a4      	mov	ip, r4
 8000fbc:	465c      	mov	r4, fp
 8000fbe:	4461      	add	r1, ip
 8000fc0:	0008      	movs	r0, r1
 8000fc2:	408c      	lsls	r4, r1
 8000fc4:	0011      	movs	r1, r2
 8000fc6:	4082      	lsls	r2, r0
 8000fc8:	40d9      	lsrs	r1, r3
 8000fca:	1e50      	subs	r0, r2, #1
 8000fcc:	4182      	sbcs	r2, r0
 8000fce:	430c      	orrs	r4, r1
 8000fd0:	4314      	orrs	r4, r2
 8000fd2:	465a      	mov	r2, fp
 8000fd4:	40da      	lsrs	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	0762      	lsls	r2, r4, #29
 8000fda:	d009      	beq.n	8000ff0 <__aeabi_ddiv+0x4f4>
 8000fdc:	220f      	movs	r2, #15
 8000fde:	4022      	ands	r2, r4
 8000fe0:	2a04      	cmp	r2, #4
 8000fe2:	d005      	beq.n	8000ff0 <__aeabi_ddiv+0x4f4>
 8000fe4:	0022      	movs	r2, r4
 8000fe6:	1d14      	adds	r4, r2, #4
 8000fe8:	4294      	cmp	r4, r2
 8000fea:	4189      	sbcs	r1, r1
 8000fec:	4249      	negs	r1, r1
 8000fee:	185b      	adds	r3, r3, r1
 8000ff0:	021a      	lsls	r2, r3, #8
 8000ff2:	d562      	bpl.n	80010ba <__aeabi_ddiv+0x5be>
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2700      	movs	r7, #0
 8000ffa:	e60d      	b.n	8000c18 <__aeabi_ddiv+0x11c>
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x506>
 8001000:	e70a      	b.n	8000e18 <__aeabi_ddiv+0x31c>
 8001002:	1e83      	subs	r3, r0, #2
 8001004:	1989      	adds	r1, r1, r6
 8001006:	e707      	b.n	8000e18 <__aeabi_ddiv+0x31c>
 8001008:	230f      	movs	r3, #15
 800100a:	4013      	ands	r3, r2
 800100c:	2b04      	cmp	r3, #4
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x516>
 8001010:	e5e6      	b.n	8000be0 <__aeabi_ddiv+0xe4>
 8001012:	1d17      	adds	r7, r2, #4
 8001014:	4297      	cmp	r7, r2
 8001016:	4192      	sbcs	r2, r2
 8001018:	4253      	negs	r3, r2
 800101a:	449b      	add	fp, r3
 800101c:	08fa      	lsrs	r2, r7, #3
 800101e:	e5e0      	b.n	8000be2 <__aeabi_ddiv+0xe6>
 8001020:	2800      	cmp	r0, #0
 8001022:	d100      	bne.n	8001026 <__aeabi_ddiv+0x52a>
 8001024:	e5d7      	b.n	8000bd6 <__aeabi_ddiv+0xda>
 8001026:	1871      	adds	r1, r6, r1
 8001028:	1e53      	subs	r3, r2, #1
 800102a:	42b1      	cmp	r1, r6
 800102c:	d327      	bcc.n	800107e <__aeabi_ddiv+0x582>
 800102e:	42a9      	cmp	r1, r5
 8001030:	d315      	bcc.n	800105e <__aeabi_ddiv+0x562>
 8001032:	d058      	beq.n	80010e6 <__aeabi_ddiv+0x5ea>
 8001034:	001a      	movs	r2, r3
 8001036:	e773      	b.n	8000f20 <__aeabi_ddiv+0x424>
 8001038:	2b00      	cmp	r3, #0
 800103a:	dc00      	bgt.n	800103e <__aeabi_ddiv+0x542>
 800103c:	e604      	b.n	8000c48 <__aeabi_ddiv+0x14c>
 800103e:	2301      	movs	r3, #1
 8001040:	2200      	movs	r2, #0
 8001042:	449b      	add	fp, r3
 8001044:	e5cd      	b.n	8000be2 <__aeabi_ddiv+0xe6>
 8001046:	2302      	movs	r3, #2
 8001048:	4447      	add	r7, r8
 800104a:	4547      	cmp	r7, r8
 800104c:	4189      	sbcs	r1, r1
 800104e:	425b      	negs	r3, r3
 8001050:	469c      	mov	ip, r3
 8001052:	4249      	negs	r1, r1
 8001054:	1989      	adds	r1, r1, r6
 8001056:	190c      	adds	r4, r1, r4
 8001058:	44e3      	add	fp, ip
 800105a:	1a24      	subs	r4, r4, r0
 800105c:	e703      	b.n	8000e66 <__aeabi_ddiv+0x36a>
 800105e:	4643      	mov	r3, r8
 8001060:	005f      	lsls	r7, r3, #1
 8001062:	4547      	cmp	r7, r8
 8001064:	419b      	sbcs	r3, r3
 8001066:	46b8      	mov	r8, r7
 8001068:	425b      	negs	r3, r3
 800106a:	199e      	adds	r6, r3, r6
 800106c:	3a02      	subs	r2, #2
 800106e:	1989      	adds	r1, r1, r6
 8001070:	42a9      	cmp	r1, r5
 8001072:	d000      	beq.n	8001076 <__aeabi_ddiv+0x57a>
 8001074:	e754      	b.n	8000f20 <__aeabi_ddiv+0x424>
 8001076:	4540      	cmp	r0, r8
 8001078:	d000      	beq.n	800107c <__aeabi_ddiv+0x580>
 800107a:	e751      	b.n	8000f20 <__aeabi_ddiv+0x424>
 800107c:	e5ab      	b.n	8000bd6 <__aeabi_ddiv+0xda>
 800107e:	001a      	movs	r2, r3
 8001080:	e7f6      	b.n	8001070 <__aeabi_ddiv+0x574>
 8001082:	211f      	movs	r1, #31
 8001084:	465f      	mov	r7, fp
 8001086:	4249      	negs	r1, r1
 8001088:	1b0c      	subs	r4, r1, r4
 800108a:	40e7      	lsrs	r7, r4
 800108c:	2b20      	cmp	r3, #32
 800108e:	d007      	beq.n	80010a0 <__aeabi_ddiv+0x5a4>
 8001090:	491a      	ldr	r1, [pc, #104]	; (80010fc <__aeabi_ddiv+0x600>)
 8001092:	9b00      	ldr	r3, [sp, #0]
 8001094:	468c      	mov	ip, r1
 8001096:	4463      	add	r3, ip
 8001098:	0018      	movs	r0, r3
 800109a:	465b      	mov	r3, fp
 800109c:	4083      	lsls	r3, r0
 800109e:	431a      	orrs	r2, r3
 80010a0:	1e50      	subs	r0, r2, #1
 80010a2:	4182      	sbcs	r2, r0
 80010a4:	433a      	orrs	r2, r7
 80010a6:	2707      	movs	r7, #7
 80010a8:	2300      	movs	r3, #0
 80010aa:	4017      	ands	r7, r2
 80010ac:	d009      	beq.n	80010c2 <__aeabi_ddiv+0x5c6>
 80010ae:	210f      	movs	r1, #15
 80010b0:	2300      	movs	r3, #0
 80010b2:	4011      	ands	r1, r2
 80010b4:	0014      	movs	r4, r2
 80010b6:	2904      	cmp	r1, #4
 80010b8:	d195      	bne.n	8000fe6 <__aeabi_ddiv+0x4ea>
 80010ba:	0022      	movs	r2, r4
 80010bc:	075f      	lsls	r7, r3, #29
 80010be:	025b      	lsls	r3, r3, #9
 80010c0:	0b1b      	lsrs	r3, r3, #12
 80010c2:	08d2      	lsrs	r2, r2, #3
 80010c4:	4317      	orrs	r7, r2
 80010c6:	2200      	movs	r2, #0
 80010c8:	e5a6      	b.n	8000c18 <__aeabi_ddiv+0x11c>
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	4659      	mov	r1, fp
 80010ce:	031b      	lsls	r3, r3, #12
 80010d0:	430b      	orrs	r3, r1
 80010d2:	031b      	lsls	r3, r3, #12
 80010d4:	0017      	movs	r7, r2
 80010d6:	0b1b      	lsrs	r3, r3, #12
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <__aeabi_ddiv+0x5f8>)
 80010da:	e59d      	b.n	8000c18 <__aeabi_ddiv+0x11c>
 80010dc:	42bd      	cmp	r5, r7
 80010de:	d8b2      	bhi.n	8001046 <__aeabi_ddiv+0x54a>
 80010e0:	469b      	mov	fp, r3
 80010e2:	2400      	movs	r4, #0
 80010e4:	e6bf      	b.n	8000e66 <__aeabi_ddiv+0x36a>
 80010e6:	4580      	cmp	r8, r0
 80010e8:	d3b9      	bcc.n	800105e <__aeabi_ddiv+0x562>
 80010ea:	001a      	movs	r2, r3
 80010ec:	e7c3      	b.n	8001076 <__aeabi_ddiv+0x57a>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	000003ff 	.word	0x000003ff
 80010f4:	000007ff 	.word	0x000007ff
 80010f8:	0000041e 	.word	0x0000041e
 80010fc:	0000043e 	.word	0x0000043e

08001100 <__eqdf2>:
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	464f      	mov	r7, r9
 8001104:	4646      	mov	r6, r8
 8001106:	46d6      	mov	lr, sl
 8001108:	4684      	mov	ip, r0
 800110a:	b5c0      	push	{r6, r7, lr}
 800110c:	4680      	mov	r8, r0
 800110e:	4e19      	ldr	r6, [pc, #100]	; (8001174 <__eqdf2+0x74>)
 8001110:	0318      	lsls	r0, r3, #12
 8001112:	030f      	lsls	r7, r1, #12
 8001114:	004d      	lsls	r5, r1, #1
 8001116:	0b00      	lsrs	r0, r0, #12
 8001118:	005c      	lsls	r4, r3, #1
 800111a:	4682      	mov	sl, r0
 800111c:	0b3f      	lsrs	r7, r7, #12
 800111e:	0d6d      	lsrs	r5, r5, #21
 8001120:	0fc9      	lsrs	r1, r1, #31
 8001122:	4691      	mov	r9, r2
 8001124:	0d64      	lsrs	r4, r4, #21
 8001126:	0fdb      	lsrs	r3, r3, #31
 8001128:	2001      	movs	r0, #1
 800112a:	42b5      	cmp	r5, r6
 800112c:	d00a      	beq.n	8001144 <__eqdf2+0x44>
 800112e:	42b4      	cmp	r4, r6
 8001130:	d003      	beq.n	800113a <__eqdf2+0x3a>
 8001132:	42a5      	cmp	r5, r4
 8001134:	d101      	bne.n	800113a <__eqdf2+0x3a>
 8001136:	4557      	cmp	r7, sl
 8001138:	d00c      	beq.n	8001154 <__eqdf2+0x54>
 800113a:	bc1c      	pop	{r2, r3, r4}
 800113c:	4690      	mov	r8, r2
 800113e:	4699      	mov	r9, r3
 8001140:	46a2      	mov	sl, r4
 8001142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001144:	4666      	mov	r6, ip
 8001146:	433e      	orrs	r6, r7
 8001148:	d1f7      	bne.n	800113a <__eqdf2+0x3a>
 800114a:	42ac      	cmp	r4, r5
 800114c:	d1f5      	bne.n	800113a <__eqdf2+0x3a>
 800114e:	4654      	mov	r4, sl
 8001150:	4314      	orrs	r4, r2
 8001152:	d1f2      	bne.n	800113a <__eqdf2+0x3a>
 8001154:	2001      	movs	r0, #1
 8001156:	45c8      	cmp	r8, r9
 8001158:	d1ef      	bne.n	800113a <__eqdf2+0x3a>
 800115a:	4299      	cmp	r1, r3
 800115c:	d007      	beq.n	800116e <__eqdf2+0x6e>
 800115e:	2d00      	cmp	r5, #0
 8001160:	d1eb      	bne.n	800113a <__eqdf2+0x3a>
 8001162:	4663      	mov	r3, ip
 8001164:	431f      	orrs	r7, r3
 8001166:	0038      	movs	r0, r7
 8001168:	1e47      	subs	r7, r0, #1
 800116a:	41b8      	sbcs	r0, r7
 800116c:	e7e5      	b.n	800113a <__eqdf2+0x3a>
 800116e:	2000      	movs	r0, #0
 8001170:	e7e3      	b.n	800113a <__eqdf2+0x3a>
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	000007ff 	.word	0x000007ff

08001178 <__gedf2>:
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	464f      	mov	r7, r9
 800117c:	4646      	mov	r6, r8
 800117e:	46d6      	mov	lr, sl
 8001180:	004d      	lsls	r5, r1, #1
 8001182:	b5c0      	push	{r6, r7, lr}
 8001184:	030e      	lsls	r6, r1, #12
 8001186:	0fc9      	lsrs	r1, r1, #31
 8001188:	468a      	mov	sl, r1
 800118a:	492c      	ldr	r1, [pc, #176]	; (800123c <__gedf2+0xc4>)
 800118c:	031f      	lsls	r7, r3, #12
 800118e:	005c      	lsls	r4, r3, #1
 8001190:	4680      	mov	r8, r0
 8001192:	0b36      	lsrs	r6, r6, #12
 8001194:	0d6d      	lsrs	r5, r5, #21
 8001196:	4691      	mov	r9, r2
 8001198:	0b3f      	lsrs	r7, r7, #12
 800119a:	0d64      	lsrs	r4, r4, #21
 800119c:	0fdb      	lsrs	r3, r3, #31
 800119e:	428d      	cmp	r5, r1
 80011a0:	d01e      	beq.n	80011e0 <__gedf2+0x68>
 80011a2:	428c      	cmp	r4, r1
 80011a4:	d016      	beq.n	80011d4 <__gedf2+0x5c>
 80011a6:	2d00      	cmp	r5, #0
 80011a8:	d11e      	bne.n	80011e8 <__gedf2+0x70>
 80011aa:	4330      	orrs	r0, r6
 80011ac:	4684      	mov	ip, r0
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d101      	bne.n	80011b6 <__gedf2+0x3e>
 80011b2:	433a      	orrs	r2, r7
 80011b4:	d023      	beq.n	80011fe <__gedf2+0x86>
 80011b6:	4662      	mov	r2, ip
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d01a      	beq.n	80011f2 <__gedf2+0x7a>
 80011bc:	459a      	cmp	sl, r3
 80011be:	d029      	beq.n	8001214 <__gedf2+0x9c>
 80011c0:	4651      	mov	r1, sl
 80011c2:	2002      	movs	r0, #2
 80011c4:	3901      	subs	r1, #1
 80011c6:	4008      	ands	r0, r1
 80011c8:	3801      	subs	r0, #1
 80011ca:	bc1c      	pop	{r2, r3, r4}
 80011cc:	4690      	mov	r8, r2
 80011ce:	4699      	mov	r9, r3
 80011d0:	46a2      	mov	sl, r4
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	0039      	movs	r1, r7
 80011d6:	4311      	orrs	r1, r2
 80011d8:	d0e5      	beq.n	80011a6 <__gedf2+0x2e>
 80011da:	2002      	movs	r0, #2
 80011dc:	4240      	negs	r0, r0
 80011de:	e7f4      	b.n	80011ca <__gedf2+0x52>
 80011e0:	4330      	orrs	r0, r6
 80011e2:	d1fa      	bne.n	80011da <__gedf2+0x62>
 80011e4:	42ac      	cmp	r4, r5
 80011e6:	d00f      	beq.n	8001208 <__gedf2+0x90>
 80011e8:	2c00      	cmp	r4, #0
 80011ea:	d10f      	bne.n	800120c <__gedf2+0x94>
 80011ec:	433a      	orrs	r2, r7
 80011ee:	d0e7      	beq.n	80011c0 <__gedf2+0x48>
 80011f0:	e00c      	b.n	800120c <__gedf2+0x94>
 80011f2:	2201      	movs	r2, #1
 80011f4:	3b01      	subs	r3, #1
 80011f6:	4393      	bics	r3, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	3001      	adds	r0, #1
 80011fc:	e7e5      	b.n	80011ca <__gedf2+0x52>
 80011fe:	4663      	mov	r3, ip
 8001200:	2000      	movs	r0, #0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0e1      	beq.n	80011ca <__gedf2+0x52>
 8001206:	e7db      	b.n	80011c0 <__gedf2+0x48>
 8001208:	433a      	orrs	r2, r7
 800120a:	d1e6      	bne.n	80011da <__gedf2+0x62>
 800120c:	459a      	cmp	sl, r3
 800120e:	d1d7      	bne.n	80011c0 <__gedf2+0x48>
 8001210:	42a5      	cmp	r5, r4
 8001212:	dcd5      	bgt.n	80011c0 <__gedf2+0x48>
 8001214:	42a5      	cmp	r5, r4
 8001216:	db05      	blt.n	8001224 <__gedf2+0xac>
 8001218:	42be      	cmp	r6, r7
 800121a:	d8d1      	bhi.n	80011c0 <__gedf2+0x48>
 800121c:	d008      	beq.n	8001230 <__gedf2+0xb8>
 800121e:	2000      	movs	r0, #0
 8001220:	42be      	cmp	r6, r7
 8001222:	d2d2      	bcs.n	80011ca <__gedf2+0x52>
 8001224:	4650      	mov	r0, sl
 8001226:	2301      	movs	r3, #1
 8001228:	3801      	subs	r0, #1
 800122a:	4398      	bics	r0, r3
 800122c:	3001      	adds	r0, #1
 800122e:	e7cc      	b.n	80011ca <__gedf2+0x52>
 8001230:	45c8      	cmp	r8, r9
 8001232:	d8c5      	bhi.n	80011c0 <__gedf2+0x48>
 8001234:	2000      	movs	r0, #0
 8001236:	45c8      	cmp	r8, r9
 8001238:	d3f4      	bcc.n	8001224 <__gedf2+0xac>
 800123a:	e7c6      	b.n	80011ca <__gedf2+0x52>
 800123c:	000007ff 	.word	0x000007ff

08001240 <__ledf2>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	464f      	mov	r7, r9
 8001244:	4646      	mov	r6, r8
 8001246:	46d6      	mov	lr, sl
 8001248:	004d      	lsls	r5, r1, #1
 800124a:	b5c0      	push	{r6, r7, lr}
 800124c:	030e      	lsls	r6, r1, #12
 800124e:	0fc9      	lsrs	r1, r1, #31
 8001250:	468a      	mov	sl, r1
 8001252:	492e      	ldr	r1, [pc, #184]	; (800130c <__ledf2+0xcc>)
 8001254:	031f      	lsls	r7, r3, #12
 8001256:	005c      	lsls	r4, r3, #1
 8001258:	4680      	mov	r8, r0
 800125a:	0b36      	lsrs	r6, r6, #12
 800125c:	0d6d      	lsrs	r5, r5, #21
 800125e:	4691      	mov	r9, r2
 8001260:	0b3f      	lsrs	r7, r7, #12
 8001262:	0d64      	lsrs	r4, r4, #21
 8001264:	0fdb      	lsrs	r3, r3, #31
 8001266:	428d      	cmp	r5, r1
 8001268:	d018      	beq.n	800129c <__ledf2+0x5c>
 800126a:	428c      	cmp	r4, r1
 800126c:	d011      	beq.n	8001292 <__ledf2+0x52>
 800126e:	2d00      	cmp	r5, #0
 8001270:	d118      	bne.n	80012a4 <__ledf2+0x64>
 8001272:	4330      	orrs	r0, r6
 8001274:	4684      	mov	ip, r0
 8001276:	2c00      	cmp	r4, #0
 8001278:	d11e      	bne.n	80012b8 <__ledf2+0x78>
 800127a:	433a      	orrs	r2, r7
 800127c:	d11c      	bne.n	80012b8 <__ledf2+0x78>
 800127e:	4663      	mov	r3, ip
 8001280:	2000      	movs	r0, #0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d030      	beq.n	80012e8 <__ledf2+0xa8>
 8001286:	4651      	mov	r1, sl
 8001288:	2002      	movs	r0, #2
 800128a:	3901      	subs	r1, #1
 800128c:	4008      	ands	r0, r1
 800128e:	3801      	subs	r0, #1
 8001290:	e02a      	b.n	80012e8 <__ledf2+0xa8>
 8001292:	0039      	movs	r1, r7
 8001294:	4311      	orrs	r1, r2
 8001296:	d0ea      	beq.n	800126e <__ledf2+0x2e>
 8001298:	2002      	movs	r0, #2
 800129a:	e025      	b.n	80012e8 <__ledf2+0xa8>
 800129c:	4330      	orrs	r0, r6
 800129e:	d1fb      	bne.n	8001298 <__ledf2+0x58>
 80012a0:	42ac      	cmp	r4, r5
 80012a2:	d026      	beq.n	80012f2 <__ledf2+0xb2>
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d126      	bne.n	80012f6 <__ledf2+0xb6>
 80012a8:	433a      	orrs	r2, r7
 80012aa:	d124      	bne.n	80012f6 <__ledf2+0xb6>
 80012ac:	4651      	mov	r1, sl
 80012ae:	2002      	movs	r0, #2
 80012b0:	3901      	subs	r1, #1
 80012b2:	4008      	ands	r0, r1
 80012b4:	3801      	subs	r0, #1
 80012b6:	e017      	b.n	80012e8 <__ledf2+0xa8>
 80012b8:	4662      	mov	r2, ip
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	d00f      	beq.n	80012de <__ledf2+0x9e>
 80012be:	459a      	cmp	sl, r3
 80012c0:	d1e1      	bne.n	8001286 <__ledf2+0x46>
 80012c2:	42a5      	cmp	r5, r4
 80012c4:	db05      	blt.n	80012d2 <__ledf2+0x92>
 80012c6:	42be      	cmp	r6, r7
 80012c8:	d8dd      	bhi.n	8001286 <__ledf2+0x46>
 80012ca:	d019      	beq.n	8001300 <__ledf2+0xc0>
 80012cc:	2000      	movs	r0, #0
 80012ce:	42be      	cmp	r6, r7
 80012d0:	d20a      	bcs.n	80012e8 <__ledf2+0xa8>
 80012d2:	4650      	mov	r0, sl
 80012d4:	2301      	movs	r3, #1
 80012d6:	3801      	subs	r0, #1
 80012d8:	4398      	bics	r0, r3
 80012da:	3001      	adds	r0, #1
 80012dc:	e004      	b.n	80012e8 <__ledf2+0xa8>
 80012de:	2201      	movs	r2, #1
 80012e0:	3b01      	subs	r3, #1
 80012e2:	4393      	bics	r3, r2
 80012e4:	0018      	movs	r0, r3
 80012e6:	3001      	adds	r0, #1
 80012e8:	bc1c      	pop	{r2, r3, r4}
 80012ea:	4690      	mov	r8, r2
 80012ec:	4699      	mov	r9, r3
 80012ee:	46a2      	mov	sl, r4
 80012f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f2:	433a      	orrs	r2, r7
 80012f4:	d1d0      	bne.n	8001298 <__ledf2+0x58>
 80012f6:	459a      	cmp	sl, r3
 80012f8:	d1c5      	bne.n	8001286 <__ledf2+0x46>
 80012fa:	42a5      	cmp	r5, r4
 80012fc:	dcc3      	bgt.n	8001286 <__ledf2+0x46>
 80012fe:	e7e0      	b.n	80012c2 <__ledf2+0x82>
 8001300:	45c8      	cmp	r8, r9
 8001302:	d8c0      	bhi.n	8001286 <__ledf2+0x46>
 8001304:	2000      	movs	r0, #0
 8001306:	45c8      	cmp	r8, r9
 8001308:	d3e3      	bcc.n	80012d2 <__ledf2+0x92>
 800130a:	e7ed      	b.n	80012e8 <__ledf2+0xa8>
 800130c:	000007ff 	.word	0x000007ff

08001310 <__aeabi_dmul>:
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	4657      	mov	r7, sl
 8001314:	46de      	mov	lr, fp
 8001316:	464e      	mov	r6, r9
 8001318:	4645      	mov	r5, r8
 800131a:	b5e0      	push	{r5, r6, r7, lr}
 800131c:	4683      	mov	fp, r0
 800131e:	0006      	movs	r6, r0
 8001320:	030f      	lsls	r7, r1, #12
 8001322:	0048      	lsls	r0, r1, #1
 8001324:	b087      	sub	sp, #28
 8001326:	4692      	mov	sl, r2
 8001328:	001d      	movs	r5, r3
 800132a:	0b3f      	lsrs	r7, r7, #12
 800132c:	0d40      	lsrs	r0, r0, #21
 800132e:	0fcc      	lsrs	r4, r1, #31
 8001330:	2800      	cmp	r0, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_dmul+0x26>
 8001334:	e06f      	b.n	8001416 <__aeabi_dmul+0x106>
 8001336:	4bde      	ldr	r3, [pc, #888]	; (80016b0 <__aeabi_dmul+0x3a0>)
 8001338:	4298      	cmp	r0, r3
 800133a:	d038      	beq.n	80013ae <__aeabi_dmul+0x9e>
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	00ff      	lsls	r7, r7, #3
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	431f      	orrs	r7, r3
 8001344:	0f73      	lsrs	r3, r6, #29
 8001346:	433b      	orrs	r3, r7
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	4bda      	ldr	r3, [pc, #872]	; (80016b4 <__aeabi_dmul+0x3a4>)
 800134c:	2700      	movs	r7, #0
 800134e:	4699      	mov	r9, r3
 8001350:	2300      	movs	r3, #0
 8001352:	469b      	mov	fp, r3
 8001354:	00f6      	lsls	r6, r6, #3
 8001356:	4481      	add	r9, r0
 8001358:	032b      	lsls	r3, r5, #12
 800135a:	0069      	lsls	r1, r5, #1
 800135c:	0b1b      	lsrs	r3, r3, #12
 800135e:	4652      	mov	r2, sl
 8001360:	4698      	mov	r8, r3
 8001362:	0d49      	lsrs	r1, r1, #21
 8001364:	0fed      	lsrs	r5, r5, #31
 8001366:	2900      	cmp	r1, #0
 8001368:	d100      	bne.n	800136c <__aeabi_dmul+0x5c>
 800136a:	e085      	b.n	8001478 <__aeabi_dmul+0x168>
 800136c:	4bd0      	ldr	r3, [pc, #832]	; (80016b0 <__aeabi_dmul+0x3a0>)
 800136e:	4299      	cmp	r1, r3
 8001370:	d100      	bne.n	8001374 <__aeabi_dmul+0x64>
 8001372:	e073      	b.n	800145c <__aeabi_dmul+0x14c>
 8001374:	4643      	mov	r3, r8
 8001376:	00da      	lsls	r2, r3, #3
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	041b      	lsls	r3, r3, #16
 800137c:	4313      	orrs	r3, r2
 800137e:	4652      	mov	r2, sl
 8001380:	48cc      	ldr	r0, [pc, #816]	; (80016b4 <__aeabi_dmul+0x3a4>)
 8001382:	0f52      	lsrs	r2, r2, #29
 8001384:	4684      	mov	ip, r0
 8001386:	4313      	orrs	r3, r2
 8001388:	4652      	mov	r2, sl
 800138a:	2000      	movs	r0, #0
 800138c:	4461      	add	r1, ip
 800138e:	00d2      	lsls	r2, r2, #3
 8001390:	4489      	add	r9, r1
 8001392:	0021      	movs	r1, r4
 8001394:	4069      	eors	r1, r5
 8001396:	9100      	str	r1, [sp, #0]
 8001398:	468c      	mov	ip, r1
 800139a:	2101      	movs	r1, #1
 800139c:	4449      	add	r1, r9
 800139e:	468a      	mov	sl, r1
 80013a0:	2f0f      	cmp	r7, #15
 80013a2:	d900      	bls.n	80013a6 <__aeabi_dmul+0x96>
 80013a4:	e090      	b.n	80014c8 <__aeabi_dmul+0x1b8>
 80013a6:	49c4      	ldr	r1, [pc, #784]	; (80016b8 <__aeabi_dmul+0x3a8>)
 80013a8:	00bf      	lsls	r7, r7, #2
 80013aa:	59cf      	ldr	r7, [r1, r7]
 80013ac:	46bf      	mov	pc, r7
 80013ae:	465b      	mov	r3, fp
 80013b0:	433b      	orrs	r3, r7
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	d000      	beq.n	80013b8 <__aeabi_dmul+0xa8>
 80013b6:	e16a      	b.n	800168e <__aeabi_dmul+0x37e>
 80013b8:	2302      	movs	r3, #2
 80013ba:	2708      	movs	r7, #8
 80013bc:	2600      	movs	r6, #0
 80013be:	4681      	mov	r9, r0
 80013c0:	469b      	mov	fp, r3
 80013c2:	e7c9      	b.n	8001358 <__aeabi_dmul+0x48>
 80013c4:	0032      	movs	r2, r6
 80013c6:	4658      	mov	r0, fp
 80013c8:	9b01      	ldr	r3, [sp, #4]
 80013ca:	4661      	mov	r1, ip
 80013cc:	9100      	str	r1, [sp, #0]
 80013ce:	2802      	cmp	r0, #2
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dmul+0xc4>
 80013d2:	e075      	b.n	80014c0 <__aeabi_dmul+0x1b0>
 80013d4:	2803      	cmp	r0, #3
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0xca>
 80013d8:	e1fe      	b.n	80017d8 <__aeabi_dmul+0x4c8>
 80013da:	2801      	cmp	r0, #1
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dmul+0xd0>
 80013de:	e12c      	b.n	800163a <__aeabi_dmul+0x32a>
 80013e0:	2300      	movs	r3, #0
 80013e2:	2700      	movs	r7, #0
 80013e4:	2600      	movs	r6, #0
 80013e6:	2500      	movs	r5, #0
 80013e8:	033f      	lsls	r7, r7, #12
 80013ea:	0d2a      	lsrs	r2, r5, #20
 80013ec:	0b3f      	lsrs	r7, r7, #12
 80013ee:	48b3      	ldr	r0, [pc, #716]	; (80016bc <__aeabi_dmul+0x3ac>)
 80013f0:	0512      	lsls	r2, r2, #20
 80013f2:	433a      	orrs	r2, r7
 80013f4:	4002      	ands	r2, r0
 80013f6:	051b      	lsls	r3, r3, #20
 80013f8:	4313      	orrs	r3, r2
 80013fa:	9a00      	ldr	r2, [sp, #0]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	07d1      	lsls	r1, r2, #31
 8001400:	085b      	lsrs	r3, r3, #1
 8001402:	430b      	orrs	r3, r1
 8001404:	0030      	movs	r0, r6
 8001406:	0019      	movs	r1, r3
 8001408:	b007      	add	sp, #28
 800140a:	bc3c      	pop	{r2, r3, r4, r5}
 800140c:	4690      	mov	r8, r2
 800140e:	4699      	mov	r9, r3
 8001410:	46a2      	mov	sl, r4
 8001412:	46ab      	mov	fp, r5
 8001414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001416:	465b      	mov	r3, fp
 8001418:	433b      	orrs	r3, r7
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	d100      	bne.n	8001420 <__aeabi_dmul+0x110>
 800141e:	e12f      	b.n	8001680 <__aeabi_dmul+0x370>
 8001420:	2f00      	cmp	r7, #0
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0x116>
 8001424:	e1a5      	b.n	8001772 <__aeabi_dmul+0x462>
 8001426:	0038      	movs	r0, r7
 8001428:	f000 fd82 	bl	8001f30 <__clzsi2>
 800142c:	0003      	movs	r3, r0
 800142e:	3b0b      	subs	r3, #11
 8001430:	2b1c      	cmp	r3, #28
 8001432:	dd00      	ble.n	8001436 <__aeabi_dmul+0x126>
 8001434:	e196      	b.n	8001764 <__aeabi_dmul+0x454>
 8001436:	221d      	movs	r2, #29
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	465a      	mov	r2, fp
 800143c:	0001      	movs	r1, r0
 800143e:	40da      	lsrs	r2, r3
 8001440:	465e      	mov	r6, fp
 8001442:	3908      	subs	r1, #8
 8001444:	408f      	lsls	r7, r1
 8001446:	0013      	movs	r3, r2
 8001448:	408e      	lsls	r6, r1
 800144a:	433b      	orrs	r3, r7
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	4b9c      	ldr	r3, [pc, #624]	; (80016c0 <__aeabi_dmul+0x3b0>)
 8001450:	2700      	movs	r7, #0
 8001452:	1a1b      	subs	r3, r3, r0
 8001454:	4699      	mov	r9, r3
 8001456:	2300      	movs	r3, #0
 8001458:	469b      	mov	fp, r3
 800145a:	e77d      	b.n	8001358 <__aeabi_dmul+0x48>
 800145c:	4641      	mov	r1, r8
 800145e:	4653      	mov	r3, sl
 8001460:	430b      	orrs	r3, r1
 8001462:	4993      	ldr	r1, [pc, #588]	; (80016b0 <__aeabi_dmul+0x3a0>)
 8001464:	468c      	mov	ip, r1
 8001466:	44e1      	add	r9, ip
 8001468:	2b00      	cmp	r3, #0
 800146a:	d000      	beq.n	800146e <__aeabi_dmul+0x15e>
 800146c:	e11a      	b.n	80016a4 <__aeabi_dmul+0x394>
 800146e:	2202      	movs	r2, #2
 8001470:	2002      	movs	r0, #2
 8001472:	4317      	orrs	r7, r2
 8001474:	2200      	movs	r2, #0
 8001476:	e78c      	b.n	8001392 <__aeabi_dmul+0x82>
 8001478:	4313      	orrs	r3, r2
 800147a:	d100      	bne.n	800147e <__aeabi_dmul+0x16e>
 800147c:	e10d      	b.n	800169a <__aeabi_dmul+0x38a>
 800147e:	4643      	mov	r3, r8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d100      	bne.n	8001486 <__aeabi_dmul+0x176>
 8001484:	e181      	b.n	800178a <__aeabi_dmul+0x47a>
 8001486:	4640      	mov	r0, r8
 8001488:	f000 fd52 	bl	8001f30 <__clzsi2>
 800148c:	0002      	movs	r2, r0
 800148e:	3a0b      	subs	r2, #11
 8001490:	2a1c      	cmp	r2, #28
 8001492:	dd00      	ble.n	8001496 <__aeabi_dmul+0x186>
 8001494:	e172      	b.n	800177c <__aeabi_dmul+0x46c>
 8001496:	0001      	movs	r1, r0
 8001498:	4643      	mov	r3, r8
 800149a:	3908      	subs	r1, #8
 800149c:	408b      	lsls	r3, r1
 800149e:	4698      	mov	r8, r3
 80014a0:	231d      	movs	r3, #29
 80014a2:	1a9a      	subs	r2, r3, r2
 80014a4:	4653      	mov	r3, sl
 80014a6:	40d3      	lsrs	r3, r2
 80014a8:	001a      	movs	r2, r3
 80014aa:	4643      	mov	r3, r8
 80014ac:	4313      	orrs	r3, r2
 80014ae:	4652      	mov	r2, sl
 80014b0:	408a      	lsls	r2, r1
 80014b2:	4649      	mov	r1, r9
 80014b4:	1a08      	subs	r0, r1, r0
 80014b6:	4982      	ldr	r1, [pc, #520]	; (80016c0 <__aeabi_dmul+0x3b0>)
 80014b8:	4689      	mov	r9, r1
 80014ba:	4481      	add	r9, r0
 80014bc:	2000      	movs	r0, #0
 80014be:	e768      	b.n	8001392 <__aeabi_dmul+0x82>
 80014c0:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <__aeabi_dmul+0x3a0>)
 80014c2:	2700      	movs	r7, #0
 80014c4:	2600      	movs	r6, #0
 80014c6:	e78e      	b.n	80013e6 <__aeabi_dmul+0xd6>
 80014c8:	0c14      	lsrs	r4, r2, #16
 80014ca:	0412      	lsls	r2, r2, #16
 80014cc:	0c12      	lsrs	r2, r2, #16
 80014ce:	0011      	movs	r1, r2
 80014d0:	0c37      	lsrs	r7, r6, #16
 80014d2:	0436      	lsls	r6, r6, #16
 80014d4:	0c35      	lsrs	r5, r6, #16
 80014d6:	4379      	muls	r1, r7
 80014d8:	0028      	movs	r0, r5
 80014da:	468c      	mov	ip, r1
 80014dc:	002e      	movs	r6, r5
 80014de:	4360      	muls	r0, r4
 80014e0:	4460      	add	r0, ip
 80014e2:	4683      	mov	fp, r0
 80014e4:	4356      	muls	r6, r2
 80014e6:	0021      	movs	r1, r4
 80014e8:	0c30      	lsrs	r0, r6, #16
 80014ea:	4680      	mov	r8, r0
 80014ec:	4658      	mov	r0, fp
 80014ee:	4379      	muls	r1, r7
 80014f0:	4440      	add	r0, r8
 80014f2:	9102      	str	r1, [sp, #8]
 80014f4:	4584      	cmp	ip, r0
 80014f6:	d906      	bls.n	8001506 <__aeabi_dmul+0x1f6>
 80014f8:	4688      	mov	r8, r1
 80014fa:	2180      	movs	r1, #128	; 0x80
 80014fc:	0249      	lsls	r1, r1, #9
 80014fe:	468c      	mov	ip, r1
 8001500:	44e0      	add	r8, ip
 8001502:	4641      	mov	r1, r8
 8001504:	9102      	str	r1, [sp, #8]
 8001506:	0436      	lsls	r6, r6, #16
 8001508:	0c01      	lsrs	r1, r0, #16
 800150a:	0c36      	lsrs	r6, r6, #16
 800150c:	0400      	lsls	r0, r0, #16
 800150e:	468b      	mov	fp, r1
 8001510:	1981      	adds	r1, r0, r6
 8001512:	0c1e      	lsrs	r6, r3, #16
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	9103      	str	r1, [sp, #12]
 800151a:	0019      	movs	r1, r3
 800151c:	4379      	muls	r1, r7
 800151e:	468c      	mov	ip, r1
 8001520:	0028      	movs	r0, r5
 8001522:	4375      	muls	r5, r6
 8001524:	4465      	add	r5, ip
 8001526:	46a8      	mov	r8, r5
 8001528:	4358      	muls	r0, r3
 800152a:	0c05      	lsrs	r5, r0, #16
 800152c:	4445      	add	r5, r8
 800152e:	4377      	muls	r7, r6
 8001530:	42a9      	cmp	r1, r5
 8001532:	d903      	bls.n	800153c <__aeabi_dmul+0x22c>
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0249      	lsls	r1, r1, #9
 8001538:	468c      	mov	ip, r1
 800153a:	4467      	add	r7, ip
 800153c:	0c29      	lsrs	r1, r5, #16
 800153e:	468c      	mov	ip, r1
 8001540:	0039      	movs	r1, r7
 8001542:	0400      	lsls	r0, r0, #16
 8001544:	0c00      	lsrs	r0, r0, #16
 8001546:	042d      	lsls	r5, r5, #16
 8001548:	182d      	adds	r5, r5, r0
 800154a:	4461      	add	r1, ip
 800154c:	44ab      	add	fp, r5
 800154e:	9105      	str	r1, [sp, #20]
 8001550:	4659      	mov	r1, fp
 8001552:	9104      	str	r1, [sp, #16]
 8001554:	9901      	ldr	r1, [sp, #4]
 8001556:	040f      	lsls	r7, r1, #16
 8001558:	0c3f      	lsrs	r7, r7, #16
 800155a:	0c08      	lsrs	r0, r1, #16
 800155c:	0039      	movs	r1, r7
 800155e:	4351      	muls	r1, r2
 8001560:	4342      	muls	r2, r0
 8001562:	4690      	mov	r8, r2
 8001564:	0002      	movs	r2, r0
 8001566:	468c      	mov	ip, r1
 8001568:	0c09      	lsrs	r1, r1, #16
 800156a:	468b      	mov	fp, r1
 800156c:	4362      	muls	r2, r4
 800156e:	437c      	muls	r4, r7
 8001570:	4444      	add	r4, r8
 8001572:	445c      	add	r4, fp
 8001574:	45a0      	cmp	r8, r4
 8001576:	d903      	bls.n	8001580 <__aeabi_dmul+0x270>
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0249      	lsls	r1, r1, #9
 800157c:	4688      	mov	r8, r1
 800157e:	4442      	add	r2, r8
 8001580:	0c21      	lsrs	r1, r4, #16
 8001582:	4688      	mov	r8, r1
 8001584:	4661      	mov	r1, ip
 8001586:	0409      	lsls	r1, r1, #16
 8001588:	0c09      	lsrs	r1, r1, #16
 800158a:	468c      	mov	ip, r1
 800158c:	0039      	movs	r1, r7
 800158e:	4359      	muls	r1, r3
 8001590:	4343      	muls	r3, r0
 8001592:	4370      	muls	r0, r6
 8001594:	437e      	muls	r6, r7
 8001596:	0c0f      	lsrs	r7, r1, #16
 8001598:	18f6      	adds	r6, r6, r3
 800159a:	0424      	lsls	r4, r4, #16
 800159c:	19be      	adds	r6, r7, r6
 800159e:	4464      	add	r4, ip
 80015a0:	4442      	add	r2, r8
 80015a2:	468c      	mov	ip, r1
 80015a4:	42b3      	cmp	r3, r6
 80015a6:	d903      	bls.n	80015b0 <__aeabi_dmul+0x2a0>
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	025b      	lsls	r3, r3, #9
 80015ac:	4698      	mov	r8, r3
 80015ae:	4440      	add	r0, r8
 80015b0:	9b02      	ldr	r3, [sp, #8]
 80015b2:	4661      	mov	r1, ip
 80015b4:	4698      	mov	r8, r3
 80015b6:	9b04      	ldr	r3, [sp, #16]
 80015b8:	0437      	lsls	r7, r6, #16
 80015ba:	4443      	add	r3, r8
 80015bc:	469b      	mov	fp, r3
 80015be:	45ab      	cmp	fp, r5
 80015c0:	41ad      	sbcs	r5, r5
 80015c2:	426b      	negs	r3, r5
 80015c4:	040d      	lsls	r5, r1, #16
 80015c6:	9905      	ldr	r1, [sp, #20]
 80015c8:	0c2d      	lsrs	r5, r5, #16
 80015ca:	468c      	mov	ip, r1
 80015cc:	197f      	adds	r7, r7, r5
 80015ce:	4467      	add	r7, ip
 80015d0:	18fd      	adds	r5, r7, r3
 80015d2:	46a8      	mov	r8, r5
 80015d4:	465d      	mov	r5, fp
 80015d6:	192d      	adds	r5, r5, r4
 80015d8:	42a5      	cmp	r5, r4
 80015da:	41a4      	sbcs	r4, r4
 80015dc:	4693      	mov	fp, r2
 80015de:	4264      	negs	r4, r4
 80015e0:	46a4      	mov	ip, r4
 80015e2:	44c3      	add	fp, r8
 80015e4:	44dc      	add	ip, fp
 80015e6:	428f      	cmp	r7, r1
 80015e8:	41bf      	sbcs	r7, r7
 80015ea:	4598      	cmp	r8, r3
 80015ec:	419b      	sbcs	r3, r3
 80015ee:	4593      	cmp	fp, r2
 80015f0:	4192      	sbcs	r2, r2
 80015f2:	45a4      	cmp	ip, r4
 80015f4:	41a4      	sbcs	r4, r4
 80015f6:	425b      	negs	r3, r3
 80015f8:	427f      	negs	r7, r7
 80015fa:	431f      	orrs	r7, r3
 80015fc:	0c36      	lsrs	r6, r6, #16
 80015fe:	4252      	negs	r2, r2
 8001600:	4264      	negs	r4, r4
 8001602:	19bf      	adds	r7, r7, r6
 8001604:	4322      	orrs	r2, r4
 8001606:	18bf      	adds	r7, r7, r2
 8001608:	4662      	mov	r2, ip
 800160a:	1838      	adds	r0, r7, r0
 800160c:	0243      	lsls	r3, r0, #9
 800160e:	0dd2      	lsrs	r2, r2, #23
 8001610:	9903      	ldr	r1, [sp, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	026a      	lsls	r2, r5, #9
 8001616:	430a      	orrs	r2, r1
 8001618:	1e50      	subs	r0, r2, #1
 800161a:	4182      	sbcs	r2, r0
 800161c:	4661      	mov	r1, ip
 800161e:	0ded      	lsrs	r5, r5, #23
 8001620:	432a      	orrs	r2, r5
 8001622:	024e      	lsls	r6, r1, #9
 8001624:	4332      	orrs	r2, r6
 8001626:	01d9      	lsls	r1, r3, #7
 8001628:	d400      	bmi.n	800162c <__aeabi_dmul+0x31c>
 800162a:	e0b3      	b.n	8001794 <__aeabi_dmul+0x484>
 800162c:	2601      	movs	r6, #1
 800162e:	0850      	lsrs	r0, r2, #1
 8001630:	4032      	ands	r2, r6
 8001632:	4302      	orrs	r2, r0
 8001634:	07de      	lsls	r6, r3, #31
 8001636:	4332      	orrs	r2, r6
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	4c22      	ldr	r4, [pc, #136]	; (80016c4 <__aeabi_dmul+0x3b4>)
 800163c:	4454      	add	r4, sl
 800163e:	2c00      	cmp	r4, #0
 8001640:	dd62      	ble.n	8001708 <__aeabi_dmul+0x3f8>
 8001642:	0751      	lsls	r1, r2, #29
 8001644:	d009      	beq.n	800165a <__aeabi_dmul+0x34a>
 8001646:	200f      	movs	r0, #15
 8001648:	4010      	ands	r0, r2
 800164a:	2804      	cmp	r0, #4
 800164c:	d005      	beq.n	800165a <__aeabi_dmul+0x34a>
 800164e:	1d10      	adds	r0, r2, #4
 8001650:	4290      	cmp	r0, r2
 8001652:	4192      	sbcs	r2, r2
 8001654:	4252      	negs	r2, r2
 8001656:	189b      	adds	r3, r3, r2
 8001658:	0002      	movs	r2, r0
 800165a:	01d9      	lsls	r1, r3, #7
 800165c:	d504      	bpl.n	8001668 <__aeabi_dmul+0x358>
 800165e:	2480      	movs	r4, #128	; 0x80
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <__aeabi_dmul+0x3b8>)
 8001662:	00e4      	lsls	r4, r4, #3
 8001664:	4003      	ands	r3, r0
 8001666:	4454      	add	r4, sl
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <__aeabi_dmul+0x3bc>)
 800166a:	4284      	cmp	r4, r0
 800166c:	dd00      	ble.n	8001670 <__aeabi_dmul+0x360>
 800166e:	e727      	b.n	80014c0 <__aeabi_dmul+0x1b0>
 8001670:	075e      	lsls	r6, r3, #29
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	08d2      	lsrs	r2, r2, #3
 8001676:	0b1f      	lsrs	r7, r3, #12
 8001678:	0563      	lsls	r3, r4, #21
 800167a:	4316      	orrs	r6, r2
 800167c:	0d5b      	lsrs	r3, r3, #21
 800167e:	e6b2      	b.n	80013e6 <__aeabi_dmul+0xd6>
 8001680:	2300      	movs	r3, #0
 8001682:	4699      	mov	r9, r3
 8001684:	3301      	adds	r3, #1
 8001686:	2704      	movs	r7, #4
 8001688:	2600      	movs	r6, #0
 800168a:	469b      	mov	fp, r3
 800168c:	e664      	b.n	8001358 <__aeabi_dmul+0x48>
 800168e:	2303      	movs	r3, #3
 8001690:	9701      	str	r7, [sp, #4]
 8001692:	4681      	mov	r9, r0
 8001694:	270c      	movs	r7, #12
 8001696:	469b      	mov	fp, r3
 8001698:	e65e      	b.n	8001358 <__aeabi_dmul+0x48>
 800169a:	2201      	movs	r2, #1
 800169c:	2001      	movs	r0, #1
 800169e:	4317      	orrs	r7, r2
 80016a0:	2200      	movs	r2, #0
 80016a2:	e676      	b.n	8001392 <__aeabi_dmul+0x82>
 80016a4:	2303      	movs	r3, #3
 80016a6:	2003      	movs	r0, #3
 80016a8:	431f      	orrs	r7, r3
 80016aa:	4643      	mov	r3, r8
 80016ac:	e671      	b.n	8001392 <__aeabi_dmul+0x82>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff
 80016b4:	fffffc01 	.word	0xfffffc01
 80016b8:	080089ec 	.word	0x080089ec
 80016bc:	800fffff 	.word	0x800fffff
 80016c0:	fffffc0d 	.word	0xfffffc0d
 80016c4:	000003ff 	.word	0x000003ff
 80016c8:	feffffff 	.word	0xfeffffff
 80016cc:	000007fe 	.word	0x000007fe
 80016d0:	2300      	movs	r3, #0
 80016d2:	2780      	movs	r7, #128	; 0x80
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	033f      	lsls	r7, r7, #12
 80016d8:	2600      	movs	r6, #0
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <__aeabi_dmul+0x4d8>)
 80016dc:	e683      	b.n	80013e6 <__aeabi_dmul+0xd6>
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	0032      	movs	r2, r6
 80016e2:	46a4      	mov	ip, r4
 80016e4:	4658      	mov	r0, fp
 80016e6:	e670      	b.n	80013ca <__aeabi_dmul+0xba>
 80016e8:	46ac      	mov	ip, r5
 80016ea:	e66e      	b.n	80013ca <__aeabi_dmul+0xba>
 80016ec:	2780      	movs	r7, #128	; 0x80
 80016ee:	9901      	ldr	r1, [sp, #4]
 80016f0:	033f      	lsls	r7, r7, #12
 80016f2:	4239      	tst	r1, r7
 80016f4:	d02d      	beq.n	8001752 <__aeabi_dmul+0x442>
 80016f6:	423b      	tst	r3, r7
 80016f8:	d12b      	bne.n	8001752 <__aeabi_dmul+0x442>
 80016fa:	431f      	orrs	r7, r3
 80016fc:	033f      	lsls	r7, r7, #12
 80016fe:	0b3f      	lsrs	r7, r7, #12
 8001700:	9500      	str	r5, [sp, #0]
 8001702:	0016      	movs	r6, r2
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <__aeabi_dmul+0x4d8>)
 8001706:	e66e      	b.n	80013e6 <__aeabi_dmul+0xd6>
 8001708:	2501      	movs	r5, #1
 800170a:	1b2d      	subs	r5, r5, r4
 800170c:	2d38      	cmp	r5, #56	; 0x38
 800170e:	dd00      	ble.n	8001712 <__aeabi_dmul+0x402>
 8001710:	e666      	b.n	80013e0 <__aeabi_dmul+0xd0>
 8001712:	2d1f      	cmp	r5, #31
 8001714:	dc40      	bgt.n	8001798 <__aeabi_dmul+0x488>
 8001716:	4835      	ldr	r0, [pc, #212]	; (80017ec <__aeabi_dmul+0x4dc>)
 8001718:	001c      	movs	r4, r3
 800171a:	4450      	add	r0, sl
 800171c:	0016      	movs	r6, r2
 800171e:	4082      	lsls	r2, r0
 8001720:	4084      	lsls	r4, r0
 8001722:	40ee      	lsrs	r6, r5
 8001724:	1e50      	subs	r0, r2, #1
 8001726:	4182      	sbcs	r2, r0
 8001728:	4334      	orrs	r4, r6
 800172a:	4314      	orrs	r4, r2
 800172c:	40eb      	lsrs	r3, r5
 800172e:	0762      	lsls	r2, r4, #29
 8001730:	d009      	beq.n	8001746 <__aeabi_dmul+0x436>
 8001732:	220f      	movs	r2, #15
 8001734:	4022      	ands	r2, r4
 8001736:	2a04      	cmp	r2, #4
 8001738:	d005      	beq.n	8001746 <__aeabi_dmul+0x436>
 800173a:	0022      	movs	r2, r4
 800173c:	1d14      	adds	r4, r2, #4
 800173e:	4294      	cmp	r4, r2
 8001740:	4180      	sbcs	r0, r0
 8001742:	4240      	negs	r0, r0
 8001744:	181b      	adds	r3, r3, r0
 8001746:	021a      	lsls	r2, r3, #8
 8001748:	d53e      	bpl.n	80017c8 <__aeabi_dmul+0x4b8>
 800174a:	2301      	movs	r3, #1
 800174c:	2700      	movs	r7, #0
 800174e:	2600      	movs	r6, #0
 8001750:	e649      	b.n	80013e6 <__aeabi_dmul+0xd6>
 8001752:	2780      	movs	r7, #128	; 0x80
 8001754:	9b01      	ldr	r3, [sp, #4]
 8001756:	033f      	lsls	r7, r7, #12
 8001758:	431f      	orrs	r7, r3
 800175a:	033f      	lsls	r7, r7, #12
 800175c:	0b3f      	lsrs	r7, r7, #12
 800175e:	9400      	str	r4, [sp, #0]
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <__aeabi_dmul+0x4d8>)
 8001762:	e640      	b.n	80013e6 <__aeabi_dmul+0xd6>
 8001764:	0003      	movs	r3, r0
 8001766:	465a      	mov	r2, fp
 8001768:	3b28      	subs	r3, #40	; 0x28
 800176a:	409a      	lsls	r2, r3
 800176c:	2600      	movs	r6, #0
 800176e:	9201      	str	r2, [sp, #4]
 8001770:	e66d      	b.n	800144e <__aeabi_dmul+0x13e>
 8001772:	4658      	mov	r0, fp
 8001774:	f000 fbdc 	bl	8001f30 <__clzsi2>
 8001778:	3020      	adds	r0, #32
 800177a:	e657      	b.n	800142c <__aeabi_dmul+0x11c>
 800177c:	0003      	movs	r3, r0
 800177e:	4652      	mov	r2, sl
 8001780:	3b28      	subs	r3, #40	; 0x28
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	2200      	movs	r2, #0
 8001788:	e693      	b.n	80014b2 <__aeabi_dmul+0x1a2>
 800178a:	4650      	mov	r0, sl
 800178c:	f000 fbd0 	bl	8001f30 <__clzsi2>
 8001790:	3020      	adds	r0, #32
 8001792:	e67b      	b.n	800148c <__aeabi_dmul+0x17c>
 8001794:	46ca      	mov	sl, r9
 8001796:	e750      	b.n	800163a <__aeabi_dmul+0x32a>
 8001798:	201f      	movs	r0, #31
 800179a:	001e      	movs	r6, r3
 800179c:	4240      	negs	r0, r0
 800179e:	1b04      	subs	r4, r0, r4
 80017a0:	40e6      	lsrs	r6, r4
 80017a2:	2d20      	cmp	r5, #32
 80017a4:	d003      	beq.n	80017ae <__aeabi_dmul+0x49e>
 80017a6:	4c12      	ldr	r4, [pc, #72]	; (80017f0 <__aeabi_dmul+0x4e0>)
 80017a8:	4454      	add	r4, sl
 80017aa:	40a3      	lsls	r3, r4
 80017ac:	431a      	orrs	r2, r3
 80017ae:	1e50      	subs	r0, r2, #1
 80017b0:	4182      	sbcs	r2, r0
 80017b2:	4332      	orrs	r2, r6
 80017b4:	2607      	movs	r6, #7
 80017b6:	2700      	movs	r7, #0
 80017b8:	4016      	ands	r6, r2
 80017ba:	d009      	beq.n	80017d0 <__aeabi_dmul+0x4c0>
 80017bc:	200f      	movs	r0, #15
 80017be:	2300      	movs	r3, #0
 80017c0:	4010      	ands	r0, r2
 80017c2:	0014      	movs	r4, r2
 80017c4:	2804      	cmp	r0, #4
 80017c6:	d1b9      	bne.n	800173c <__aeabi_dmul+0x42c>
 80017c8:	0022      	movs	r2, r4
 80017ca:	075e      	lsls	r6, r3, #29
 80017cc:	025b      	lsls	r3, r3, #9
 80017ce:	0b1f      	lsrs	r7, r3, #12
 80017d0:	08d2      	lsrs	r2, r2, #3
 80017d2:	4316      	orrs	r6, r2
 80017d4:	2300      	movs	r3, #0
 80017d6:	e606      	b.n	80013e6 <__aeabi_dmul+0xd6>
 80017d8:	2780      	movs	r7, #128	; 0x80
 80017da:	033f      	lsls	r7, r7, #12
 80017dc:	431f      	orrs	r7, r3
 80017de:	033f      	lsls	r7, r7, #12
 80017e0:	0b3f      	lsrs	r7, r7, #12
 80017e2:	0016      	movs	r6, r2
 80017e4:	4b00      	ldr	r3, [pc, #0]	; (80017e8 <__aeabi_dmul+0x4d8>)
 80017e6:	e5fe      	b.n	80013e6 <__aeabi_dmul+0xd6>
 80017e8:	000007ff 	.word	0x000007ff
 80017ec:	0000041e 	.word	0x0000041e
 80017f0:	0000043e 	.word	0x0000043e

080017f4 <__aeabi_dsub>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	4657      	mov	r7, sl
 80017f8:	464e      	mov	r6, r9
 80017fa:	4645      	mov	r5, r8
 80017fc:	46de      	mov	lr, fp
 80017fe:	000c      	movs	r4, r1
 8001800:	0309      	lsls	r1, r1, #12
 8001802:	b5e0      	push	{r5, r6, r7, lr}
 8001804:	0a49      	lsrs	r1, r1, #9
 8001806:	0f46      	lsrs	r6, r0, #29
 8001808:	005f      	lsls	r7, r3, #1
 800180a:	4331      	orrs	r1, r6
 800180c:	031e      	lsls	r6, r3, #12
 800180e:	0fdb      	lsrs	r3, r3, #31
 8001810:	0a76      	lsrs	r6, r6, #9
 8001812:	469b      	mov	fp, r3
 8001814:	0f53      	lsrs	r3, r2, #29
 8001816:	4333      	orrs	r3, r6
 8001818:	4ec8      	ldr	r6, [pc, #800]	; (8001b3c <__aeabi_dsub+0x348>)
 800181a:	0065      	lsls	r5, r4, #1
 800181c:	00c0      	lsls	r0, r0, #3
 800181e:	0fe4      	lsrs	r4, r4, #31
 8001820:	00d2      	lsls	r2, r2, #3
 8001822:	0d6d      	lsrs	r5, r5, #21
 8001824:	46a2      	mov	sl, r4
 8001826:	4681      	mov	r9, r0
 8001828:	0d7f      	lsrs	r7, r7, #21
 800182a:	469c      	mov	ip, r3
 800182c:	4690      	mov	r8, r2
 800182e:	42b7      	cmp	r7, r6
 8001830:	d100      	bne.n	8001834 <__aeabi_dsub+0x40>
 8001832:	e0b9      	b.n	80019a8 <__aeabi_dsub+0x1b4>
 8001834:	465b      	mov	r3, fp
 8001836:	2601      	movs	r6, #1
 8001838:	4073      	eors	r3, r6
 800183a:	469b      	mov	fp, r3
 800183c:	1bee      	subs	r6, r5, r7
 800183e:	45a3      	cmp	fp, r4
 8001840:	d100      	bne.n	8001844 <__aeabi_dsub+0x50>
 8001842:	e083      	b.n	800194c <__aeabi_dsub+0x158>
 8001844:	2e00      	cmp	r6, #0
 8001846:	dd63      	ble.n	8001910 <__aeabi_dsub+0x11c>
 8001848:	2f00      	cmp	r7, #0
 800184a:	d000      	beq.n	800184e <__aeabi_dsub+0x5a>
 800184c:	e0b1      	b.n	80019b2 <__aeabi_dsub+0x1be>
 800184e:	4663      	mov	r3, ip
 8001850:	4313      	orrs	r3, r2
 8001852:	d100      	bne.n	8001856 <__aeabi_dsub+0x62>
 8001854:	e123      	b.n	8001a9e <__aeabi_dsub+0x2aa>
 8001856:	1e73      	subs	r3, r6, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d000      	beq.n	800185e <__aeabi_dsub+0x6a>
 800185c:	e1ba      	b.n	8001bd4 <__aeabi_dsub+0x3e0>
 800185e:	1a86      	subs	r6, r0, r2
 8001860:	4663      	mov	r3, ip
 8001862:	42b0      	cmp	r0, r6
 8001864:	4180      	sbcs	r0, r0
 8001866:	2501      	movs	r5, #1
 8001868:	1ac9      	subs	r1, r1, r3
 800186a:	4240      	negs	r0, r0
 800186c:	1a09      	subs	r1, r1, r0
 800186e:	020b      	lsls	r3, r1, #8
 8001870:	d400      	bmi.n	8001874 <__aeabi_dsub+0x80>
 8001872:	e147      	b.n	8001b04 <__aeabi_dsub+0x310>
 8001874:	0249      	lsls	r1, r1, #9
 8001876:	0a4b      	lsrs	r3, r1, #9
 8001878:	4698      	mov	r8, r3
 800187a:	4643      	mov	r3, r8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d100      	bne.n	8001882 <__aeabi_dsub+0x8e>
 8001880:	e189      	b.n	8001b96 <__aeabi_dsub+0x3a2>
 8001882:	4640      	mov	r0, r8
 8001884:	f000 fb54 	bl	8001f30 <__clzsi2>
 8001888:	0003      	movs	r3, r0
 800188a:	3b08      	subs	r3, #8
 800188c:	2b1f      	cmp	r3, #31
 800188e:	dd00      	ble.n	8001892 <__aeabi_dsub+0x9e>
 8001890:	e17c      	b.n	8001b8c <__aeabi_dsub+0x398>
 8001892:	2220      	movs	r2, #32
 8001894:	0030      	movs	r0, r6
 8001896:	1ad2      	subs	r2, r2, r3
 8001898:	4641      	mov	r1, r8
 800189a:	40d0      	lsrs	r0, r2
 800189c:	4099      	lsls	r1, r3
 800189e:	0002      	movs	r2, r0
 80018a0:	409e      	lsls	r6, r3
 80018a2:	430a      	orrs	r2, r1
 80018a4:	429d      	cmp	r5, r3
 80018a6:	dd00      	ble.n	80018aa <__aeabi_dsub+0xb6>
 80018a8:	e16a      	b.n	8001b80 <__aeabi_dsub+0x38c>
 80018aa:	1b5d      	subs	r5, r3, r5
 80018ac:	1c6b      	adds	r3, r5, #1
 80018ae:	2b1f      	cmp	r3, #31
 80018b0:	dd00      	ble.n	80018b4 <__aeabi_dsub+0xc0>
 80018b2:	e194      	b.n	8001bde <__aeabi_dsub+0x3ea>
 80018b4:	2120      	movs	r1, #32
 80018b6:	0010      	movs	r0, r2
 80018b8:	0035      	movs	r5, r6
 80018ba:	1ac9      	subs	r1, r1, r3
 80018bc:	408e      	lsls	r6, r1
 80018be:	40da      	lsrs	r2, r3
 80018c0:	4088      	lsls	r0, r1
 80018c2:	40dd      	lsrs	r5, r3
 80018c4:	1e71      	subs	r1, r6, #1
 80018c6:	418e      	sbcs	r6, r1
 80018c8:	0011      	movs	r1, r2
 80018ca:	2207      	movs	r2, #7
 80018cc:	4328      	orrs	r0, r5
 80018ce:	2500      	movs	r5, #0
 80018d0:	4306      	orrs	r6, r0
 80018d2:	4032      	ands	r2, r6
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d009      	beq.n	80018ec <__aeabi_dsub+0xf8>
 80018d8:	230f      	movs	r3, #15
 80018da:	4033      	ands	r3, r6
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d005      	beq.n	80018ec <__aeabi_dsub+0xf8>
 80018e0:	1d33      	adds	r3, r6, #4
 80018e2:	42b3      	cmp	r3, r6
 80018e4:	41b6      	sbcs	r6, r6
 80018e6:	4276      	negs	r6, r6
 80018e8:	1989      	adds	r1, r1, r6
 80018ea:	001e      	movs	r6, r3
 80018ec:	020b      	lsls	r3, r1, #8
 80018ee:	d400      	bmi.n	80018f2 <__aeabi_dsub+0xfe>
 80018f0:	e23d      	b.n	8001d6e <__aeabi_dsub+0x57a>
 80018f2:	1c6a      	adds	r2, r5, #1
 80018f4:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <__aeabi_dsub+0x348>)
 80018f6:	0555      	lsls	r5, r2, #21
 80018f8:	0d6d      	lsrs	r5, r5, #21
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d100      	bne.n	8001900 <__aeabi_dsub+0x10c>
 80018fe:	e119      	b.n	8001b34 <__aeabi_dsub+0x340>
 8001900:	4a8f      	ldr	r2, [pc, #572]	; (8001b40 <__aeabi_dsub+0x34c>)
 8001902:	08f6      	lsrs	r6, r6, #3
 8001904:	400a      	ands	r2, r1
 8001906:	0757      	lsls	r7, r2, #29
 8001908:	0252      	lsls	r2, r2, #9
 800190a:	4337      	orrs	r7, r6
 800190c:	0b12      	lsrs	r2, r2, #12
 800190e:	e09b      	b.n	8001a48 <__aeabi_dsub+0x254>
 8001910:	2e00      	cmp	r6, #0
 8001912:	d000      	beq.n	8001916 <__aeabi_dsub+0x122>
 8001914:	e0c5      	b.n	8001aa2 <__aeabi_dsub+0x2ae>
 8001916:	1c6e      	adds	r6, r5, #1
 8001918:	0576      	lsls	r6, r6, #21
 800191a:	0d76      	lsrs	r6, r6, #21
 800191c:	2e01      	cmp	r6, #1
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dsub+0x12e>
 8001920:	e148      	b.n	8001bb4 <__aeabi_dsub+0x3c0>
 8001922:	4667      	mov	r7, ip
 8001924:	1a86      	subs	r6, r0, r2
 8001926:	1bcb      	subs	r3, r1, r7
 8001928:	42b0      	cmp	r0, r6
 800192a:	41bf      	sbcs	r7, r7
 800192c:	427f      	negs	r7, r7
 800192e:	46b8      	mov	r8, r7
 8001930:	001f      	movs	r7, r3
 8001932:	4643      	mov	r3, r8
 8001934:	1aff      	subs	r7, r7, r3
 8001936:	003b      	movs	r3, r7
 8001938:	46b8      	mov	r8, r7
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	d500      	bpl.n	8001940 <__aeabi_dsub+0x14c>
 800193e:	e15f      	b.n	8001c00 <__aeabi_dsub+0x40c>
 8001940:	4337      	orrs	r7, r6
 8001942:	d19a      	bne.n	800187a <__aeabi_dsub+0x86>
 8001944:	2200      	movs	r2, #0
 8001946:	2400      	movs	r4, #0
 8001948:	2500      	movs	r5, #0
 800194a:	e079      	b.n	8001a40 <__aeabi_dsub+0x24c>
 800194c:	2e00      	cmp	r6, #0
 800194e:	dc00      	bgt.n	8001952 <__aeabi_dsub+0x15e>
 8001950:	e0fa      	b.n	8001b48 <__aeabi_dsub+0x354>
 8001952:	2f00      	cmp	r7, #0
 8001954:	d100      	bne.n	8001958 <__aeabi_dsub+0x164>
 8001956:	e08d      	b.n	8001a74 <__aeabi_dsub+0x280>
 8001958:	4b78      	ldr	r3, [pc, #480]	; (8001b3c <__aeabi_dsub+0x348>)
 800195a:	429d      	cmp	r5, r3
 800195c:	d067      	beq.n	8001a2e <__aeabi_dsub+0x23a>
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	4667      	mov	r7, ip
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	431f      	orrs	r7, r3
 8001966:	46bc      	mov	ip, r7
 8001968:	2e38      	cmp	r6, #56	; 0x38
 800196a:	dc00      	bgt.n	800196e <__aeabi_dsub+0x17a>
 800196c:	e152      	b.n	8001c14 <__aeabi_dsub+0x420>
 800196e:	4663      	mov	r3, ip
 8001970:	4313      	orrs	r3, r2
 8001972:	1e5a      	subs	r2, r3, #1
 8001974:	4193      	sbcs	r3, r2
 8001976:	181e      	adds	r6, r3, r0
 8001978:	4286      	cmp	r6, r0
 800197a:	4180      	sbcs	r0, r0
 800197c:	4240      	negs	r0, r0
 800197e:	1809      	adds	r1, r1, r0
 8001980:	020b      	lsls	r3, r1, #8
 8001982:	d400      	bmi.n	8001986 <__aeabi_dsub+0x192>
 8001984:	e0be      	b.n	8001b04 <__aeabi_dsub+0x310>
 8001986:	4b6d      	ldr	r3, [pc, #436]	; (8001b3c <__aeabi_dsub+0x348>)
 8001988:	3501      	adds	r5, #1
 800198a:	429d      	cmp	r5, r3
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x19c>
 800198e:	e0d2      	b.n	8001b36 <__aeabi_dsub+0x342>
 8001990:	4a6b      	ldr	r2, [pc, #428]	; (8001b40 <__aeabi_dsub+0x34c>)
 8001992:	0873      	lsrs	r3, r6, #1
 8001994:	400a      	ands	r2, r1
 8001996:	2101      	movs	r1, #1
 8001998:	400e      	ands	r6, r1
 800199a:	431e      	orrs	r6, r3
 800199c:	0851      	lsrs	r1, r2, #1
 800199e:	07d3      	lsls	r3, r2, #31
 80019a0:	2207      	movs	r2, #7
 80019a2:	431e      	orrs	r6, r3
 80019a4:	4032      	ands	r2, r6
 80019a6:	e795      	b.n	80018d4 <__aeabi_dsub+0xe0>
 80019a8:	001e      	movs	r6, r3
 80019aa:	4316      	orrs	r6, r2
 80019ac:	d000      	beq.n	80019b0 <__aeabi_dsub+0x1bc>
 80019ae:	e745      	b.n	800183c <__aeabi_dsub+0x48>
 80019b0:	e740      	b.n	8001834 <__aeabi_dsub+0x40>
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <__aeabi_dsub+0x348>)
 80019b4:	429d      	cmp	r5, r3
 80019b6:	d03a      	beq.n	8001a2e <__aeabi_dsub+0x23a>
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	4667      	mov	r7, ip
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	431f      	orrs	r7, r3
 80019c0:	46bc      	mov	ip, r7
 80019c2:	2e38      	cmp	r6, #56	; 0x38
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dsub+0x1d4>
 80019c6:	e0eb      	b.n	8001ba0 <__aeabi_dsub+0x3ac>
 80019c8:	2e1f      	cmp	r6, #31
 80019ca:	dc00      	bgt.n	80019ce <__aeabi_dsub+0x1da>
 80019cc:	e13a      	b.n	8001c44 <__aeabi_dsub+0x450>
 80019ce:	0033      	movs	r3, r6
 80019d0:	4667      	mov	r7, ip
 80019d2:	3b20      	subs	r3, #32
 80019d4:	40df      	lsrs	r7, r3
 80019d6:	003b      	movs	r3, r7
 80019d8:	2e20      	cmp	r6, #32
 80019da:	d005      	beq.n	80019e8 <__aeabi_dsub+0x1f4>
 80019dc:	2740      	movs	r7, #64	; 0x40
 80019de:	1bbf      	subs	r7, r7, r6
 80019e0:	4666      	mov	r6, ip
 80019e2:	40be      	lsls	r6, r7
 80019e4:	4332      	orrs	r2, r6
 80019e6:	4690      	mov	r8, r2
 80019e8:	4646      	mov	r6, r8
 80019ea:	1e72      	subs	r2, r6, #1
 80019ec:	4196      	sbcs	r6, r2
 80019ee:	4333      	orrs	r3, r6
 80019f0:	e0da      	b.n	8001ba8 <__aeabi_dsub+0x3b4>
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dsub+0x204>
 80019f6:	e214      	b.n	8001e22 <__aeabi_dsub+0x62e>
 80019f8:	4663      	mov	r3, ip
 80019fa:	4313      	orrs	r3, r2
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x20c>
 80019fe:	e168      	b.n	8001cd2 <__aeabi_dsub+0x4de>
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	074e      	lsls	r6, r1, #29
 8001a04:	08c0      	lsrs	r0, r0, #3
 8001a06:	08c9      	lsrs	r1, r1, #3
 8001a08:	031b      	lsls	r3, r3, #12
 8001a0a:	4306      	orrs	r6, r0
 8001a0c:	4219      	tst	r1, r3
 8001a0e:	d008      	beq.n	8001a22 <__aeabi_dsub+0x22e>
 8001a10:	4660      	mov	r0, ip
 8001a12:	08c0      	lsrs	r0, r0, #3
 8001a14:	4218      	tst	r0, r3
 8001a16:	d104      	bne.n	8001a22 <__aeabi_dsub+0x22e>
 8001a18:	4663      	mov	r3, ip
 8001a1a:	0001      	movs	r1, r0
 8001a1c:	08d2      	lsrs	r2, r2, #3
 8001a1e:	075e      	lsls	r6, r3, #29
 8001a20:	4316      	orrs	r6, r2
 8001a22:	00f3      	lsls	r3, r6, #3
 8001a24:	4699      	mov	r9, r3
 8001a26:	00c9      	lsls	r1, r1, #3
 8001a28:	0f72      	lsrs	r2, r6, #29
 8001a2a:	4d44      	ldr	r5, [pc, #272]	; (8001b3c <__aeabi_dsub+0x348>)
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	464b      	mov	r3, r9
 8001a30:	08de      	lsrs	r6, r3, #3
 8001a32:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <__aeabi_dsub+0x348>)
 8001a34:	074f      	lsls	r7, r1, #29
 8001a36:	4337      	orrs	r7, r6
 8001a38:	08ca      	lsrs	r2, r1, #3
 8001a3a:	429d      	cmp	r5, r3
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x24c>
 8001a3e:	e06e      	b.n	8001b1e <__aeabi_dsub+0x32a>
 8001a40:	0312      	lsls	r2, r2, #12
 8001a42:	056d      	lsls	r5, r5, #21
 8001a44:	0b12      	lsrs	r2, r2, #12
 8001a46:	0d6d      	lsrs	r5, r5, #21
 8001a48:	2100      	movs	r1, #0
 8001a4a:	0312      	lsls	r2, r2, #12
 8001a4c:	0b13      	lsrs	r3, r2, #12
 8001a4e:	0d0a      	lsrs	r2, r1, #20
 8001a50:	0512      	lsls	r2, r2, #20
 8001a52:	431a      	orrs	r2, r3
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <__aeabi_dsub+0x350>)
 8001a56:	052d      	lsls	r5, r5, #20
 8001a58:	4013      	ands	r3, r2
 8001a5a:	432b      	orrs	r3, r5
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	07e4      	lsls	r4, r4, #31
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	4323      	orrs	r3, r4
 8001a64:	0038      	movs	r0, r7
 8001a66:	0019      	movs	r1, r3
 8001a68:	bc3c      	pop	{r2, r3, r4, r5}
 8001a6a:	4690      	mov	r8, r2
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	46a2      	mov	sl, r4
 8001a70:	46ab      	mov	fp, r5
 8001a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a74:	4663      	mov	r3, ip
 8001a76:	4313      	orrs	r3, r2
 8001a78:	d011      	beq.n	8001a9e <__aeabi_dsub+0x2aa>
 8001a7a:	1e73      	subs	r3, r6, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d000      	beq.n	8001a82 <__aeabi_dsub+0x28e>
 8001a80:	e107      	b.n	8001c92 <__aeabi_dsub+0x49e>
 8001a82:	1886      	adds	r6, r0, r2
 8001a84:	4286      	cmp	r6, r0
 8001a86:	4180      	sbcs	r0, r0
 8001a88:	4461      	add	r1, ip
 8001a8a:	4240      	negs	r0, r0
 8001a8c:	1809      	adds	r1, r1, r0
 8001a8e:	2501      	movs	r5, #1
 8001a90:	020b      	lsls	r3, r1, #8
 8001a92:	d537      	bpl.n	8001b04 <__aeabi_dsub+0x310>
 8001a94:	2502      	movs	r5, #2
 8001a96:	e77b      	b.n	8001990 <__aeabi_dsub+0x19c>
 8001a98:	003e      	movs	r6, r7
 8001a9a:	4661      	mov	r1, ip
 8001a9c:	4691      	mov	r9, r2
 8001a9e:	0035      	movs	r5, r6
 8001aa0:	e7c5      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001aa2:	465c      	mov	r4, fp
 8001aa4:	2d00      	cmp	r5, #0
 8001aa6:	d000      	beq.n	8001aaa <__aeabi_dsub+0x2b6>
 8001aa8:	e0e1      	b.n	8001c6e <__aeabi_dsub+0x47a>
 8001aaa:	000b      	movs	r3, r1
 8001aac:	4303      	orrs	r3, r0
 8001aae:	d0f3      	beq.n	8001a98 <__aeabi_dsub+0x2a4>
 8001ab0:	1c73      	adds	r3, r6, #1
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x2c2>
 8001ab4:	e1ac      	b.n	8001e10 <__aeabi_dsub+0x61c>
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <__aeabi_dsub+0x348>)
 8001ab8:	429f      	cmp	r7, r3
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x2ca>
 8001abc:	e13a      	b.n	8001d34 <__aeabi_dsub+0x540>
 8001abe:	43f3      	mvns	r3, r6
 8001ac0:	2b38      	cmp	r3, #56	; 0x38
 8001ac2:	dd00      	ble.n	8001ac6 <__aeabi_dsub+0x2d2>
 8001ac4:	e16f      	b.n	8001da6 <__aeabi_dsub+0x5b2>
 8001ac6:	2b1f      	cmp	r3, #31
 8001ac8:	dd00      	ble.n	8001acc <__aeabi_dsub+0x2d8>
 8001aca:	e18c      	b.n	8001de6 <__aeabi_dsub+0x5f2>
 8001acc:	2520      	movs	r5, #32
 8001ace:	000e      	movs	r6, r1
 8001ad0:	1aed      	subs	r5, r5, r3
 8001ad2:	40ae      	lsls	r6, r5
 8001ad4:	46b0      	mov	r8, r6
 8001ad6:	0006      	movs	r6, r0
 8001ad8:	46aa      	mov	sl, r5
 8001ada:	40de      	lsrs	r6, r3
 8001adc:	4645      	mov	r5, r8
 8001ade:	4335      	orrs	r5, r6
 8001ae0:	002e      	movs	r6, r5
 8001ae2:	4655      	mov	r5, sl
 8001ae4:	40d9      	lsrs	r1, r3
 8001ae6:	40a8      	lsls	r0, r5
 8001ae8:	4663      	mov	r3, ip
 8001aea:	1e45      	subs	r5, r0, #1
 8001aec:	41a8      	sbcs	r0, r5
 8001aee:	1a5b      	subs	r3, r3, r1
 8001af0:	469c      	mov	ip, r3
 8001af2:	4330      	orrs	r0, r6
 8001af4:	1a16      	subs	r6, r2, r0
 8001af6:	42b2      	cmp	r2, r6
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4663      	mov	r3, ip
 8001afc:	4252      	negs	r2, r2
 8001afe:	1a99      	subs	r1, r3, r2
 8001b00:	003d      	movs	r5, r7
 8001b02:	e6b4      	b.n	800186e <__aeabi_dsub+0x7a>
 8001b04:	2207      	movs	r2, #7
 8001b06:	4032      	ands	r2, r6
 8001b08:	2a00      	cmp	r2, #0
 8001b0a:	d000      	beq.n	8001b0e <__aeabi_dsub+0x31a>
 8001b0c:	e6e4      	b.n	80018d8 <__aeabi_dsub+0xe4>
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <__aeabi_dsub+0x348>)
 8001b10:	08f6      	lsrs	r6, r6, #3
 8001b12:	074f      	lsls	r7, r1, #29
 8001b14:	4337      	orrs	r7, r6
 8001b16:	08ca      	lsrs	r2, r1, #3
 8001b18:	429d      	cmp	r5, r3
 8001b1a:	d000      	beq.n	8001b1e <__aeabi_dsub+0x32a>
 8001b1c:	e790      	b.n	8001a40 <__aeabi_dsub+0x24c>
 8001b1e:	003b      	movs	r3, r7
 8001b20:	4313      	orrs	r3, r2
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x332>
 8001b24:	e1a6      	b.n	8001e74 <__aeabi_dsub+0x680>
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	031b      	lsls	r3, r3, #12
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	0312      	lsls	r2, r2, #12
 8001b2e:	0b12      	lsrs	r2, r2, #12
 8001b30:	4d02      	ldr	r5, [pc, #8]	; (8001b3c <__aeabi_dsub+0x348>)
 8001b32:	e789      	b.n	8001a48 <__aeabi_dsub+0x254>
 8001b34:	0015      	movs	r5, r2
 8001b36:	2200      	movs	r2, #0
 8001b38:	2700      	movs	r7, #0
 8001b3a:	e785      	b.n	8001a48 <__aeabi_dsub+0x254>
 8001b3c:	000007ff 	.word	0x000007ff
 8001b40:	ff7fffff 	.word	0xff7fffff
 8001b44:	800fffff 	.word	0x800fffff
 8001b48:	2e00      	cmp	r6, #0
 8001b4a:	d000      	beq.n	8001b4e <__aeabi_dsub+0x35a>
 8001b4c:	e0c7      	b.n	8001cde <__aeabi_dsub+0x4ea>
 8001b4e:	1c6b      	adds	r3, r5, #1
 8001b50:	055e      	lsls	r6, r3, #21
 8001b52:	0d76      	lsrs	r6, r6, #21
 8001b54:	2e01      	cmp	r6, #1
 8001b56:	dc00      	bgt.n	8001b5a <__aeabi_dsub+0x366>
 8001b58:	e0f0      	b.n	8001d3c <__aeabi_dsub+0x548>
 8001b5a:	4dc8      	ldr	r5, [pc, #800]	; (8001e7c <__aeabi_dsub+0x688>)
 8001b5c:	42ab      	cmp	r3, r5
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0x36e>
 8001b60:	e0b9      	b.n	8001cd6 <__aeabi_dsub+0x4e2>
 8001b62:	1885      	adds	r5, r0, r2
 8001b64:	000a      	movs	r2, r1
 8001b66:	4285      	cmp	r5, r0
 8001b68:	4189      	sbcs	r1, r1
 8001b6a:	4462      	add	r2, ip
 8001b6c:	4249      	negs	r1, r1
 8001b6e:	1851      	adds	r1, r2, r1
 8001b70:	2207      	movs	r2, #7
 8001b72:	07ce      	lsls	r6, r1, #31
 8001b74:	086d      	lsrs	r5, r5, #1
 8001b76:	432e      	orrs	r6, r5
 8001b78:	0849      	lsrs	r1, r1, #1
 8001b7a:	4032      	ands	r2, r6
 8001b7c:	001d      	movs	r5, r3
 8001b7e:	e6a9      	b.n	80018d4 <__aeabi_dsub+0xe0>
 8001b80:	49bf      	ldr	r1, [pc, #764]	; (8001e80 <__aeabi_dsub+0x68c>)
 8001b82:	1aed      	subs	r5, r5, r3
 8001b84:	4011      	ands	r1, r2
 8001b86:	2207      	movs	r2, #7
 8001b88:	4032      	ands	r2, r6
 8001b8a:	e6a3      	b.n	80018d4 <__aeabi_dsub+0xe0>
 8001b8c:	0032      	movs	r2, r6
 8001b8e:	3828      	subs	r0, #40	; 0x28
 8001b90:	4082      	lsls	r2, r0
 8001b92:	2600      	movs	r6, #0
 8001b94:	e686      	b.n	80018a4 <__aeabi_dsub+0xb0>
 8001b96:	0030      	movs	r0, r6
 8001b98:	f000 f9ca 	bl	8001f30 <__clzsi2>
 8001b9c:	3020      	adds	r0, #32
 8001b9e:	e673      	b.n	8001888 <__aeabi_dsub+0x94>
 8001ba0:	4663      	mov	r3, ip
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	4193      	sbcs	r3, r2
 8001ba8:	1ac6      	subs	r6, r0, r3
 8001baa:	42b0      	cmp	r0, r6
 8001bac:	4180      	sbcs	r0, r0
 8001bae:	4240      	negs	r0, r0
 8001bb0:	1a09      	subs	r1, r1, r0
 8001bb2:	e65c      	b.n	800186e <__aeabi_dsub+0x7a>
 8001bb4:	000e      	movs	r6, r1
 8001bb6:	4667      	mov	r7, ip
 8001bb8:	4306      	orrs	r6, r0
 8001bba:	4317      	orrs	r7, r2
 8001bbc:	2d00      	cmp	r5, #0
 8001bbe:	d15e      	bne.n	8001c7e <__aeabi_dsub+0x48a>
 8001bc0:	2e00      	cmp	r6, #0
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x3d2>
 8001bc4:	e0f3      	b.n	8001dae <__aeabi_dsub+0x5ba>
 8001bc6:	2f00      	cmp	r7, #0
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x3d8>
 8001bca:	e11e      	b.n	8001e0a <__aeabi_dsub+0x616>
 8001bcc:	465c      	mov	r4, fp
 8001bce:	4661      	mov	r1, ip
 8001bd0:	4691      	mov	r9, r2
 8001bd2:	e72c      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001bd4:	4fa9      	ldr	r7, [pc, #676]	; (8001e7c <__aeabi_dsub+0x688>)
 8001bd6:	42be      	cmp	r6, r7
 8001bd8:	d07b      	beq.n	8001cd2 <__aeabi_dsub+0x4de>
 8001bda:	001e      	movs	r6, r3
 8001bdc:	e6f1      	b.n	80019c2 <__aeabi_dsub+0x1ce>
 8001bde:	0010      	movs	r0, r2
 8001be0:	3d1f      	subs	r5, #31
 8001be2:	40e8      	lsrs	r0, r5
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	d003      	beq.n	8001bf0 <__aeabi_dsub+0x3fc>
 8001be8:	2140      	movs	r1, #64	; 0x40
 8001bea:	1acb      	subs	r3, r1, r3
 8001bec:	409a      	lsls	r2, r3
 8001bee:	4316      	orrs	r6, r2
 8001bf0:	1e73      	subs	r3, r6, #1
 8001bf2:	419e      	sbcs	r6, r3
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	4306      	orrs	r6, r0
 8001bf8:	4032      	ands	r2, r6
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2500      	movs	r5, #0
 8001bfe:	e783      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001c00:	1a16      	subs	r6, r2, r0
 8001c02:	4663      	mov	r3, ip
 8001c04:	42b2      	cmp	r2, r6
 8001c06:	4180      	sbcs	r0, r0
 8001c08:	1a59      	subs	r1, r3, r1
 8001c0a:	4240      	negs	r0, r0
 8001c0c:	1a0b      	subs	r3, r1, r0
 8001c0e:	4698      	mov	r8, r3
 8001c10:	465c      	mov	r4, fp
 8001c12:	e632      	b.n	800187a <__aeabi_dsub+0x86>
 8001c14:	2e1f      	cmp	r6, #31
 8001c16:	dd00      	ble.n	8001c1a <__aeabi_dsub+0x426>
 8001c18:	e0ab      	b.n	8001d72 <__aeabi_dsub+0x57e>
 8001c1a:	2720      	movs	r7, #32
 8001c1c:	1bbb      	subs	r3, r7, r6
 8001c1e:	469a      	mov	sl, r3
 8001c20:	4663      	mov	r3, ip
 8001c22:	4657      	mov	r7, sl
 8001c24:	40bb      	lsls	r3, r7
 8001c26:	4699      	mov	r9, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	464f      	mov	r7, r9
 8001c2c:	40f3      	lsrs	r3, r6
 8001c2e:	431f      	orrs	r7, r3
 8001c30:	003b      	movs	r3, r7
 8001c32:	4657      	mov	r7, sl
 8001c34:	40ba      	lsls	r2, r7
 8001c36:	1e57      	subs	r7, r2, #1
 8001c38:	41ba      	sbcs	r2, r7
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	40f2      	lsrs	r2, r6
 8001c40:	1889      	adds	r1, r1, r2
 8001c42:	e698      	b.n	8001976 <__aeabi_dsub+0x182>
 8001c44:	2720      	movs	r7, #32
 8001c46:	1bbb      	subs	r3, r7, r6
 8001c48:	469a      	mov	sl, r3
 8001c4a:	4663      	mov	r3, ip
 8001c4c:	4657      	mov	r7, sl
 8001c4e:	40bb      	lsls	r3, r7
 8001c50:	4699      	mov	r9, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	464f      	mov	r7, r9
 8001c56:	40f3      	lsrs	r3, r6
 8001c58:	431f      	orrs	r7, r3
 8001c5a:	003b      	movs	r3, r7
 8001c5c:	4657      	mov	r7, sl
 8001c5e:	40ba      	lsls	r2, r7
 8001c60:	1e57      	subs	r7, r2, #1
 8001c62:	41ba      	sbcs	r2, r7
 8001c64:	4313      	orrs	r3, r2
 8001c66:	4662      	mov	r2, ip
 8001c68:	40f2      	lsrs	r2, r6
 8001c6a:	1a89      	subs	r1, r1, r2
 8001c6c:	e79c      	b.n	8001ba8 <__aeabi_dsub+0x3b4>
 8001c6e:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <__aeabi_dsub+0x688>)
 8001c70:	429f      	cmp	r7, r3
 8001c72:	d05f      	beq.n	8001d34 <__aeabi_dsub+0x540>
 8001c74:	2580      	movs	r5, #128	; 0x80
 8001c76:	042d      	lsls	r5, r5, #16
 8001c78:	4273      	negs	r3, r6
 8001c7a:	4329      	orrs	r1, r5
 8001c7c:	e720      	b.n	8001ac0 <__aeabi_dsub+0x2cc>
 8001c7e:	2e00      	cmp	r6, #0
 8001c80:	d10c      	bne.n	8001c9c <__aeabi_dsub+0x4a8>
 8001c82:	2f00      	cmp	r7, #0
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x494>
 8001c86:	e0d0      	b.n	8001e2a <__aeabi_dsub+0x636>
 8001c88:	465c      	mov	r4, fp
 8001c8a:	4661      	mov	r1, ip
 8001c8c:	4691      	mov	r9, r2
 8001c8e:	4d7b      	ldr	r5, [pc, #492]	; (8001e7c <__aeabi_dsub+0x688>)
 8001c90:	e6cd      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001c92:	4f7a      	ldr	r7, [pc, #488]	; (8001e7c <__aeabi_dsub+0x688>)
 8001c94:	42be      	cmp	r6, r7
 8001c96:	d01c      	beq.n	8001cd2 <__aeabi_dsub+0x4de>
 8001c98:	001e      	movs	r6, r3
 8001c9a:	e665      	b.n	8001968 <__aeabi_dsub+0x174>
 8001c9c:	2f00      	cmp	r7, #0
 8001c9e:	d018      	beq.n	8001cd2 <__aeabi_dsub+0x4de>
 8001ca0:	08c0      	lsrs	r0, r0, #3
 8001ca2:	074e      	lsls	r6, r1, #29
 8001ca4:	4306      	orrs	r6, r0
 8001ca6:	2080      	movs	r0, #128	; 0x80
 8001ca8:	08c9      	lsrs	r1, r1, #3
 8001caa:	0300      	lsls	r0, r0, #12
 8001cac:	4201      	tst	r1, r0
 8001cae:	d008      	beq.n	8001cc2 <__aeabi_dsub+0x4ce>
 8001cb0:	4663      	mov	r3, ip
 8001cb2:	08dc      	lsrs	r4, r3, #3
 8001cb4:	4204      	tst	r4, r0
 8001cb6:	d104      	bne.n	8001cc2 <__aeabi_dsub+0x4ce>
 8001cb8:	0021      	movs	r1, r4
 8001cba:	46da      	mov	sl, fp
 8001cbc:	08d2      	lsrs	r2, r2, #3
 8001cbe:	075e      	lsls	r6, r3, #29
 8001cc0:	4316      	orrs	r6, r2
 8001cc2:	00f3      	lsls	r3, r6, #3
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	2401      	movs	r4, #1
 8001cc8:	4653      	mov	r3, sl
 8001cca:	00c9      	lsls	r1, r1, #3
 8001ccc:	0f72      	lsrs	r2, r6, #29
 8001cce:	4311      	orrs	r1, r2
 8001cd0:	401c      	ands	r4, r3
 8001cd2:	4d6a      	ldr	r5, [pc, #424]	; (8001e7c <__aeabi_dsub+0x688>)
 8001cd4:	e6ab      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001cd6:	001d      	movs	r5, r3
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2700      	movs	r7, #0
 8001cdc:	e6b4      	b.n	8001a48 <__aeabi_dsub+0x254>
 8001cde:	2d00      	cmp	r5, #0
 8001ce0:	d159      	bne.n	8001d96 <__aeabi_dsub+0x5a2>
 8001ce2:	000b      	movs	r3, r1
 8001ce4:	4303      	orrs	r3, r0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x4f6>
 8001ce8:	e6d6      	b.n	8001a98 <__aeabi_dsub+0x2a4>
 8001cea:	1c73      	adds	r3, r6, #1
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x4fc>
 8001cee:	e0b2      	b.n	8001e56 <__aeabi_dsub+0x662>
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <__aeabi_dsub+0x688>)
 8001cf2:	429f      	cmp	r7, r3
 8001cf4:	d01e      	beq.n	8001d34 <__aeabi_dsub+0x540>
 8001cf6:	43f3      	mvns	r3, r6
 8001cf8:	2b38      	cmp	r3, #56	; 0x38
 8001cfa:	dc6f      	bgt.n	8001ddc <__aeabi_dsub+0x5e8>
 8001cfc:	2b1f      	cmp	r3, #31
 8001cfe:	dd00      	ble.n	8001d02 <__aeabi_dsub+0x50e>
 8001d00:	e097      	b.n	8001e32 <__aeabi_dsub+0x63e>
 8001d02:	2520      	movs	r5, #32
 8001d04:	000e      	movs	r6, r1
 8001d06:	1aed      	subs	r5, r5, r3
 8001d08:	40ae      	lsls	r6, r5
 8001d0a:	46b0      	mov	r8, r6
 8001d0c:	0006      	movs	r6, r0
 8001d0e:	46aa      	mov	sl, r5
 8001d10:	40de      	lsrs	r6, r3
 8001d12:	4645      	mov	r5, r8
 8001d14:	4335      	orrs	r5, r6
 8001d16:	002e      	movs	r6, r5
 8001d18:	4655      	mov	r5, sl
 8001d1a:	40a8      	lsls	r0, r5
 8001d1c:	40d9      	lsrs	r1, r3
 8001d1e:	1e45      	subs	r5, r0, #1
 8001d20:	41a8      	sbcs	r0, r5
 8001d22:	448c      	add	ip, r1
 8001d24:	4306      	orrs	r6, r0
 8001d26:	18b6      	adds	r6, r6, r2
 8001d28:	4296      	cmp	r6, r2
 8001d2a:	4192      	sbcs	r2, r2
 8001d2c:	4251      	negs	r1, r2
 8001d2e:	4461      	add	r1, ip
 8001d30:	003d      	movs	r5, r7
 8001d32:	e625      	b.n	8001980 <__aeabi_dsub+0x18c>
 8001d34:	003d      	movs	r5, r7
 8001d36:	4661      	mov	r1, ip
 8001d38:	4691      	mov	r9, r2
 8001d3a:	e678      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001d3c:	000b      	movs	r3, r1
 8001d3e:	4303      	orrs	r3, r0
 8001d40:	2d00      	cmp	r5, #0
 8001d42:	d000      	beq.n	8001d46 <__aeabi_dsub+0x552>
 8001d44:	e655      	b.n	80019f2 <__aeabi_dsub+0x1fe>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f5      	beq.n	8001d36 <__aeabi_dsub+0x542>
 8001d4a:	4663      	mov	r3, ip
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x55e>
 8001d50:	e66d      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001d52:	1886      	adds	r6, r0, r2
 8001d54:	4286      	cmp	r6, r0
 8001d56:	4180      	sbcs	r0, r0
 8001d58:	4461      	add	r1, ip
 8001d5a:	4240      	negs	r0, r0
 8001d5c:	1809      	adds	r1, r1, r0
 8001d5e:	2200      	movs	r2, #0
 8001d60:	020b      	lsls	r3, r1, #8
 8001d62:	d400      	bmi.n	8001d66 <__aeabi_dsub+0x572>
 8001d64:	e6d0      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <__aeabi_dsub+0x68c>)
 8001d68:	3501      	adds	r5, #1
 8001d6a:	4019      	ands	r1, r3
 8001d6c:	e5b2      	b.n	80018d4 <__aeabi_dsub+0xe0>
 8001d6e:	46b1      	mov	r9, r6
 8001d70:	e65d      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001d72:	0033      	movs	r3, r6
 8001d74:	4667      	mov	r7, ip
 8001d76:	3b20      	subs	r3, #32
 8001d78:	40df      	lsrs	r7, r3
 8001d7a:	003b      	movs	r3, r7
 8001d7c:	2e20      	cmp	r6, #32
 8001d7e:	d005      	beq.n	8001d8c <__aeabi_dsub+0x598>
 8001d80:	2740      	movs	r7, #64	; 0x40
 8001d82:	1bbf      	subs	r7, r7, r6
 8001d84:	4666      	mov	r6, ip
 8001d86:	40be      	lsls	r6, r7
 8001d88:	4332      	orrs	r2, r6
 8001d8a:	4690      	mov	r8, r2
 8001d8c:	4646      	mov	r6, r8
 8001d8e:	1e72      	subs	r2, r6, #1
 8001d90:	4196      	sbcs	r6, r2
 8001d92:	4333      	orrs	r3, r6
 8001d94:	e5ef      	b.n	8001976 <__aeabi_dsub+0x182>
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <__aeabi_dsub+0x688>)
 8001d98:	429f      	cmp	r7, r3
 8001d9a:	d0cb      	beq.n	8001d34 <__aeabi_dsub+0x540>
 8001d9c:	2580      	movs	r5, #128	; 0x80
 8001d9e:	042d      	lsls	r5, r5, #16
 8001da0:	4273      	negs	r3, r6
 8001da2:	4329      	orrs	r1, r5
 8001da4:	e7a8      	b.n	8001cf8 <__aeabi_dsub+0x504>
 8001da6:	4308      	orrs	r0, r1
 8001da8:	1e41      	subs	r1, r0, #1
 8001daa:	4188      	sbcs	r0, r1
 8001dac:	e6a2      	b.n	8001af4 <__aeabi_dsub+0x300>
 8001dae:	2f00      	cmp	r7, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x5c0>
 8001db2:	e63c      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001db4:	4663      	mov	r3, ip
 8001db6:	1a86      	subs	r6, r0, r2
 8001db8:	1acf      	subs	r7, r1, r3
 8001dba:	42b0      	cmp	r0, r6
 8001dbc:	419b      	sbcs	r3, r3
 8001dbe:	425b      	negs	r3, r3
 8001dc0:	1afb      	subs	r3, r7, r3
 8001dc2:	4698      	mov	r8, r3
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	d54e      	bpl.n	8001e66 <__aeabi_dsub+0x672>
 8001dc8:	1a16      	subs	r6, r2, r0
 8001dca:	4663      	mov	r3, ip
 8001dcc:	42b2      	cmp	r2, r6
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	1a59      	subs	r1, r3, r1
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	1a89      	subs	r1, r1, r2
 8001dd6:	465c      	mov	r4, fp
 8001dd8:	2200      	movs	r2, #0
 8001dda:	e57b      	b.n	80018d4 <__aeabi_dsub+0xe0>
 8001ddc:	4301      	orrs	r1, r0
 8001dde:	000e      	movs	r6, r1
 8001de0:	1e71      	subs	r1, r6, #1
 8001de2:	418e      	sbcs	r6, r1
 8001de4:	e79f      	b.n	8001d26 <__aeabi_dsub+0x532>
 8001de6:	001d      	movs	r5, r3
 8001de8:	000e      	movs	r6, r1
 8001dea:	3d20      	subs	r5, #32
 8001dec:	40ee      	lsrs	r6, r5
 8001dee:	46b0      	mov	r8, r6
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d004      	beq.n	8001dfe <__aeabi_dsub+0x60a>
 8001df4:	2540      	movs	r5, #64	; 0x40
 8001df6:	1aeb      	subs	r3, r5, r3
 8001df8:	4099      	lsls	r1, r3
 8001dfa:	4308      	orrs	r0, r1
 8001dfc:	4681      	mov	r9, r0
 8001dfe:	4648      	mov	r0, r9
 8001e00:	4643      	mov	r3, r8
 8001e02:	1e41      	subs	r1, r0, #1
 8001e04:	4188      	sbcs	r0, r1
 8001e06:	4318      	orrs	r0, r3
 8001e08:	e674      	b.n	8001af4 <__aeabi_dsub+0x300>
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2400      	movs	r4, #0
 8001e0e:	e617      	b.n	8001a40 <__aeabi_dsub+0x24c>
 8001e10:	1a16      	subs	r6, r2, r0
 8001e12:	4663      	mov	r3, ip
 8001e14:	42b2      	cmp	r2, r6
 8001e16:	4192      	sbcs	r2, r2
 8001e18:	1a59      	subs	r1, r3, r1
 8001e1a:	4252      	negs	r2, r2
 8001e1c:	1a89      	subs	r1, r1, r2
 8001e1e:	003d      	movs	r5, r7
 8001e20:	e525      	b.n	800186e <__aeabi_dsub+0x7a>
 8001e22:	4661      	mov	r1, ip
 8001e24:	4691      	mov	r9, r2
 8001e26:	4d15      	ldr	r5, [pc, #84]	; (8001e7c <__aeabi_dsub+0x688>)
 8001e28:	e601      	b.n	8001a2e <__aeabi_dsub+0x23a>
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	2400      	movs	r4, #0
 8001e2e:	0312      	lsls	r2, r2, #12
 8001e30:	e679      	b.n	8001b26 <__aeabi_dsub+0x332>
 8001e32:	001d      	movs	r5, r3
 8001e34:	000e      	movs	r6, r1
 8001e36:	3d20      	subs	r5, #32
 8001e38:	40ee      	lsrs	r6, r5
 8001e3a:	46b0      	mov	r8, r6
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d004      	beq.n	8001e4a <__aeabi_dsub+0x656>
 8001e40:	2540      	movs	r5, #64	; 0x40
 8001e42:	1aeb      	subs	r3, r5, r3
 8001e44:	4099      	lsls	r1, r3
 8001e46:	4308      	orrs	r0, r1
 8001e48:	4681      	mov	r9, r0
 8001e4a:	464e      	mov	r6, r9
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	1e71      	subs	r1, r6, #1
 8001e50:	418e      	sbcs	r6, r1
 8001e52:	431e      	orrs	r6, r3
 8001e54:	e767      	b.n	8001d26 <__aeabi_dsub+0x532>
 8001e56:	1886      	adds	r6, r0, r2
 8001e58:	4296      	cmp	r6, r2
 8001e5a:	419b      	sbcs	r3, r3
 8001e5c:	4461      	add	r1, ip
 8001e5e:	425b      	negs	r3, r3
 8001e60:	18c9      	adds	r1, r1, r3
 8001e62:	003d      	movs	r5, r7
 8001e64:	e58c      	b.n	8001980 <__aeabi_dsub+0x18c>
 8001e66:	4647      	mov	r7, r8
 8001e68:	4337      	orrs	r7, r6
 8001e6a:	d0ce      	beq.n	8001e0a <__aeabi_dsub+0x616>
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	4641      	mov	r1, r8
 8001e70:	4032      	ands	r2, r6
 8001e72:	e649      	b.n	8001b08 <__aeabi_dsub+0x314>
 8001e74:	2700      	movs	r7, #0
 8001e76:	003a      	movs	r2, r7
 8001e78:	e5e6      	b.n	8001a48 <__aeabi_dsub+0x254>
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	000007ff 	.word	0x000007ff
 8001e80:	ff7fffff 	.word	0xff7fffff

08001e84 <__aeabi_dcmpun>:
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	4e0c      	ldr	r6, [pc, #48]	; (8001eb8 <__aeabi_dcmpun+0x34>)
 8001e88:	030d      	lsls	r5, r1, #12
 8001e8a:	031c      	lsls	r4, r3, #12
 8001e8c:	0049      	lsls	r1, r1, #1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	0b2d      	lsrs	r5, r5, #12
 8001e92:	0d49      	lsrs	r1, r1, #21
 8001e94:	0b24      	lsrs	r4, r4, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	42b1      	cmp	r1, r6
 8001e9a:	d008      	beq.n	8001eae <__aeabi_dcmpun+0x2a>
 8001e9c:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <__aeabi_dcmpun+0x34>)
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	428b      	cmp	r3, r1
 8001ea2:	d103      	bne.n	8001eac <__aeabi_dcmpun+0x28>
 8001ea4:	4314      	orrs	r4, r2
 8001ea6:	0020      	movs	r0, r4
 8001ea8:	1e44      	subs	r4, r0, #1
 8001eaa:	41a0      	sbcs	r0, r4
 8001eac:	bd70      	pop	{r4, r5, r6, pc}
 8001eae:	4305      	orrs	r5, r0
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	2d00      	cmp	r5, #0
 8001eb4:	d1fa      	bne.n	8001eac <__aeabi_dcmpun+0x28>
 8001eb6:	e7f1      	b.n	8001e9c <__aeabi_dcmpun+0x18>
 8001eb8:	000007ff 	.word	0x000007ff

08001ebc <__aeabi_i2d>:
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	d02d      	beq.n	8001f1e <__aeabi_i2d+0x62>
 8001ec2:	17c3      	asrs	r3, r0, #31
 8001ec4:	18c5      	adds	r5, r0, r3
 8001ec6:	405d      	eors	r5, r3
 8001ec8:	0fc4      	lsrs	r4, r0, #31
 8001eca:	0028      	movs	r0, r5
 8001ecc:	f000 f830 	bl	8001f30 <__clzsi2>
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <__aeabi_i2d+0x6c>)
 8001ed2:	1a1b      	subs	r3, r3, r0
 8001ed4:	055b      	lsls	r3, r3, #21
 8001ed6:	0d5b      	lsrs	r3, r3, #21
 8001ed8:	280a      	cmp	r0, #10
 8001eda:	dd15      	ble.n	8001f08 <__aeabi_i2d+0x4c>
 8001edc:	380b      	subs	r0, #11
 8001ede:	4085      	lsls	r5, r0
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	032d      	lsls	r5, r5, #12
 8001ee4:	0b2d      	lsrs	r5, r5, #12
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	0010      	movs	r0, r2
 8001eea:	032d      	lsls	r5, r5, #12
 8001eec:	0d0a      	lsrs	r2, r1, #20
 8001eee:	0b2d      	lsrs	r5, r5, #12
 8001ef0:	0512      	lsls	r2, r2, #20
 8001ef2:	432a      	orrs	r2, r5
 8001ef4:	4d0d      	ldr	r5, [pc, #52]	; (8001f2c <__aeabi_i2d+0x70>)
 8001ef6:	051b      	lsls	r3, r3, #20
 8001ef8:	402a      	ands	r2, r5
 8001efa:	4313      	orrs	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	07e4      	lsls	r4, r4, #31
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	4323      	orrs	r3, r4
 8001f04:	0019      	movs	r1, r3
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	0002      	movs	r2, r0
 8001f0a:	0029      	movs	r1, r5
 8001f0c:	3215      	adds	r2, #21
 8001f0e:	4091      	lsls	r1, r2
 8001f10:	000a      	movs	r2, r1
 8001f12:	210b      	movs	r1, #11
 8001f14:	1a08      	subs	r0, r1, r0
 8001f16:	40c5      	lsrs	r5, r0
 8001f18:	032d      	lsls	r5, r5, #12
 8001f1a:	0b2d      	lsrs	r5, r5, #12
 8001f1c:	e7e3      	b.n	8001ee6 <__aeabi_i2d+0x2a>
 8001f1e:	2400      	movs	r4, #0
 8001f20:	2300      	movs	r3, #0
 8001f22:	2500      	movs	r5, #0
 8001f24:	2200      	movs	r2, #0
 8001f26:	e7de      	b.n	8001ee6 <__aeabi_i2d+0x2a>
 8001f28:	0000041e 	.word	0x0000041e
 8001f2c:	800fffff 	.word	0x800fffff

08001f30 <__clzsi2>:
 8001f30:	211c      	movs	r1, #28
 8001f32:	2301      	movs	r3, #1
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	4298      	cmp	r0, r3
 8001f38:	d301      	bcc.n	8001f3e <__clzsi2+0xe>
 8001f3a:	0c00      	lsrs	r0, r0, #16
 8001f3c:	3910      	subs	r1, #16
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	4298      	cmp	r0, r3
 8001f42:	d301      	bcc.n	8001f48 <__clzsi2+0x18>
 8001f44:	0a00      	lsrs	r0, r0, #8
 8001f46:	3908      	subs	r1, #8
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	4298      	cmp	r0, r3
 8001f4c:	d301      	bcc.n	8001f52 <__clzsi2+0x22>
 8001f4e:	0900      	lsrs	r0, r0, #4
 8001f50:	3904      	subs	r1, #4
 8001f52:	a202      	add	r2, pc, #8	; (adr r2, 8001f5c <__clzsi2+0x2c>)
 8001f54:	5c10      	ldrb	r0, [r2, r0]
 8001f56:	1840      	adds	r0, r0, r1
 8001f58:	4770      	bx	lr
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	02020304 	.word	0x02020304
 8001f60:	01010101 	.word	0x01010101
	...

08001f6c <__clzdi2>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	2900      	cmp	r1, #0
 8001f70:	d103      	bne.n	8001f7a <__clzdi2+0xe>
 8001f72:	f7ff ffdd 	bl	8001f30 <__clzsi2>
 8001f76:	3020      	adds	r0, #32
 8001f78:	e002      	b.n	8001f80 <__clzdi2+0x14>
 8001f7a:	1c08      	adds	r0, r1, #0
 8001f7c:	f7ff ffd8 	bl	8001f30 <__clzsi2>
 8001f80:	bd10      	pop	{r4, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)

08001f84 <compStr>:

	  }
}

int compStr(uint8_t* strcomp, uint8_t* expcomp)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	//int sizeStrComp = sizeof(strcomp)/sizeof(strcomp[0]);
	//int sizeExpComp = sizeof(strcomp)/sizeof(expcomp[0]);
	if(strcomp[0] != expcomp[0]) {
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <compStr+0x1a>
		return FALSE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <compStr+0x1c>
//		if (strcomp[i] != expcomp[i])
//		{
//			return FALSE;
//		}
//	}
	return TRUE;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <resetRxBuffer>:

void resetRxBuffer(uint8_t *rxBuffer)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	int sizeRx = sizeof(rxBuffer) / sizeof(rxBuffer[0]);
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < sizeRx; i++) {
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e007      	b.n	8001fca <resetRxBuffer+0x22>
		rxBuffer[i] = 0;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	18d3      	adds	r3, r2, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeRx; i++) {
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	dbf3      	blt.n	8001fba <resetRxBuffer+0x12>
	}
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b004      	add	sp, #16
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <RN4020_resetDefaultStep>:

//**********************************************************************
//  RN4020 Functions (START)
//**********************************************************************

int RN4020_resetDefaultStep(UART_HandleTypeDef *huart) {
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
	int completeFlag = TRUE;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
	if (RN4020_resetToFactoryDefault(huart) != HAL_OK) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 f87f 	bl	80020ec <RN4020_resetToFactoryDefault>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d007      	beq.n	8002002 <RN4020_resetDefaultStep+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ff2:	23a0      	movs	r3, #160	; 0xa0
 8001ff4:	05db      	lsls	r3, r3, #23
 8001ff6:	2120      	movs	r1, #32
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f001 fd4a 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
	}
//	if (RN4020_killConnection(huart) != HAL_OK) {
//			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//			completeFlag = FALSE;
//		}
	if (RN4020_setBaudRate115200(huart) != HAL_OK) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0018      	movs	r0, r3
 8002006:	f000 f88b 	bl	8002120 <RN4020_setBaudRate115200>
 800200a:	1e03      	subs	r3, r0, #0
 800200c:	d007      	beq.n	800201e <RN4020_resetDefaultStep+0x44>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800200e:	23a0      	movs	r3, #160	; 0xa0
 8002010:	05db      	lsls	r3, r3, #23
 8002012:	2120      	movs	r1, #32
 8002014:	0018      	movs	r0, r3
 8002016:	f001 fd3c 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setService(huart) != HAL_OK) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	f000 f897 	bl	8002154 <RN4020_setService>
 8002026:	1e03      	subs	r3, r0, #0
 8002028:	d007      	beq.n	800203a <RN4020_resetDefaultStep+0x60>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800202a:	23a0      	movs	r3, #160	; 0xa0
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	2120      	movs	r1, #32
 8002030:	0018      	movs	r0, r3
 8002032:	f001 fd2e 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_clearPrivateSettings(huart) != HAL_OK) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f000 f8a3 	bl	8002188 <RN4020_clearPrivateSettings>
 8002042:	1e03      	subs	r3, r0, #0
 8002044:	d007      	beq.n	8002056 <RN4020_resetDefaultStep+0x7c>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002046:	23a0      	movs	r3, #160	; 0xa0
 8002048:	05db      	lsls	r3, r3, #23
 800204a:	2120      	movs	r1, #32
 800204c:	0018      	movs	r0, r3
 800204e:	f001 fd20 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setPrivateService(huart) != HAL_OK) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 f8af 	bl	80021bc <RN4020_setPrivateService>
 800205e:	1e03      	subs	r3, r0, #0
 8002060:	d007      	beq.n	8002072 <RN4020_resetDefaultStep+0x98>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002062:	23a0      	movs	r3, #160	; 0xa0
 8002064:	05db      	lsls	r3, r3, #23
 8002066:	2120      	movs	r1, #32
 8002068:	0018      	movs	r0, r3
 800206a:	f001 fd12 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setPrivateChar(huart) != HAL_OK) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0018      	movs	r0, r3
 8002076:	f000 f8bb 	bl	80021f0 <RN4020_setPrivateChar>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d007      	beq.n	800208e <RN4020_resetDefaultStep+0xb4>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800207e:	23a0      	movs	r3, #160	; 0xa0
 8002080:	05db      	lsls	r3, r3, #23
 8002082:	2120      	movs	r1, #32
 8002084:	0018      	movs	r0, r3
 8002086:	f001 fd04 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setDeviceType(huart) != HAL_OK) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	0018      	movs	r0, r3
 8002092:	f000 f8c7 	bl	8002224 <RN4020_setDeviceType>
 8002096:	1e03      	subs	r3, r0, #0
 8002098:	d007      	beq.n	80020aa <RN4020_resetDefaultStep+0xd0>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800209a:	23a0      	movs	r3, #160	; 0xa0
 800209c:	05db      	lsls	r3, r3, #23
 800209e:	2120      	movs	r1, #32
 80020a0:	0018      	movs	r0, r3
 80020a2:	f001 fcf6 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_rebootDevice(huart) != HAL_OK) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 f8d3 	bl	8002258 <RN4020_rebootDevice>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d007      	beq.n	80020c6 <RN4020_resetDefaultStep+0xec>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020b6:	23a0      	movs	r3, #160	; 0xa0
 80020b8:	05db      	lsls	r3, r3, #23
 80020ba:	2120      	movs	r1, #32
 80020bc:	0018      	movs	r0, r3
 80020be:	f001 fce8 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setNameDevice(huart) != HAL_OK) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 f8df 	bl	800228c <RN4020_setNameDevice>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d007      	beq.n	80020e2 <RN4020_resetDefaultStep+0x108>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020d2:	23a0      	movs	r3, #160	; 0xa0
 80020d4:	05db      	lsls	r3, r3, #23
 80020d6:	2120      	movs	r1, #32
 80020d8:	0018      	movs	r0, r3
 80020da:	f001 fcda 	bl	8003a92 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
	}

	return completeFlag;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b004      	add	sp, #16
 80020ea:	bd80      	pop	{r7, pc}

080020ec <RN4020_resetToFactoryDefault>:


HAL_StatusTypeDef RN4020_resetToFactoryDefault(UART_HandleTypeDef *huart) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <RN4020_resetToFactoryDefault+0x2c>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f98f 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "SF,1\r\n");
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <RN4020_resetToFactoryDefault+0x30>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0011      	movs	r1, r2
 8002104:	0018      	movs	r0, r3
 8002106:	f000 f999 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 800210a:	f000 f909 	bl	8002320 <RN4020_waitForReadyState>
 800210e:	0003      	movs	r3, r0
	}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000138 	.word	0x20000138
 800211c:	080088f4 	.word	0x080088f4

08002120 <RN4020_setBaudRate115200>:
HAL_StatusTypeDef RN4020_killConnection(UART_HandleTypeDef *huart) {
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
	RN4020_sendData(huart, "K\r\n");
	return RN4020_waitForReadyState();
	}
HAL_StatusTypeDef RN4020_setBaudRate115200(UART_HandleTypeDef *huart) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <RN4020_setBaudRate115200+0x2c>)
 800212a:	2101      	movs	r1, #1
 800212c:	0018      	movs	r0, r3
 800212e:	f000 f975 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "SB,4\r\n");
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <RN4020_setBaudRate115200+0x30>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0011      	movs	r1, r2
 8002138:	0018      	movs	r0, r3
 800213a:	f000 f97f 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 800213e:	f000 f8ef 	bl	8002320 <RN4020_waitForReadyState>
 8002142:	0003      	movs	r3, r0
	}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000138 	.word	0x20000138
 8002150:	08008900 	.word	0x08008900

08002154 <RN4020_setService>:

HAL_StatusTypeDef RN4020_setService(UART_HandleTypeDef *huart) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <RN4020_setService+0x2c>)
 800215e:	2101      	movs	r1, #1
 8002160:	0018      	movs	r0, r3
 8002162:	f000 f95b 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "SS,C0040000\r\n");
 8002166:	4a07      	ldr	r2, [pc, #28]	; (8002184 <RN4020_setService+0x30>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0011      	movs	r1, r2
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f965 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 8002172:	f000 f8d5 	bl	8002320 <RN4020_waitForReadyState>
 8002176:	0003      	movs	r3, r0
	}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000138 	.word	0x20000138
 8002184:	08008908 	.word	0x08008908

08002188 <RN4020_clearPrivateSettings>:
HAL_StatusTypeDef RN4020_clearPrivateSettings(UART_HandleTypeDef *huart) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <RN4020_clearPrivateSettings+0x2c>)
 8002192:	2101      	movs	r1, #1
 8002194:	0018      	movs	r0, r3
 8002196:	f000 f941 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "PZ\r\n");
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <RN4020_clearPrivateSettings+0x30>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0011      	movs	r1, r2
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 f94b 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 80021a6:	f000 f8bb 	bl	8002320 <RN4020_waitForReadyState>
 80021aa:	0003      	movs	r3, r0
	}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000138 	.word	0x20000138
 80021b8:	08008918 	.word	0x08008918

080021bc <RN4020_setPrivateService>:
HAL_StatusTypeDef RN4020_setPrivateService(UART_HandleTypeDef *huart) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <RN4020_setPrivateService+0x2c>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f927 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "PS,11223344556677889900AABBCCDDEEFF\r\n");
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <RN4020_setPrivateService+0x30>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0011      	movs	r1, r2
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 f931 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 80021da:	f000 f8a1 	bl	8002320 <RN4020_waitForReadyState>
 80021de:	0003      	movs	r3, r0
	}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000138 	.word	0x20000138
 80021ec:	08008920 	.word	0x08008920

080021f0 <RN4020_setPrivateChar>:
HAL_StatusTypeDef RN4020_setPrivateChar(UART_HandleTypeDef *huart) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <RN4020_setPrivateChar+0x2c>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 f90d 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "PC,010203040506070809000A0B0C0D0E0F,08,02\r\n");
 8002202:	4a07      	ldr	r2, [pc, #28]	; (8002220 <RN4020_setPrivateChar+0x30>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f000 f917 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 800220e:	f000 f887 	bl	8002320 <RN4020_waitForReadyState>
 8002212:	0003      	movs	r3, r0
	}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000138 	.word	0x20000138
 8002220:	08008948 	.word	0x08008948

08002224 <RN4020_setDeviceType>:
HAL_StatusTypeDef RN4020_setDeviceType(UART_HandleTypeDef *huart) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <RN4020_setDeviceType+0x2c>)
 800222e:	2101      	movs	r1, #1
 8002230:	0018      	movs	r0, r3
 8002232:	f000 f8f3 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "SR,20000000\r\n");
 8002236:	4a07      	ldr	r2, [pc, #28]	; (8002254 <RN4020_setDeviceType+0x30>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f8fd 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 8002242:	f000 f86d 	bl	8002320 <RN4020_waitForReadyState>
 8002246:	0003      	movs	r3, r0
	}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000138 	.word	0x20000138
 8002254:	08008974 	.word	0x08008974

08002258 <RN4020_rebootDevice>:
HAL_StatusTypeDef RN4020_rebootDevice(UART_HandleTypeDef *huart) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_REBOOT);
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <RN4020_rebootDevice+0x2c>)
 8002262:	2102      	movs	r1, #2
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f8d9 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "R,1\r\n");
 800226a:	4a07      	ldr	r2, [pc, #28]	; (8002288 <RN4020_rebootDevice+0x30>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	0011      	movs	r1, r2
 8002270:	0018      	movs	r0, r3
 8002272:	f000 f8e3 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 8002276:	f000 f853 	bl	8002320 <RN4020_waitForReadyState>
 800227a:	0003      	movs	r3, r0
	}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000138 	.word	0x20000138
 8002288:	08008984 	.word	0x08008984

0800228c <RN4020_setNameDevice>:

HAL_StatusTypeDef RN4020_setNameDevice(UART_HandleTypeDef *huart) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <RN4020_setNameDevice+0x38>)
 8002296:	2101      	movs	r1, #1
 8002298:	0018      	movs	r0, r3
 800229a:	f000 f8bf 	bl	800241c <RN4020_setState>
	RN4020_sendData(huart, "SN,T17_NewlyWED");
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <RN4020_setNameDevice+0x3c>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	0011      	movs	r1, r2
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 f8c9 	bl	800243c <RN4020_sendData>
	RN4020_sendData(huart, "\r\n");
 80022aa:	4a08      	ldr	r2, [pc, #32]	; (80022cc <RN4020_setNameDevice+0x40>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0011      	movs	r1, r2
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 f8c3 	bl	800243c <RN4020_sendData>
	return RN4020_waitForReadyState();
 80022b6:	f000 f833 	bl	8002320 <RN4020_waitForReadyState>
 80022ba:	0003      	movs	r3, r0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000138 	.word	0x20000138
 80022c8:	0800898c 	.word	0x0800898c
 80022cc:	0800899c 	.word	0x0800899c

080022d0 <RN4020_sendCadence>:
	RN4020_sendData(huart, "\r\n");
//	return RN4020_waitForReadyState2();
	return HAL_OK;
	}

HAL_StatusTypeDef RN4020_sendCadence(UART_HandleTypeDef *huart, char* cadence) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <RN4020_sendCadence+0x44>)
 80022dc:	2101      	movs	r1, #1
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 f89c 	bl	800241c <RN4020_setState>
//	RN4020_sendData(huart, "SUW,2A07,");
	RN4020_sendData(huart, "SUW,2A19,");
 80022e4:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <RN4020_sendCadence+0x48>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0011      	movs	r1, r2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f000 f8a6 	bl	800243c <RN4020_sendData>
	RN4020_sendData(huart, cadence);
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0011      	movs	r1, r2
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 f8a0 	bl	800243c <RN4020_sendData>
//	RN4020_sendData(huart, "75");
	RN4020_sendData(huart, "\r\n");
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <RN4020_sendCadence+0x4c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0011      	movs	r1, r2
 8002302:	0018      	movs	r0, r3
 8002304:	f000 f89a 	bl	800243c <RN4020_sendData>
//	return RN4020_waitForReadyState2();
	return HAL_OK;
 8002308:	2300      	movs	r3, #0
	}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	20000138 	.word	0x20000138
 8002318:	080089a0 	.word	0x080089a0
 800231c:	0800899c 	.word	0x0800899c

08002320 <RN4020_waitForReadyState>:

//Uses global variable currState
HAL_StatusTypeDef RN4020_waitForReadyState() {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
	if(currState == RN4020_STATE_READY) {
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <RN4020_waitForReadyState+0x58>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <RN4020_waitForReadyState+0x12>
		return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e01e      	b.n	8002370 <RN4020_waitForReadyState+0x50>
	}

	uint32_t startTime = HAL_GetTick();
 8002332:	f001 f889 	bl	8003448 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	607b      	str	r3, [r7, #4]
	while (1) {
		if(currState == RN4020_STATE_READY) {
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <RN4020_waitForReadyState+0x58>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <RN4020_waitForReadyState+0x2e>
			resetRxBuffer(rxBuffer);
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <RN4020_waitForReadyState+0x5c>)
 8002344:	0018      	movs	r0, r3
 8002346:	f7ff fe2f 	bl	8001fa8 <resetRxBuffer>
			return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e010      	b.n	8002370 <RN4020_waitForReadyState+0x50>
		}
		//if ((HAL_GetTick() - startTime) > RN4020_TIMEOUT) {
		if ((HAL_GetTick() - startTime) > 3000) {
 800234e:	f001 f87b 	bl	8003448 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	4a09      	ldr	r2, [pc, #36]	; (8002380 <RN4020_waitForReadyState+0x60>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d905      	bls.n	800236a <RN4020_waitForReadyState+0x4a>
			resetRxBuffer(rxBuffer);
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <RN4020_waitForReadyState+0x5c>)
 8002360:	0018      	movs	r0, r3
 8002362:	f7ff fe21 	bl	8001fa8 <resetRxBuffer>
			return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e002      	b.n	8002370 <RN4020_waitForReadyState+0x50>
		}
		RN4020_checkState();
 800236a:	f000 f80b 	bl	8002384 <RN4020_checkState>
		if(currState == RN4020_STATE_READY) {
 800236e:	e7e4      	b.n	800233a <RN4020_waitForReadyState+0x1a>
	}


}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000138 	.word	0x20000138
 800237c:	20000230 	.word	0x20000230
 8002380:	00000bb8 	.word	0x00000bb8

08002384 <RN4020_checkState>:


}

//Uses global variable currState
void RN4020_checkState() {
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	switch(currState) {
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <RN4020_checkState+0x84>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d005      	beq.n	800239c <RN4020_checkState+0x18>
 8002390:	dd31      	ble.n	80023f6 <RN4020_checkState+0x72>
 8002392:	2b02      	cmp	r3, #2
 8002394:	d011      	beq.n	80023ba <RN4020_checkState+0x36>
 8002396:	2b03      	cmp	r3, #3
 8002398:	d01e      	beq.n	80023d8 <RN4020_checkState+0x54>
 800239a:	e033      	b.n	8002404 <RN4020_checkState+0x80>
	case RN4020_STATE_WAITING_FOR_AOK:
		if (compStr(rxBuffer, compareAOK) == TRUE) {
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <RN4020_checkState+0x88>)
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <RN4020_checkState+0x8c>)
 80023a0:	0011      	movs	r1, r2
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff fdee 	bl	8001f84 <compStr>
 80023a8:	0003      	movs	r3, r0
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d125      	bne.n	80023fa <RN4020_checkState+0x76>
			RN4020_setState(&currState, RN4020_STATE_READY);
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <RN4020_checkState+0x84>)
 80023b0:	2100      	movs	r1, #0
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 f832 	bl	800241c <RN4020_setState>
			return;
 80023b8:	e024      	b.n	8002404 <RN4020_checkState+0x80>
		}
	break;
	case RN4020_STATE_WAITING_FOR_REBOOT:
		if (compStr(rxBuffer, compareREB) == TRUE) {
 80023ba:	4a16      	ldr	r2, [pc, #88]	; (8002414 <RN4020_checkState+0x90>)
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <RN4020_checkState+0x8c>)
 80023be:	0011      	movs	r1, r2
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7ff fddf 	bl	8001f84 <compStr>
 80023c6:	0003      	movs	r3, r0
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d118      	bne.n	80023fe <RN4020_checkState+0x7a>
			RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_CMD);
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <RN4020_checkState+0x84>)
 80023ce:	2103      	movs	r1, #3
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 f823 	bl	800241c <RN4020_setState>
			return;
 80023d6:	e015      	b.n	8002404 <RN4020_checkState+0x80>
		}
	break;
	case RN4020_STATE_WAITING_FOR_CMD:
		if (compStr(rxBuffer, compareCMD) == TRUE) {
 80023d8:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <RN4020_checkState+0x94>)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <RN4020_checkState+0x8c>)
 80023dc:	0011      	movs	r1, r2
 80023de:	0018      	movs	r0, r3
 80023e0:	f7ff fdd0 	bl	8001f84 <compStr>
 80023e4:	0003      	movs	r3, r0
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10b      	bne.n	8002402 <RN4020_checkState+0x7e>
			RN4020_setState(&currState, RN4020_STATE_READY);
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <RN4020_checkState+0x84>)
 80023ec:	2100      	movs	r1, #0
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f814 	bl	800241c <RN4020_setState>
		}
	break;
 80023f4:	e005      	b.n	8002402 <RN4020_checkState+0x7e>
	case RN4020_STATE_READY:
	break;
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	e004      	b.n	8002404 <RN4020_checkState+0x80>
	break;
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	e002      	b.n	8002404 <RN4020_checkState+0x80>
	break;
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	e000      	b.n	8002404 <RN4020_checkState+0x80>
	break;
 8002402:	46c0      	nop			; (mov r8, r8)
	}
}
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000138 	.word	0x20000138
 800240c:	20000020 	.word	0x20000020
 8002410:	20000230 	.word	0x20000230
 8002414:	20000028 	.word	0x20000028
 8002418:	20000024 	.word	0x20000024

0800241c <RN4020_setState>:

void RN4020_setState(RN4020_State *state, RN4020_State newState) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	000a      	movs	r2, r1
 8002426:	1cfb      	adds	r3, r7, #3
 8002428:	701a      	strb	r2, [r3, #0]
	*state = newState;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	1cfa      	adds	r2, r7, #3
 800242e:	7812      	ldrb	r2, [r2, #0]
 8002430:	701a      	strb	r2, [r3, #0]
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b002      	add	sp, #8
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <RN4020_sendData>:

void RN4020_sendData(UART_HandleTypeDef *huart, const char* line) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
//  char carriageLineCh = '\r';
//  char newLineCh = '\n';
  HAL_UART_Transmit(huart, (uint8_t*)line, strlen(line), RN4020_TIMEOUT);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	0018      	movs	r0, r3
 800244a:	f7fd fe5d 	bl	8000108 <strlen>
 800244e:	0003      	movs	r3, r0
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <RN4020_sendData+0x28>)
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f003 fc3c 	bl	8005cd4 <HAL_UART_Transmit>
  //HAL_UART_Transmit(huart, (uint8_t*)&carriageLineCh, 1, RN4020_TIMEOUT);
  //HAL_UART_Transmit(huart, (uint8_t*)&newLineCh, 1, RN4020_TIMEOUT);
  //HAL_Delay(300);
}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b002      	add	sp, #8
 8002462:	bd80      	pop	{r7, pc}
 8002464:	00001388 	.word	0x00001388

08002468 <babysitter_SendData>:
//**********************************************************************
//  RN4020 Functions (END)
//**********************************************************************

//ACTUALLY, this is for the cadence XD
void babysitter_SendData() {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
//	uint8_t BABY_data[2];
//	uint8_t BABY_data2[2];
//	int bigbattery = 0;
//	char integer[4] = {0,0,0,0}; //create an empty string to store number
//	char HELPinteger[4] = {0,0,0,0};
	char cadence[4] = {0,0,0,0};
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
	if (rotation_counter < 10) {
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <babysitter_SendData+0x48>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b09      	cmp	r3, #9
 800247a:	dc07      	bgt.n	800248c <babysitter_SendData+0x24>
		sprintf(cadence, "0%d", rotation_counter);
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <babysitter_SendData+0x48>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <babysitter_SendData+0x4c>)
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	0018      	movs	r0, r3
 8002486:	f004 fd7b 	bl	8006f80 <siprintf>
 800248a:	e006      	b.n	800249a <babysitter_SendData+0x32>
	}
	else {
		sprintf(cadence, "%02d", rotation_counter);
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <babysitter_SendData+0x48>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4909      	ldr	r1, [pc, #36]	; (80024b8 <babysitter_SendData+0x50>)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	0018      	movs	r0, r3
 8002496:	f004 fd73 	bl	8006f80 <siprintf>
	}
	RN4020_sendCadence(&huart1, cadence);
 800249a:	1d3a      	adds	r2, r7, #4
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <babysitter_SendData+0x54>)
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff ff15 	bl	80022d0 <RN4020_sendCadence>
//	  }
//	  if (ret == HAL_OK) {
//		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	  }

}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b002      	add	sp, #8
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	200000d0 	.word	0x200000d0
 80024b4:	080088e8 	.word	0x080088e8
 80024b8:	080088ec 	.word	0x080088ec
 80024bc:	200001a0 	.word	0x200001a0

080024c0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *)"Success\n\r", strlen("Success\n\r"), 100);
	HAL_UART_Receive_IT(&huart1, rxBuffer, sizeof(rxBuffer));
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_UART_RxCpltCallback+0x1c>)
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_UART_RxCpltCallback+0x20>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	0018      	movs	r0, r3
 80024d0:	f003 fca8 	bl	8005e24 <HAL_UART_Receive_IT>
//		HAL_UART_Transmit(&huart1, (uint8_t *)"Fail\n\r", strlen("Fail\n\r"), 100);
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//	}
//    HAL_UART_Receive_IT(&huart1, rxBuffer, sizeof(rxBuffer));
// --------------------------------------------------------------------------------------------
}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000230 	.word	0x20000230
 80024e0:	200001a0 	.word	0x200001a0

080024e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e6:	b093      	sub	sp, #76	; 0x4c
 80024e8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int RN4020_config_ret;

	HAL_StatusTypeDef ICM_ret = HAL_OK;
 80024ea:	231f      	movs	r3, #31
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret2 = HAL_OK;
 80024f2:	231e      	movs	r3, #30
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret3 = HAL_OK;
 80024fa:	231d      	movs	r3, #29
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret4 = HAL_OK;
 8002502:	231c      	movs	r3, #28
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret5 = HAL_OK;
 800250a:	231b      	movs	r3, #27
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret6 = HAL_OK;
 8002512:	231a      	movs	r3, #26
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]

	uint8_t deviceID;
	uint8_t pwr1 = 0x80;
 800251a:	1dbb      	adds	r3, r7, #6
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	701a      	strb	r2, [r3, #0]
	uint8_t pwr1_2 = 0x01;
 8002520:	1d7b      	adds	r3, r7, #5
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
	uint8_t rtDiv = 0x00;
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
	uint8_t accelConfig = 0x18;
 800252c:	1cfb      	adds	r3, r7, #3
 800252e:	2218      	movs	r2, #24
 8002530:	701a      	strb	r2, [r3, #0]
	uint8_t accelConfig2 = 0x03;
 8002532:	1cbb      	adds	r3, r7, #2
 8002534:	2203      	movs	r2, #3
 8002536:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002538:	f000 ff20 	bl	800337c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800253c:	f000 fb90 	bl	8002c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002540:	f000 fcfe 	bl	8002f40 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002544:	f000 fccc 	bl	8002ee0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002548:	f000 fc74 	bl	8002e34 <MX_TIM2_Init>
  MX_I2C2_Init();
 800254c:	f000 fc32 	bl	8002db4 <MX_I2C2_Init>
  MX_I2C1_Init();
 8002550:	f000 fbf0 	bl	8002d34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RCC -> IOPENR |= RCC_IOPENR_IOPBEN | RCC_IOPENR_IOPAEN;
 8002554:	4b76      	ldr	r3, [pc, #472]	; (8002730 <main+0x24c>)
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <main+0x24c>)
 800255a:	2103      	movs	r1, #3
 800255c:	430a      	orrs	r2, r1
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Set PA5 pin off
 8002560:	23a0      	movs	r3, #160	; 0xa0
 8002562:	05db      	lsls	r3, r3, #23
 8002564:	2200      	movs	r2, #0
 8002566:	2120      	movs	r1, #32
 8002568:	0018      	movs	r0, r3
 800256a:	f001 fa75 	bl	8003a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800256e:	23a0      	movs	r3, #160	; 0xa0
 8002570:	05db      	lsls	r3, r3, #23
 8002572:	2201      	movs	r2, #1
 8002574:	2110      	movs	r1, #16
 8002576:	0018      	movs	r0, r3
 8002578:	f001 fa6e 	bl	8003a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800257c:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <main+0x250>)
 800257e:	2201      	movs	r2, #1
 8002580:	2110      	movs	r1, #16
 8002582:	0018      	movs	r0, r3
 8002584:	f001 fa68 	bl	8003a58 <HAL_GPIO_WritePin>


//==================================================================================
//	Bluetooth LE Configuration Step
//==================================================================================
  HAL_UART_Receive_IT(&huart1, rxBuffer, sizeof(rxBuffer));
 8002588:	496b      	ldr	r1, [pc, #428]	; (8002738 <main+0x254>)
 800258a:	4b6c      	ldr	r3, [pc, #432]	; (800273c <main+0x258>)
 800258c:	2201      	movs	r2, #1
 800258e:	0018      	movs	r0, r3
 8002590:	f003 fc48 	bl	8005e24 <HAL_UART_Receive_IT>
  RN4020_config_ret = RN4020_resetDefaultStep(&huart1);
 8002594:	4b69      	ldr	r3, [pc, #420]	; (800273c <main+0x258>)
 8002596:	0018      	movs	r0, r3
 8002598:	f7ff fd1f 	bl	8001fda <RN4020_resetDefaultStep>
 800259c:	0003      	movs	r3, r0
 800259e:	617b      	str	r3, [r7, #20]
  if (RN4020_config_ret == TRUE) {
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d106      	bne.n	80025b4 <main+0xd0>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80025a6:	23a0      	movs	r3, #160	; 0xa0
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	2201      	movs	r2, #1
 80025ac:	2120      	movs	r1, #32
 80025ae:	0018      	movs	r0, r3
 80025b0:	f001 fa52 	bl	8003a58 <HAL_GPIO_WritePin>
  }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80025b4:	23a0      	movs	r3, #160	; 0xa0
 80025b6:	05db      	lsls	r3, r3, #23
 80025b8:	2201      	movs	r2, #1
 80025ba:	2120      	movs	r1, #32
 80025bc:	0018      	movs	r0, r3
 80025be:	f001 fa4b 	bl	8003a58 <HAL_GPIO_WritePin>
//  HAL_Delay(25);
//==================================================================================
//	ICM-20602 Configuration Step
//==================================================================================
  // read who_am_i
  ICM_ret = HAL_I2C_Mem_Read(&hi2c1, ICM_Main_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &deviceID, 1, 0xFF);
 80025c2:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <main+0x25c>)
 80025c4:	8819      	ldrh	r1, [r3, #0]
 80025c6:	251f      	movs	r5, #31
 80025c8:	197c      	adds	r4, r7, r5
 80025ca:	485e      	ldr	r0, [pc, #376]	; (8002744 <main+0x260>)
 80025cc:	23ff      	movs	r3, #255	; 0xff
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	2301      	movs	r3, #1
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2301      	movs	r3, #1
 80025da:	2275      	movs	r2, #117	; 0x75
 80025dc:	f001 fc38 	bl	8003e50 <HAL_I2C_Mem_Read>
 80025e0:	0003      	movs	r3, r0
 80025e2:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 80025e4:	2019      	movs	r0, #25
 80025e6:	f000 ff39 	bl	800345c <HAL_Delay>

  // reset IMU
  ICM_ret2 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &pwr1, 1, 0xFF);
 80025ea:	4b55      	ldr	r3, [pc, #340]	; (8002740 <main+0x25c>)
 80025ec:	8819      	ldrh	r1, [r3, #0]
 80025ee:	231e      	movs	r3, #30
 80025f0:	18fc      	adds	r4, r7, r3
 80025f2:	4854      	ldr	r0, [pc, #336]	; (8002744 <main+0x260>)
 80025f4:	23ff      	movs	r3, #255	; 0xff
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	2301      	movs	r3, #1
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	1dbb      	adds	r3, r7, #6
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	226b      	movs	r2, #107	; 0x6b
 8002604:	f001 faf6 	bl	8003bf4 <HAL_I2C_Mem_Write>
 8002608:	0003      	movs	r3, r0
 800260a:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 800260c:	2019      	movs	r0, #25
 800260e:	f000 ff25 	bl	800345c <HAL_Delay>

  // enable temperature sensor and SELECTS the clock source
  ICM_ret3 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &pwr1_2, 1, 0xFF);
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <main+0x25c>)
 8002614:	8819      	ldrh	r1, [r3, #0]
 8002616:	231d      	movs	r3, #29
 8002618:	18fc      	adds	r4, r7, r3
 800261a:	484a      	ldr	r0, [pc, #296]	; (8002744 <main+0x260>)
 800261c:	23ff      	movs	r3, #255	; 0xff
 800261e:	9302      	str	r3, [sp, #8]
 8002620:	2301      	movs	r3, #1
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	1d7b      	adds	r3, r7, #5
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	226b      	movs	r2, #107	; 0x6b
 800262c:	f001 fae2 	bl	8003bf4 <HAL_I2C_Mem_Write>
 8002630:	0003      	movs	r3, r0
 8002632:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002634:	2019      	movs	r0, #25
 8002636:	f000 ff11 	bl	800345c <HAL_Delay>
  temp_sens = 326.8;
 800263a:	4a43      	ldr	r2, [pc, #268]	; (8002748 <main+0x264>)
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <main+0x268>)
 800263e:	4c44      	ldr	r4, [pc, #272]	; (8002750 <main+0x26c>)
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	6054      	str	r4, [r2, #4]

  // set sample rate to 1kHz and apply
  ICM_ret4 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &rtDiv, 1, 0xFF);
 8002644:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <main+0x25c>)
 8002646:	8819      	ldrh	r1, [r3, #0]
 8002648:	231c      	movs	r3, #28
 800264a:	18fc      	adds	r4, r7, r3
 800264c:	483d      	ldr	r0, [pc, #244]	; (8002744 <main+0x260>)
 800264e:	23ff      	movs	r3, #255	; 0xff
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	2301      	movs	r3, #1
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2301      	movs	r3, #1
 800265c:	2219      	movs	r2, #25
 800265e:	f001 fac9 	bl	8003bf4 <HAL_I2C_Mem_Write>
 8002662:	0003      	movs	r3, r0
 8002664:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002666:	2019      	movs	r0, #25
 8002668:	f000 fef8 	bl	800345c <HAL_Delay>

  // accel full-scale range = 16g(0b11) -- sensitivity scale factor = 2,048 LSB/(dps)
  ICM_ret5 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &accelConfig, 1, 0xFF); // ACCEL full-scale range = 16g -- sensitivity scale facotr = 2,048 LSB/(dps)
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <main+0x25c>)
 800266e:	8819      	ldrh	r1, [r3, #0]
 8002670:	231b      	movs	r3, #27
 8002672:	18fc      	adds	r4, r7, r3
 8002674:	4833      	ldr	r0, [pc, #204]	; (8002744 <main+0x260>)
 8002676:	23ff      	movs	r3, #255	; 0xff
 8002678:	9302      	str	r3, [sp, #8]
 800267a:	2301      	movs	r3, #1
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	1cfb      	adds	r3, r7, #3
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2301      	movs	r3, #1
 8002684:	221c      	movs	r2, #28
 8002686:	f001 fab5 	bl	8003bf4 <HAL_I2C_Mem_Write>
 800268a:	0003      	movs	r3, r0
 800268c:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 800268e:	2019      	movs	r0, #25
 8002690:	f000 fee4 	bl	800345c <HAL_Delay>
  accel_sens = 2048.0;
 8002694:	4a2f      	ldr	r2, [pc, #188]	; (8002754 <main+0x270>)
 8002696:	2300      	movs	r3, #0
 8002698:	4c2f      	ldr	r4, [pc, #188]	; (8002758 <main+0x274>)
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	6054      	str	r4, [r2, #4]

  // set A_DLPF_CFG to 3 for accel configuration
  ICM_ret6 = HAL_I2C_Mem_Write(&hi2c1, ICM_Main_ADDR, ACCEL_CONFIG2, I2C_MEMADD_SIZE_8BIT, &accelConfig2, 1, 0xFF); // ACCEL FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <main+0x25c>)
 80026a0:	8819      	ldrh	r1, [r3, #0]
 80026a2:	231a      	movs	r3, #26
 80026a4:	18fc      	adds	r4, r7, r3
 80026a6:	4827      	ldr	r0, [pc, #156]	; (8002744 <main+0x260>)
 80026a8:	23ff      	movs	r3, #255	; 0xff
 80026aa:	9302      	str	r3, [sp, #8]
 80026ac:	2301      	movs	r3, #1
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	1cbb      	adds	r3, r7, #2
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2301      	movs	r3, #1
 80026b6:	221d      	movs	r2, #29
 80026b8:	f001 fa9c 	bl	8003bf4 <HAL_I2C_Mem_Write>
 80026bc:	0003      	movs	r3, r0
 80026be:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 80026c0:	2019      	movs	r0, #25
 80026c2:	f000 fecb 	bl	800345c <HAL_Delay>
  if (ICM_ret != HAL_OK || ICM_ret2 != HAL_OK || ICM_ret3 != HAL_OK || ICM_ret4 != HAL_OK || ICM_ret5 != HAL_OK || ICM_ret6 != HAL_OK || deviceID != 0x12)
 80026c6:	197b      	adds	r3, r7, r5
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d11c      	bne.n	8002708 <main+0x224>
 80026ce:	231e      	movs	r3, #30
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d117      	bne.n	8002708 <main+0x224>
 80026d8:	231d      	movs	r3, #29
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d112      	bne.n	8002708 <main+0x224>
 80026e2:	231c      	movs	r3, #28
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10d      	bne.n	8002708 <main+0x224>
 80026ec:	231b      	movs	r3, #27
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d108      	bne.n	8002708 <main+0x224>
 80026f6:	231a      	movs	r3, #26
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <main+0x224>
 8002700:	1dfb      	adds	r3, r7, #7
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b12      	cmp	r3, #18
 8002706:	d029      	beq.n	800275c <main+0x278>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, 1);
 8002708:	23e0      	movs	r3, #224	; 0xe0
 800270a:	01db      	lsls	r3, r3, #7
 800270c:	4809      	ldr	r0, [pc, #36]	; (8002734 <main+0x250>)
 800270e:	2201      	movs	r2, #1
 8002710:	0019      	movs	r1, r3
 8002712:	f001 f9a1 	bl	8003a58 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002716:	23fa      	movs	r3, #250	; 0xfa
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	0018      	movs	r0, r3
 800271c:	f000 fe9e 	bl	800345c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, 0);
 8002720:	23e0      	movs	r3, #224	; 0xe0
 8002722:	01db      	lsls	r3, r3, #7
 8002724:	4803      	ldr	r0, [pc, #12]	; (8002734 <main+0x250>)
 8002726:	2200      	movs	r2, #0
 8002728:	0019      	movs	r1, r3
 800272a:	f001 f995 	bl	8003a58 <HAL_GPIO_WritePin>
 800272e:	e028      	b.n	8002782 <main+0x29e>
 8002730:	40021000 	.word	0x40021000
 8002734:	50000400 	.word	0x50000400
 8002738:	20000230 	.word	0x20000230
 800273c:	200001a0 	.word	0x200001a0
 8002740:	20000000 	.word	0x20000000
 8002744:	200000ec 	.word	0x200000ec
 8002748:	20000188 	.word	0x20000188
 800274c:	cccccccd 	.word	0xcccccccd
 8002750:	40746ccc 	.word	0x40746ccc
 8002754:	20000198 	.word	0x20000198
 8002758:	40a00000 	.word	0x40a00000
  }
  else {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	015b      	lsls	r3, r3, #5
 8002760:	48d7      	ldr	r0, [pc, #860]	; (8002ac0 <main+0x5dc>)
 8002762:	2201      	movs	r2, #1
 8002764:	0019      	movs	r1, r3
 8002766:	f001 f977 	bl	8003a58 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800276a:	23fa      	movs	r3, #250	; 0xfa
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fe74 	bl	800345c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	015b      	lsls	r3, r3, #5
 8002778:	48d1      	ldr	r0, [pc, #836]	; (8002ac0 <main+0x5dc>)
 800277a:	2200      	movs	r2, #0
 800277c:	0019      	movs	r1, r3
 800277e:	f001 f96b 	bl	8003a58 <HAL_GPIO_WritePin>
  }
//==================================================================================
//	Start TIMER2 Step (function @ HAL_TIM_PeriodElapsedCallback)
//==================================================================================
  HAL_TIM_Base_Start_IT(&htim2);
 8002782:	4bd0      	ldr	r3, [pc, #832]	; (8002ac4 <main+0x5e0>)
 8002784:	0018      	movs	r0, r3
 8002786:	f002 fef9 	bl	800557c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int IMU_avgCounter = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
	int IMU_postCounter = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
	double IMU_sum = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	2400      	movs	r4, #0
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
 8002798:	62fc      	str	r4, [r7, #44]	; 0x2c
	double curr_value = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	2400      	movs	r4, #0
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	60fc      	str	r4, [r7, #12]
	double prev_value = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	2400      	movs	r4, #0
 80027a6:	623b      	str	r3, [r7, #32]
 80027a8:	627c      	str	r4, [r7, #36]	; 0x24

	while (1)
	{
		//Collect IMU acceleration data
		ICM_ret = HAL_I2C_Mem_Read(&hi2c1, ICM_Main_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, sizeof(data)/sizeof(uint8_t), HAL_MAX_DELAY);
 80027aa:	4bc7      	ldr	r3, [pc, #796]	; (8002ac8 <main+0x5e4>)
 80027ac:	8819      	ldrh	r1, [r3, #0]
 80027ae:	231f      	movs	r3, #31
 80027b0:	18fc      	adds	r4, r7, r3
 80027b2:	48c6      	ldr	r0, [pc, #792]	; (8002acc <main+0x5e8>)
 80027b4:	2301      	movs	r3, #1
 80027b6:	425b      	negs	r3, r3
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	2306      	movs	r3, #6
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	4bc4      	ldr	r3, [pc, #784]	; (8002ad0 <main+0x5ec>)
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2301      	movs	r3, #1
 80027c4:	223b      	movs	r2, #59	; 0x3b
 80027c6:	f001 fb43 	bl	8003e50 <HAL_I2C_Mem_Read>
 80027ca:	0003      	movs	r3, r0
 80027cc:	7023      	strb	r3, [r4, #0]
		if ((data[0] & 0x80) != 0){
 80027ce:	4bc0      	ldr	r3, [pc, #768]	; (8002ad0 <main+0x5ec>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da0a      	bge.n	80027ee <main+0x30a>
			accX = -1;
 80027d8:	4abe      	ldr	r2, [pc, #760]	; (8002ad4 <main+0x5f0>)
 80027da:	2300      	movs	r3, #0
 80027dc:	4cbe      	ldr	r4, [pc, #760]	; (8002ad8 <main+0x5f4>)
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	6054      	str	r4, [r2, #4]
			data[0] = (data[0] ^ 0xFF) + 1;
 80027e2:	4bbb      	ldr	r3, [pc, #748]	; (8002ad0 <main+0x5ec>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	425b      	negs	r3, r3
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4bb9      	ldr	r3, [pc, #740]	; (8002ad0 <main+0x5ec>)
 80027ec:	701a      	strb	r2, [r3, #0]
		}
		if ((data[2] & 0x80) != 0){
 80027ee:	4bb8      	ldr	r3, [pc, #736]	; (8002ad0 <main+0x5ec>)
 80027f0:	789b      	ldrb	r3, [r3, #2]
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da0a      	bge.n	800280e <main+0x32a>
			accY = -1;
 80027f8:	4ab8      	ldr	r2, [pc, #736]	; (8002adc <main+0x5f8>)
 80027fa:	2300      	movs	r3, #0
 80027fc:	4cb6      	ldr	r4, [pc, #728]	; (8002ad8 <main+0x5f4>)
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	6054      	str	r4, [r2, #4]
			data[2] = (data[2] ^ 0xFF) + 1;
 8002802:	4bb3      	ldr	r3, [pc, #716]	; (8002ad0 <main+0x5ec>)
 8002804:	789b      	ldrb	r3, [r3, #2]
 8002806:	425b      	negs	r3, r3
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4bb1      	ldr	r3, [pc, #708]	; (8002ad0 <main+0x5ec>)
 800280c:	709a      	strb	r2, [r3, #2]
		}
		if ((data[4] & 0x80) != 0){
 800280e:	4bb0      	ldr	r3, [pc, #704]	; (8002ad0 <main+0x5ec>)
 8002810:	791b      	ldrb	r3, [r3, #4]
 8002812:	b25b      	sxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	da0a      	bge.n	800282e <main+0x34a>
			accZ = -1;
 8002818:	4ab1      	ldr	r2, [pc, #708]	; (8002ae0 <main+0x5fc>)
 800281a:	2300      	movs	r3, #0
 800281c:	4cae      	ldr	r4, [pc, #696]	; (8002ad8 <main+0x5f4>)
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	6054      	str	r4, [r2, #4]
			data[4] = (data[4] ^ 0xFF) + 1;
 8002822:	4bab      	ldr	r3, [pc, #684]	; (8002ad0 <main+0x5ec>)
 8002824:	791b      	ldrb	r3, [r3, #4]
 8002826:	425b      	negs	r3, r3
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4ba9      	ldr	r3, [pc, #676]	; (8002ad0 <main+0x5ec>)
 800282c:	711a      	strb	r2, [r3, #4]
		}
		accXraw = (uint16_t) (data[0] << 8 | data[1]);
 800282e:	4ba8      	ldr	r3, [pc, #672]	; (8002ad0 <main+0x5ec>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	b21a      	sxth	r2, r3
 8002836:	4ba6      	ldr	r3, [pc, #664]	; (8002ad0 <main+0x5ec>)
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	b21b      	sxth	r3, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	b21b      	sxth	r3, r3
 8002840:	b29a      	uxth	r2, r3
 8002842:	4ba8      	ldr	r3, [pc, #672]	; (8002ae4 <main+0x600>)
 8002844:	801a      	strh	r2, [r3, #0]
		accYraw = (uint16_t) (data[2] << 8 | data[3]);
 8002846:	4ba2      	ldr	r3, [pc, #648]	; (8002ad0 <main+0x5ec>)
 8002848:	789b      	ldrb	r3, [r3, #2]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	b21a      	sxth	r2, r3
 800284e:	4ba0      	ldr	r3, [pc, #640]	; (8002ad0 <main+0x5ec>)
 8002850:	78db      	ldrb	r3, [r3, #3]
 8002852:	b21b      	sxth	r3, r3
 8002854:	4313      	orrs	r3, r2
 8002856:	b21b      	sxth	r3, r3
 8002858:	b29a      	uxth	r2, r3
 800285a:	4ba3      	ldr	r3, [pc, #652]	; (8002ae8 <main+0x604>)
 800285c:	801a      	strh	r2, [r3, #0]
		accZraw = (uint16_t) (data[4] << 8 | data[5]);
 800285e:	4b9c      	ldr	r3, [pc, #624]	; (8002ad0 <main+0x5ec>)
 8002860:	791b      	ldrb	r3, [r3, #4]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	b21a      	sxth	r2, r3
 8002866:	4b9a      	ldr	r3, [pc, #616]	; (8002ad0 <main+0x5ec>)
 8002868:	795b      	ldrb	r3, [r3, #5]
 800286a:	b21b      	sxth	r3, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	b21b      	sxth	r3, r3
 8002870:	b29a      	uxth	r2, r3
 8002872:	4b9e      	ldr	r3, [pc, #632]	; (8002aec <main+0x608>)
 8002874:	801a      	strh	r2, [r3, #0]
		accX *= accXraw / accel_sens;
 8002876:	4b9b      	ldr	r3, [pc, #620]	; (8002ae4 <main+0x600>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	0018      	movs	r0, r3
 800287c:	f7ff fb1e 	bl	8001ebc <__aeabi_i2d>
 8002880:	4b9b      	ldr	r3, [pc, #620]	; (8002af0 <main+0x60c>)
 8002882:	685c      	ldr	r4, [r3, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	001a      	movs	r2, r3
 8002888:	0023      	movs	r3, r4
 800288a:	f7fe f937 	bl	8000afc <__aeabi_ddiv>
 800288e:	0003      	movs	r3, r0
 8002890:	000c      	movs	r4, r1
 8002892:	0018      	movs	r0, r3
 8002894:	0021      	movs	r1, r4
 8002896:	4b8f      	ldr	r3, [pc, #572]	; (8002ad4 <main+0x5f0>)
 8002898:	685c      	ldr	r4, [r3, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	001a      	movs	r2, r3
 800289e:	0023      	movs	r3, r4
 80028a0:	f7fe fd36 	bl	8001310 <__aeabi_dmul>
 80028a4:	0003      	movs	r3, r0
 80028a6:	000c      	movs	r4, r1
 80028a8:	4a8a      	ldr	r2, [pc, #552]	; (8002ad4 <main+0x5f0>)
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	6054      	str	r4, [r2, #4]
		accY *= accYraw / accel_sens;
 80028ae:	4b8e      	ldr	r3, [pc, #568]	; (8002ae8 <main+0x604>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7ff fb02 	bl	8001ebc <__aeabi_i2d>
 80028b8:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <main+0x60c>)
 80028ba:	685c      	ldr	r4, [r3, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	001a      	movs	r2, r3
 80028c0:	0023      	movs	r3, r4
 80028c2:	f7fe f91b 	bl	8000afc <__aeabi_ddiv>
 80028c6:	0003      	movs	r3, r0
 80028c8:	000c      	movs	r4, r1
 80028ca:	0018      	movs	r0, r3
 80028cc:	0021      	movs	r1, r4
 80028ce:	4b83      	ldr	r3, [pc, #524]	; (8002adc <main+0x5f8>)
 80028d0:	685c      	ldr	r4, [r3, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	001a      	movs	r2, r3
 80028d6:	0023      	movs	r3, r4
 80028d8:	f7fe fd1a 	bl	8001310 <__aeabi_dmul>
 80028dc:	0003      	movs	r3, r0
 80028de:	000c      	movs	r4, r1
 80028e0:	4a7e      	ldr	r2, [pc, #504]	; (8002adc <main+0x5f8>)
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	6054      	str	r4, [r2, #4]
		accZ *= accZraw / accel_sens;
 80028e6:	4b81      	ldr	r3, [pc, #516]	; (8002aec <main+0x608>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7ff fae6 	bl	8001ebc <__aeabi_i2d>
 80028f0:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <main+0x60c>)
 80028f2:	685c      	ldr	r4, [r3, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	001a      	movs	r2, r3
 80028f8:	0023      	movs	r3, r4
 80028fa:	f7fe f8ff 	bl	8000afc <__aeabi_ddiv>
 80028fe:	0003      	movs	r3, r0
 8002900:	000c      	movs	r4, r1
 8002902:	0018      	movs	r0, r3
 8002904:	0021      	movs	r1, r4
 8002906:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <main+0x5fc>)
 8002908:	685c      	ldr	r4, [r3, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	001a      	movs	r2, r3
 800290e:	0023      	movs	r3, r4
 8002910:	f7fe fcfe 	bl	8001310 <__aeabi_dmul>
 8002914:	0003      	movs	r3, r0
 8002916:	000c      	movs	r4, r1
 8002918:	4a71      	ldr	r2, [pc, #452]	; (8002ae0 <main+0x5fc>)
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	6054      	str	r4, [r2, #4]
		mag = sqrt((pow(accX, 2) + pow(accY, 2) + pow(accZ, 2)));
 800291e:	4b6d      	ldr	r3, [pc, #436]	; (8002ad4 <main+0x5f0>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	2300      	movs	r3, #0
 8002926:	2480      	movs	r4, #128	; 0x80
 8002928:	05e4      	lsls	r4, r4, #23
 800292a:	001a      	movs	r2, r3
 800292c:	0023      	movs	r3, r4
 800292e:	f004 ff2f 	bl	8007790 <pow>
 8002932:	0005      	movs	r5, r0
 8002934:	000e      	movs	r6, r1
 8002936:	4b69      	ldr	r3, [pc, #420]	; (8002adc <main+0x5f8>)
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	2300      	movs	r3, #0
 800293e:	2480      	movs	r4, #128	; 0x80
 8002940:	05e4      	lsls	r4, r4, #23
 8002942:	001a      	movs	r2, r3
 8002944:	0023      	movs	r3, r4
 8002946:	f004 ff23 	bl	8007790 <pow>
 800294a:	0003      	movs	r3, r0
 800294c:	000c      	movs	r4, r1
 800294e:	001a      	movs	r2, r3
 8002950:	0023      	movs	r3, r4
 8002952:	0028      	movs	r0, r5
 8002954:	0031      	movs	r1, r6
 8002956:	f7fd fdb5 	bl	80004c4 <__aeabi_dadd>
 800295a:	0003      	movs	r3, r0
 800295c:	000c      	movs	r4, r1
 800295e:	001d      	movs	r5, r3
 8002960:	0026      	movs	r6, r4
 8002962:	4b5f      	ldr	r3, [pc, #380]	; (8002ae0 <main+0x5fc>)
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	2300      	movs	r3, #0
 800296a:	2480      	movs	r4, #128	; 0x80
 800296c:	05e4      	lsls	r4, r4, #23
 800296e:	001a      	movs	r2, r3
 8002970:	0023      	movs	r3, r4
 8002972:	f004 ff0d 	bl	8007790 <pow>
 8002976:	0003      	movs	r3, r0
 8002978:	000c      	movs	r4, r1
 800297a:	001a      	movs	r2, r3
 800297c:	0023      	movs	r3, r4
 800297e:	0028      	movs	r0, r5
 8002980:	0031      	movs	r1, r6
 8002982:	f7fd fd9f 	bl	80004c4 <__aeabi_dadd>
 8002986:	0003      	movs	r3, r0
 8002988:	000c      	movs	r4, r1
 800298a:	0018      	movs	r0, r3
 800298c:	0021      	movs	r1, r4
 800298e:	f005 f895 	bl	8007abc <sqrt>
 8002992:	0003      	movs	r3, r0
 8002994:	000c      	movs	r4, r1
 8002996:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <main+0x610>)
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	6054      	str	r4, [r2, #4]
		if(((accX > .9) && (accX < 1.1)) || ((accX < -.9) && (accX > -1.1))){
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <main+0x5f0>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	6859      	ldr	r1, [r3, #4]
 80029a2:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <main+0x614>)
 80029a4:	4b55      	ldr	r3, [pc, #340]	; (8002afc <main+0x618>)
 80029a6:	f7fd fc6d 	bl	8000284 <__aeabi_dcmpgt>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d008      	beq.n	80029c0 <main+0x4dc>
 80029ae:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <main+0x5f0>)
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <main+0x61c>)
 80029b6:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <main+0x620>)
 80029b8:	f7fd fc50 	bl	800025c <__aeabi_dcmplt>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d111      	bne.n	80029e4 <main+0x500>
 80029c0:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <main+0x5f0>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <main+0x614>)
 80029c8:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <main+0x624>)
 80029ca:	f7fd fc47 	bl	800025c <__aeabi_dcmplt>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d010      	beq.n	80029f4 <main+0x510>
 80029d2:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <main+0x5f0>)
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <main+0x61c>)
 80029da:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <main+0x628>)
 80029dc:	f7fd fc52 	bl	8000284 <__aeabi_dcmpgt>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d007      	beq.n	80029f4 <main+0x510>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	015b      	lsls	r3, r3, #5
 80029e8:	4835      	ldr	r0, [pc, #212]	; (8002ac0 <main+0x5dc>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	0019      	movs	r1, r3
 80029ee:	f001 f833 	bl	8003a58 <HAL_GPIO_WritePin>
 80029f2:	e006      	b.n	8002a02 <main+0x51e>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	015b      	lsls	r3, r3, #5
 80029f8:	4831      	ldr	r0, [pc, #196]	; (8002ac0 <main+0x5dc>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	0019      	movs	r1, r3
 80029fe:	f001 f82b 	bl	8003a58 <HAL_GPIO_WritePin>
		}
		if(((accY > .9) && (accY < 1.1)) || ((accY < -.9) && (accY > -1.1))){
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <main+0x5f8>)
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	4a3b      	ldr	r2, [pc, #236]	; (8002af8 <main+0x614>)
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <main+0x618>)
 8002a0c:	f7fd fc3a 	bl	8000284 <__aeabi_dcmpgt>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d008      	beq.n	8002a26 <main+0x542>
 8002a14:	4b31      	ldr	r3, [pc, #196]	; (8002adc <main+0x5f8>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	4a39      	ldr	r2, [pc, #228]	; (8002b00 <main+0x61c>)
 8002a1c:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <main+0x620>)
 8002a1e:	f7fd fc1d 	bl	800025c <__aeabi_dcmplt>
 8002a22:	1e03      	subs	r3, r0, #0
 8002a24:	d111      	bne.n	8002a4a <main+0x566>
 8002a26:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <main+0x5f8>)
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	4a32      	ldr	r2, [pc, #200]	; (8002af8 <main+0x614>)
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <main+0x624>)
 8002a30:	f7fd fc14 	bl	800025c <__aeabi_dcmplt>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d010      	beq.n	8002a5a <main+0x576>
 8002a38:	4b28      	ldr	r3, [pc, #160]	; (8002adc <main+0x5f8>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	4a30      	ldr	r2, [pc, #192]	; (8002b00 <main+0x61c>)
 8002a40:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <main+0x628>)
 8002a42:	f7fd fc1f 	bl	8000284 <__aeabi_dcmpgt>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d007      	beq.n	8002a5a <main+0x576>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	481c      	ldr	r0, [pc, #112]	; (8002ac0 <main+0x5dc>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	0019      	movs	r1, r3
 8002a54:	f001 f800 	bl	8003a58 <HAL_GPIO_WritePin>
 8002a58:	e006      	b.n	8002a68 <main+0x584>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	019b      	lsls	r3, r3, #6
 8002a5e:	4818      	ldr	r0, [pc, #96]	; (8002ac0 <main+0x5dc>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	0019      	movs	r1, r3
 8002a64:	f000 fff8 	bl	8003a58 <HAL_GPIO_WritePin>
		}
		if(((accZ > .9) && (accZ < 1.1)) || ((accZ < -.9) && (accZ > -1.1))){
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <main+0x5fc>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <main+0x614>)
 8002a70:	4b22      	ldr	r3, [pc, #136]	; (8002afc <main+0x618>)
 8002a72:	f7fd fc07 	bl	8000284 <__aeabi_dcmpgt>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d008      	beq.n	8002a8c <main+0x5a8>
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <main+0x5fc>)
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <main+0x61c>)
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <main+0x620>)
 8002a84:	f7fd fbea 	bl	800025c <__aeabi_dcmplt>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d111      	bne.n	8002ab0 <main+0x5cc>
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <main+0x5fc>)
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <main+0x614>)
 8002a94:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <main+0x624>)
 8002a96:	f7fd fbe1 	bl	800025c <__aeabi_dcmplt>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d038      	beq.n	8002b10 <main+0x62c>
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <main+0x5fc>)
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <main+0x61c>)
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <main+0x628>)
 8002aa8:	f7fd fbec 	bl	8000284 <__aeabi_dcmpgt>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d02f      	beq.n	8002b10 <main+0x62c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	01db      	lsls	r3, r3, #7
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <main+0x5dc>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	0019      	movs	r1, r3
 8002aba:	f000 ffcd 	bl	8003a58 <HAL_GPIO_WritePin>
 8002abe:	e02e      	b.n	8002b1e <main+0x63a>
 8002ac0:	50000400 	.word	0x50000400
 8002ac4:	20000234 	.word	0x20000234
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	200000ec 	.word	0x200000ec
 8002ad0:	20000228 	.word	0x20000228
 8002ad4:	20000008 	.word	0x20000008
 8002ad8:	bff00000 	.word	0xbff00000
 8002adc:	20000010 	.word	0x20000010
 8002ae0:	20000018 	.word	0x20000018
 8002ae4:	200000ea 	.word	0x200000ea
 8002ae8:	20000232 	.word	0x20000232
 8002aec:	20000280 	.word	0x20000280
 8002af0:	20000198 	.word	0x20000198
 8002af4:	20000278 	.word	0x20000278
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	3feccccc 	.word	0x3feccccc
 8002b00:	9999999a 	.word	0x9999999a
 8002b04:	3ff19999 	.word	0x3ff19999
 8002b08:	bfeccccc 	.word	0xbfeccccc
 8002b0c:	bff19999 	.word	0xbff19999
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	01db      	lsls	r3, r3, #7
 8002b14:	4845      	ldr	r0, [pc, #276]	; (8002c2c <main+0x748>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	0019      	movs	r1, r3
 8002b1a:	f000 ff9d 	bl	8003a58 <HAL_GPIO_WritePin>
		}

		accX = 1;
 8002b1e:	4a44      	ldr	r2, [pc, #272]	; (8002c30 <main+0x74c>)
 8002b20:	2300      	movs	r3, #0
 8002b22:	4c44      	ldr	r4, [pc, #272]	; (8002c34 <main+0x750>)
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	6054      	str	r4, [r2, #4]
		accY = 1;
 8002b28:	4a43      	ldr	r2, [pc, #268]	; (8002c38 <main+0x754>)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4c41      	ldr	r4, [pc, #260]	; (8002c34 <main+0x750>)
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	6054      	str	r4, [r2, #4]
		accZ = 1;
 8002b32:	4a42      	ldr	r2, [pc, #264]	; (8002c3c <main+0x758>)
 8002b34:	2300      	movs	r3, #0
 8002b36:	4c3f      	ldr	r4, [pc, #252]	; (8002c34 <main+0x750>)
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	6054      	str	r4, [r2, #4]

		IMU_sum = IMU_sum + mag;
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <main+0x75c>)
 8002b3e:	685c      	ldr	r4, [r3, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	001a      	movs	r2, r3
 8002b44:	0023      	movs	r3, r4
 8002b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b4a:	f7fd fcbb 	bl	80004c4 <__aeabi_dadd>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	000c      	movs	r4, r1
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b54:	62fc      	str	r4, [r7, #44]	; 0x2c
		if(IMU_avgCounter == 99) {
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	2b63      	cmp	r3, #99	; 0x63
 8002b5a:	d162      	bne.n	8002c22 <main+0x73e>
			curr_value = IMU_sum / 100;
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <main+0x760>)
 8002b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b64:	f7fd ffca 	bl	8000afc <__aeabi_ddiv>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	000c      	movs	r4, r1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	60fc      	str	r4, [r7, #12]
			IMU_avgCounter = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
			IMU_sum = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	2400      	movs	r4, #0
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7a:	62fc      	str	r4, [r7, #44]	; 0x2c

			if(IMU_postCounter != 0) {
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d021      	beq.n	8002bc6 <main+0x6e2>
				prev_increasing = increasing;
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <main+0x764>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <main+0x768>)
 8002b88:	601a      	str	r2, [r3, #0]
				prev_decreasing = decreasing;
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <main+0x76c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <main+0x770>)
 8002b90:	601a      	str	r2, [r3, #0]
				if(curr_value > prev_value) {
 8002b92:	6a3a      	ldr	r2, [r7, #32]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	68b8      	ldr	r0, [r7, #8]
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	f7fd fb73 	bl	8000284 <__aeabi_dcmpgt>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d006      	beq.n	8002bb0 <main+0x6cc>
					increasing = 1;
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <main+0x764>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
					decreasing = 0;
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <main+0x76c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e005      	b.n	8002bbc <main+0x6d8>
				}
				else {
					increasing = 0;
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <main+0x764>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
					decreasing = 1;
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <main+0x76c>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
				}
				prev_value = curr_value;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	68fc      	ldr	r4, [r7, #12]
 8002bc0:	623b      	str	r3, [r7, #32]
 8002bc2:	627c      	str	r4, [r7, #36]	; 0x24
 8002bc4:	e003      	b.n	8002bce <main+0x6ea>
			}
			else {
				prev_value = curr_value;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	68fc      	ldr	r4, [r7, #12]
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	627c      	str	r4, [r7, #36]	; 0x24
			}
			if(prev_decreasing && increasing) {
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <main+0x770>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <main+0x704>
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <main+0x764>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <main+0x704>
				//rotation phase 1
				rotate++;
 8002bde:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <main+0x774>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <main+0x774>)
 8002be6:	601a      	str	r2, [r3, #0]
			}
			if(prev_increasing && decreasing) {
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <main+0x768>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <main+0x71e>
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <main+0x76c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <main+0x71e>
				//rotation phase 2
				rotate++;
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <main+0x774>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <main+0x774>)
 8002c00:	601a      	str	r2, [r3, #0]
			}
			if(rotate == 2) {
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <main+0x774>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d107      	bne.n	8002c1a <main+0x736>
				rotate = 0;
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <main+0x774>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
				rotation_counter++;
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <main+0x778>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <main+0x778>)
 8002c18:	601a      	str	r2, [r3, #0]
			}
			IMU_postCounter++;
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c20:	e5c3      	b.n	80027aa <main+0x2c6>
		}
		else {
			IMU_avgCounter++;
 8002c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c24:	3301      	adds	r3, #1
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
		ICM_ret = HAL_I2C_Mem_Read(&hi2c1, ICM_Main_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, sizeof(data)/sizeof(uint8_t), HAL_MAX_DELAY);
 8002c28:	e5bf      	b.n	80027aa <main+0x2c6>
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	50000400 	.word	0x50000400
 8002c30:	20000008 	.word	0x20000008
 8002c34:	3ff00000 	.word	0x3ff00000
 8002c38:	20000010 	.word	0x20000010
 8002c3c:	20000018 	.word	0x20000018
 8002c40:	20000278 	.word	0x20000278
 8002c44:	40590000 	.word	0x40590000
 8002c48:	200000c0 	.word	0x200000c0
 8002c4c:	200000c8 	.word	0x200000c8
 8002c50:	200000c4 	.word	0x200000c4
 8002c54:	200000cc 	.word	0x200000cc
 8002c58:	200000d4 	.word	0x200000d4
 8002c5c:	200000d0 	.word	0x200000d0

08002c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b09d      	sub	sp, #116	; 0x74
 8002c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c66:	2438      	movs	r4, #56	; 0x38
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2338      	movs	r3, #56	; 0x38
 8002c6e:	001a      	movs	r2, r3
 8002c70:	2100      	movs	r1, #0
 8002c72:	f004 f97d 	bl	8006f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c76:	2324      	movs	r3, #36	; 0x24
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	2314      	movs	r3, #20
 8002c7e:	001a      	movs	r2, r3
 8002c80:	2100      	movs	r1, #0
 8002c82:	f004 f975 	bl	8006f70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c86:	003b      	movs	r3, r7
 8002c88:	0018      	movs	r0, r3
 8002c8a:	2324      	movs	r3, #36	; 0x24
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f004 f96e 	bl	8006f70 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <SystemClock_Config+0xcc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <SystemClock_Config+0xd0>)
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <SystemClock_Config+0xcc>)
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	0109      	lsls	r1, r1, #4
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ca6:	0021      	movs	r1, r4
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	2202      	movs	r2, #2
 8002cac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f001 fcce 	bl	8004664 <HAL_RCC_OscConfig>
 8002cc8:	1e03      	subs	r3, r0, #0
 8002cca:	d001      	beq.n	8002cd0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002ccc:	f000 f9c6 	bl	800305c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd0:	2124      	movs	r1, #36	; 0x24
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	2201      	movs	r2, #1
 8002cdc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	22a0      	movs	r2, #160	; 0xa0
 8002ce2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f002 f87d 	bl	8004df4 <HAL_RCC_ClockConfig>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002cfe:	f000 f9ad 	bl	800305c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002d02:	003b      	movs	r3, r7
 8002d04:	2209      	movs	r2, #9
 8002d06:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d08:	003b      	movs	r3, r7
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d0e:	003b      	movs	r3, r7
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d14:	003b      	movs	r3, r7
 8002d16:	0018      	movs	r0, r3
 8002d18:	f002 fa8c 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d001      	beq.n	8002d24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002d20:	f000 f99c 	bl	800305c <Error_Handler>
  }
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b01d      	add	sp, #116	; 0x74
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	ffffe7ff 	.word	0xffffe7ff

08002d34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <MX_I2C1_Init+0x78>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000509;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <MX_I2C1_Init+0x7c>)
 8002d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 fea9 	bl	8003ac8 <HAL_I2C_Init>
 8002d76:	1e03      	subs	r3, r0, #0
 8002d78:	d001      	beq.n	8002d7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d7a:	f000 f96f 	bl	800305c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d80:	2100      	movs	r1, #0
 8002d82:	0018      	movs	r0, r3
 8002d84:	f001 fbd6 	bl	8004534 <HAL_I2CEx_ConfigAnalogFilter>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d8c:	f000 f966 	bl	800305c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <MX_I2C1_Init+0x74>)
 8002d92:	2100      	movs	r1, #0
 8002d94:	0018      	movs	r0, r3
 8002d96:	f001 fc19 	bl	80045cc <HAL_I2CEx_ConfigDigitalFilter>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d9e:	f000 f95d 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200000ec 	.word	0x200000ec
 8002dac:	40005400 	.word	0x40005400
 8002db0:	00000509 	.word	0x00000509

08002db4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <MX_I2C2_Init+0x78>)
 8002dbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000509;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <MX_I2C2_Init+0x7c>)
 8002dc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fe69 	bl	8003ac8 <HAL_I2C_Init>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d001      	beq.n	8002dfe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002dfa:	f000 f92f 	bl	800305c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002e00:	2100      	movs	r1, #0
 8002e02:	0018      	movs	r0, r3
 8002e04:	f001 fb96 	bl	8004534 <HAL_I2CEx_ConfigAnalogFilter>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002e0c:	f000 f926 	bl	800305c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <MX_I2C2_Init+0x74>)
 8002e12:	2100      	movs	r1, #0
 8002e14:	0018      	movs	r0, r3
 8002e16:	f001 fbd9 	bl	80045cc <HAL_I2CEx_ConfigDigitalFilter>
 8002e1a:	1e03      	subs	r3, r0, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002e1e:	f000 f91d 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	2000013c 	.word	0x2000013c
 8002e2c:	40005800 	.word	0x40005800
 8002e30:	00000509 	.word	0x00000509

08002e34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	0018      	movs	r0, r3
 8002e40:	2310      	movs	r3, #16
 8002e42:	001a      	movs	r2, r3
 8002e44:	2100      	movs	r1, #0
 8002e46:	f004 f893 	bl	8006f70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e4a:	003b      	movs	r3, r7
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	2308      	movs	r3, #8
 8002e50:	001a      	movs	r2, r3
 8002e52:	2100      	movs	r1, #0
 8002e54:	f004 f88c 	bl	8006f70 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	05d2      	lsls	r2, r2, #23
 8002e5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <MX_TIM2_Init+0xa4>)
 8002e64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500-1;
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002e6e:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <MX_TIM2_Init+0xa8>)
 8002e70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e78:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002e80:	0018      	movs	r0, r3
 8002e82:	f002 fb3b 	bl	80054fc <HAL_TIM_Base_Init>
 8002e86:	1e03      	subs	r3, r0, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002e8a:	f000 f8e7 	bl	800305c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e8e:	2108      	movs	r1, #8
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	0152      	lsls	r2, r2, #5
 8002e96:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e98:	187a      	adds	r2, r7, r1
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002e9c:	0011      	movs	r1, r2
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f002 fca0 	bl	80057e4 <HAL_TIM_ConfigClockSource>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d001      	beq.n	8002eac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002ea8:	f000 f8d8 	bl	800305c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eac:	003b      	movs	r3, r7
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb2:	003b      	movs	r3, r7
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eb8:	003a      	movs	r2, r7
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <MX_TIM2_Init+0xa0>)
 8002ebc:	0011      	movs	r1, r2
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f002 fe5c 	bl	8005b7c <HAL_TIMEx_MasterConfigSynchronization>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002ec8:	f000 f8c8 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b006      	add	sp, #24
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000234 	.word	0x20000234
 8002ed8:	00009c3f 	.word	0x00009c3f
 8002edc:	000005db 	.word	0x000005db

08002ee0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <MX_USART1_UART_Init+0x5c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002eec:	22e1      	movs	r2, #225	; 0xe1
 8002eee:	0252      	lsls	r2, r2, #9
 8002ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <MX_USART1_UART_Init+0x58>)
 8002f24:	0018      	movs	r0, r3
 8002f26:	f002 fe81 	bl	8005c2c <HAL_UART_Init>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f2e:	f000 f895 	bl	800305c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200001a0 	.word	0x200001a0
 8002f3c:	40013800 	.word	0x40013800

08002f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f46:	240c      	movs	r4, #12
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	2314      	movs	r3, #20
 8002f4e:	001a      	movs	r2, r3
 8002f50:	2100      	movs	r1, #0
 8002f52:	f004 f80d 	bl	8006f70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	2202      	movs	r2, #2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f72:	4b27      	ldr	r3, [pc, #156]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f7a:	4b25      	ldr	r3, [pc, #148]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	4013      	ands	r3, r2
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f92:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <MX_GPIO_Init+0xd0>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	2201      	movs	r2, #1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8002f9e:	491d      	ldr	r1, [pc, #116]	; (8003014 <MX_GPIO_Init+0xd4>)
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <MX_GPIO_Init+0xd8>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fd57 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_RESET);
 8002faa:	23a0      	movs	r3, #160	; 0xa0
 8002fac:	05db      	lsls	r3, r3, #23
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2130      	movs	r1, #48	; 0x30
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 fd50 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB14 PB13 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8002fb8:	0021      	movs	r1, r4
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <MX_GPIO_Init+0xd4>)
 8002fbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd2:	000c      	movs	r4, r1
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <MX_GPIO_Init+0xd8>)
 8002fd8:	0019      	movs	r1, r3
 8002fda:	0010      	movs	r0, r2
 8002fdc:	f000 fbc6 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8002fe0:	0021      	movs	r1, r4
 8002fe2:	187b      	adds	r3, r7, r1
 8002fe4:	2230      	movs	r2, #48	; 0x30
 8002fe6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	2201      	movs	r2, #1
 8002fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	187a      	adds	r2, r7, r1
 8002ffc:	23a0      	movs	r3, #160	; 0xa0
 8002ffe:	05db      	lsls	r3, r3, #23
 8003000:	0011      	movs	r1, r2
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fbb2 	bl	800376c <HAL_GPIO_Init>

}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b009      	add	sp, #36	; 0x24
 800300e:	bd90      	pop	{r4, r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	00007010 	.word	0x00007010
 8003018:	50000400 	.word	0x50000400

0800301c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

	while ((I2C1->ISR & I2C_FLAG_BUSY) != 0) {
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	4013      	ands	r3, r2
 8003030:	d1f9      	bne.n	8003026 <HAL_TIM_PeriodElapsedCallback+0xa>

	}

	babysitter_SendData();
 8003032:	f7ff fa19 	bl	8002468 <babysitter_SendData>
	HELPcounter++;
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800303e:	601a      	str	r2, [r3, #0]
	rotation_counter = 0;
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	40005400 	.word	0x40005400
 8003054:	200000bc 	.word	0x200000bc
 8003058:	200000d0 	.word	0x200000d0

0800305c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003060:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003062:	e7fe      	b.n	8003062 <Error_Handler+0x6>

08003064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_MspInit+0x24>)
 800306a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_MspInit+0x24>)
 800306e:	2101      	movs	r1, #1
 8003070:	430a      	orrs	r2, r1
 8003072:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <HAL_MspInit+0x24>)
 8003076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_MspInit+0x24>)
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	0549      	lsls	r1, r1, #21
 800307e:	430a      	orrs	r2, r1
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000

0800308c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	2314      	movs	r3, #20
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	0018      	movs	r0, r3
 800309a:	2314      	movs	r3, #20
 800309c:	001a      	movs	r2, r3
 800309e:	2100      	movs	r1, #0
 80030a0:	f003 ff66 	bl	8006f70 <memset>
  if(hi2c->Instance==I2C1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a30      	ldr	r2, [pc, #192]	; (800316c <HAL_I2C_MspInit+0xe0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d12a      	bne.n	8003104 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 80030b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b2:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 80030b4:	2102      	movs	r1, #2
 80030b6:	430a      	orrs	r2, r1
 80030b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80030c6:	2114      	movs	r1, #20
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	22c0      	movs	r2, #192	; 0xc0
 80030cc:	0092      	lsls	r2, r2, #2
 80030ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	2212      	movs	r2, #18
 80030d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	2201      	movs	r2, #1
 80030da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	2203      	movs	r2, #3
 80030e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030e2:	187b      	adds	r3, r7, r1
 80030e4:	2204      	movs	r2, #4
 80030e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	4a22      	ldr	r2, [pc, #136]	; (8003174 <HAL_I2C_MspInit+0xe8>)
 80030ec:	0019      	movs	r1, r3
 80030ee:	0010      	movs	r0, r2
 80030f0:	f000 fb3c 	bl	800376c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 80030f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	0389      	lsls	r1, r1, #14
 80030fe:	430a      	orrs	r2, r1
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003102:	e02e      	b.n	8003162 <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_I2C_MspInit+0xec>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d129      	bne.n	8003162 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310e:	4b18      	ldr	r3, [pc, #96]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 8003114:	2102      	movs	r1, #2
 8003116:	430a      	orrs	r2, r1
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	2202      	movs	r2, #2
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003126:	2114      	movs	r1, #20
 8003128:	187b      	adds	r3, r7, r1
 800312a:	22c0      	movs	r2, #192	; 0xc0
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003130:	187b      	adds	r3, r7, r1
 8003132:	2212      	movs	r2, #18
 8003134:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003136:	187b      	adds	r3, r7, r1
 8003138:	2201      	movs	r2, #1
 800313a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	187b      	adds	r3, r7, r1
 800313e:	2203      	movs	r2, #3
 8003140:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2206      	movs	r2, #6
 8003146:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	187b      	adds	r3, r7, r1
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_I2C_MspInit+0xe8>)
 800314c:	0019      	movs	r1, r3
 800314e:	0010      	movs	r0, r2
 8003150:	f000 fb0c 	bl	800376c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 8003156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_I2C_MspInit+0xe4>)
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	03c9      	lsls	r1, r1, #15
 800315e:	430a      	orrs	r2, r1
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b00a      	add	sp, #40	; 0x28
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	40005400 	.word	0x40005400
 8003170:	40021000 	.word	0x40021000
 8003174:	50000400 	.word	0x50000400
 8003178:	40005800 	.word	0x40005800

0800317c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	05db      	lsls	r3, r3, #23
 800318c:	429a      	cmp	r2, r3
 800318e:	d10d      	bne.n	80031ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003190:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_TIM_Base_MspInit+0x38>)
 8003192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_TIM_Base_MspInit+0x38>)
 8003196:	2101      	movs	r1, #1
 8003198:	430a      	orrs	r2, r1
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	200f      	movs	r0, #15
 80031a2:	f000 fa29 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031a6:	200f      	movs	r0, #15
 80031a8:	f000 fa3b 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	230c      	movs	r3, #12
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	0018      	movs	r0, r3
 80031c6:	2314      	movs	r3, #20
 80031c8:	001a      	movs	r2, r3
 80031ca:	2100      	movs	r1, #0
 80031cc:	f003 fed0 	bl	8006f70 <memset>
  if(huart->Instance==USART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <HAL_UART_MspInit+0x8c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d130      	bne.n	800323c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_UART_MspInit+0x90>)
 80031dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031de:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_UART_MspInit+0x90>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	01c9      	lsls	r1, r1, #7
 80031e4:	430a      	orrs	r2, r1
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <HAL_UART_MspInit+0x90>)
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_UART_MspInit+0x90>)
 80031ee:	2102      	movs	r1, #2
 80031f0:	430a      	orrs	r2, r1
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80031f4:	4b14      	ldr	r3, [pc, #80]	; (8003248 <HAL_UART_MspInit+0x90>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003200:	210c      	movs	r1, #12
 8003202:	187b      	adds	r3, r7, r1
 8003204:	22c0      	movs	r2, #192	; 0xc0
 8003206:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	187b      	adds	r3, r7, r1
 800320a:	2202      	movs	r2, #2
 800320c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	187b      	adds	r3, r7, r1
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	187b      	adds	r3, r7, r1
 8003216:	2203      	movs	r2, #3
 8003218:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800321a:	187b      	adds	r3, r7, r1
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	187b      	adds	r3, r7, r1
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_UART_MspInit+0x94>)
 8003224:	0019      	movs	r1, r3
 8003226:	0010      	movs	r0, r2
 8003228:	f000 faa0 	bl	800376c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	2100      	movs	r1, #0
 8003230:	201b      	movs	r0, #27
 8003232:	f000 f9e1 	bl	80035f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003236:	201b      	movs	r0, #27
 8003238:	f000 f9f3 	bl	8003622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b008      	add	sp, #32
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40013800 	.word	0x40013800
 8003248:	40021000 	.word	0x40021000
 800324c:	50000400 	.word	0x50000400

08003250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003254:	e7fe      	b.n	8003254 <NMI_Handler+0x4>

08003256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325a:	e7fe      	b.n	800325a <HardFault_Handler+0x4>

0800325c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003274:	f000 f8d6 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <TIM2_IRQHandler+0x14>)
 8003286:	0018      	movs	r0, r3
 8003288:	f002 f9c4 	bl	8005614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	20000234 	.word	0x20000234

08003298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <USART1_IRQHandler+0x14>)
 800329e:	0018      	movs	r0, r3
 80032a0:	f002 fe18 	bl	8005ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	200001a0 	.word	0x200001a0

080032b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b8:	4a14      	ldr	r2, [pc, #80]	; (800330c <_sbrk+0x5c>)
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <_sbrk+0x60>)
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <_sbrk+0x64>)
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <_sbrk+0x68>)
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <_sbrk+0x64>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	18d3      	adds	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d207      	bcs.n	80032f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e0:	f003 fe1c 	bl	8006f1c <__errno>
 80032e4:	0003      	movs	r3, r0
 80032e6:	220c      	movs	r2, #12
 80032e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	425b      	negs	r3, r3
 80032ee:	e009      	b.n	8003304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <_sbrk+0x64>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <_sbrk+0x64>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	18d2      	adds	r2, r2, r3
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <_sbrk+0x64>)
 8003300:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003302:	68fb      	ldr	r3, [r7, #12]
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20002000 	.word	0x20002000
 8003310:	00000400 	.word	0x00000400
 8003314:	200000d8 	.word	0x200000d8
 8003318:	20000290 	.word	0x20000290

0800331c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003328:	480d      	ldr	r0, [pc, #52]	; (8003360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800332a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <LoopForever+0x6>)
  ldr r1, =_edata
 800332e:	490e      	ldr	r1, [pc, #56]	; (8003368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <LoopForever+0xe>)
  movs r3, #0
 8003332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003334:	e002      	b.n	800333c <LoopCopyDataInit>

08003336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800333a:	3304      	adds	r3, #4

0800333c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800333c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800333e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003340:	d3f9      	bcc.n	8003336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003344:	4c0b      	ldr	r4, [pc, #44]	; (8003374 <LoopForever+0x16>)
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003348:	e001      	b.n	800334e <LoopFillZerobss>

0800334a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800334a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800334c:	3204      	adds	r2, #4

0800334e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800334e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003350:	d3fb      	bcc.n	800334a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003352:	f7ff ffe3 	bl	800331c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003356:	f003 fde7 	bl	8006f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800335a:	f7ff f8c3 	bl	80024e4 <main>

0800335e <LoopForever>:

LoopForever:
    b LoopForever
 800335e:	e7fe      	b.n	800335e <LoopForever>
  ldr   r0, =_estack
 8003360:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003368:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800336c:	08008b28 	.word	0x08008b28
  ldr r2, =_sbss
 8003370:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003374:	2000028c 	.word	0x2000028c

08003378 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003378:	e7fe      	b.n	8003378 <ADC1_COMP_IRQHandler>
	...

0800337c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_Init+0x3c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_Init+0x3c>)
 800338e:	2140      	movs	r1, #64	; 0x40
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003394:	2000      	movs	r0, #0
 8003396:	f000 f811 	bl	80033bc <HAL_InitTick>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d003      	beq.n	80033a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800339e:	1dfb      	adds	r3, r7, #7
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e001      	b.n	80033aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033a6:	f7ff fe5d 	bl	8003064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b002      	add	sp, #8
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	40022000 	.word	0x40022000

080033bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033c4:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_InitTick+0x5c>)
 80033c6:	681c      	ldr	r4, [r3, #0]
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_InitTick+0x60>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	0019      	movs	r1, r3
 80033ce:	23fa      	movs	r3, #250	; 0xfa
 80033d0:	0098      	lsls	r0, r3, #2
 80033d2:	f7fc fea1 	bl	8000118 <__udivsi3>
 80033d6:	0003      	movs	r3, r0
 80033d8:	0019      	movs	r1, r3
 80033da:	0020      	movs	r0, r4
 80033dc:	f7fc fe9c 	bl	8000118 <__udivsi3>
 80033e0:	0003      	movs	r3, r0
 80033e2:	0018      	movs	r0, r3
 80033e4:	f000 f92d 	bl	8003642 <HAL_SYSTICK_Config>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e00f      	b.n	8003410 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d80b      	bhi.n	800340e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	2301      	movs	r3, #1
 80033fa:	425b      	negs	r3, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f8fa 	bl	80035f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_InitTick+0x64>)
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e000      	b.n	8003410 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b003      	add	sp, #12
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	2000002c 	.word	0x2000002c
 800341c:	20000034 	.word	0x20000034
 8003420:	20000030 	.word	0x20000030

08003424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_IncTick+0x1c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	001a      	movs	r2, r3
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_IncTick+0x20>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	18d2      	adds	r2, r2, r3
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_IncTick+0x20>)
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	46c0      	nop			; (mov r8, r8)
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20000034 	.word	0x20000034
 8003444:	20000284 	.word	0x20000284

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <HAL_GetTick+0x10>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	20000284 	.word	0x20000284

0800345c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003464:	f7ff fff0 	bl	8003448 <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3301      	adds	r3, #1
 8003474:	d005      	beq.n	8003482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_Delay+0x40>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	001a      	movs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	189b      	adds	r3, r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	f7ff ffe0 	bl	8003448 <HAL_GetTick>
 8003488:	0002      	movs	r2, r0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	429a      	cmp	r2, r3
 8003492:	d8f7      	bhi.n	8003484 <HAL_Delay+0x28>
  {
  }
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b004      	add	sp, #16
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000034 	.word	0x20000034

080034a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	0002      	movs	r2, r0
 80034a8:	1dfb      	adds	r3, r7, #7
 80034aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034ac:	1dfb      	adds	r3, r7, #7
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b7f      	cmp	r3, #127	; 0x7f
 80034b2:	d809      	bhi.n	80034c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b4:	1dfb      	adds	r3, r7, #7
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	001a      	movs	r2, r3
 80034ba:	231f      	movs	r3, #31
 80034bc:	401a      	ands	r2, r3
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__NVIC_EnableIRQ+0x30>)
 80034c0:	2101      	movs	r1, #1
 80034c2:	4091      	lsls	r1, r2
 80034c4:	000a      	movs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
  }
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	e000e100 	.word	0xe000e100

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	0002      	movs	r2, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	1dfb      	adds	r3, r7, #7
 80034e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034e2:	1dfb      	adds	r3, r7, #7
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b7f      	cmp	r3, #127	; 0x7f
 80034e8:	d828      	bhi.n	800353c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ea:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <__NVIC_SetPriority+0xd4>)
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	33c0      	adds	r3, #192	; 0xc0
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	589b      	ldr	r3, [r3, r2]
 80034fa:	1dfa      	adds	r2, r7, #7
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	0011      	movs	r1, r2
 8003500:	2203      	movs	r2, #3
 8003502:	400a      	ands	r2, r1
 8003504:	00d2      	lsls	r2, r2, #3
 8003506:	21ff      	movs	r1, #255	; 0xff
 8003508:	4091      	lsls	r1, r2
 800350a:	000a      	movs	r2, r1
 800350c:	43d2      	mvns	r2, r2
 800350e:	401a      	ands	r2, r3
 8003510:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	22ff      	movs	r2, #255	; 0xff
 8003518:	401a      	ands	r2, r3
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	0018      	movs	r0, r3
 8003520:	2303      	movs	r3, #3
 8003522:	4003      	ands	r3, r0
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003528:	481f      	ldr	r0, [pc, #124]	; (80035a8 <__NVIC_SetPriority+0xd4>)
 800352a:	1dfb      	adds	r3, r7, #7
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b25b      	sxtb	r3, r3
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	430a      	orrs	r2, r1
 8003534:	33c0      	adds	r3, #192	; 0xc0
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800353a:	e031      	b.n	80035a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800353c:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <__NVIC_SetPriority+0xd8>)
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	0019      	movs	r1, r3
 8003544:	230f      	movs	r3, #15
 8003546:	400b      	ands	r3, r1
 8003548:	3b08      	subs	r3, #8
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3306      	adds	r3, #6
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	18d3      	adds	r3, r2, r3
 8003552:	3304      	adds	r3, #4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	1dfa      	adds	r2, r7, #7
 8003558:	7812      	ldrb	r2, [r2, #0]
 800355a:	0011      	movs	r1, r2
 800355c:	2203      	movs	r2, #3
 800355e:	400a      	ands	r2, r1
 8003560:	00d2      	lsls	r2, r2, #3
 8003562:	21ff      	movs	r1, #255	; 0xff
 8003564:	4091      	lsls	r1, r2
 8003566:	000a      	movs	r2, r1
 8003568:	43d2      	mvns	r2, r2
 800356a:	401a      	ands	r2, r3
 800356c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	401a      	ands	r2, r3
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	0018      	movs	r0, r3
 800357c:	2303      	movs	r3, #3
 800357e:	4003      	ands	r3, r0
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003584:	4809      	ldr	r0, [pc, #36]	; (80035ac <__NVIC_SetPriority+0xd8>)
 8003586:	1dfb      	adds	r3, r7, #7
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	001c      	movs	r4, r3
 800358c:	230f      	movs	r3, #15
 800358e:	4023      	ands	r3, r4
 8003590:	3b08      	subs	r3, #8
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	430a      	orrs	r2, r1
 8003596:	3306      	adds	r3, #6
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	18c3      	adds	r3, r0, r3
 800359c:	3304      	adds	r3, #4
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b003      	add	sp, #12
 80035a6:	bd90      	pop	{r4, r7, pc}
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <SysTick_Config+0x40>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c2:	2301      	movs	r3, #1
 80035c4:	e010      	b.n	80035e8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <SysTick_Config+0x44>)
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	3a01      	subs	r2, #1
 80035cc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ce:	2301      	movs	r3, #1
 80035d0:	425b      	negs	r3, r3
 80035d2:	2103      	movs	r1, #3
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7ff ff7d 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <SysTick_Config+0x44>)
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <SysTick_Config+0x44>)
 80035e2:	2207      	movs	r2, #7
 80035e4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	00ffffff 	.word	0x00ffffff
 80035f4:	e000e010 	.word	0xe000e010

080035f8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	210f      	movs	r1, #15
 8003604:	187b      	adds	r3, r7, r1
 8003606:	1c02      	adds	r2, r0, #0
 8003608:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	187b      	adds	r3, r7, r1
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b25b      	sxtb	r3, r3
 8003612:	0011      	movs	r1, r2
 8003614:	0018      	movs	r0, r3
 8003616:	f7ff ff5d 	bl	80034d4 <__NVIC_SetPriority>
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	0002      	movs	r2, r0
 800362a:	1dfb      	adds	r3, r7, #7
 800362c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b25b      	sxtb	r3, r3
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff ff33 	bl	80034a0 <__NVIC_EnableIRQ>
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b002      	add	sp, #8
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	0018      	movs	r0, r3
 800364e:	f7ff ffaf 	bl	80035b0 <SysTick_Config>
 8003652:	0003      	movs	r3, r0
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b002      	add	sp, #8
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	230f      	movs	r3, #15
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2225      	movs	r2, #37	; 0x25
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d008      	beq.n	800368a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2204      	movs	r2, #4
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2224      	movs	r2, #36	; 0x24
 8003682:	2100      	movs	r1, #0
 8003684:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e024      	b.n	80036d4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	210e      	movs	r1, #14
 8003696:	438a      	bics	r2, r1
 8003698:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2101      	movs	r1, #1
 80036a6:	438a      	bics	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	221c      	movs	r2, #28
 80036b0:	401a      	ands	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2101      	movs	r1, #1
 80036b8:	4091      	lsls	r1, r2
 80036ba:	000a      	movs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2225      	movs	r2, #37	; 0x25
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2224      	movs	r2, #36	; 0x24
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

    return status;
 80036ce:	230f      	movs	r3, #15
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	230f      	movs	r3, #15
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2225      	movs	r2, #37	; 0x25
 80036f0:	5c9b      	ldrb	r3, [r3, r2]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d007      	beq.n	8003708 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2204      	movs	r2, #4
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036fe:	230f      	movs	r3, #15
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e02a      	b.n	800375e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	210e      	movs	r1, #14
 8003714:	438a      	bics	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2101      	movs	r1, #1
 8003724:	438a      	bics	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	221c      	movs	r2, #28
 800372e:	401a      	ands	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2101      	movs	r1, #1
 8003736:	4091      	lsls	r1, r2
 8003738:	000a      	movs	r2, r1
 800373a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2225      	movs	r2, #37	; 0x25
 8003740:	2101      	movs	r1, #1
 8003742:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	0010      	movs	r0, r2
 800375c:	4798      	blx	r3
    }
  }
  return status;
 800375e:	230f      	movs	r3, #15
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	781b      	ldrb	r3, [r3, #0]
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003782:	e14f      	b.n	8003a24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4091      	lsls	r1, r2
 800378e:	000a      	movs	r2, r1
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d100      	bne.n	800379c <HAL_GPIO_Init+0x30>
 800379a:	e140      	b.n	8003a1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d00b      	beq.n	80037bc <HAL_GPIO_Init+0x50>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d007      	beq.n	80037bc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037b0:	2b11      	cmp	r3, #17
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b12      	cmp	r3, #18
 80037ba:	d130      	bne.n	800381e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	2203      	movs	r2, #3
 80037c8:	409a      	lsls	r2, r3
 80037ca:	0013      	movs	r3, r2
 80037cc:	43da      	mvns	r2, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	409a      	lsls	r2, r3
 80037de:	0013      	movs	r3, r2
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037f2:	2201      	movs	r2, #1
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	409a      	lsls	r2, r3
 80037f8:	0013      	movs	r3, r2
 80037fa:	43da      	mvns	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	2201      	movs	r2, #1
 800380a:	401a      	ands	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	409a      	lsls	r2, r3
 8003810:	0013      	movs	r3, r2
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2203      	movs	r2, #3
 800382a:	409a      	lsls	r2, r3
 800382c:	0013      	movs	r3, r2
 800382e:	43da      	mvns	r2, r3
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	0013      	movs	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0xf2>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b12      	cmp	r3, #18
 800385c:	d123      	bne.n	80038a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	08da      	lsrs	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3208      	adds	r2, #8
 8003866:	0092      	lsls	r2, r2, #2
 8003868:	58d3      	ldr	r3, [r2, r3]
 800386a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2207      	movs	r2, #7
 8003870:	4013      	ands	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	409a      	lsls	r2, r3
 8003878:	0013      	movs	r3, r2
 800387a:	43da      	mvns	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2107      	movs	r1, #7
 800388a:	400b      	ands	r3, r1
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	409a      	lsls	r2, r3
 8003890:	0013      	movs	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	08da      	lsrs	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3208      	adds	r2, #8
 80038a0:	0092      	lsls	r2, r2, #2
 80038a2:	6939      	ldr	r1, [r7, #16]
 80038a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	409a      	lsls	r2, r3
 80038b4:	0013      	movs	r3, r2
 80038b6:	43da      	mvns	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2203      	movs	r2, #3
 80038c4:	401a      	ands	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	409a      	lsls	r2, r3
 80038cc:	0013      	movs	r3, r2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	055b      	lsls	r3, r3, #21
 80038e2:	4013      	ands	r3, r2
 80038e4:	d100      	bne.n	80038e8 <HAL_GPIO_Init+0x17c>
 80038e6:	e09a      	b.n	8003a1e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e8:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <HAL_GPIO_Init+0x2d0>)
 80038ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_GPIO_Init+0x2d0>)
 80038ee:	2101      	movs	r1, #1
 80038f0:	430a      	orrs	r2, r1
 80038f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f4:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_GPIO_Init+0x2d4>)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	3302      	adds	r3, #2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	589b      	ldr	r3, [r3, r2]
 8003900:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2203      	movs	r2, #3
 8003906:	4013      	ands	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	220f      	movs	r2, #15
 800390c:	409a      	lsls	r2, r3
 800390e:	0013      	movs	r3, r2
 8003910:	43da      	mvns	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	23a0      	movs	r3, #160	; 0xa0
 800391c:	05db      	lsls	r3, r3, #23
 800391e:	429a      	cmp	r2, r3
 8003920:	d019      	beq.n	8003956 <HAL_GPIO_Init+0x1ea>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a47      	ldr	r2, [pc, #284]	; (8003a44 <HAL_GPIO_Init+0x2d8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <HAL_GPIO_Init+0x1e6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a46      	ldr	r2, [pc, #280]	; (8003a48 <HAL_GPIO_Init+0x2dc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00d      	beq.n	800394e <HAL_GPIO_Init+0x1e2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a45      	ldr	r2, [pc, #276]	; (8003a4c <HAL_GPIO_Init+0x2e0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <HAL_GPIO_Init+0x1de>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a44      	ldr	r2, [pc, #272]	; (8003a50 <HAL_GPIO_Init+0x2e4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d101      	bne.n	8003946 <HAL_GPIO_Init+0x1da>
 8003942:	2305      	movs	r3, #5
 8003944:	e008      	b.n	8003958 <HAL_GPIO_Init+0x1ec>
 8003946:	2306      	movs	r3, #6
 8003948:	e006      	b.n	8003958 <HAL_GPIO_Init+0x1ec>
 800394a:	2303      	movs	r3, #3
 800394c:	e004      	b.n	8003958 <HAL_GPIO_Init+0x1ec>
 800394e:	2302      	movs	r3, #2
 8003950:	e002      	b.n	8003958 <HAL_GPIO_Init+0x1ec>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_GPIO_Init+0x1ec>
 8003956:	2300      	movs	r3, #0
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	2103      	movs	r1, #3
 800395c:	400a      	ands	r2, r1
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	4093      	lsls	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003968:	4935      	ldr	r1, [pc, #212]	; (8003a40 <HAL_GPIO_Init+0x2d4>)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	3302      	adds	r3, #2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	43da      	mvns	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	025b      	lsls	r3, r3, #9
 800398e:	4013      	ands	r3, r2
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800399a:	4b2e      	ldr	r3, [pc, #184]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80039a0:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	43da      	mvns	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	029b      	lsls	r3, r3, #10
 80039b8:	4013      	ands	r3, r2
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ca:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	43da      	mvns	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	035b      	lsls	r3, r3, #13
 80039e2:	4013      	ands	r3, r2
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039ee:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	43da      	mvns	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	039b      	lsls	r3, r3, #14
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3301      	adds	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	40da      	lsrs	r2, r3
 8003a2c:	1e13      	subs	r3, r2, #0
 8003a2e:	d000      	beq.n	8003a32 <HAL_GPIO_Init+0x2c6>
 8003a30:	e6a8      	b.n	8003784 <HAL_GPIO_Init+0x18>
  }
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b006      	add	sp, #24
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40010000 	.word	0x40010000
 8003a44:	50000400 	.word	0x50000400
 8003a48:	50000800 	.word	0x50000800
 8003a4c:	50000c00 	.word	0x50000c00
 8003a50:	50001c00 	.word	0x50001c00
 8003a54:	40010400 	.word	0x40010400

08003a58 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	0008      	movs	r0, r1
 8003a62:	0011      	movs	r1, r2
 8003a64:	1cbb      	adds	r3, r7, #2
 8003a66:	1c02      	adds	r2, r0, #0
 8003a68:	801a      	strh	r2, [r3, #0]
 8003a6a:	1c7b      	adds	r3, r7, #1
 8003a6c:	1c0a      	adds	r2, r1, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a70:	1c7b      	adds	r3, r7, #1
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a78:	1cbb      	adds	r3, r7, #2
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003a80:	e003      	b.n	8003a8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003a82:	1cbb      	adds	r3, r7, #2
 8003a84:	881a      	ldrh	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	000a      	movs	r2, r1
 8003a9c:	1cbb      	adds	r3, r7, #2
 8003a9e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aa6:	1cbb      	adds	r3, r7, #2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	041a      	lsls	r2, r3, #16
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	1cb9      	adds	r1, r7, #2
 8003ab6:	8809      	ldrh	r1, [r1, #0]
 8003ab8:	400b      	ands	r3, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
}
 8003ac0:	46c0      	nop			; (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b004      	add	sp, #16
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e082      	b.n	8003be0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2241      	movs	r2, #65	; 0x41
 8003ade:	5c9b      	ldrb	r3, [r3, r2]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d107      	bne.n	8003af6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2240      	movs	r2, #64	; 0x40
 8003aea:	2100      	movs	r1, #0
 8003aec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7ff facb 	bl	800308c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2241      	movs	r2, #65	; 0x41
 8003afa:	2124      	movs	r1, #36	; 0x24
 8003afc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4934      	ldr	r1, [pc, #208]	; (8003be8 <HAL_I2C_Init+0x120>)
 8003b18:	400a      	ands	r2, r1
 8003b1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4931      	ldr	r1, [pc, #196]	; (8003bec <HAL_I2C_Init+0x124>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d108      	bne.n	8003b46 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	0209      	lsls	r1, r1, #8
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	e007      	b.n	8003b56 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2184      	movs	r1, #132	; 0x84
 8003b50:	0209      	lsls	r1, r1, #8
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d104      	bne.n	8003b68 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	0112      	lsls	r2, r2, #4
 8003b66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	491f      	ldr	r1, [pc, #124]	; (8003bf0 <HAL_I2C_Init+0x128>)
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	491a      	ldr	r1, [pc, #104]	; (8003bec <HAL_I2C_Init+0x124>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	0011      	movs	r1, r2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	021a      	lsls	r2, r3, #8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69d9      	ldr	r1, [r3, #28]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2241      	movs	r2, #65	; 0x41
 8003bcc:	2120      	movs	r1, #32
 8003bce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2242      	movs	r2, #66	; 0x42
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	f0ffffff 	.word	0xf0ffffff
 8003bec:	ffff7fff 	.word	0xffff7fff
 8003bf0:	02008000 	.word	0x02008000

08003bf4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	000c      	movs	r4, r1
 8003bfe:	0010      	movs	r0, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	230a      	movs	r3, #10
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	1c22      	adds	r2, r4, #0
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	1c02      	adds	r2, r0, #0
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	1dbb      	adds	r3, r7, #6
 8003c14:	1c0a      	adds	r2, r1, #0
 8003c16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2241      	movs	r2, #65	; 0x41
 8003c1c:	5c9b      	ldrb	r3, [r3, r2]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d000      	beq.n	8003c26 <HAL_I2C_Mem_Write+0x32>
 8003c24:	e10c      	b.n	8003e40 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <HAL_I2C_Mem_Write+0x42>
 8003c2c:	232c      	movs	r3, #44	; 0x2c
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d105      	bne.n	8003c42 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0ff      	b.n	8003e42 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2240      	movs	r2, #64	; 0x40
 8003c46:	5c9b      	ldrb	r3, [r3, r2]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_I2C_Mem_Write+0x5c>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0f8      	b.n	8003e42 <HAL_I2C_Mem_Write+0x24e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2240      	movs	r2, #64	; 0x40
 8003c54:	2101      	movs	r1, #1
 8003c56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c58:	f7ff fbf6 	bl	8003448 <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	0219      	lsls	r1, r3, #8
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	2319      	movs	r3, #25
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f000 fb0b 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003c72:	1e03      	subs	r3, r0, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0e3      	b.n	8003e42 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2241      	movs	r2, #65	; 0x41
 8003c7e:	2121      	movs	r1, #33	; 0x21
 8003c80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2242      	movs	r2, #66	; 0x42
 8003c86:	2140      	movs	r1, #64	; 0x40
 8003c88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	222c      	movs	r2, #44	; 0x2c
 8003c9a:	18ba      	adds	r2, r7, r2
 8003c9c:	8812      	ldrh	r2, [r2, #0]
 8003c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca6:	1dbb      	adds	r3, r7, #6
 8003ca8:	881c      	ldrh	r4, [r3, #0]
 8003caa:	2308      	movs	r3, #8
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	230a      	movs	r3, #10
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	8819      	ldrh	r1, [r3, #0]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	0023      	movs	r3, r4
 8003cc2:	f000 f9f9 	bl	80040b8 <I2C_RequestMemoryWrite>
 8003cc6:	1e03      	subs	r3, r0, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2240      	movs	r2, #64	; 0x40
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0b5      	b.n	8003e42 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2bff      	cmp	r3, #255	; 0xff
 8003cde:	d911      	bls.n	8003d04 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	22ff      	movs	r2, #255	; 0xff
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	045c      	lsls	r4, r3, #17
 8003cf0:	230a      	movs	r3, #10
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	8819      	ldrh	r1, [r3, #0]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	0023      	movs	r3, r4
 8003cfe:	f000 fbe3 	bl	80044c8 <I2C_TransferConfig>
 8003d02:	e012      	b.n	8003d2a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	049c      	lsls	r4, r3, #18
 8003d18:	230a      	movs	r3, #10
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	8819      	ldrh	r1, [r3, #0]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	0023      	movs	r3, r4
 8003d26:	f000 fbcf 	bl	80044c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 fae8 	bl	8004306 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d36:	1e03      	subs	r3, r0, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e081      	b.n	8003e42 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03a      	beq.n	8003dee <HAL_I2C_Mem_Write+0x1fa>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d136      	bne.n	8003dee <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	0013      	movs	r3, r2
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	f000 fa7b 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	1e03      	subs	r3, r0, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e053      	b.n	8003e42 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2bff      	cmp	r3, #255	; 0xff
 8003da2:	d911      	bls.n	8003dc8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	22ff      	movs	r2, #255	; 0xff
 8003da8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	045c      	lsls	r4, r3, #17
 8003db4:	230a      	movs	r3, #10
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	8819      	ldrh	r1, [r3, #0]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	0023      	movs	r3, r4
 8003dc2:	f000 fb81 	bl	80044c8 <I2C_TransferConfig>
 8003dc6:	e012      	b.n	8003dee <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	049c      	lsls	r4, r3, #18
 8003ddc:	230a      	movs	r3, #10
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	8819      	ldrh	r1, [r3, #0]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	2300      	movs	r3, #0
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	0023      	movs	r3, r4
 8003dea:	f000 fb6d 	bl	80044c8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d198      	bne.n	8003d2a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 fac0 	bl	8004384 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e04:	1e03      	subs	r3, r0, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e01a      	b.n	8003e42 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2220      	movs	r2, #32
 8003e12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	490b      	ldr	r1, [pc, #44]	; (8003e4c <HAL_I2C_Mem_Write+0x258>)
 8003e20:	400a      	ands	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2241      	movs	r2, #65	; 0x41
 8003e28:	2120      	movs	r1, #32
 8003e2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2242      	movs	r2, #66	; 0x42
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2240      	movs	r2, #64	; 0x40
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b007      	add	sp, #28
 8003e48:	bd90      	pop	{r4, r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	fe00e800 	.word	0xfe00e800

08003e50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	000c      	movs	r4, r1
 8003e5a:	0010      	movs	r0, r2
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	230a      	movs	r3, #10
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	1c22      	adds	r2, r4, #0
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	2308      	movs	r3, #8
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	1c02      	adds	r2, r0, #0
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	1dbb      	adds	r3, r7, #6
 8003e70:	1c0a      	adds	r2, r1, #0
 8003e72:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2241      	movs	r2, #65	; 0x41
 8003e78:	5c9b      	ldrb	r3, [r3, r2]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d000      	beq.n	8003e82 <HAL_I2C_Mem_Read+0x32>
 8003e80:	e110      	b.n	80040a4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <HAL_I2C_Mem_Read+0x42>
 8003e88:	232c      	movs	r3, #44	; 0x2c
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d105      	bne.n	8003e9e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	0092      	lsls	r2, r2, #2
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e103      	b.n	80040a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2240      	movs	r2, #64	; 0x40
 8003ea2:	5c9b      	ldrb	r3, [r3, r2]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_I2C_Mem_Read+0x5c>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0fc      	b.n	80040a6 <HAL_I2C_Mem_Read+0x256>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eb4:	f7ff fac8 	bl	8003448 <HAL_GetTick>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	0219      	lsls	r1, r3, #8
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	2319      	movs	r3, #25
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f000 f9dd 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0e7      	b.n	80040a6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2241      	movs	r2, #65	; 0x41
 8003eda:	2122      	movs	r1, #34	; 0x22
 8003edc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2242      	movs	r2, #66	; 0x42
 8003ee2:	2140      	movs	r1, #64	; 0x40
 8003ee4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	222c      	movs	r2, #44	; 0x2c
 8003ef6:	18ba      	adds	r2, r7, r2
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f02:	1dbb      	adds	r3, r7, #6
 8003f04:	881c      	ldrh	r4, [r3, #0]
 8003f06:	2308      	movs	r3, #8
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	881a      	ldrh	r2, [r3, #0]
 8003f0c:	230a      	movs	r3, #10
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	8819      	ldrh	r1, [r3, #0]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	0023      	movs	r3, r4
 8003f1e:	f000 f92f 	bl	8004180 <I2C_RequestMemoryRead>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2240      	movs	r2, #64	; 0x40
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e0b9      	b.n	80040a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2bff      	cmp	r3, #255	; 0xff
 8003f3a:	d911      	bls.n	8003f60 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	22ff      	movs	r2, #255	; 0xff
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	045c      	lsls	r4, r3, #17
 8003f4c:	230a      	movs	r3, #10
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	8819      	ldrh	r1, [r3, #0]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	4b56      	ldr	r3, [pc, #344]	; (80040b0 <HAL_I2C_Mem_Read+0x260>)
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	0023      	movs	r3, r4
 8003f5a:	f000 fab5 	bl	80044c8 <I2C_TransferConfig>
 8003f5e:	e012      	b.n	8003f86 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	049c      	lsls	r4, r3, #18
 8003f74:	230a      	movs	r3, #10
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	8819      	ldrh	r1, [r3, #0]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	4b4c      	ldr	r3, [pc, #304]	; (80040b0 <HAL_I2C_Mem_Read+0x260>)
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	0023      	movs	r3, r4
 8003f82:	f000 faa1 	bl	80044c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	0013      	movs	r3, r2
 8003f90:	2200      	movs	r2, #0
 8003f92:	2104      	movs	r1, #4
 8003f94:	f000 f978 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e082      	b.n	80040a6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d03a      	beq.n	8004052 <HAL_I2C_Mem_Read+0x202>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d136      	bne.n	8004052 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0013      	movs	r3, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	f000 f949 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e053      	b.n	80040a6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	2bff      	cmp	r3, #255	; 0xff
 8004006:	d911      	bls.n	800402c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	22ff      	movs	r2, #255	; 0xff
 800400c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	b2da      	uxtb	r2, r3
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	045c      	lsls	r4, r3, #17
 8004018:	230a      	movs	r3, #10
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	8819      	ldrh	r1, [r3, #0]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	0023      	movs	r3, r4
 8004026:	f000 fa4f 	bl	80044c8 <I2C_TransferConfig>
 800402a:	e012      	b.n	8004052 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403a:	b2da      	uxtb	r2, r3
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	049c      	lsls	r4, r3, #18
 8004040:	230a      	movs	r3, #10
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	8819      	ldrh	r1, [r3, #0]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	2300      	movs	r3, #0
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	0023      	movs	r3, r4
 800404e:	f000 fa3b 	bl	80044c8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d194      	bne.n	8003f86 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	0018      	movs	r0, r3
 8004064:	f000 f98e 	bl	8004384 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004068:	1e03      	subs	r3, r0, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e01a      	b.n	80040a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2220      	movs	r2, #32
 8004076:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	490c      	ldr	r1, [pc, #48]	; (80040b4 <HAL_I2C_Mem_Read+0x264>)
 8004084:	400a      	ands	r2, r1
 8004086:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2241      	movs	r2, #65	; 0x41
 800408c:	2120      	movs	r1, #32
 800408e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2242      	movs	r2, #66	; 0x42
 8004094:	2100      	movs	r1, #0
 8004096:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	2100      	movs	r1, #0
 800409e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b007      	add	sp, #28
 80040ac:	bd90      	pop	{r4, r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	80002400 	.word	0x80002400
 80040b4:	fe00e800 	.word	0xfe00e800

080040b8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	000c      	movs	r4, r1
 80040c2:	0010      	movs	r0, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	250a      	movs	r5, #10
 80040c8:	197b      	adds	r3, r7, r5
 80040ca:	1c22      	adds	r2, r4, #0
 80040cc:	801a      	strh	r2, [r3, #0]
 80040ce:	2308      	movs	r3, #8
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	1c02      	adds	r2, r0, #0
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	1dbb      	adds	r3, r7, #6
 80040d8:	1c0a      	adds	r2, r1, #0
 80040da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040dc:	1dbb      	adds	r3, r7, #6
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	045c      	lsls	r4, r3, #17
 80040e6:	197b      	adds	r3, r7, r5
 80040e8:	8819      	ldrh	r1, [r3, #0]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	4b23      	ldr	r3, [pc, #140]	; (800417c <I2C_RequestMemoryWrite+0xc4>)
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	0023      	movs	r3, r4
 80040f2:	f000 f9e9 	bl	80044c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f8:	6a39      	ldr	r1, [r7, #32]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 f902 	bl	8004306 <I2C_WaitOnTXISFlagUntilTimeout>
 8004102:	1e03      	subs	r3, r0, #0
 8004104:	d001      	beq.n	800410a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e033      	b.n	8004172 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800410a:	1dbb      	adds	r3, r7, #6
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004112:	2308      	movs	r3, #8
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
 8004120:	e019      	b.n	8004156 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004122:	2308      	movs	r3, #8
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	b29b      	uxth	r3, r3
 800412c:	b2da      	uxtb	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004136:	6a39      	ldr	r1, [r7, #32]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	0018      	movs	r0, r3
 800413c:	f000 f8e3 	bl	8004306 <I2C_WaitOnTXISFlagUntilTimeout>
 8004140:	1e03      	subs	r3, r0, #0
 8004142:	d001      	beq.n	8004148 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e014      	b.n	8004172 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004148:	2308      	movs	r3, #8
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004156:	6a3a      	ldr	r2, [r7, #32]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	0013      	movs	r3, r2
 8004160:	2200      	movs	r2, #0
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	f000 f890 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d001      	beq.n	8004170 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bdb0      	pop	{r4, r5, r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	80002000 	.word	0x80002000

08004180 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	000c      	movs	r4, r1
 800418a:	0010      	movs	r0, r2
 800418c:	0019      	movs	r1, r3
 800418e:	250a      	movs	r5, #10
 8004190:	197b      	adds	r3, r7, r5
 8004192:	1c22      	adds	r2, r4, #0
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	2308      	movs	r3, #8
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	1c02      	adds	r2, r0, #0
 800419c:	801a      	strh	r2, [r3, #0]
 800419e:	1dbb      	adds	r3, r7, #6
 80041a0:	1c0a      	adds	r2, r1, #0
 80041a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041a4:	1dbb      	adds	r3, r7, #6
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	197b      	adds	r3, r7, r5
 80041ac:	8819      	ldrh	r1, [r3, #0]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <I2C_RequestMemoryRead+0xc0>)
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2300      	movs	r3, #0
 80041b6:	f000 f987 	bl	80044c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	6a39      	ldr	r1, [r7, #32]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 f8a0 	bl	8004306 <I2C_WaitOnTXISFlagUntilTimeout>
 80041c6:	1e03      	subs	r3, r0, #0
 80041c8:	d001      	beq.n	80041ce <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e033      	b.n	8004236 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ce:	1dbb      	adds	r3, r7, #6
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041d6:	2308      	movs	r3, #8
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
 80041e4:	e019      	b.n	800421a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041e6:	2308      	movs	r3, #8
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	6a39      	ldr	r1, [r7, #32]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 f881 	bl	8004306 <I2C_WaitOnTXISFlagUntilTimeout>
 8004204:	1e03      	subs	r3, r0, #0
 8004206:	d001      	beq.n	800420c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e014      	b.n	8004236 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800420c:	2308      	movs	r3, #8
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800421a:	6a3a      	ldr	r2, [r7, #32]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	0013      	movs	r3, r2
 8004224:	2200      	movs	r2, #0
 8004226:	2140      	movs	r1, #64	; 0x40
 8004228:	f000 f82e 	bl	8004288 <I2C_WaitOnFlagUntilTimeout>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d001      	beq.n	8004234 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b004      	add	sp, #16
 800423c:	bdb0      	pop	{r4, r5, r7, pc}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	80002000 	.word	0x80002000

08004244 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2202      	movs	r2, #2
 8004254:	4013      	ands	r3, r2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d103      	bne.n	8004262 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2200      	movs	r2, #0
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	2b01      	cmp	r3, #1
 800426e:	d007      	beq.n	8004280 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2101      	movs	r1, #1
 800427c:	430a      	orrs	r2, r1
 800427e:	619a      	str	r2, [r3, #24]
  }
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	1dfb      	adds	r3, r7, #7
 8004296:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004298:	e021      	b.n	80042de <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	d01e      	beq.n	80042de <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a0:	f7ff f8d2 	bl	8003448 <HAL_GetTick>
 80042a4:	0002      	movs	r2, r0
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d113      	bne.n	80042de <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	2220      	movs	r2, #32
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2241      	movs	r2, #65	; 0x41
 80042c6:	2120      	movs	r1, #32
 80042c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2242      	movs	r2, #66	; 0x42
 80042ce:	2100      	movs	r1, #0
 80042d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2240      	movs	r2, #64	; 0x40
 80042d6:	2100      	movs	r1, #0
 80042d8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e00f      	b.n	80042fe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	425a      	negs	r2, r3
 80042ee:	4153      	adcs	r3, r2
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	001a      	movs	r2, r3
 80042f4:	1dfb      	adds	r3, r7, #7
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d0ce      	beq.n	800429a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b004      	add	sp, #16
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004312:	e02b      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f86e 	bl	80043fc <I2C_IsAcknowledgeFailed>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d001      	beq.n	8004328 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e029      	b.n	800437c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	3301      	adds	r3, #1
 800432c:	d01e      	beq.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432e:	f7ff f88b 	bl	8003448 <HAL_GetTick>
 8004332:	0002      	movs	r2, r0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d113      	bne.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	2220      	movs	r2, #32
 800434a:	431a      	orrs	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2241      	movs	r2, #65	; 0x41
 8004354:	2120      	movs	r1, #32
 8004356:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2242      	movs	r2, #66	; 0x42
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2240      	movs	r2, #64	; 0x40
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e007      	b.n	800437c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2202      	movs	r2, #2
 8004374:	4013      	ands	r3, r2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d1cc      	bne.n	8004314 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b004      	add	sp, #16
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004390:	e028      	b.n	80043e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	0018      	movs	r0, r3
 800439a:	f000 f82f 	bl	80043fc <I2C_IsAcknowledgeFailed>
 800439e:	1e03      	subs	r3, r0, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e026      	b.n	80043f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7ff f84f 	bl	8003448 <HAL_GetTick>
 80043aa:	0002      	movs	r2, r0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d113      	bne.n	80043e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c0:	2220      	movs	r2, #32
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2241      	movs	r2, #65	; 0x41
 80043cc:	2120      	movs	r1, #32
 80043ce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2242      	movs	r2, #66	; 0x42
 80043d4:	2100      	movs	r1, #0
 80043d6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2240      	movs	r2, #64	; 0x40
 80043dc:	2100      	movs	r1, #0
 80043de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e007      	b.n	80043f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2220      	movs	r2, #32
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d1cf      	bne.n	8004392 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b004      	add	sp, #16
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2210      	movs	r2, #16
 8004410:	4013      	ands	r3, r2
 8004412:	2b10      	cmp	r3, #16
 8004414:	d151      	bne.n	80044ba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004416:	e021      	b.n	800445c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	3301      	adds	r3, #1
 800441c:	d01e      	beq.n	800445c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441e:	f7ff f813 	bl	8003448 <HAL_GetTick>
 8004422:	0002      	movs	r2, r0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <I2C_IsAcknowledgeFailed+0x38>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d113      	bne.n	800445c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004438:	2220      	movs	r2, #32
 800443a:	431a      	orrs	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2241      	movs	r2, #65	; 0x41
 8004444:	2120      	movs	r1, #32
 8004446:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2242      	movs	r2, #66	; 0x42
 800444c:	2100      	movs	r1, #0
 800444e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2240      	movs	r2, #64	; 0x40
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e02f      	b.n	80044bc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2220      	movs	r2, #32
 8004464:	4013      	ands	r3, r2
 8004466:	2b20      	cmp	r3, #32
 8004468:	d1d6      	bne.n	8004418 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2210      	movs	r2, #16
 8004470:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2220      	movs	r2, #32
 8004478:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	0018      	movs	r0, r3
 800447e:	f7ff fee1 	bl	8004244 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	490d      	ldr	r1, [pc, #52]	; (80044c4 <I2C_IsAcknowledgeFailed+0xc8>)
 800448e:	400a      	ands	r2, r1
 8004490:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	2204      	movs	r2, #4
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2241      	movs	r2, #65	; 0x41
 80044a2:	2120      	movs	r1, #32
 80044a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2242      	movs	r2, #66	; 0x42
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2240      	movs	r2, #64	; 0x40
 80044b2:	2100      	movs	r1, #0
 80044b4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	0018      	movs	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	b004      	add	sp, #16
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	fe00e800 	.word	0xfe00e800

080044c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	0008      	movs	r0, r1
 80044d2:	0011      	movs	r1, r2
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	240a      	movs	r4, #10
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	1c02      	adds	r2, r0, #0
 80044dc:	801a      	strh	r2, [r3, #0]
 80044de:	2009      	movs	r0, #9
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	1c0a      	adds	r2, r1, #0
 80044e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	0d51      	lsrs	r1, r2, #21
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	00d2      	lsls	r2, r2, #3
 80044f4:	400a      	ands	r2, r1
 80044f6:	490e      	ldr	r1, [pc, #56]	; (8004530 <I2C_TransferConfig+0x68>)
 80044f8:	430a      	orrs	r2, r1
 80044fa:	43d2      	mvns	r2, r2
 80044fc:	401a      	ands	r2, r3
 80044fe:	0011      	movs	r1, r2
 8004500:	193b      	adds	r3, r7, r4
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	059b      	lsls	r3, r3, #22
 8004506:	0d9a      	lsrs	r2, r3, #22
 8004508:	183b      	adds	r3, r7, r0
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	0418      	lsls	r0, r3, #16
 800450e:	23ff      	movs	r3, #255	; 0xff
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	4003      	ands	r3, r0
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	431a      	orrs	r2, r3
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b005      	add	sp, #20
 800452c:	bd90      	pop	{r4, r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	03ff63ff 	.word	0x03ff63ff

08004534 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2241      	movs	r2, #65	; 0x41
 8004542:	5c9b      	ldrb	r3, [r3, r2]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b20      	cmp	r3, #32
 8004548:	d138      	bne.n	80045bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	5c9b      	ldrb	r3, [r3, r2]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004554:	2302      	movs	r3, #2
 8004556:	e032      	b.n	80045be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2240      	movs	r2, #64	; 0x40
 800455c:	2101      	movs	r1, #1
 800455e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2241      	movs	r2, #65	; 0x41
 8004564:	2124      	movs	r1, #36	; 0x24
 8004566:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2101      	movs	r1, #1
 8004574:	438a      	bics	r2, r1
 8004576:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4911      	ldr	r1, [pc, #68]	; (80045c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004584:	400a      	ands	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2101      	movs	r1, #1
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2241      	movs	r2, #65	; 0x41
 80045ac:	2120      	movs	r1, #32
 80045ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	2100      	movs	r1, #0
 80045b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e000      	b.n	80045be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
  }
}
 80045be:	0018      	movs	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	ffffefff 	.word	0xffffefff

080045cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2241      	movs	r2, #65	; 0x41
 80045da:	5c9b      	ldrb	r3, [r3, r2]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d139      	bne.n	8004656 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2240      	movs	r2, #64	; 0x40
 80045e6:	5c9b      	ldrb	r3, [r3, r2]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e033      	b.n	8004658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2240      	movs	r2, #64	; 0x40
 80045f4:	2101      	movs	r1, #1
 80045f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2241      	movs	r2, #65	; 0x41
 80045fc:	2124      	movs	r1, #36	; 0x24
 80045fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2101      	movs	r1, #1
 800460c:	438a      	bics	r2, r1
 800460e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a11      	ldr	r2, [pc, #68]	; (8004660 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	430a      	orrs	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2241      	movs	r2, #65	; 0x41
 8004646:	2120      	movs	r1, #32
 8004648:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2240      	movs	r2, #64	; 0x40
 800464e:	2100      	movs	r1, #0
 8004650:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b004      	add	sp, #16
 800465e:	bd80      	pop	{r7, pc}
 8004660:	fffff0ff 	.word	0xfffff0ff

08004664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004664:	b5b0      	push	{r4, r5, r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f000 fbb4 	bl	8004de0 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004678:	4bc3      	ldr	r3, [pc, #780]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	220c      	movs	r2, #12
 800467e:	4013      	ands	r3, r2
 8004680:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004682:	4bc1      	ldr	r3, [pc, #772]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	025b      	lsls	r3, r3, #9
 800468a:	4013      	ands	r3, r2
 800468c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2201      	movs	r2, #1
 8004694:	4013      	ands	r3, r2
 8004696:	d100      	bne.n	800469a <HAL_RCC_OscConfig+0x36>
 8004698:	e07e      	b.n	8004798 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d007      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d112      	bne.n	80046cc <HAL_RCC_OscConfig+0x68>
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	025b      	lsls	r3, r3, #9
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d10d      	bne.n	80046cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b0:	4bb5      	ldr	r3, [pc, #724]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	029b      	lsls	r3, r3, #10
 80046b8:	4013      	ands	r3, r2
 80046ba:	d100      	bne.n	80046be <HAL_RCC_OscConfig+0x5a>
 80046bc:	e06b      	b.n	8004796 <HAL_RCC_OscConfig+0x132>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d167      	bne.n	8004796 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f000 fb8a 	bl	8004de0 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	025b      	lsls	r3, r3, #9
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_OscConfig+0x84>
 80046d8:	4bab      	ldr	r3, [pc, #684]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4baa      	ldr	r3, [pc, #680]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	0249      	lsls	r1, r1, #9
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e027      	b.n	8004738 <HAL_RCC_OscConfig+0xd4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	23a0      	movs	r3, #160	; 0xa0
 80046ee:	02db      	lsls	r3, r3, #11
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d10e      	bne.n	8004712 <HAL_RCC_OscConfig+0xae>
 80046f4:	4ba4      	ldr	r3, [pc, #656]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4ba3      	ldr	r3, [pc, #652]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80046fa:	2180      	movs	r1, #128	; 0x80
 80046fc:	02c9      	lsls	r1, r1, #11
 80046fe:	430a      	orrs	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	4ba1      	ldr	r3, [pc, #644]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4ba0      	ldr	r3, [pc, #640]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	0249      	lsls	r1, r1, #9
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e012      	b.n	8004738 <HAL_RCC_OscConfig+0xd4>
 8004712:	4b9d      	ldr	r3, [pc, #628]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b9c      	ldr	r3, [pc, #624]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004718:	499c      	ldr	r1, [pc, #624]	; (800498c <HAL_RCC_OscConfig+0x328>)
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	4b9a      	ldr	r3, [pc, #616]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	025b      	lsls	r3, r3, #9
 8004726:	4013      	ands	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4b96      	ldr	r3, [pc, #600]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b95      	ldr	r3, [pc, #596]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004732:	4997      	ldr	r1, [pc, #604]	; (8004990 <HAL_RCC_OscConfig+0x32c>)
 8004734:	400a      	ands	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d015      	beq.n	800476c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004740:	f7fe fe82 	bl	8003448 <HAL_GetTick>
 8004744:	0003      	movs	r3, r0
 8004746:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004748:	e009      	b.n	800475e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800474a:	f7fe fe7d 	bl	8003448 <HAL_GetTick>
 800474e:	0002      	movs	r2, r0
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b64      	cmp	r3, #100	; 0x64
 8004756:	d902      	bls.n	800475e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	f000 fb41 	bl	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800475e:	4b8a      	ldr	r3, [pc, #552]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	029b      	lsls	r3, r3, #10
 8004766:	4013      	ands	r3, r2
 8004768:	d0ef      	beq.n	800474a <HAL_RCC_OscConfig+0xe6>
 800476a:	e015      	b.n	8004798 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fe fe6c 	bl	8003448 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004776:	f7fe fe67 	bl	8003448 <HAL_GetTick>
 800477a:	0002      	movs	r2, r0
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b64      	cmp	r3, #100	; 0x64
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e32b      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004788:	4b7f      	ldr	r3, [pc, #508]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	029b      	lsls	r3, r3, #10
 8004790:	4013      	ands	r3, r2
 8004792:	d1f0      	bne.n	8004776 <HAL_RCC_OscConfig+0x112>
 8004794:	e000      	b.n	8004798 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004796:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2202      	movs	r2, #2
 800479e:	4013      	ands	r3, r2
 80047a0:	d100      	bne.n	80047a4 <HAL_RCC_OscConfig+0x140>
 80047a2:	e08c      	b.n	80048be <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d13f      	bne.n	8004836 <HAL_RCC_OscConfig+0x1d2>
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d13c      	bne.n	8004836 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80047bc:	4b72      	ldr	r3, [pc, #456]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2204      	movs	r2, #4
 80047c2:	4013      	ands	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_RCC_OscConfig+0x16c>
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e307      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b6d      	ldr	r3, [pc, #436]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4a6f      	ldr	r2, [pc, #444]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	021a      	lsls	r2, r3, #8
 80047e0:	4b69      	ldr	r3, [pc, #420]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80047e6:	4b68      	ldr	r3, [pc, #416]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2209      	movs	r2, #9
 80047ec:	4393      	bics	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047f8:	f000 fc44 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 80047fc:	0001      	movs	r1, r0
 80047fe:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	220f      	movs	r2, #15
 8004806:	4013      	ands	r3, r2
 8004808:	4a63      	ldr	r2, [pc, #396]	; (8004998 <HAL_RCC_OscConfig+0x334>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	000a      	movs	r2, r1
 800480e:	40da      	lsrs	r2, r3
 8004810:	4b62      	ldr	r3, [pc, #392]	; (800499c <HAL_RCC_OscConfig+0x338>)
 8004812:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004814:	4b62      	ldr	r3, [pc, #392]	; (80049a0 <HAL_RCC_OscConfig+0x33c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2513      	movs	r5, #19
 800481a:	197c      	adds	r4, r7, r5
 800481c:	0018      	movs	r0, r3
 800481e:	f7fe fdcd 	bl	80033bc <HAL_InitTick>
 8004822:	0003      	movs	r3, r0
 8004824:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004826:	197b      	adds	r3, r7, r5
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d047      	beq.n	80048be <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 800482e:	2313      	movs	r3, #19
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	e2d4      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d027      	beq.n	800488c <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800483c:	4b52      	ldr	r3, [pc, #328]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2209      	movs	r2, #9
 8004842:	4393      	bics	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	4b50      	ldr	r3, [pc, #320]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fe fdfb 	bl	8003448 <HAL_GetTick>
 8004852:	0003      	movs	r3, r0
 8004854:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004858:	f7fe fdf6 	bl	8003448 <HAL_GetTick>
 800485c:	0002      	movs	r2, r0
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e2ba      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800486a:	4b47      	ldr	r3, [pc, #284]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2204      	movs	r2, #4
 8004870:	4013      	ands	r3, r2
 8004872:	d0f1      	beq.n	8004858 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b44      	ldr	r3, [pc, #272]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a46      	ldr	r2, [pc, #280]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 800487a:	4013      	ands	r3, r2
 800487c:	0019      	movs	r1, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	4b40      	ldr	r3, [pc, #256]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	e018      	b.n	80048be <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488c:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b3d      	ldr	r3, [pc, #244]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004892:	2101      	movs	r1, #1
 8004894:	438a      	bics	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fe fdd6 	bl	8003448 <HAL_GetTick>
 800489c:	0003      	movs	r3, r0
 800489e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a2:	f7fe fdd1 	bl	8003448 <HAL_GetTick>
 80048a6:	0002      	movs	r2, r0
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e295      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048b4:	4b34      	ldr	r3, [pc, #208]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2204      	movs	r2, #4
 80048ba:	4013      	ands	r3, r2
 80048bc:	d1f1      	bne.n	80048a2 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2210      	movs	r2, #16
 80048c4:	4013      	ands	r3, r2
 80048c6:	d100      	bne.n	80048ca <HAL_RCC_OscConfig+0x266>
 80048c8:	e0a3      	b.n	8004a12 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d141      	bne.n	8004954 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048d0:	4b2d      	ldr	r3, [pc, #180]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4013      	ands	r3, r2
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_OscConfig+0x284>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e27b      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <HAL_RCC_OscConfig+0x340>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	0019      	movs	r1, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f6:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80048f8:	430a      	orrs	r2, r1
 80048fa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048fc:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	0a19      	lsrs	r1, r3, #8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	061a      	lsls	r2, r3, #24
 800490a:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 800490c:	430a      	orrs	r2, r1
 800490e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	0b5b      	lsrs	r3, r3, #13
 8004916:	3301      	adds	r3, #1
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	0212      	lsls	r2, r2, #8
 800491c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	210f      	movs	r1, #15
 8004926:	400b      	ands	r3, r1
 8004928:	491b      	ldr	r1, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x334>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800492e:	4b1b      	ldr	r3, [pc, #108]	; (800499c <HAL_RCC_OscConfig+0x338>)
 8004930:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004932:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x33c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2513      	movs	r5, #19
 8004938:	197c      	adds	r4, r7, r5
 800493a:	0018      	movs	r0, r3
 800493c:	f7fe fd3e 	bl	80033bc <HAL_InitTick>
 8004940:	0003      	movs	r3, r0
 8004942:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004944:	197b      	adds	r3, r7, r5
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d062      	beq.n	8004a12 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 800494c:	2313      	movs	r3, #19
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	e245      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d040      	beq.n	80049de <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_RCC_OscConfig+0x324>)
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	0049      	lsls	r1, r1, #1
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fe fd6d 	bl	8003448 <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004972:	e019      	b.n	80049a8 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004974:	f7fe fd68 	bl	8003448 <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d912      	bls.n	80049a8 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e22c      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	40021000 	.word	0x40021000
 800498c:	fffeffff 	.word	0xfffeffff
 8004990:	fffbffff 	.word	0xfffbffff
 8004994:	ffffe0ff 	.word	0xffffe0ff
 8004998:	08008a2c 	.word	0x08008a2c
 800499c:	2000002c 	.word	0x2000002c
 80049a0:	20000030 	.word	0x20000030
 80049a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80049a8:	4bc6      	ldr	r3, [pc, #792]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4013      	ands	r3, r2
 80049b2:	d0df      	beq.n	8004974 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049b4:	4bc3      	ldr	r3, [pc, #780]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4ac3      	ldr	r2, [pc, #780]	; (8004cc8 <HAL_RCC_OscConfig+0x664>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c2:	4bc0      	ldr	r3, [pc, #768]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 80049c4:	430a      	orrs	r2, r1
 80049c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049c8:	4bbe      	ldr	r3, [pc, #760]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	0a19      	lsrs	r1, r3, #8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	061a      	lsls	r2, r3, #24
 80049d6:	4bbb      	ldr	r3, [pc, #748]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	e019      	b.n	8004a12 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049de:	4bb9      	ldr	r3, [pc, #740]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4bb8      	ldr	r3, [pc, #736]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 80049e4:	49b9      	ldr	r1, [pc, #740]	; (8004ccc <HAL_RCC_OscConfig+0x668>)
 80049e6:	400a      	ands	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fe fd2d 	bl	8003448 <HAL_GetTick>
 80049ee:	0003      	movs	r3, r0
 80049f0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049f4:	f7fe fd28 	bl	8003448 <HAL_GetTick>
 80049f8:	0002      	movs	r2, r0
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e1ec      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004a06:	4baf      	ldr	r3, [pc, #700]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	2380      	movs	r3, #128	; 0x80
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2208      	movs	r2, #8
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d036      	beq.n	8004a8a <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d019      	beq.n	8004a58 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a24:	4ba7      	ldr	r3, [pc, #668]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004a26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a28:	4ba6      	ldr	r3, [pc, #664]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a30:	f7fe fd0a 	bl	8003448 <HAL_GetTick>
 8004a34:	0003      	movs	r3, r0
 8004a36:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3a:	f7fe fd05 	bl	8003448 <HAL_GetTick>
 8004a3e:	0002      	movs	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e1c9      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a4c:	4b9d      	ldr	r3, [pc, #628]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	2202      	movs	r2, #2
 8004a52:	4013      	ands	r3, r2
 8004a54:	d0f1      	beq.n	8004a3a <HAL_RCC_OscConfig+0x3d6>
 8004a56:	e018      	b.n	8004a8a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a58:	4b9a      	ldr	r3, [pc, #616]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a5c:	4b99      	ldr	r3, [pc, #612]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004a5e:	2101      	movs	r1, #1
 8004a60:	438a      	bics	r2, r1
 8004a62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a64:	f7fe fcf0 	bl	8003448 <HAL_GetTick>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6e:	f7fe fceb 	bl	8003448 <HAL_GetTick>
 8004a72:	0002      	movs	r2, r0
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e1af      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a80:	4b90      	ldr	r3, [pc, #576]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	2202      	movs	r2, #2
 8004a86:	4013      	ands	r3, r2
 8004a88:	d1f1      	bne.n	8004a6e <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	4013      	ands	r3, r2
 8004a92:	d100      	bne.n	8004a96 <HAL_RCC_OscConfig+0x432>
 8004a94:	e0af      	b.n	8004bf6 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a96:	2327      	movs	r3, #39	; 0x27
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a9e:	4b89      	ldr	r3, [pc, #548]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa2:	2380      	movs	r3, #128	; 0x80
 8004aa4:	055b      	lsls	r3, r3, #21
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aaa:	4b86      	ldr	r3, [pc, #536]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aae:	4b85      	ldr	r3, [pc, #532]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	0549      	lsls	r1, r1, #21
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ab8:	2327      	movs	r3, #39	; 0x27
 8004aba:	18fb      	adds	r3, r7, r3
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac0:	4b83      	ldr	r3, [pc, #524]	; (8004cd0 <HAL_RCC_OscConfig+0x66c>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d11a      	bne.n	8004b02 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004acc:	4b80      	ldr	r3, [pc, #512]	; (8004cd0 <HAL_RCC_OscConfig+0x66c>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b7f      	ldr	r3, [pc, #508]	; (8004cd0 <HAL_RCC_OscConfig+0x66c>)
 8004ad2:	2180      	movs	r1, #128	; 0x80
 8004ad4:	0049      	lsls	r1, r1, #1
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ada:	f7fe fcb5 	bl	8003448 <HAL_GetTick>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae4:	f7fe fcb0 	bl	8003448 <HAL_GetTick>
 8004ae8:	0002      	movs	r2, r0
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e174      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af6:	4b76      	ldr	r3, [pc, #472]	; (8004cd0 <HAL_RCC_OscConfig+0x66c>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4013      	ands	r3, r2
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_OscConfig+0x4ba>
 8004b0e:	4b6d      	ldr	r3, [pc, #436]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b12:	4b6c      	ldr	r3, [pc, #432]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b14:	2180      	movs	r1, #128	; 0x80
 8004b16:	0049      	lsls	r1, r1, #1
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b1c:	e031      	b.n	8004b82 <HAL_RCC_OscConfig+0x51e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCC_OscConfig+0x4dc>
 8004b26:	4b67      	ldr	r3, [pc, #412]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b2a:	4b66      	ldr	r3, [pc, #408]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b2c:	4967      	ldr	r1, [pc, #412]	; (8004ccc <HAL_RCC_OscConfig+0x668>)
 8004b2e:	400a      	ands	r2, r1
 8004b30:	651a      	str	r2, [r3, #80]	; 0x50
 8004b32:	4b64      	ldr	r3, [pc, #400]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b36:	4b63      	ldr	r3, [pc, #396]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b38:	4966      	ldr	r1, [pc, #408]	; (8004cd4 <HAL_RCC_OscConfig+0x670>)
 8004b3a:	400a      	ands	r2, r1
 8004b3c:	651a      	str	r2, [r3, #80]	; 0x50
 8004b3e:	e020      	b.n	8004b82 <HAL_RCC_OscConfig+0x51e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	23a0      	movs	r3, #160	; 0xa0
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d10e      	bne.n	8004b6a <HAL_RCC_OscConfig+0x506>
 8004b4c:	4b5d      	ldr	r3, [pc, #372]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b50:	4b5c      	ldr	r3, [pc, #368]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b52:	2180      	movs	r1, #128	; 0x80
 8004b54:	00c9      	lsls	r1, r1, #3
 8004b56:	430a      	orrs	r2, r1
 8004b58:	651a      	str	r2, [r3, #80]	; 0x50
 8004b5a:	4b5a      	ldr	r3, [pc, #360]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b5e:	4b59      	ldr	r3, [pc, #356]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	0049      	lsls	r1, r1, #1
 8004b64:	430a      	orrs	r2, r1
 8004b66:	651a      	str	r2, [r3, #80]	; 0x50
 8004b68:	e00b      	b.n	8004b82 <HAL_RCC_OscConfig+0x51e>
 8004b6a:	4b56      	ldr	r3, [pc, #344]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b6e:	4b55      	ldr	r3, [pc, #340]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b70:	4956      	ldr	r1, [pc, #344]	; (8004ccc <HAL_RCC_OscConfig+0x668>)
 8004b72:	400a      	ands	r2, r1
 8004b74:	651a      	str	r2, [r3, #80]	; 0x50
 8004b76:	4b53      	ldr	r3, [pc, #332]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b7a:	4b52      	ldr	r3, [pc, #328]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004b7c:	4955      	ldr	r1, [pc, #340]	; (8004cd4 <HAL_RCC_OscConfig+0x670>)
 8004b7e:	400a      	ands	r2, r1
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d015      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8a:	f7fe fc5d 	bl	8003448 <HAL_GetTick>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b92:	e009      	b.n	8004ba8 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b94:	f7fe fc58 	bl	8003448 <HAL_GetTick>
 8004b98:	0002      	movs	r2, r0
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	4a4e      	ldr	r2, [pc, #312]	; (8004cd8 <HAL_RCC_OscConfig+0x674>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e11b      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ba8:	4b46      	ldr	r3, [pc, #280]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004baa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d0ef      	beq.n	8004b94 <HAL_RCC_OscConfig+0x530>
 8004bb4:	e014      	b.n	8004be0 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb6:	f7fe fc47 	bl	8003448 <HAL_GetTick>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bbe:	e009      	b.n	8004bd4 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fe fc42 	bl	8003448 <HAL_GetTick>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	4a43      	ldr	r2, [pc, #268]	; (8004cd8 <HAL_RCC_OscConfig+0x674>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e105      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d1ef      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004be0:	2327      	movs	r3, #39	; 0x27
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d105      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bea:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	4b35      	ldr	r3, [pc, #212]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004bf0:	493a      	ldr	r1, [pc, #232]	; (8004cdc <HAL_RCC_OscConfig+0x678>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d049      	beq.n	8004c94 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d026      	beq.n	8004c56 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004c08:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	4b2d      	ldr	r3, [pc, #180]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004c0e:	2101      	movs	r1, #1
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c18:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	635a      	str	r2, [r3, #52]	; 0x34
 8004c20:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <HAL_RCC_OscConfig+0x67c>)
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	4b2e      	ldr	r3, [pc, #184]	; (8004ce0 <HAL_RCC_OscConfig+0x67c>)
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	0189      	lsls	r1, r1, #6
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2e:	f7fe fc0b 	bl	8003448 <HAL_GetTick>
 8004c32:	0003      	movs	r3, r0
 8004c34:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c38:	f7fe fc06 	bl	8003448 <HAL_GetTick>
 8004c3c:	0002      	movs	r2, r0
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0ca      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	4013      	ands	r3, r2
 8004c52:	d0f1      	beq.n	8004c38 <HAL_RCC_OscConfig+0x5d4>
 8004c54:	e01e      	b.n	8004c94 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004c56:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	438a      	bics	r2, r1
 8004c60:	609a      	str	r2, [r3, #8]
 8004c62:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <HAL_RCC_OscConfig+0x67c>)
 8004c64:	6a1a      	ldr	r2, [r3, #32]
 8004c66:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <HAL_RCC_OscConfig+0x67c>)
 8004c68:	491e      	ldr	r1, [pc, #120]	; (8004ce4 <HAL_RCC_OscConfig+0x680>)
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fe fbeb 	bl	8003448 <HAL_GetTick>
 8004c72:	0003      	movs	r3, r0
 8004c74:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c78:	f7fe fbe6 	bl	8003448 <HAL_GetTick>
 8004c7c:	0002      	movs	r2, r0
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0aa      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c8a:	4b0e      	ldr	r3, [pc, #56]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	4013      	ands	r3, r2
 8004c92:	d1f1      	bne.n	8004c78 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d100      	bne.n	8004c9e <HAL_RCC_OscConfig+0x63a>
 8004c9c:	e09f      	b.n	8004dde <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d100      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x642>
 8004ca4:	e078      	b.n	8004d98 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d159      	bne.n	8004d62 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <HAL_RCC_OscConfig+0x660>)
 8004cb4:	490c      	ldr	r1, [pc, #48]	; (8004ce8 <HAL_RCC_OscConfig+0x684>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fe fbc5 	bl	8003448 <HAL_GetTick>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004cc2:	e01c      	b.n	8004cfe <HAL_RCC_OscConfig+0x69a>
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	ffff1fff 	.word	0xffff1fff
 8004ccc:	fffffeff 	.word	0xfffffeff
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	fffffbff 	.word	0xfffffbff
 8004cd8:	00001388 	.word	0x00001388
 8004cdc:	efffffff 	.word	0xefffffff
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	ffffdfff 	.word	0xffffdfff
 8004ce8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fe fbac 	bl	8003448 <HAL_GetTick>
 8004cf0:	0002      	movs	r2, r0
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e070      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004cfe:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	049b      	lsls	r3, r3, #18
 8004d06:	4013      	ands	r3, r2
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d0a:	4b37      	ldr	r3, [pc, #220]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a37      	ldr	r2, [pc, #220]	; (8004dec <HAL_RCC_OscConfig+0x788>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	431a      	orrs	r2, r3
 8004d24:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d26:	430a      	orrs	r2, r1
 8004d28:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d30:	2180      	movs	r1, #128	; 0x80
 8004d32:	0449      	lsls	r1, r1, #17
 8004d34:	430a      	orrs	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d38:	f7fe fb86 	bl	8003448 <HAL_GetTick>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d42:	f7fe fb81 	bl	8003448 <HAL_GetTick>
 8004d46:	0002      	movs	r2, r0
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e045      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004d54:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	049b      	lsls	r3, r3, #18
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x6de>
 8004d60:	e03d      	b.n	8004dde <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d62:	4b21      	ldr	r3, [pc, #132]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d68:	4921      	ldr	r1, [pc, #132]	; (8004df0 <HAL_RCC_OscConfig+0x78c>)
 8004d6a:	400a      	ands	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6e:	f7fe fb6b 	bl	8003448 <HAL_GetTick>
 8004d72:	0003      	movs	r3, r0
 8004d74:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fe fb66 	bl	8003448 <HAL_GetTick>
 8004d7c:	0002      	movs	r2, r0
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e02a      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004d8a:	4b17      	ldr	r3, [pc, #92]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	049b      	lsls	r3, r3, #18
 8004d92:	4013      	ands	r3, r2
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x714>
 8004d96:	e022      	b.n	8004dde <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e01d      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCC_OscConfig+0x784>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	025b      	lsls	r3, r3, #9
 8004db0:	401a      	ands	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d10f      	bne.n	8004dda <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	23f0      	movs	r3, #240	; 0xf0
 8004dbe:	039b      	lsls	r3, r3, #14
 8004dc0:	401a      	ands	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	23c0      	movs	r3, #192	; 0xc0
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b00a      	add	sp, #40	; 0x28
 8004de6:	bdb0      	pop	{r4, r5, r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	ff02ffff 	.word	0xff02ffff
 8004df0:	feffffff 	.word	0xfeffffff

08004df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e129      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e08:	4b96      	ldr	r3, [pc, #600]	; (8005064 <HAL_RCC_ClockConfig+0x270>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	4013      	ands	r3, r2
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d91e      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e16:	4b93      	ldr	r3, [pc, #588]	; (8005064 <HAL_RCC_ClockConfig+0x270>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4393      	bics	r3, r2
 8004e1e:	0019      	movs	r1, r3
 8004e20:	4b90      	ldr	r3, [pc, #576]	; (8005064 <HAL_RCC_ClockConfig+0x270>)
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e28:	f7fe fb0e 	bl	8003448 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e30:	e009      	b.n	8004e46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e32:	f7fe fb09 	bl	8003448 <HAL_GetTick>
 8004e36:	0002      	movs	r2, r0
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	4a8a      	ldr	r2, [pc, #552]	; (8005068 <HAL_RCC_ClockConfig+0x274>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e10a      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b87      	ldr	r3, [pc, #540]	; (8005064 <HAL_RCC_ClockConfig+0x270>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d1ee      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e5e:	4b83      	ldr	r3, [pc, #524]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	22f0      	movs	r2, #240	; 0xf0
 8004e64:	4393      	bics	r3, r2
 8004e66:	0019      	movs	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b7f      	ldr	r3, [pc, #508]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2201      	movs	r2, #1
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <HAL_RCC_ClockConfig+0x8a>
 8004e7c:	e089      	b.n	8004f92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e86:	4b79      	ldr	r3, [pc, #484]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	029b      	lsls	r3, r3, #10
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d120      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e0e2      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e9e:	4b73      	ldr	r3, [pc, #460]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	049b      	lsls	r3, r3, #18
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d114      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0d6      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d109      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0cb      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ec4:	4b69      	ldr	r3, [pc, #420]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0c3      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed4:	4b65      	ldr	r3, [pc, #404]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	2203      	movs	r2, #3
 8004eda:	4393      	bics	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4b62      	ldr	r3, [pc, #392]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee8:	f7fe faae 	bl	8003448 <HAL_GetTick>
 8004eec:	0003      	movs	r3, r0
 8004eee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d111      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ef8:	e009      	b.n	8004f0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004efa:	f7fe faa5 	bl	8003448 <HAL_GetTick>
 8004efe:	0002      	movs	r2, r0
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	4a58      	ldr	r2, [pc, #352]	; (8005068 <HAL_RCC_ClockConfig+0x274>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0a6      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f0e:	4b57      	ldr	r3, [pc, #348]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	220c      	movs	r2, #12
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d1ef      	bne.n	8004efa <HAL_RCC_ClockConfig+0x106>
 8004f1a:	e03a      	b.n	8004f92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d111      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f24:	e009      	b.n	8004f3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f26:	f7fe fa8f 	bl	8003448 <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	4a4d      	ldr	r2, [pc, #308]	; (8005068 <HAL_RCC_ClockConfig+0x274>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e090      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3a:	4b4c      	ldr	r3, [pc, #304]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	220c      	movs	r2, #12
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d1ef      	bne.n	8004f26 <HAL_RCC_ClockConfig+0x132>
 8004f46:	e024      	b.n	8004f92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d11b      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f50:	e009      	b.n	8004f66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f52:	f7fe fa79 	bl	8003448 <HAL_GetTick>
 8004f56:	0002      	movs	r2, r0
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	4a42      	ldr	r2, [pc, #264]	; (8005068 <HAL_RCC_ClockConfig+0x274>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e07a      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f66:	4b41      	ldr	r3, [pc, #260]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	220c      	movs	r2, #12
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d1ef      	bne.n	8004f52 <HAL_RCC_ClockConfig+0x15e>
 8004f72:	e00e      	b.n	8004f92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f74:	f7fe fa68 	bl	8003448 <HAL_GetTick>
 8004f78:	0002      	movs	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	4a3a      	ldr	r2, [pc, #232]	; (8005068 <HAL_RCC_ClockConfig+0x274>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e069      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f88:	4b38      	ldr	r3, [pc, #224]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	220c      	movs	r2, #12
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f92:	4b34      	ldr	r3, [pc, #208]	; (8005064 <HAL_RCC_ClockConfig+0x270>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	4013      	ands	r3, r2
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d21e      	bcs.n	8004fde <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa0:	4b30      	ldr	r3, [pc, #192]	; (8005064 <HAL_RCC_ClockConfig+0x270>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4393      	bics	r3, r2
 8004fa8:	0019      	movs	r1, r3
 8004faa:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <HAL_RCC_ClockConfig+0x270>)
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fb2:	f7fe fa49 	bl	8003448 <HAL_GetTick>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fba:	e009      	b.n	8004fd0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fbc:	f7fe fa44 	bl	8003448 <HAL_GetTick>
 8004fc0:	0002      	movs	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	4a28      	ldr	r2, [pc, #160]	; (8005068 <HAL_RCC_ClockConfig+0x274>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e045      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_ClockConfig+0x270>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d1ee      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe8:	4b20      	ldr	r3, [pc, #128]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4a20      	ldr	r2, [pc, #128]	; (8005070 <HAL_RCC_ClockConfig+0x27c>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	4b1d      	ldr	r3, [pc, #116]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2208      	movs	r2, #8
 8005002:	4013      	ands	r3, r2
 8005004:	d00a      	beq.n	800501c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005006:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <HAL_RCC_ClockConfig+0x280>)
 800500c:	4013      	ands	r3, r2
 800500e:	0019      	movs	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	00da      	lsls	r2, r3, #3
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8005018:	430a      	orrs	r2, r1
 800501a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800501c:	f000 f832 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 8005020:	0001      	movs	r1, r0
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_RCC_ClockConfig+0x278>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	220f      	movs	r2, #15
 800502a:	4013      	ands	r3, r2
 800502c:	4a12      	ldr	r2, [pc, #72]	; (8005078 <HAL_RCC_ClockConfig+0x284>)
 800502e:	5cd3      	ldrb	r3, [r2, r3]
 8005030:	000a      	movs	r2, r1
 8005032:	40da      	lsrs	r2, r3
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_RCC_ClockConfig+0x288>)
 8005036:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005038:	4b11      	ldr	r3, [pc, #68]	; (8005080 <HAL_RCC_ClockConfig+0x28c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	250b      	movs	r5, #11
 800503e:	197c      	adds	r4, r7, r5
 8005040:	0018      	movs	r0, r3
 8005042:	f7fe f9bb 	bl	80033bc <HAL_InitTick>
 8005046:	0003      	movs	r3, r0
 8005048:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800504a:	197b      	adds	r3, r7, r5
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8005052:	230b      	movs	r3, #11
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	e000      	b.n	800505c <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	0018      	movs	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	b004      	add	sp, #16
 8005062:	bdb0      	pop	{r4, r5, r7, pc}
 8005064:	40022000 	.word	0x40022000
 8005068:	00001388 	.word	0x00001388
 800506c:	40021000 	.word	0x40021000
 8005070:	fffff8ff 	.word	0xfffff8ff
 8005074:	ffffc7ff 	.word	0xffffc7ff
 8005078:	08008a2c 	.word	0x08008a2c
 800507c:	2000002c 	.word	0x2000002c
 8005080:	20000030 	.word	0x20000030

08005084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005086:	b08f      	sub	sp, #60	; 0x3c
 8005088:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800508a:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x130>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005092:	230c      	movs	r3, #12
 8005094:	4013      	ands	r3, r2
 8005096:	2b08      	cmp	r3, #8
 8005098:	d00f      	beq.n	80050ba <HAL_RCC_GetSysClockFreq+0x36>
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d010      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0x3c>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d000      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x20>
 80050a2:	e073      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80050a4:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x130>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2210      	movs	r2, #16
 80050aa:	4013      	ands	r3, r2
 80050ac:	d002      	beq.n	80050b4 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80050ae:	4b42      	ldr	r3, [pc, #264]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x134>)
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80050b2:	e079      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80050b4:	4b41      	ldr	r3, [pc, #260]	; (80051bc <HAL_RCC_GetSysClockFreq+0x138>)
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050b8:	e076      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050be:	e073      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	0c9a      	lsrs	r2, r3, #18
 80050c4:	230f      	movs	r3, #15
 80050c6:	401a      	ands	r2, r3
 80050c8:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x140>)
 80050ca:	5c9b      	ldrb	r3, [r3, r2]
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	0d9a      	lsrs	r2, r3, #22
 80050d2:	2303      	movs	r3, #3
 80050d4:	4013      	ands	r3, r2
 80050d6:	3301      	adds	r3, #1
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050da:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x130>)
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	025b      	lsls	r3, r3, #9
 80050e2:	4013      	ands	r3, r2
 80050e4:	d019      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	4a34      	ldr	r2, [pc, #208]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80050f0:	2300      	movs	r3, #0
 80050f2:	69b8      	ldr	r0, [r7, #24]
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	f7fb f8f9 	bl	80002ec <__aeabi_lmul>
 80050fa:	0003      	movs	r3, r0
 80050fc:	000c      	movs	r4, r1
 80050fe:	0018      	movs	r0, r3
 8005100:	0021      	movs	r1, r4
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f7fb f8cd 	bl	80002ac <__aeabi_uldivmod>
 8005112:	0003      	movs	r3, r0
 8005114:	000c      	movs	r4, r1
 8005116:	637b      	str	r3, [r7, #52]	; 0x34
 8005118:	e035      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800511a:	4b26      	ldr	r3, [pc, #152]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x130>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2210      	movs	r2, #16
 8005120:	4013      	ands	r3, r2
 8005122:	d019      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x134>)
 800512e:	2300      	movs	r3, #0
 8005130:	68b8      	ldr	r0, [r7, #8]
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	f7fb f8da 	bl	80002ec <__aeabi_lmul>
 8005138:	0003      	movs	r3, r0
 800513a:	000c      	movs	r4, r1
 800513c:	0018      	movs	r0, r3
 800513e:	0021      	movs	r1, r4
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	607b      	str	r3, [r7, #4]
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f7fb f8ae 	bl	80002ac <__aeabi_uldivmod>
 8005150:	0003      	movs	r3, r0
 8005152:	000c      	movs	r4, r1
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
 8005156:	e016      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	0018      	movs	r0, r3
 800515c:	2300      	movs	r3, #0
 800515e:	0019      	movs	r1, r3
 8005160:	4a16      	ldr	r2, [pc, #88]	; (80051bc <HAL_RCC_GetSysClockFreq+0x138>)
 8005162:	2300      	movs	r3, #0
 8005164:	f7fb f8c2 	bl	80002ec <__aeabi_lmul>
 8005168:	0003      	movs	r3, r0
 800516a:	000c      	movs	r4, r1
 800516c:	0018      	movs	r0, r3
 800516e:	0021      	movs	r1, r4
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	001d      	movs	r5, r3
 8005174:	2300      	movs	r3, #0
 8005176:	001e      	movs	r6, r3
 8005178:	002a      	movs	r2, r5
 800517a:	0033      	movs	r3, r6
 800517c:	f7fb f896 	bl	80002ac <__aeabi_uldivmod>
 8005180:	0003      	movs	r3, r0
 8005182:	000c      	movs	r4, r1
 8005184:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800518a:	e00d      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x130>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	0b5b      	lsrs	r3, r3, #13
 8005192:	2207      	movs	r2, #7
 8005194:	4013      	ands	r3, r2
 8005196:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	3301      	adds	r3, #1
 800519c:	2280      	movs	r2, #128	; 0x80
 800519e:	0212      	lsls	r2, r2, #8
 80051a0:	409a      	lsls	r2, r3
 80051a2:	0013      	movs	r3, r2
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b00f      	add	sp, #60	; 0x3c
 80051b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	40021000 	.word	0x40021000
 80051b8:	003d0900 	.word	0x003d0900
 80051bc:	00f42400 	.word	0x00f42400
 80051c0:	007a1200 	.word	0x007a1200
 80051c4:	08008a44 	.word	0x08008a44

080051c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051cc:	4b02      	ldr	r3, [pc, #8]	; (80051d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	2000002c 	.word	0x2000002c

080051dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051e0:	f7ff fff2 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 80051e4:	0001      	movs	r1, r0
 80051e6:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	2207      	movs	r2, #7
 80051ee:	4013      	ands	r3, r2
 80051f0:	4a04      	ldr	r2, [pc, #16]	; (8005204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051f2:	5cd3      	ldrb	r3, [r2, r3]
 80051f4:	40d9      	lsrs	r1, r3
 80051f6:	000b      	movs	r3, r1
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	40021000 	.word	0x40021000
 8005204:	08008a3c 	.word	0x08008a3c

08005208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800520c:	f7ff ffdc 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 8005210:	0001      	movs	r1, r0
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	0adb      	lsrs	r3, r3, #11
 8005218:	2207      	movs	r2, #7
 800521a:	4013      	ands	r3, r2
 800521c:	4a04      	ldr	r2, [pc, #16]	; (8005230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800521e:	5cd3      	ldrb	r3, [r2, r3]
 8005220:	40d9      	lsrs	r1, r3
 8005222:	000b      	movs	r3, r1
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	40021000 	.word	0x40021000
 8005230:	08008a3c 	.word	0x08008a3c

08005234 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800523c:	2317      	movs	r3, #23
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2220      	movs	r2, #32
 800524a:	4013      	ands	r3, r2
 800524c:	d106      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	4013      	ands	r3, r2
 8005258:	d100      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800525a:	e0d9      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525c:	4b9c      	ldr	r3, [pc, #624]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800525e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	055b      	lsls	r3, r3, #21
 8005264:	4013      	ands	r3, r2
 8005266:	d10a      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005268:	4b99      	ldr	r3, [pc, #612]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800526a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526c:	4b98      	ldr	r3, [pc, #608]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	0549      	lsls	r1, r1, #21
 8005272:	430a      	orrs	r2, r1
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005276:	2317      	movs	r3, #23
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	2201      	movs	r2, #1
 800527c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527e:	4b95      	ldr	r3, [pc, #596]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	4013      	ands	r3, r2
 8005288:	d11a      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800528a:	4b92      	ldr	r3, [pc, #584]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b91      	ldr	r3, [pc, #580]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	0049      	lsls	r1, r1, #1
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005298:	f7fe f8d6 	bl	8003448 <HAL_GetTick>
 800529c:	0003      	movs	r3, r0
 800529e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	e008      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a2:	f7fe f8d1 	bl	8003448 <HAL_GetTick>
 80052a6:	0002      	movs	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b64      	cmp	r3, #100	; 0x64
 80052ae:	d901      	bls.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e108      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	4b87      	ldr	r3, [pc, #540]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4013      	ands	r3, r2
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80052c0:	4b83      	ldr	r3, [pc, #524]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	23c0      	movs	r3, #192	; 0xc0
 80052c6:	039b      	lsls	r3, r3, #14
 80052c8:	4013      	ands	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	23c0      	movs	r3, #192	; 0xc0
 80052d2:	039b      	lsls	r3, r3, #14
 80052d4:	4013      	ands	r3, r2
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d107      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	23c0      	movs	r3, #192	; 0xc0
 80052e2:	039b      	lsls	r3, r3, #14
 80052e4:	4013      	ands	r3, r2
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d013      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	23c0      	movs	r3, #192	; 0xc0
 80052f2:	029b      	lsls	r3, r3, #10
 80052f4:	401a      	ands	r2, r3
 80052f6:	23c0      	movs	r3, #192	; 0xc0
 80052f8:	029b      	lsls	r3, r3, #10
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d10a      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052fe:	4b74      	ldr	r3, [pc, #464]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	401a      	ands	r2, r3
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	029b      	lsls	r3, r3, #10
 800530c:	429a      	cmp	r2, r3
 800530e:	d101      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0d8      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005314:	4b6e      	ldr	r3, [pc, #440]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005318:	23c0      	movs	r3, #192	; 0xc0
 800531a:	029b      	lsls	r3, r3, #10
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d049      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	23c0      	movs	r3, #192	; 0xc0
 800532c:	029b      	lsls	r3, r3, #10
 800532e:	4013      	ands	r3, r2
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	429a      	cmp	r2, r3
 8005334:	d004      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2220      	movs	r2, #32
 800533c:	4013      	ands	r3, r2
 800533e:	d10d      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	23c0      	movs	r3, #192	; 0xc0
 8005346:	029b      	lsls	r3, r3, #10
 8005348:	4013      	ands	r3, r2
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	429a      	cmp	r2, r3
 800534e:	d034      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	4013      	ands	r3, r2
 800535a:	d02e      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800535c:	4b5c      	ldr	r3, [pc, #368]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	4a5d      	ldr	r2, [pc, #372]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005362:	4013      	ands	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005366:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800536a:	4b59      	ldr	r3, [pc, #356]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800536c:	2180      	movs	r1, #128	; 0x80
 800536e:	0309      	lsls	r1, r1, #12
 8005370:	430a      	orrs	r2, r1
 8005372:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005374:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005378:	4b55      	ldr	r3, [pc, #340]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800537a:	4958      	ldr	r1, [pc, #352]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800537c:	400a      	ands	r2, r1
 800537e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005380:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4013      	ands	r3, r2
 800538e:	d014      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7fe f85a 	bl	8003448 <HAL_GetTick>
 8005394:	0003      	movs	r3, r0
 8005396:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005398:	e009      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539a:	f7fe f855 	bl	8003448 <HAL_GetTick>
 800539e:	0002      	movs	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	4a4e      	ldr	r2, [pc, #312]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e08b      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053ae:	4b48      	ldr	r3, [pc, #288]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4013      	ands	r3, r2
 80053b8:	d0ef      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	23c0      	movs	r3, #192	; 0xc0
 80053c0:	029b      	lsls	r3, r3, #10
 80053c2:	401a      	ands	r2, r3
 80053c4:	23c0      	movs	r3, #192	; 0xc0
 80053c6:	029b      	lsls	r3, r3, #10
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d10c      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80053cc:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a44      	ldr	r2, [pc, #272]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	0019      	movs	r1, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	23c0      	movs	r3, #192	; 0xc0
 80053dc:	039b      	lsls	r3, r3, #14
 80053de:	401a      	ands	r2, r3
 80053e0:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053e2:	430a      	orrs	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	4b3a      	ldr	r3, [pc, #232]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	23c0      	movs	r3, #192	; 0xc0
 80053f0:	029b      	lsls	r3, r3, #10
 80053f2:	401a      	ands	r2, r3
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80053f6:	430a      	orrs	r2, r1
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053fa:	2317      	movs	r3, #23
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d105      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005404:	4b32      	ldr	r3, [pc, #200]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005408:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800540a:	4937      	ldr	r1, [pc, #220]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800540c:	400a      	ands	r2, r1
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2201      	movs	r2, #1
 8005416:	4013      	ands	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541a:	4b2d      	ldr	r3, [pc, #180]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800541c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541e:	2203      	movs	r2, #3
 8005420:	4393      	bics	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800542a:	430a      	orrs	r2, r1
 800542c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2202      	movs	r2, #2
 8005434:	4013      	ands	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800543a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543c:	220c      	movs	r2, #12
 800543e:	4393      	bics	r3, r2
 8005440:	0019      	movs	r1, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005448:	430a      	orrs	r2, r1
 800544a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2204      	movs	r2, #4
 8005452:	4013      	ands	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005456:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545a:	4a24      	ldr	r2, [pc, #144]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800545c:	4013      	ands	r3, r2
 800545e:	0019      	movs	r1, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695a      	ldr	r2, [r3, #20]
 8005464:	4b1a      	ldr	r3, [pc, #104]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005466:	430a      	orrs	r2, r1
 8005468:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2208      	movs	r2, #8
 8005470:	4013      	ands	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005474:	4b16      	ldr	r3, [pc, #88]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005478:	4a1d      	ldr	r2, [pc, #116]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800547a:	4013      	ands	r3, r2
 800547c:	0019      	movs	r1, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005484:	430a      	orrs	r2, r1
 8005486:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	4013      	ands	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005492:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005496:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005498:	4013      	ands	r3, r2
 800549a:	0019      	movs	r1, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80054a2:	430a      	orrs	r2, r1
 80054a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	4013      	ands	r3, r2
 80054ae:	d009      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80054b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b4:	4a10      	ldr	r2, [pc, #64]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	0019      	movs	r1, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80054c0:	430a      	orrs	r2, r1
 80054c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	0018      	movs	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b006      	add	sp, #24
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40007000 	.word	0x40007000
 80054d8:	fffcffff 	.word	0xfffcffff
 80054dc:	fff7ffff 	.word	0xfff7ffff
 80054e0:	00001388 	.word	0x00001388
 80054e4:	ffcfffff 	.word	0xffcfffff
 80054e8:	efffffff 	.word	0xefffffff
 80054ec:	fffff3ff 	.word	0xfffff3ff
 80054f0:	ffffcfff 	.word	0xffffcfff
 80054f4:	fbffffff 	.word	0xfbffffff
 80054f8:	fff3ffff 	.word	0xfff3ffff

080054fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e032      	b.n	8005574 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2239      	movs	r2, #57	; 0x39
 8005512:	5c9b      	ldrb	r3, [r3, r2]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d107      	bne.n	800552a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2238      	movs	r2, #56	; 0x38
 800551e:	2100      	movs	r1, #0
 8005520:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f7fd fe29 	bl	800317c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2239      	movs	r2, #57	; 0x39
 800552e:	2102      	movs	r1, #2
 8005530:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	0019      	movs	r1, r3
 800553c:	0010      	movs	r0, r2
 800553e:	f000 fa2f 	bl	80059a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	223e      	movs	r2, #62	; 0x3e
 8005546:	2101      	movs	r1, #1
 8005548:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	223a      	movs	r2, #58	; 0x3a
 800554e:	2101      	movs	r1, #1
 8005550:	5499      	strb	r1, [r3, r2]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	223b      	movs	r2, #59	; 0x3b
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	223c      	movs	r2, #60	; 0x3c
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	223d      	movs	r2, #61	; 0x3d
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2239      	movs	r2, #57	; 0x39
 800556e:	2101      	movs	r1, #1
 8005570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	0018      	movs	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	b002      	add	sp, #8
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2239      	movs	r2, #57	; 0x39
 8005588:	5c9b      	ldrb	r3, [r3, r2]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d001      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e036      	b.n	8005602 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2239      	movs	r2, #57	; 0x39
 8005598:	2102      	movs	r1, #2
 800559a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2101      	movs	r1, #1
 80055a8:	430a      	orrs	r2, r1
 80055aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	2380      	movs	r3, #128	; 0x80
 80055b2:	05db      	lsls	r3, r3, #23
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d009      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x50>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <HAL_TIM_Base_Start_IT+0x90>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x50>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a12      	ldr	r2, [pc, #72]	; (8005610 <HAL_TIM_Base_Start_IT+0x94>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d111      	bne.n	80055f0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2207      	movs	r2, #7
 80055d4:	4013      	ands	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b06      	cmp	r3, #6
 80055dc:	d010      	beq.n	8005600 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2101      	movs	r1, #1
 80055ea:	430a      	orrs	r2, r1
 80055ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ee:	e007      	b.n	8005600 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2101      	movs	r1, #1
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	0018      	movs	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	b004      	add	sp, #16
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	40010800 	.word	0x40010800
 8005610:	40011400 	.word	0x40011400

08005614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2202      	movs	r2, #2
 8005624:	4013      	ands	r3, r2
 8005626:	2b02      	cmp	r3, #2
 8005628:	d124      	bne.n	8005674 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2202      	movs	r2, #2
 8005632:	4013      	ands	r3, r2
 8005634:	2b02      	cmp	r3, #2
 8005636:	d11d      	bne.n	8005674 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2203      	movs	r2, #3
 800563e:	4252      	negs	r2, r2
 8005640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2203      	movs	r2, #3
 8005650:	4013      	ands	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	0018      	movs	r0, r3
 8005658:	f000 f98a 	bl	8005970 <HAL_TIM_IC_CaptureCallback>
 800565c:	e007      	b.n	800566e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0018      	movs	r0, r3
 8005662:	f000 f97d 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0018      	movs	r0, r3
 800566a:	f000 f989 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2204      	movs	r2, #4
 800567c:	4013      	ands	r3, r2
 800567e:	2b04      	cmp	r3, #4
 8005680:	d125      	bne.n	80056ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	2204      	movs	r2, #4
 800568a:	4013      	ands	r3, r2
 800568c:	2b04      	cmp	r3, #4
 800568e:	d11e      	bne.n	80056ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2205      	movs	r2, #5
 8005696:	4252      	negs	r2, r2
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	23c0      	movs	r3, #192	; 0xc0
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4013      	ands	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f000 f95d 	bl	8005970 <HAL_TIM_IC_CaptureCallback>
 80056b6:	e007      	b.n	80056c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 f950 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 f95c 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2208      	movs	r2, #8
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d124      	bne.n	8005726 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2208      	movs	r2, #8
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d11d      	bne.n	8005726 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2209      	movs	r2, #9
 80056f0:	4252      	negs	r2, r2
 80056f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2204      	movs	r2, #4
 80056f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2203      	movs	r2, #3
 8005702:	4013      	ands	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0018      	movs	r0, r3
 800570a:	f000 f931 	bl	8005970 <HAL_TIM_IC_CaptureCallback>
 800570e:	e007      	b.n	8005720 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0018      	movs	r0, r3
 8005714:	f000 f924 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	0018      	movs	r0, r3
 800571c:	f000 f930 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2210      	movs	r2, #16
 800572e:	4013      	ands	r3, r2
 8005730:	2b10      	cmp	r3, #16
 8005732:	d125      	bne.n	8005780 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2210      	movs	r2, #16
 800573c:	4013      	ands	r3, r2
 800573e:	2b10      	cmp	r3, #16
 8005740:	d11e      	bne.n	8005780 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2211      	movs	r2, #17
 8005748:	4252      	negs	r2, r2
 800574a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2208      	movs	r2, #8
 8005750:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	23c0      	movs	r3, #192	; 0xc0
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4013      	ands	r3, r2
 800575e:	d004      	beq.n	800576a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	0018      	movs	r0, r3
 8005764:	f000 f904 	bl	8005970 <HAL_TIM_IC_CaptureCallback>
 8005768:	e007      	b.n	800577a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f000 f8f7 	bl	8005960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0018      	movs	r0, r3
 8005776:	f000 f903 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2201      	movs	r2, #1
 8005788:	4013      	ands	r3, r2
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10f      	bne.n	80057ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	4013      	ands	r3, r2
 8005798:	2b01      	cmp	r3, #1
 800579a:	d108      	bne.n	80057ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2202      	movs	r2, #2
 80057a2:	4252      	negs	r2, r2
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	0018      	movs	r0, r3
 80057aa:	f7fd fc37 	bl	800301c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2240      	movs	r2, #64	; 0x40
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d10f      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2240      	movs	r2, #64	; 0x40
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b40      	cmp	r3, #64	; 0x40
 80057c8:	d108      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2241      	movs	r2, #65	; 0x41
 80057d0:	4252      	negs	r2, r2
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	0018      	movs	r0, r3
 80057d8:	f000 f8da 	bl	8005990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057dc:	46c0      	nop			; (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	b002      	add	sp, #8
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2238      	movs	r2, #56	; 0x38
 80057f2:	5c9b      	ldrb	r3, [r3, r2]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIM_ConfigClockSource+0x18>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0ab      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x170>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2238      	movs	r2, #56	; 0x38
 8005800:	2101      	movs	r1, #1
 8005802:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2239      	movs	r2, #57	; 0x39
 8005808:	2102      	movs	r1, #2
 800580a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2277      	movs	r2, #119	; 0x77
 8005818:	4393      	bics	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a4f      	ldr	r2, [pc, #316]	; (800595c <HAL_TIM_ConfigClockSource+0x178>)
 8005820:	4013      	ands	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d100      	bne.n	8005836 <HAL_TIM_ConfigClockSource+0x52>
 8005834:	e06b      	b.n	800590e <HAL_TIM_ConfigClockSource+0x12a>
 8005836:	d80e      	bhi.n	8005856 <HAL_TIM_ConfigClockSource+0x72>
 8005838:	2b10      	cmp	r3, #16
 800583a:	d100      	bne.n	800583e <HAL_TIM_ConfigClockSource+0x5a>
 800583c:	e077      	b.n	800592e <HAL_TIM_ConfigClockSource+0x14a>
 800583e:	d803      	bhi.n	8005848 <HAL_TIM_ConfigClockSource+0x64>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d100      	bne.n	8005846 <HAL_TIM_ConfigClockSource+0x62>
 8005844:	e073      	b.n	800592e <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005846:	e07c      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005848:	2b20      	cmp	r3, #32
 800584a:	d100      	bne.n	800584e <HAL_TIM_ConfigClockSource+0x6a>
 800584c:	e06f      	b.n	800592e <HAL_TIM_ConfigClockSource+0x14a>
 800584e:	2b30      	cmp	r3, #48	; 0x30
 8005850:	d100      	bne.n	8005854 <HAL_TIM_ConfigClockSource+0x70>
 8005852:	e06c      	b.n	800592e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005854:	e075      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005856:	2b70      	cmp	r3, #112	; 0x70
 8005858:	d00e      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0x94>
 800585a:	d804      	bhi.n	8005866 <HAL_TIM_ConfigClockSource+0x82>
 800585c:	2b50      	cmp	r3, #80	; 0x50
 800585e:	d036      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0xea>
 8005860:	2b60      	cmp	r3, #96	; 0x60
 8005862:	d044      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005864:	e06d      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	0152      	lsls	r2, r2, #5
 800586a:	4293      	cmp	r3, r2
 800586c:	d068      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x15c>
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	0192      	lsls	r2, r2, #6
 8005872:	4293      	cmp	r3, r2
 8005874:	d017      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8005876:	e064      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6899      	ldr	r1, [r3, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f000 f958 	bl	8005b3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2277      	movs	r2, #119	; 0x77
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	609a      	str	r2, [r3, #8]
      break;
 80058a4:	e04d      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6899      	ldr	r1, [r3, #8]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f000 f941 	bl	8005b3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2180      	movs	r1, #128	; 0x80
 80058c6:	01c9      	lsls	r1, r1, #7
 80058c8:	430a      	orrs	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]
      break;
 80058cc:	e039      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6859      	ldr	r1, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	001a      	movs	r2, r3
 80058dc:	f000 f8b4 	bl	8005a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2150      	movs	r1, #80	; 0x50
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 f90e 	bl	8005b08 <TIM_ITRx_SetConfig>
      break;
 80058ec:	e029      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	001a      	movs	r2, r3
 80058fc:	f000 f8d2 	bl	8005aa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2160      	movs	r1, #96	; 0x60
 8005906:	0018      	movs	r0, r3
 8005908:	f000 f8fe 	bl	8005b08 <TIM_ITRx_SetConfig>
      break;
 800590c:	e019      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6859      	ldr	r1, [r3, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	001a      	movs	r2, r3
 800591c:	f000 f894 	bl	8005a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2140      	movs	r1, #64	; 0x40
 8005926:	0018      	movs	r0, r3
 8005928:	f000 f8ee 	bl	8005b08 <TIM_ITRx_SetConfig>
      break;
 800592c:	e009      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	0019      	movs	r1, r3
 8005938:	0010      	movs	r0, r2
 800593a:	f000 f8e5 	bl	8005b08 <TIM_ITRx_SetConfig>
        break;
 800593e:	e000      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005940:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2239      	movs	r2, #57	; 0x39
 8005946:	2101      	movs	r1, #1
 8005948:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2238      	movs	r2, #56	; 0x38
 800594e:	2100      	movs	r1, #0
 8005950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	0018      	movs	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	b004      	add	sp, #16
 800595a:	bd80      	pop	{r7, pc}
 800595c:	ffff00ff 	.word	0xffff00ff

08005960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005968:	46c0      	nop			; (mov r8, r8)
 800596a:	46bd      	mov	sp, r7
 800596c:	b002      	add	sp, #8
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	b002      	add	sp, #8
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005988:	46c0      	nop			; (mov r8, r8)
 800598a:	46bd      	mov	sp, r7
 800598c:	b002      	add	sp, #8
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005998:	46c0      	nop			; (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b002      	add	sp, #8
 800599e:	bd80      	pop	{r7, pc}

080059a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	2380      	movs	r3, #128	; 0x80
 80059b4:	05db      	lsls	r3, r3, #23
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d007      	beq.n	80059ca <TIM_Base_SetConfig+0x2a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <TIM_Base_SetConfig+0x9c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d003      	beq.n	80059ca <TIM_Base_SetConfig+0x2a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <TIM_Base_SetConfig+0xa0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d108      	bne.n	80059dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2270      	movs	r2, #112	; 0x70
 80059ce:	4393      	bics	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	05db      	lsls	r3, r3, #23
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d007      	beq.n	80059f6 <TIM_Base_SetConfig+0x56>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a14      	ldr	r2, [pc, #80]	; (8005a3c <TIM_Base_SetConfig+0x9c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_Base_SetConfig+0x56>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <TIM_Base_SetConfig+0xa0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d108      	bne.n	8005a08 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a12      	ldr	r2, [pc, #72]	; (8005a44 <TIM_Base_SetConfig+0xa4>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2280      	movs	r2, #128	; 0x80
 8005a0c:	4393      	bics	r3, r2
 8005a0e:	001a      	movs	r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	615a      	str	r2, [r3, #20]
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b004      	add	sp, #16
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40010800 	.word	0x40010800
 8005a40:	40011400 	.word	0x40011400
 8005a44:	fffffcff 	.word	0xfffffcff

08005a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4393      	bics	r3, r2
 8005a62:	001a      	movs	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	22f0      	movs	r2, #240	; 0xf0
 8005a72:	4393      	bics	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	220a      	movs	r2, #10
 8005a84:	4393      	bics	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b006      	add	sp, #24
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	4393      	bics	r3, r2
 8005ab8:	001a      	movs	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	4a0d      	ldr	r2, [pc, #52]	; (8005b04 <TIM_TI2_ConfigInputStage+0x60>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	031b      	lsls	r3, r3, #12
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	22a0      	movs	r2, #160	; 0xa0
 8005ae0:	4393      	bics	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b006      	add	sp, #24
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	ffff0fff 	.word	0xffff0fff

08005b08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2270      	movs	r2, #112	; 0x70
 8005b1c:	4393      	bics	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	2207      	movs	r2, #7
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	609a      	str	r2, [r3, #8]
}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b004      	add	sp, #16
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <TIM_ETR_SetConfig+0x3c>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	021a      	lsls	r2, r3, #8
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b006      	add	sp, #24
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	ffff00ff 	.word	0xffff00ff

08005b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2238      	movs	r2, #56	; 0x38
 8005b8a:	5c9b      	ldrb	r3, [r3, r2]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e042      	b.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2238      	movs	r2, #56	; 0x38
 8005b98:	2101      	movs	r1, #1
 8005b9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2239      	movs	r2, #57	; 0x39
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2270      	movs	r2, #112	; 0x70
 8005bb8:	4393      	bics	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	05db      	lsls	r3, r3, #23
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d009      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a11      	ldr	r2, [pc, #68]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d10c      	bne.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2280      	movs	r2, #128	; 0x80
 8005bf2:	4393      	bics	r3, r2
 8005bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2239      	movs	r2, #57	; 0x39
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2238      	movs	r2, #56	; 0x38
 8005c14:	2100      	movs	r1, #0
 8005c16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b004      	add	sp, #16
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	40010800 	.word	0x40010800
 8005c28:	40011400 	.word	0x40011400

08005c2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e044      	b.n	8005cc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2274      	movs	r2, #116	; 0x74
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7fd fab1 	bl	80031b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2224      	movs	r2, #36	; 0x24
 8005c5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2101      	movs	r1, #1
 8005c68:	438a      	bics	r2, r1
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f000 fb56 	bl	8006320 <UART_SetConfig>
 8005c74:	0003      	movs	r3, r0
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e024      	b.n	8005cc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fde7 	bl	800685c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	490d      	ldr	r1, [pc, #52]	; (8005cd0 <HAL_UART_Init+0xa4>)
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	212a      	movs	r1, #42	; 0x2a
 8005caa:	438a      	bics	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2101      	movs	r1, #1
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f000 fe7f 	bl	80069c4 <UART_CheckIdleState>
 8005cc6:	0003      	movs	r3, r0
}
 8005cc8:	0018      	movs	r0, r3
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b002      	add	sp, #8
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	ffffb7ff 	.word	0xffffb7ff

08005cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	1dbb      	adds	r3, r7, #6
 8005ce2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d000      	beq.n	8005cee <HAL_UART_Transmit+0x1a>
 8005cec:	e095      	b.n	8005e1a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_UART_Transmit+0x28>
 8005cf4:	1dbb      	adds	r3, r7, #6
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e08d      	b.n	8005e1c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	015b      	lsls	r3, r3, #5
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d109      	bne.n	8005d20 <HAL_UART_Transmit+0x4c>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d105      	bne.n	8005d20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2201      	movs	r2, #1
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d001      	beq.n	8005d20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e07d      	b.n	8005e1c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2274      	movs	r2, #116	; 0x74
 8005d24:	5c9b      	ldrb	r3, [r3, r2]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_UART_Transmit+0x5a>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e076      	b.n	8005e1c <HAL_UART_Transmit+0x148>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2274      	movs	r2, #116	; 0x74
 8005d32:	2101      	movs	r1, #1
 8005d34:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2280      	movs	r2, #128	; 0x80
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2221      	movs	r2, #33	; 0x21
 8005d42:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d44:	f7fd fb80 	bl	8003448 <HAL_GetTick>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1dba      	adds	r2, r7, #6
 8005d50:	2150      	movs	r1, #80	; 0x50
 8005d52:	8812      	ldrh	r2, [r2, #0]
 8005d54:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1dba      	adds	r2, r7, #6
 8005d5a:	2152      	movs	r1, #82	; 0x52
 8005d5c:	8812      	ldrh	r2, [r2, #0]
 8005d5e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	015b      	lsls	r3, r3, #5
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d108      	bne.n	8005d7e <HAL_UART_Transmit+0xaa>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e003      	b.n	8005d86 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2274      	movs	r2, #116	; 0x74
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005d8e:	e02c      	b.n	8005dea <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	0013      	movs	r3, r2
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2180      	movs	r1, #128	; 0x80
 8005d9e:	f000 fe5b 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 8005da2:	1e03      	subs	r3, r0, #0
 8005da4:	d001      	beq.n	8005daa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e038      	b.n	8005e1c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10b      	bne.n	8005dc8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	001a      	movs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	05d2      	lsls	r2, r2, #23
 8005dbc:	0dd2      	lsrs	r2, r2, #23
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	e007      	b.n	8005dd8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2252      	movs	r2, #82	; 0x52
 8005ddc:	5a9b      	ldrh	r3, [r3, r2]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b299      	uxth	r1, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2252      	movs	r2, #82	; 0x52
 8005de8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2252      	movs	r2, #82	; 0x52
 8005dee:	5a9b      	ldrh	r3, [r3, r2]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1cc      	bne.n	8005d90 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	0013      	movs	r3, r2
 8005e00:	2200      	movs	r2, #0
 8005e02:	2140      	movs	r1, #64	; 0x40
 8005e04:	f000 fe28 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 8005e08:	1e03      	subs	r3, r0, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e005      	b.n	8005e1c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e000      	b.n	8005e1c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005e1a:	2302      	movs	r3, #2
  }
}
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b008      	add	sp, #32
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	1dbb      	adds	r3, r7, #6
 8005e30:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d144      	bne.n	8005ec4 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_UART_Receive_IT+0x24>
 8005e40:	1dbb      	adds	r3, r7, #6
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e03c      	b.n	8005ec6 <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	015b      	lsls	r3, r3, #5
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d109      	bne.n	8005e6c <HAL_UART_Receive_IT+0x48>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2201      	movs	r2, #1
 8005e64:	4013      	ands	r3, r2
 8005e66:	d001      	beq.n	8005e6c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e02c      	b.n	8005ec6 <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2274      	movs	r2, #116	; 0x74
 8005e70:	5c9b      	ldrb	r3, [r3, r2]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_UART_Receive_IT+0x56>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e025      	b.n	8005ec6 <HAL_UART_Receive_IT+0xa2>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2274      	movs	r2, #116	; 0x74
 8005e7e:	2101      	movs	r1, #1
 8005e80:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a10      	ldr	r2, [pc, #64]	; (8005ed0 <HAL_UART_Receive_IT+0xac>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00f      	beq.n	8005eb2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d008      	beq.n	8005eb2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2180      	movs	r1, #128	; 0x80
 8005eac:	04c9      	lsls	r1, r1, #19
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005eb2:	1dbb      	adds	r3, r7, #6
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 fe4a 	bl	8006b54 <UART_Start_Receive_IT>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	e000      	b.n	8005ec6 <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
  }
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b004      	add	sp, #16
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	40004800 	.word	0x40004800

08005ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4ab6      	ldr	r2, [pc, #728]	; (80061d0 <HAL_UART_IRQHandler+0x2fc>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d112      	bne.n	8005f28 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	2220      	movs	r2, #32
 8005f06:	4013      	ands	r3, r2
 8005f08:	d00e      	beq.n	8005f28 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d00a      	beq.n	8005f28 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d100      	bne.n	8005f1c <HAL_UART_IRQHandler+0x48>
 8005f1a:	e1d6      	b.n	80062ca <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	0010      	movs	r0, r2
 8005f24:	4798      	blx	r3
      }
      return;
 8005f26:	e1d0      	b.n	80062ca <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d100      	bne.n	8005f30 <HAL_UART_IRQHandler+0x5c>
 8005f2e:	e0d9      	b.n	80060e4 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2201      	movs	r2, #1
 8005f34:	4013      	ands	r3, r2
 8005f36:	d104      	bne.n	8005f42 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	4aa6      	ldr	r2, [pc, #664]	; (80061d4 <HAL_UART_IRQHandler+0x300>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d100      	bne.n	8005f42 <HAL_UART_IRQHandler+0x6e>
 8005f40:	e0d0      	b.n	80060e4 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2201      	movs	r2, #1
 8005f46:	4013      	ands	r3, r2
 8005f48:	d010      	beq.n	8005f6c <HAL_UART_IRQHandler+0x98>
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4013      	ands	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	589b      	ldr	r3, [r3, r2]
 8005f62:	2201      	movs	r2, #1
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2180      	movs	r1, #128	; 0x80
 8005f6a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	4013      	ands	r3, r2
 8005f72:	d00f      	beq.n	8005f94 <HAL_UART_IRQHandler+0xc0>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2201      	movs	r2, #1
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2202      	movs	r2, #2
 8005f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2280      	movs	r2, #128	; 0x80
 8005f88:	589b      	ldr	r3, [r3, r2]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2180      	movs	r1, #128	; 0x80
 8005f92:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	2204      	movs	r2, #4
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d00f      	beq.n	8005fbc <HAL_UART_IRQHandler+0xe8>
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d00b      	beq.n	8005fbc <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	589b      	ldr	r3, [r3, r2]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	4013      	ands	r3, r2
 8005fca:	d103      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fd2:	d00b      	beq.n	8005fec <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2208      	movs	r2, #8
 8005fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	589b      	ldr	r3, [r3, r2]
 8005fe2:	2208      	movs	r2, #8
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2180      	movs	r1, #128	; 0x80
 8005fea:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	2380      	movs	r3, #128	; 0x80
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d011      	beq.n	800601a <HAL_UART_IRQHandler+0x146>
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	04db      	lsls	r3, r3, #19
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d00c      	beq.n	800601a <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2280      	movs	r2, #128	; 0x80
 8006006:	0112      	lsls	r2, r2, #4
 8006008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	589b      	ldr	r3, [r3, r2]
 8006010:	2220      	movs	r2, #32
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2280      	movs	r2, #128	; 0x80
 800601e:	589b      	ldr	r3, [r3, r2]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d100      	bne.n	8006026 <HAL_UART_IRQHandler+0x152>
 8006024:	e153      	b.n	80062ce <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	2220      	movs	r2, #32
 800602a:	4013      	ands	r3, r2
 800602c:	d00c      	beq.n	8006048 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2220      	movs	r2, #32
 8006032:	4013      	ands	r3, r2
 8006034:	d008      	beq.n	8006048 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	0010      	movs	r0, r2
 8006046:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	589b      	ldr	r3, [r3, r2]
 800604e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2240      	movs	r2, #64	; 0x40
 8006058:	4013      	ands	r3, r2
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d003      	beq.n	8006066 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2228      	movs	r2, #40	; 0x28
 8006062:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006064:	d033      	beq.n	80060ce <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 fe01 	bl	8006c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2240      	movs	r2, #64	; 0x40
 8006076:	4013      	ands	r3, r2
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d123      	bne.n	80060c4 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2140      	movs	r1, #64	; 0x40
 8006088:	438a      	bics	r2, r1
 800608a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	2b00      	cmp	r3, #0
 8006092:	d012      	beq.n	80060ba <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006098:	4a4f      	ldr	r2, [pc, #316]	; (80061d8 <HAL_UART_IRQHandler+0x304>)
 800609a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7fd fb1b 	bl	80036dc <HAL_DMA_Abort_IT>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d01a      	beq.n	80060e0 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	0018      	movs	r0, r3
 80060b6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b8:	e012      	b.n	80060e0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	0018      	movs	r0, r3
 80060be:	f000 f91b 	bl	80062f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c2:	e00d      	b.n	80060e0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0018      	movs	r0, r3
 80060c8:	f000 f916 	bl	80062f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	e008      	b.n	80060e0 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f000 f911 	bl	80062f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	2100      	movs	r1, #0
 80060dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80060de:	e0f6      	b.n	80062ce <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	46c0      	nop			; (mov r8, r8)
    return;
 80060e2:	e0f4      	b.n	80062ce <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d000      	beq.n	80060ee <HAL_UART_IRQHandler+0x21a>
 80060ec:	e0b9      	b.n	8006262 <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	2210      	movs	r2, #16
 80060f2:	4013      	ands	r3, r2
 80060f4:	d100      	bne.n	80060f8 <HAL_UART_IRQHandler+0x224>
 80060f6:	e0b4      	b.n	8006262 <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2210      	movs	r2, #16
 80060fc:	4013      	ands	r3, r2
 80060fe:	d100      	bne.n	8006102 <HAL_UART_IRQHandler+0x22e>
 8006100:	e0af      	b.n	8006262 <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2210      	movs	r2, #16
 8006108:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2240      	movs	r2, #64	; 0x40
 8006112:	4013      	ands	r3, r2
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d163      	bne.n	80061e0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	2108      	movs	r1, #8
 8006122:	187b      	adds	r3, r7, r1
 8006124:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8006126:	187b      	adds	r3, r7, r1
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d100      	bne.n	8006130 <HAL_UART_IRQHandler+0x25c>
 800612e:	e0d0      	b.n	80062d2 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2258      	movs	r2, #88	; 0x58
 8006134:	5a9b      	ldrh	r3, [r3, r2]
 8006136:	2208      	movs	r2, #8
 8006138:	18ba      	adds	r2, r7, r2
 800613a:	8812      	ldrh	r2, [r2, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d300      	bcc.n	8006142 <HAL_UART_IRQHandler+0x26e>
 8006140:	e0c7      	b.n	80062d2 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2208      	movs	r2, #8
 8006146:	18ba      	adds	r2, r7, r2
 8006148:	215a      	movs	r1, #90	; 0x5a
 800614a:	8812      	ldrh	r2, [r2, #0]
 800614c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2220      	movs	r2, #32
 8006158:	4013      	ands	r3, r2
 800615a:	d12a      	bne.n	80061b2 <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	491d      	ldr	r1, [pc, #116]	; (80061dc <HAL_UART_IRQHandler+0x308>)
 8006168:	400a      	ands	r2, r1
 800616a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2101      	movs	r1, #1
 8006178:	438a      	bics	r2, r1
 800617a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2140      	movs	r1, #64	; 0x40
 8006188:	438a      	bics	r2, r1
 800618a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2110      	movs	r1, #16
 80061a4:	438a      	bics	r2, r1
 80061a6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7fd fa55 	bl	800365c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2258      	movs	r2, #88	; 0x58
 80061b6:	5a9a      	ldrh	r2, [r3, r2]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	215a      	movs	r1, #90	; 0x5a
 80061bc:	5a5b      	ldrh	r3, [r3, r1]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	0011      	movs	r1, r2
 80061c8:	0018      	movs	r0, r3
 80061ca:	f000 f89d 	bl	8006308 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061ce:	e080      	b.n	80062d2 <HAL_UART_IRQHandler+0x3fe>
 80061d0:	0000080f 	.word	0x0000080f
 80061d4:	04000120 	.word	0x04000120
 80061d8:	08006cd1 	.word	0x08006cd1
 80061dc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2258      	movs	r2, #88	; 0x58
 80061e4:	5a99      	ldrh	r1, [r3, r2]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	225a      	movs	r2, #90	; 0x5a
 80061ea:	5a9b      	ldrh	r3, [r3, r2]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	230a      	movs	r3, #10
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	1a8a      	subs	r2, r1, r2
 80061f4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	225a      	movs	r2, #90	; 0x5a
 80061fa:	5a9b      	ldrh	r3, [r3, r2]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d100      	bne.n	8006204 <HAL_UART_IRQHandler+0x330>
 8006202:	e068      	b.n	80062d6 <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 8006204:	230a      	movs	r3, #10
 8006206:	18fb      	adds	r3, r7, r3
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d063      	beq.n	80062d6 <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4932      	ldr	r1, [pc, #200]	; (80062e4 <HAL_UART_IRQHandler+0x410>)
 800621a:	400a      	ands	r2, r1
 800621c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2101      	movs	r1, #1
 800622a:	438a      	bics	r2, r1
 800622c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2110      	movs	r1, #16
 800624c:	438a      	bics	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006250:	230a      	movs	r3, #10
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	881a      	ldrh	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	0011      	movs	r1, r2
 800625a:	0018      	movs	r0, r3
 800625c:	f000 f854 	bl	8006308 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006260:	e039      	b.n	80062d6 <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	035b      	lsls	r3, r3, #13
 8006268:	4013      	ands	r3, r2
 800626a:	d00e      	beq.n	800628a <HAL_UART_IRQHandler+0x3b6>
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	2380      	movs	r3, #128	; 0x80
 8006270:	03db      	lsls	r3, r3, #15
 8006272:	4013      	ands	r3, r2
 8006274:	d009      	beq.n	800628a <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	0352      	lsls	r2, r2, #13
 800627e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	0018      	movs	r0, r3
 8006284:	f000 fe42 	bl	8006f0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006288:	e028      	b.n	80062dc <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2280      	movs	r2, #128	; 0x80
 800628e:	4013      	ands	r3, r2
 8006290:	d00d      	beq.n	80062ae <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2280      	movs	r2, #128	; 0x80
 8006296:	4013      	ands	r3, r2
 8006298:	d009      	beq.n	80062ae <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01b      	beq.n	80062da <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	0010      	movs	r0, r2
 80062aa:	4798      	blx	r3
    }
    return;
 80062ac:	e015      	b.n	80062da <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2240      	movs	r2, #64	; 0x40
 80062b2:	4013      	ands	r3, r2
 80062b4:	d012      	beq.n	80062dc <HAL_UART_IRQHandler+0x408>
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2240      	movs	r2, #64	; 0x40
 80062ba:	4013      	ands	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0018      	movs	r0, r3
 80062c2:	f000 fd1c 	bl	8006cfe <UART_EndTransmit_IT>
    return;
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	e008      	b.n	80062dc <HAL_UART_IRQHandler+0x408>
      return;
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	e006      	b.n	80062dc <HAL_UART_IRQHandler+0x408>
    return;
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	e004      	b.n	80062dc <HAL_UART_IRQHandler+0x408>
      return;
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	e002      	b.n	80062dc <HAL_UART_IRQHandler+0x408>
      return;
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	e000      	b.n	80062dc <HAL_UART_IRQHandler+0x408>
    return;
 80062da:	46c0      	nop			; (mov r8, r8)
  }

}
 80062dc:	46bd      	mov	sp, r7
 80062de:	b008      	add	sp, #32
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	fffffedf 	.word	0xfffffedf

080062e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b002      	add	sp, #8
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	b002      	add	sp, #8
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	000a      	movs	r2, r1
 8006312:	1cbb      	adds	r3, r7, #2
 8006314:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	46bd      	mov	sp, r7
 800631a:	b002      	add	sp, #8
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006320:	b5b0      	push	{r4, r5, r7, lr}
 8006322:	b08e      	sub	sp, #56	; 0x38
 8006324:	af00      	add	r7, sp, #0
 8006326:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006328:	231a      	movs	r3, #26
 800632a:	2218      	movs	r2, #24
 800632c:	4694      	mov	ip, r2
 800632e:	44bc      	add	ip, r7
 8006330:	4463      	add	r3, ip
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	431a      	orrs	r2, r3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	431a      	orrs	r2, r3
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4313      	orrs	r3, r2
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4aca      	ldr	r2, [pc, #808]	; (8006680 <UART_SetConfig+0x360>)
 8006356:	4013      	ands	r3, r2
 8006358:	0019      	movs	r1, r3
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4ac6      	ldr	r2, [pc, #792]	; (8006684 <UART_SetConfig+0x364>)
 800636c:	4013      	ands	r3, r2
 800636e:	0019      	movs	r1, r3
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4ac0      	ldr	r2, [pc, #768]	; (8006688 <UART_SetConfig+0x368>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006392:	4313      	orrs	r3, r2
 8006394:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	4abb      	ldr	r2, [pc, #748]	; (800668c <UART_SetConfig+0x36c>)
 800639e:	4013      	ands	r3, r2
 80063a0:	0019      	movs	r1, r3
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a8:	430a      	orrs	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4ab7      	ldr	r2, [pc, #732]	; (8006690 <UART_SetConfig+0x370>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d134      	bne.n	8006420 <UART_SetConfig+0x100>
 80063b6:	4bb7      	ldr	r3, [pc, #732]	; (8006694 <UART_SetConfig+0x374>)
 80063b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ba:	2203      	movs	r2, #3
 80063bc:	4013      	ands	r3, r2
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d015      	beq.n	80063ee <UART_SetConfig+0xce>
 80063c2:	d304      	bcc.n	80063ce <UART_SetConfig+0xae>
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d00a      	beq.n	80063de <UART_SetConfig+0xbe>
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d018      	beq.n	80063fe <UART_SetConfig+0xde>
 80063cc:	e01f      	b.n	800640e <UART_SetConfig+0xee>
 80063ce:	231b      	movs	r3, #27
 80063d0:	2218      	movs	r2, #24
 80063d2:	4694      	mov	ip, r2
 80063d4:	44bc      	add	ip, r7
 80063d6:	4463      	add	r3, ip
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e0ab      	b.n	8006536 <UART_SetConfig+0x216>
 80063de:	231b      	movs	r3, #27
 80063e0:	2218      	movs	r2, #24
 80063e2:	4694      	mov	ip, r2
 80063e4:	44bc      	add	ip, r7
 80063e6:	4463      	add	r3, ip
 80063e8:	2202      	movs	r2, #2
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e0a3      	b.n	8006536 <UART_SetConfig+0x216>
 80063ee:	231b      	movs	r3, #27
 80063f0:	2218      	movs	r2, #24
 80063f2:	4694      	mov	ip, r2
 80063f4:	44bc      	add	ip, r7
 80063f6:	4463      	add	r3, ip
 80063f8:	2204      	movs	r2, #4
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	e09b      	b.n	8006536 <UART_SetConfig+0x216>
 80063fe:	231b      	movs	r3, #27
 8006400:	2218      	movs	r2, #24
 8006402:	4694      	mov	ip, r2
 8006404:	44bc      	add	ip, r7
 8006406:	4463      	add	r3, ip
 8006408:	2208      	movs	r2, #8
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	e093      	b.n	8006536 <UART_SetConfig+0x216>
 800640e:	231b      	movs	r3, #27
 8006410:	2218      	movs	r2, #24
 8006412:	4694      	mov	ip, r2
 8006414:	44bc      	add	ip, r7
 8006416:	4463      	add	r3, ip
 8006418:	2210      	movs	r2, #16
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	e08a      	b.n	8006536 <UART_SetConfig+0x216>
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a9c      	ldr	r2, [pc, #624]	; (8006698 <UART_SetConfig+0x378>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d137      	bne.n	800649a <UART_SetConfig+0x17a>
 800642a:	4b9a      	ldr	r3, [pc, #616]	; (8006694 <UART_SetConfig+0x374>)
 800642c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642e:	220c      	movs	r2, #12
 8006430:	4013      	ands	r3, r2
 8006432:	2b04      	cmp	r3, #4
 8006434:	d018      	beq.n	8006468 <UART_SetConfig+0x148>
 8006436:	d802      	bhi.n	800643e <UART_SetConfig+0x11e>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <UART_SetConfig+0x128>
 800643c:	e024      	b.n	8006488 <UART_SetConfig+0x168>
 800643e:	2b08      	cmp	r3, #8
 8006440:	d00a      	beq.n	8006458 <UART_SetConfig+0x138>
 8006442:	2b0c      	cmp	r3, #12
 8006444:	d018      	beq.n	8006478 <UART_SetConfig+0x158>
 8006446:	e01f      	b.n	8006488 <UART_SetConfig+0x168>
 8006448:	231b      	movs	r3, #27
 800644a:	2218      	movs	r2, #24
 800644c:	4694      	mov	ip, r2
 800644e:	44bc      	add	ip, r7
 8006450:	4463      	add	r3, ip
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	e06e      	b.n	8006536 <UART_SetConfig+0x216>
 8006458:	231b      	movs	r3, #27
 800645a:	2218      	movs	r2, #24
 800645c:	4694      	mov	ip, r2
 800645e:	44bc      	add	ip, r7
 8006460:	4463      	add	r3, ip
 8006462:	2202      	movs	r2, #2
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	e066      	b.n	8006536 <UART_SetConfig+0x216>
 8006468:	231b      	movs	r3, #27
 800646a:	2218      	movs	r2, #24
 800646c:	4694      	mov	ip, r2
 800646e:	44bc      	add	ip, r7
 8006470:	4463      	add	r3, ip
 8006472:	2204      	movs	r2, #4
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e05e      	b.n	8006536 <UART_SetConfig+0x216>
 8006478:	231b      	movs	r3, #27
 800647a:	2218      	movs	r2, #24
 800647c:	4694      	mov	ip, r2
 800647e:	44bc      	add	ip, r7
 8006480:	4463      	add	r3, ip
 8006482:	2208      	movs	r2, #8
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e056      	b.n	8006536 <UART_SetConfig+0x216>
 8006488:	231b      	movs	r3, #27
 800648a:	2218      	movs	r2, #24
 800648c:	4694      	mov	ip, r2
 800648e:	44bc      	add	ip, r7
 8006490:	4463      	add	r3, ip
 8006492:	2210      	movs	r2, #16
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	e04d      	b.n	8006536 <UART_SetConfig+0x216>
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7a      	ldr	r2, [pc, #488]	; (8006688 <UART_SetConfig+0x368>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d141      	bne.n	8006528 <UART_SetConfig+0x208>
 80064a4:	4b7b      	ldr	r3, [pc, #492]	; (8006694 <UART_SetConfig+0x374>)
 80064a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064a8:	23c0      	movs	r3, #192	; 0xc0
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	4013      	ands	r3, r2
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	00d2      	lsls	r2, r2, #3
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01f      	beq.n	80064f6 <UART_SetConfig+0x1d6>
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	00d2      	lsls	r2, r2, #3
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d802      	bhi.n	80064c4 <UART_SetConfig+0x1a4>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <UART_SetConfig+0x1b6>
 80064c2:	e028      	b.n	8006516 <UART_SetConfig+0x1f6>
 80064c4:	2280      	movs	r2, #128	; 0x80
 80064c6:	0112      	lsls	r2, r2, #4
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00c      	beq.n	80064e6 <UART_SetConfig+0x1c6>
 80064cc:	22c0      	movs	r2, #192	; 0xc0
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d018      	beq.n	8006506 <UART_SetConfig+0x1e6>
 80064d4:	e01f      	b.n	8006516 <UART_SetConfig+0x1f6>
 80064d6:	231b      	movs	r3, #27
 80064d8:	2218      	movs	r2, #24
 80064da:	4694      	mov	ip, r2
 80064dc:	44bc      	add	ip, r7
 80064de:	4463      	add	r3, ip
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e027      	b.n	8006536 <UART_SetConfig+0x216>
 80064e6:	231b      	movs	r3, #27
 80064e8:	2218      	movs	r2, #24
 80064ea:	4694      	mov	ip, r2
 80064ec:	44bc      	add	ip, r7
 80064ee:	4463      	add	r3, ip
 80064f0:	2202      	movs	r2, #2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e01f      	b.n	8006536 <UART_SetConfig+0x216>
 80064f6:	231b      	movs	r3, #27
 80064f8:	2218      	movs	r2, #24
 80064fa:	4694      	mov	ip, r2
 80064fc:	44bc      	add	ip, r7
 80064fe:	4463      	add	r3, ip
 8006500:	2204      	movs	r2, #4
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e017      	b.n	8006536 <UART_SetConfig+0x216>
 8006506:	231b      	movs	r3, #27
 8006508:	2218      	movs	r2, #24
 800650a:	4694      	mov	ip, r2
 800650c:	44bc      	add	ip, r7
 800650e:	4463      	add	r3, ip
 8006510:	2208      	movs	r2, #8
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	e00f      	b.n	8006536 <UART_SetConfig+0x216>
 8006516:	231b      	movs	r3, #27
 8006518:	2218      	movs	r2, #24
 800651a:	4694      	mov	ip, r2
 800651c:	44bc      	add	ip, r7
 800651e:	4463      	add	r3, ip
 8006520:	2210      	movs	r2, #16
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	e006      	b.n	8006536 <UART_SetConfig+0x216>
 8006528:	231b      	movs	r3, #27
 800652a:	2218      	movs	r2, #24
 800652c:	4694      	mov	ip, r2
 800652e:	44bc      	add	ip, r7
 8006530:	4463      	add	r3, ip
 8006532:	2210      	movs	r2, #16
 8006534:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a53      	ldr	r2, [pc, #332]	; (8006688 <UART_SetConfig+0x368>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d000      	beq.n	8006542 <UART_SetConfig+0x222>
 8006540:	e085      	b.n	800664e <UART_SetConfig+0x32e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006542:	231b      	movs	r3, #27
 8006544:	2218      	movs	r2, #24
 8006546:	4694      	mov	ip, r2
 8006548:	44bc      	add	ip, r7
 800654a:	4463      	add	r3, ip
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d00d      	beq.n	800656e <UART_SetConfig+0x24e>
 8006552:	dc02      	bgt.n	800655a <UART_SetConfig+0x23a>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <UART_SetConfig+0x244>
 8006558:	e01d      	b.n	8006596 <UART_SetConfig+0x276>
 800655a:	2b04      	cmp	r3, #4
 800655c:	d012      	beq.n	8006584 <UART_SetConfig+0x264>
 800655e:	2b08      	cmp	r3, #8
 8006560:	d015      	beq.n	800658e <UART_SetConfig+0x26e>
 8006562:	e018      	b.n	8006596 <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006564:	f7fe fe3a 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8006568:	0003      	movs	r3, r0
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800656c:	e01d      	b.n	80065aa <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800656e:	4b49      	ldr	r3, [pc, #292]	; (8006694 <UART_SetConfig+0x374>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2210      	movs	r2, #16
 8006574:	4013      	ands	r3, r2
 8006576:	d002      	beq.n	800657e <UART_SetConfig+0x25e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006578:	4b48      	ldr	r3, [pc, #288]	; (800669c <UART_SetConfig+0x37c>)
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800657c:	e015      	b.n	80065aa <UART_SetConfig+0x28a>
          pclk = (uint32_t) HSI_VALUE;
 800657e:	4b48      	ldr	r3, [pc, #288]	; (80066a0 <UART_SetConfig+0x380>)
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006582:	e012      	b.n	80065aa <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006584:	f7fe fd7e 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 8006588:	0003      	movs	r3, r0
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800658c:	e00d      	b.n	80065aa <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800658e:	2380      	movs	r3, #128	; 0x80
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006594:	e009      	b.n	80065aa <UART_SetConfig+0x28a>
      default:
        pclk = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800659a:	231a      	movs	r3, #26
 800659c:	2218      	movs	r2, #24
 800659e:	4694      	mov	ip, r2
 80065a0:	44bc      	add	ip, r7
 80065a2:	4463      	add	r3, ip
 80065a4:	2201      	movs	r2, #1
 80065a6:	701a      	strb	r2, [r3, #0]
        break;
 80065a8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d100      	bne.n	80065b2 <UART_SetConfig+0x292>
 80065b0:	e139      	b.n	8006826 <UART_SetConfig+0x506>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	0013      	movs	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	189b      	adds	r3, r3, r2
 80065bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d305      	bcc.n	80065ce <UART_SetConfig+0x2ae>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d907      	bls.n	80065de <UART_SetConfig+0x2be>
      {
        ret = HAL_ERROR;
 80065ce:	231a      	movs	r3, #26
 80065d0:	2218      	movs	r2, #24
 80065d2:	4694      	mov	ip, r2
 80065d4:	44bc      	add	ip, r7
 80065d6:	4463      	add	r3, ip
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e123      	b.n	8006826 <UART_SetConfig+0x506>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	6939      	ldr	r1, [r7, #16]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	000b      	movs	r3, r1
 80065ec:	0e1b      	lsrs	r3, r3, #24
 80065ee:	0010      	movs	r0, r2
 80065f0:	0205      	lsls	r5, r0, #8
 80065f2:	431d      	orrs	r5, r3
 80065f4:	000b      	movs	r3, r1
 80065f6:	021c      	lsls	r4, r3, #8
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68b8      	ldr	r0, [r7, #8]
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	1900      	adds	r0, r0, r4
 800660a:	4169      	adcs	r1, r5
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	603b      	str	r3, [r7, #0]
 8006612:	2300      	movs	r3, #0
 8006614:	607b      	str	r3, [r7, #4]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f7f9 fe47 	bl	80002ac <__aeabi_uldivmod>
 800661e:	0003      	movs	r3, r0
 8006620:	000c      	movs	r4, r1
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <UART_SetConfig+0x384>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d908      	bls.n	800663e <UART_SetConfig+0x31e>
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <UART_SetConfig+0x388>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d804      	bhi.n	800663e <UART_SetConfig+0x31e>
        {
          huart->Instance->BRR = usartdiv;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800663a:	60da      	str	r2, [r3, #12]
 800663c:	e0f3      	b.n	8006826 <UART_SetConfig+0x506>
        }
        else
        {
          ret = HAL_ERROR;
 800663e:	231a      	movs	r3, #26
 8006640:	2218      	movs	r2, #24
 8006642:	4694      	mov	ip, r2
 8006644:	44bc      	add	ip, r7
 8006646:	4463      	add	r3, ip
 8006648:	2201      	movs	r2, #1
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	e0eb      	b.n	8006826 <UART_SetConfig+0x506>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	2380      	movs	r3, #128	; 0x80
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	429a      	cmp	r2, r3
 8006658:	d000      	beq.n	800665c <UART_SetConfig+0x33c>
 800665a:	e08b      	b.n	8006774 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800665c:	231b      	movs	r3, #27
 800665e:	2218      	movs	r2, #24
 8006660:	4694      	mov	ip, r2
 8006662:	44bc      	add	ip, r7
 8006664:	4463      	add	r3, ip
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d83a      	bhi.n	80066e2 <UART_SetConfig+0x3c2>
 800666c:	009a      	lsls	r2, r3, #2
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <UART_SetConfig+0x38c>)
 8006670:	18d3      	adds	r3, r2, r3
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006676:	f7fe fdb1 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 800667a:	0003      	movs	r3, r0
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800667e:	e03a      	b.n	80066f6 <UART_SetConfig+0x3d6>
 8006680:	efff69f3 	.word	0xefff69f3
 8006684:	ffffcfff 	.word	0xffffcfff
 8006688:	40004800 	.word	0x40004800
 800668c:	fffff4ff 	.word	0xfffff4ff
 8006690:	40013800 	.word	0x40013800
 8006694:	40021000 	.word	0x40021000
 8006698:	40004400 	.word	0x40004400
 800669c:	003d0900 	.word	0x003d0900
 80066a0:	00f42400 	.word	0x00f42400
 80066a4:	000002ff 	.word	0x000002ff
 80066a8:	000fffff 	.word	0x000fffff
 80066ac:	08008a50 	.word	0x08008a50
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b0:	f7fe fdaa 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 80066b4:	0003      	movs	r3, r0
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066b8:	e01d      	b.n	80066f6 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ba:	4b63      	ldr	r3, [pc, #396]	; (8006848 <UART_SetConfig+0x528>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2210      	movs	r2, #16
 80066c0:	4013      	ands	r3, r2
 80066c2:	d002      	beq.n	80066ca <UART_SetConfig+0x3aa>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80066c4:	4b61      	ldr	r3, [pc, #388]	; (800684c <UART_SetConfig+0x52c>)
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066c8:	e015      	b.n	80066f6 <UART_SetConfig+0x3d6>
          pclk = (uint32_t) HSI_VALUE;
 80066ca:	4b61      	ldr	r3, [pc, #388]	; (8006850 <UART_SetConfig+0x530>)
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066ce:	e012      	b.n	80066f6 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d0:	f7fe fcd8 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 80066d4:	0003      	movs	r3, r0
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066d8:	e00d      	b.n	80066f6 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066da:	2380      	movs	r3, #128	; 0x80
 80066dc:	021b      	lsls	r3, r3, #8
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066e0:	e009      	b.n	80066f6 <UART_SetConfig+0x3d6>
      default:
        pclk = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066e6:	231a      	movs	r3, #26
 80066e8:	2218      	movs	r2, #24
 80066ea:	4694      	mov	ip, r2
 80066ec:	44bc      	add	ip, r7
 80066ee:	4463      	add	r3, ip
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
        break;
 80066f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d100      	bne.n	80066fe <UART_SetConfig+0x3de>
 80066fc:	e093      	b.n	8006826 <UART_SetConfig+0x506>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	005a      	lsls	r2, r3, #1
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	18d2      	adds	r2, r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	0019      	movs	r1, r3
 8006710:	0010      	movs	r0, r2
 8006712:	f7f9 fd01 	bl	8000118 <__udivsi3>
 8006716:	0003      	movs	r3, r0
 8006718:	b29b      	uxth	r3, r3
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d920      	bls.n	8006764 <UART_SetConfig+0x444>
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	4a4b      	ldr	r2, [pc, #300]	; (8006854 <UART_SetConfig+0x534>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d81c      	bhi.n	8006764 <UART_SetConfig+0x444>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	b29a      	uxth	r2, r3
 800672e:	200e      	movs	r0, #14
 8006730:	2418      	movs	r4, #24
 8006732:	193b      	adds	r3, r7, r4
 8006734:	181b      	adds	r3, r3, r0
 8006736:	210f      	movs	r1, #15
 8006738:	438a      	bics	r2, r1
 800673a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	b29b      	uxth	r3, r3
 8006742:	2207      	movs	r2, #7
 8006744:	4013      	ands	r3, r2
 8006746:	b299      	uxth	r1, r3
 8006748:	193b      	adds	r3, r7, r4
 800674a:	181b      	adds	r3, r3, r0
 800674c:	193a      	adds	r2, r7, r4
 800674e:	1812      	adds	r2, r2, r0
 8006750:	8812      	ldrh	r2, [r2, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	193a      	adds	r2, r7, r4
 800675c:	1812      	adds	r2, r2, r0
 800675e:	8812      	ldrh	r2, [r2, #0]
 8006760:	60da      	str	r2, [r3, #12]
 8006762:	e060      	b.n	8006826 <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8006764:	231a      	movs	r3, #26
 8006766:	2218      	movs	r2, #24
 8006768:	4694      	mov	ip, r2
 800676a:	44bc      	add	ip, r7
 800676c:	4463      	add	r3, ip
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e058      	b.n	8006826 <UART_SetConfig+0x506>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006774:	231b      	movs	r3, #27
 8006776:	2218      	movs	r2, #24
 8006778:	4694      	mov	ip, r2
 800677a:	44bc      	add	ip, r7
 800677c:	4463      	add	r3, ip
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b08      	cmp	r3, #8
 8006782:	d822      	bhi.n	80067ca <UART_SetConfig+0x4aa>
 8006784:	009a      	lsls	r2, r3, #2
 8006786:	4b34      	ldr	r3, [pc, #208]	; (8006858 <UART_SetConfig+0x538>)
 8006788:	18d3      	adds	r3, r2, r3
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800678e:	f7fe fd25 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8006792:	0003      	movs	r3, r0
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006796:	e022      	b.n	80067de <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006798:	f7fe fd36 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 800679c:	0003      	movs	r3, r0
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a0:	e01d      	b.n	80067de <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067a2:	4b29      	ldr	r3, [pc, #164]	; (8006848 <UART_SetConfig+0x528>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2210      	movs	r2, #16
 80067a8:	4013      	ands	r3, r2
 80067aa:	d002      	beq.n	80067b2 <UART_SetConfig+0x492>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <UART_SetConfig+0x52c>)
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067b0:	e015      	b.n	80067de <UART_SetConfig+0x4be>
          pclk = (uint32_t) HSI_VALUE;
 80067b2:	4b27      	ldr	r3, [pc, #156]	; (8006850 <UART_SetConfig+0x530>)
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067b6:	e012      	b.n	80067de <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b8:	f7fe fc64 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 80067bc:	0003      	movs	r3, r0
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c0:	e00d      	b.n	80067de <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c2:	2380      	movs	r3, #128	; 0x80
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c8:	e009      	b.n	80067de <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067ce:	231a      	movs	r3, #26
 80067d0:	2218      	movs	r2, #24
 80067d2:	4694      	mov	ip, r2
 80067d4:	44bc      	add	ip, r7
 80067d6:	4463      	add	r3, ip
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
        break;
 80067dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d020      	beq.n	8006826 <UART_SetConfig+0x506>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	085a      	lsrs	r2, r3, #1
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	18d2      	adds	r2, r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	0019      	movs	r1, r3
 80067f4:	0010      	movs	r0, r2
 80067f6:	f7f9 fc8f 	bl	8000118 <__udivsi3>
 80067fa:	0003      	movs	r3, r0
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	2b0f      	cmp	r3, #15
 8006804:	d908      	bls.n	8006818 <UART_SetConfig+0x4f8>
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006808:	4a12      	ldr	r2, [pc, #72]	; (8006854 <UART_SetConfig+0x534>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d804      	bhi.n	8006818 <UART_SetConfig+0x4f8>
      {
        huart->Instance->BRR = usartdiv;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	e006      	b.n	8006826 <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8006818:	231a      	movs	r3, #26
 800681a:	2218      	movs	r2, #24
 800681c:	4694      	mov	ip, r2
 800681e:	44bc      	add	ip, r7
 8006820:	4463      	add	r3, ip
 8006822:	2201      	movs	r2, #1
 8006824:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2200      	movs	r2, #0
 800682a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	2200      	movs	r2, #0
 8006830:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006832:	231a      	movs	r3, #26
 8006834:	2218      	movs	r2, #24
 8006836:	4694      	mov	ip, r2
 8006838:	44bc      	add	ip, r7
 800683a:	4463      	add	r3, ip
 800683c:	781b      	ldrb	r3, [r3, #0]
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b00e      	add	sp, #56	; 0x38
 8006844:	bdb0      	pop	{r4, r5, r7, pc}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	40021000 	.word	0x40021000
 800684c:	003d0900 	.word	0x003d0900
 8006850:	00f42400 	.word	0x00f42400
 8006854:	0000ffff 	.word	0x0000ffff
 8006858:	08008a74 	.word	0x08008a74

0800685c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2201      	movs	r2, #1
 800686a:	4013      	ands	r3, r2
 800686c:	d00b      	beq.n	8006886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4a4a      	ldr	r2, [pc, #296]	; (80069a0 <UART_AdvFeatureConfig+0x144>)
 8006876:	4013      	ands	r3, r2
 8006878:	0019      	movs	r1, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	2202      	movs	r2, #2
 800688c:	4013      	ands	r3, r2
 800688e:	d00b      	beq.n	80068a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4a43      	ldr	r2, [pc, #268]	; (80069a4 <UART_AdvFeatureConfig+0x148>)
 8006898:	4013      	ands	r3, r2
 800689a:	0019      	movs	r1, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	2204      	movs	r2, #4
 80068ae:	4013      	ands	r3, r2
 80068b0:	d00b      	beq.n	80068ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	4a3b      	ldr	r2, [pc, #236]	; (80069a8 <UART_AdvFeatureConfig+0x14c>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	0019      	movs	r1, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	2208      	movs	r2, #8
 80068d0:	4013      	ands	r3, r2
 80068d2:	d00b      	beq.n	80068ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	4a34      	ldr	r2, [pc, #208]	; (80069ac <UART_AdvFeatureConfig+0x150>)
 80068dc:	4013      	ands	r3, r2
 80068de:	0019      	movs	r1, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2210      	movs	r2, #16
 80068f2:	4013      	ands	r3, r2
 80068f4:	d00b      	beq.n	800690e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4a2c      	ldr	r2, [pc, #176]	; (80069b0 <UART_AdvFeatureConfig+0x154>)
 80068fe:	4013      	ands	r3, r2
 8006900:	0019      	movs	r1, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	2220      	movs	r2, #32
 8006914:	4013      	ands	r3, r2
 8006916:	d00b      	beq.n	8006930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	4a25      	ldr	r2, [pc, #148]	; (80069b4 <UART_AdvFeatureConfig+0x158>)
 8006920:	4013      	ands	r3, r2
 8006922:	0019      	movs	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2240      	movs	r2, #64	; 0x40
 8006936:	4013      	ands	r3, r2
 8006938:	d01d      	beq.n	8006976 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <UART_AdvFeatureConfig+0x15c>)
 8006942:	4013      	ands	r3, r2
 8006944:	0019      	movs	r1, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006956:	2380      	movs	r3, #128	; 0x80
 8006958:	035b      	lsls	r3, r3, #13
 800695a:	429a      	cmp	r2, r3
 800695c:	d10b      	bne.n	8006976 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4a15      	ldr	r2, [pc, #84]	; (80069bc <UART_AdvFeatureConfig+0x160>)
 8006966:	4013      	ands	r3, r2
 8006968:	0019      	movs	r1, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	4013      	ands	r3, r2
 800697e:	d00b      	beq.n	8006998 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4a0e      	ldr	r2, [pc, #56]	; (80069c0 <UART_AdvFeatureConfig+0x164>)
 8006988:	4013      	ands	r3, r2
 800698a:	0019      	movs	r1, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }
}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b002      	add	sp, #8
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	fffdffff 	.word	0xfffdffff
 80069a4:	fffeffff 	.word	0xfffeffff
 80069a8:	fffbffff 	.word	0xfffbffff
 80069ac:	ffff7fff 	.word	0xffff7fff
 80069b0:	ffffefff 	.word	0xffffefff
 80069b4:	ffffdfff 	.word	0xffffdfff
 80069b8:	ffefffff 	.word	0xffefffff
 80069bc:	ff9fffff 	.word	0xff9fffff
 80069c0:	fff7ffff 	.word	0xfff7ffff

080069c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2280      	movs	r2, #128	; 0x80
 80069d0:	2100      	movs	r1, #0
 80069d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d4:	f7fc fd38 	bl	8003448 <HAL_GetTick>
 80069d8:	0003      	movs	r3, r0
 80069da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d10d      	bne.n	8006a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	2380      	movs	r3, #128	; 0x80
 80069ee:	0399      	lsls	r1, r3, #14
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4b18      	ldr	r3, [pc, #96]	; (8006a54 <UART_CheckIdleState+0x90>)
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	0013      	movs	r3, r2
 80069f8:	2200      	movs	r2, #0
 80069fa:	f000 f82d 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 80069fe:	1e03      	subs	r3, r0, #0
 8006a00:	d001      	beq.n	8006a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e022      	b.n	8006a4c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d10d      	bne.n	8006a30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	2380      	movs	r3, #128	; 0x80
 8006a18:	03d9      	lsls	r1, r3, #15
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <UART_CheckIdleState+0x90>)
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	0013      	movs	r3, r2
 8006a22:	2200      	movs	r2, #0
 8006a24:	f000 f818 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 8006a28:	1e03      	subs	r3, r0, #0
 8006a2a:	d001      	beq.n	8006a30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e00d      	b.n	8006a4c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2274      	movs	r2, #116	; 0x74
 8006a46:	2100      	movs	r1, #0
 8006a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b004      	add	sp, #16
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	01ffffff 	.word	0x01ffffff

08006a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	1dfb      	adds	r3, r7, #7
 8006a66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a68:	e05e      	b.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	d05b      	beq.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a70:	f7fc fcea 	bl	8003448 <HAL_GetTick>
 8006a74:	0002      	movs	r2, r0
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d11b      	bne.n	8006abe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	492f      	ldr	r1, [pc, #188]	; (8006b50 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006a92:	400a      	ands	r2, r1
 8006a94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	438a      	bics	r2, r1
 8006aa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2274      	movs	r2, #116	; 0x74
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e044      	b.n	8006b48 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	d02e      	beq.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	2380      	movs	r3, #128	; 0x80
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	401a      	ands	r2, r3
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d124      	bne.n	8006b28 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2280      	movs	r2, #128	; 0x80
 8006ae4:	0112      	lsls	r2, r2, #4
 8006ae6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4917      	ldr	r1, [pc, #92]	; (8006b50 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006af4:	400a      	ands	r2, r1
 8006af6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2101      	movs	r1, #1
 8006b04:	438a      	bics	r2, r1
 8006b06:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2280      	movs	r2, #128	; 0x80
 8006b18:	2120      	movs	r1, #32
 8006b1a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2274      	movs	r2, #116	; 0x74
 8006b20:	2100      	movs	r1, #0
 8006b22:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e00f      	b.n	8006b48 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4013      	ands	r3, r2
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	425a      	negs	r2, r3
 8006b38:	4153      	adcs	r3, r2
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	001a      	movs	r2, r3
 8006b3e:	1dfb      	adds	r3, r7, #7
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d091      	beq.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	0018      	movs	r0, r3
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b004      	add	sp, #16
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	fffffe5f 	.word	0xfffffe5f

08006b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	1dbb      	adds	r3, r7, #6
 8006b60:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	1dba      	adds	r2, r7, #6
 8006b6c:	2158      	movs	r1, #88	; 0x58
 8006b6e:	8812      	ldrh	r2, [r2, #0]
 8006b70:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1dba      	adds	r2, r7, #6
 8006b76:	215a      	movs	r1, #90	; 0x5a
 8006b78:	8812      	ldrh	r2, [r2, #0]
 8006b7a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	2380      	movs	r3, #128	; 0x80
 8006b88:	015b      	lsls	r3, r3, #5
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d10d      	bne.n	8006baa <UART_Start_Receive_IT+0x56>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <UART_Start_Receive_IT+0x4c>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	225c      	movs	r2, #92	; 0x5c
 8006b9a:	4932      	ldr	r1, [pc, #200]	; (8006c64 <UART_Start_Receive_IT+0x110>)
 8006b9c:	5299      	strh	r1, [r3, r2]
 8006b9e:	e02e      	b.n	8006bfe <UART_Start_Receive_IT+0xaa>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	225c      	movs	r2, #92	; 0x5c
 8006ba4:	21ff      	movs	r1, #255	; 0xff
 8006ba6:	5299      	strh	r1, [r3, r2]
 8006ba8:	e029      	b.n	8006bfe <UART_Start_Receive_IT+0xaa>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <UART_Start_Receive_IT+0x7a>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <UART_Start_Receive_IT+0x70>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	225c      	movs	r2, #92	; 0x5c
 8006bbe:	21ff      	movs	r1, #255	; 0xff
 8006bc0:	5299      	strh	r1, [r3, r2]
 8006bc2:	e01c      	b.n	8006bfe <UART_Start_Receive_IT+0xaa>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	225c      	movs	r2, #92	; 0x5c
 8006bc8:	217f      	movs	r1, #127	; 0x7f
 8006bca:	5299      	strh	r1, [r3, r2]
 8006bcc:	e017      	b.n	8006bfe <UART_Start_Receive_IT+0xaa>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	2380      	movs	r3, #128	; 0x80
 8006bd4:	055b      	lsls	r3, r3, #21
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d10d      	bne.n	8006bf6 <UART_Start_Receive_IT+0xa2>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <UART_Start_Receive_IT+0x98>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	225c      	movs	r2, #92	; 0x5c
 8006be6:	217f      	movs	r1, #127	; 0x7f
 8006be8:	5299      	strh	r1, [r3, r2]
 8006bea:	e008      	b.n	8006bfe <UART_Start_Receive_IT+0xaa>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	225c      	movs	r2, #92	; 0x5c
 8006bf0:	213f      	movs	r1, #63	; 0x3f
 8006bf2:	5299      	strh	r1, [r3, r2]
 8006bf4:	e003      	b.n	8006bfe <UART_Start_Receive_IT+0xaa>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	225c      	movs	r2, #92	; 0x5c
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2280      	movs	r2, #128	; 0x80
 8006c02:	2100      	movs	r1, #0
 8006c04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2222      	movs	r2, #34	; 0x22
 8006c0a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2101      	movs	r1, #1
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	2380      	movs	r3, #128	; 0x80
 8006c22:	015b      	lsls	r3, r3, #5
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d107      	bne.n	8006c38 <UART_Start_Receive_IT+0xe4>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a0d      	ldr	r2, [pc, #52]	; (8006c68 <UART_Start_Receive_IT+0x114>)
 8006c34:	665a      	str	r2, [r3, #100]	; 0x64
 8006c36:	e002      	b.n	8006c3e <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a0c      	ldr	r2, [pc, #48]	; (8006c6c <UART_Start_Receive_IT+0x118>)
 8006c3c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2274      	movs	r2, #116	; 0x74
 8006c42:	2100      	movs	r1, #0
 8006c44:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2190      	movs	r1, #144	; 0x90
 8006c52:	0049      	lsls	r1, r1, #1
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	b004      	add	sp, #16
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	000001ff 	.word	0x000001ff
 8006c68:	08006e21 	.word	0x08006e21
 8006c6c:	08006d35 	.word	0x08006d35

08006c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4912      	ldr	r1, [pc, #72]	; (8006ccc <UART_EndRxTransfer+0x5c>)
 8006c84:	400a      	ands	r2, r1
 8006c86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2101      	movs	r1, #1
 8006c94:	438a      	bics	r2, r1
 8006c96:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d107      	bne.n	8006cb0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2110      	movs	r1, #16
 8006cac:	438a      	bics	r2, r1
 8006cae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b002      	add	sp, #8
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	fffffedf 	.word	0xfffffedf

08006cd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	225a      	movs	r2, #90	; 0x5a
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2252      	movs	r2, #82	; 0x52
 8006cea:	2100      	movs	r1, #0
 8006cec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7ff fb01 	bl	80062f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b004      	add	sp, #16
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2140      	movs	r1, #64	; 0x40
 8006d12:	438a      	bics	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7ff fadf 	bl	80062e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d3c:	230e      	movs	r3, #14
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	215c      	movs	r1, #92	; 0x5c
 8006d44:	5a52      	ldrh	r2, [r2, r1]
 8006d46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4c:	2b22      	cmp	r3, #34	; 0x22
 8006d4e:	d158      	bne.n	8006e02 <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d56:	210c      	movs	r1, #12
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d5c:	187b      	adds	r3, r7, r1
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	230e      	movs	r3, #14
 8006d64:	18fb      	adds	r3, r7, r3
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b2d9      	uxtb	r1, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	400a      	ands	r2, r1
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	225a      	movs	r2, #90	; 0x5a
 8006d82:	5a9b      	ldrh	r3, [r3, r2]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b299      	uxth	r1, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	225a      	movs	r2, #90	; 0x5a
 8006d8e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	225a      	movs	r2, #90	; 0x5a
 8006d94:	5a9b      	ldrh	r3, [r3, r2]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d13a      	bne.n	8006e12 <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	491d      	ldr	r1, [pc, #116]	; (8006e1c <UART_RxISR_8BIT+0xe8>)
 8006da8:	400a      	ands	r2, r1
 8006daa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2101      	movs	r1, #1
 8006db8:	438a      	bics	r2, r1
 8006dba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d110      	bne.n	8006df2 <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2110      	movs	r1, #16
 8006ddc:	438a      	bics	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2258      	movs	r2, #88	; 0x58
 8006de4:	5a9a      	ldrh	r2, [r3, r2]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0011      	movs	r1, r2
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7ff fa8c 	bl	8006308 <HAL_UARTEx_RxEventCallback>
 8006df0:	e003      	b.n	8006dfa <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7fb fb63 	bl	80024c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e00:	e007      	b.n	8006e12 <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699a      	ldr	r2, [r3, #24]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2108      	movs	r1, #8
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	619a      	str	r2, [r3, #24]
}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b004      	add	sp, #16
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	fffffedf 	.word	0xfffffedf

08006e20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e28:	230e      	movs	r3, #14
 8006e2a:	18fb      	adds	r3, r7, r3
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	215c      	movs	r1, #92	; 0x5c
 8006e30:	5a52      	ldrh	r2, [r2, r1]
 8006e32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e38:	2b22      	cmp	r3, #34	; 0x22
 8006e3a:	d158      	bne.n	8006eee <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e42:	210c      	movs	r1, #12
 8006e44:	187b      	adds	r3, r7, r1
 8006e46:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e4e:	187b      	adds	r3, r7, r1
 8006e50:	220e      	movs	r2, #14
 8006e52:	18ba      	adds	r2, r7, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	8812      	ldrh	r2, [r2, #0]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	1c9a      	adds	r2, r3, #2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	225a      	movs	r2, #90	; 0x5a
 8006e6e:	5a9b      	ldrh	r3, [r3, r2]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b299      	uxth	r1, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	225a      	movs	r2, #90	; 0x5a
 8006e7a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	225a      	movs	r2, #90	; 0x5a
 8006e80:	5a9b      	ldrh	r3, [r3, r2]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d13a      	bne.n	8006efe <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	491d      	ldr	r1, [pc, #116]	; (8006f08 <UART_RxISR_16BIT+0xe8>)
 8006e94:	400a      	ands	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	438a      	bics	r2, r1
 8006ea6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d110      	bne.n	8006ede <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2110      	movs	r1, #16
 8006ec8:	438a      	bics	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2258      	movs	r2, #88	; 0x58
 8006ed0:	5a9a      	ldrh	r2, [r3, r2]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0011      	movs	r1, r2
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f7ff fa16 	bl	8006308 <HAL_UARTEx_RxEventCallback>
 8006edc:	e003      	b.n	8006ee6 <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f7fb faed 	bl	80024c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eec:	e007      	b.n	8006efe <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2108      	movs	r1, #8
 8006efa:	430a      	orrs	r2, r1
 8006efc:	619a      	str	r2, [r3, #24]
}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b004      	add	sp, #16
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	fffffedf 	.word	0xfffffedf

08006f0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f14:	46c0      	nop			; (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b002      	add	sp, #8
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <__errno>:
 8006f1c:	4b01      	ldr	r3, [pc, #4]	; (8006f24 <__errno+0x8>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	4770      	bx	lr
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	20000038 	.word	0x20000038

08006f28 <__libc_init_array>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	4d0c      	ldr	r5, [pc, #48]	; (8006f60 <__libc_init_array+0x38>)
 8006f2e:	4c0d      	ldr	r4, [pc, #52]	; (8006f64 <__libc_init_array+0x3c>)
 8006f30:	1b64      	subs	r4, r4, r5
 8006f32:	10a4      	asrs	r4, r4, #2
 8006f34:	42a6      	cmp	r6, r4
 8006f36:	d109      	bne.n	8006f4c <__libc_init_array+0x24>
 8006f38:	2600      	movs	r6, #0
 8006f3a:	f001 fcc9 	bl	80088d0 <_init>
 8006f3e:	4d0a      	ldr	r5, [pc, #40]	; (8006f68 <__libc_init_array+0x40>)
 8006f40:	4c0a      	ldr	r4, [pc, #40]	; (8006f6c <__libc_init_array+0x44>)
 8006f42:	1b64      	subs	r4, r4, r5
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	42a6      	cmp	r6, r4
 8006f48:	d105      	bne.n	8006f56 <__libc_init_array+0x2e>
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	00b3      	lsls	r3, r6, #2
 8006f4e:	58eb      	ldr	r3, [r5, r3]
 8006f50:	4798      	blx	r3
 8006f52:	3601      	adds	r6, #1
 8006f54:	e7ee      	b.n	8006f34 <__libc_init_array+0xc>
 8006f56:	00b3      	lsls	r3, r6, #2
 8006f58:	58eb      	ldr	r3, [r5, r3]
 8006f5a:	4798      	blx	r3
 8006f5c:	3601      	adds	r6, #1
 8006f5e:	e7f2      	b.n	8006f46 <__libc_init_array+0x1e>
 8006f60:	08008b20 	.word	0x08008b20
 8006f64:	08008b20 	.word	0x08008b20
 8006f68:	08008b20 	.word	0x08008b20
 8006f6c:	08008b24 	.word	0x08008b24

08006f70 <memset>:
 8006f70:	0003      	movs	r3, r0
 8006f72:	1812      	adds	r2, r2, r0
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d100      	bne.n	8006f7a <memset+0xa>
 8006f78:	4770      	bx	lr
 8006f7a:	7019      	strb	r1, [r3, #0]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	e7f9      	b.n	8006f74 <memset+0x4>

08006f80 <siprintf>:
 8006f80:	b40e      	push	{r1, r2, r3}
 8006f82:	b500      	push	{lr}
 8006f84:	490b      	ldr	r1, [pc, #44]	; (8006fb4 <siprintf+0x34>)
 8006f86:	b09c      	sub	sp, #112	; 0x70
 8006f88:	ab1d      	add	r3, sp, #116	; 0x74
 8006f8a:	9002      	str	r0, [sp, #8]
 8006f8c:	9006      	str	r0, [sp, #24]
 8006f8e:	9107      	str	r1, [sp, #28]
 8006f90:	9104      	str	r1, [sp, #16]
 8006f92:	4809      	ldr	r0, [pc, #36]	; (8006fb8 <siprintf+0x38>)
 8006f94:	4909      	ldr	r1, [pc, #36]	; (8006fbc <siprintf+0x3c>)
 8006f96:	cb04      	ldmia	r3!, {r2}
 8006f98:	9105      	str	r1, [sp, #20]
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	a902      	add	r1, sp, #8
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	f000 f870 	bl	8007084 <_svfiprintf_r>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9a02      	ldr	r2, [sp, #8]
 8006fa8:	7013      	strb	r3, [r2, #0]
 8006faa:	b01c      	add	sp, #112	; 0x70
 8006fac:	bc08      	pop	{r3}
 8006fae:	b003      	add	sp, #12
 8006fb0:	4718      	bx	r3
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	7fffffff 	.word	0x7fffffff
 8006fb8:	20000038 	.word	0x20000038
 8006fbc:	ffff0208 	.word	0xffff0208

08006fc0 <__ssputs_r>:
 8006fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc2:	688e      	ldr	r6, [r1, #8]
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	0007      	movs	r7, r0
 8006fc8:	000c      	movs	r4, r1
 8006fca:	9203      	str	r2, [sp, #12]
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	429e      	cmp	r6, r3
 8006fd0:	d83c      	bhi.n	800704c <__ssputs_r+0x8c>
 8006fd2:	2390      	movs	r3, #144	; 0x90
 8006fd4:	898a      	ldrh	r2, [r1, #12]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	421a      	tst	r2, r3
 8006fda:	d034      	beq.n	8007046 <__ssputs_r+0x86>
 8006fdc:	2503      	movs	r5, #3
 8006fde:	6909      	ldr	r1, [r1, #16]
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	1a5b      	subs	r3, r3, r1
 8006fe4:	9302      	str	r3, [sp, #8]
 8006fe6:	6963      	ldr	r3, [r4, #20]
 8006fe8:	9802      	ldr	r0, [sp, #8]
 8006fea:	435d      	muls	r5, r3
 8006fec:	0feb      	lsrs	r3, r5, #31
 8006fee:	195d      	adds	r5, r3, r5
 8006ff0:	9b01      	ldr	r3, [sp, #4]
 8006ff2:	106d      	asrs	r5, r5, #1
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	181b      	adds	r3, r3, r0
 8006ff8:	42ab      	cmp	r3, r5
 8006ffa:	d900      	bls.n	8006ffe <__ssputs_r+0x3e>
 8006ffc:	001d      	movs	r5, r3
 8006ffe:	0553      	lsls	r3, r2, #21
 8007000:	d532      	bpl.n	8007068 <__ssputs_r+0xa8>
 8007002:	0029      	movs	r1, r5
 8007004:	0038      	movs	r0, r7
 8007006:	f000 fb23 	bl	8007650 <_malloc_r>
 800700a:	1e06      	subs	r6, r0, #0
 800700c:	d109      	bne.n	8007022 <__ssputs_r+0x62>
 800700e:	230c      	movs	r3, #12
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	2340      	movs	r3, #64	; 0x40
 8007014:	2001      	movs	r0, #1
 8007016:	89a2      	ldrh	r2, [r4, #12]
 8007018:	4240      	negs	r0, r0
 800701a:	4313      	orrs	r3, r2
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	b005      	add	sp, #20
 8007020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007022:	9a02      	ldr	r2, [sp, #8]
 8007024:	6921      	ldr	r1, [r4, #16]
 8007026:	f000 faac 	bl	8007582 <memcpy>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	4a14      	ldr	r2, [pc, #80]	; (8007080 <__ssputs_r+0xc0>)
 800702e:	401a      	ands	r2, r3
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	4313      	orrs	r3, r2
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	9b02      	ldr	r3, [sp, #8]
 8007038:	6126      	str	r6, [r4, #16]
 800703a:	18f6      	adds	r6, r6, r3
 800703c:	6026      	str	r6, [r4, #0]
 800703e:	6165      	str	r5, [r4, #20]
 8007040:	9e01      	ldr	r6, [sp, #4]
 8007042:	1aed      	subs	r5, r5, r3
 8007044:	60a5      	str	r5, [r4, #8]
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	429e      	cmp	r6, r3
 800704a:	d900      	bls.n	800704e <__ssputs_r+0x8e>
 800704c:	9e01      	ldr	r6, [sp, #4]
 800704e:	0032      	movs	r2, r6
 8007050:	9903      	ldr	r1, [sp, #12]
 8007052:	6820      	ldr	r0, [r4, #0]
 8007054:	f000 fa9e 	bl	8007594 <memmove>
 8007058:	68a3      	ldr	r3, [r4, #8]
 800705a:	2000      	movs	r0, #0
 800705c:	1b9b      	subs	r3, r3, r6
 800705e:	60a3      	str	r3, [r4, #8]
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	199e      	adds	r6, r3, r6
 8007064:	6026      	str	r6, [r4, #0]
 8007066:	e7da      	b.n	800701e <__ssputs_r+0x5e>
 8007068:	002a      	movs	r2, r5
 800706a:	0038      	movs	r0, r7
 800706c:	f000 fb4e 	bl	800770c <_realloc_r>
 8007070:	1e06      	subs	r6, r0, #0
 8007072:	d1e0      	bne.n	8007036 <__ssputs_r+0x76>
 8007074:	6921      	ldr	r1, [r4, #16]
 8007076:	0038      	movs	r0, r7
 8007078:	f000 faa0 	bl	80075bc <_free_r>
 800707c:	e7c7      	b.n	800700e <__ssputs_r+0x4e>
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	fffffb7f 	.word	0xfffffb7f

08007084 <_svfiprintf_r>:
 8007084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007086:	b0a1      	sub	sp, #132	; 0x84
 8007088:	9003      	str	r0, [sp, #12]
 800708a:	001d      	movs	r5, r3
 800708c:	898b      	ldrh	r3, [r1, #12]
 800708e:	000f      	movs	r7, r1
 8007090:	0016      	movs	r6, r2
 8007092:	061b      	lsls	r3, r3, #24
 8007094:	d511      	bpl.n	80070ba <_svfiprintf_r+0x36>
 8007096:	690b      	ldr	r3, [r1, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10e      	bne.n	80070ba <_svfiprintf_r+0x36>
 800709c:	2140      	movs	r1, #64	; 0x40
 800709e:	f000 fad7 	bl	8007650 <_malloc_r>
 80070a2:	6038      	str	r0, [r7, #0]
 80070a4:	6138      	str	r0, [r7, #16]
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d105      	bne.n	80070b6 <_svfiprintf_r+0x32>
 80070aa:	230c      	movs	r3, #12
 80070ac:	9a03      	ldr	r2, [sp, #12]
 80070ae:	3801      	subs	r0, #1
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	b021      	add	sp, #132	; 0x84
 80070b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b6:	2340      	movs	r3, #64	; 0x40
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	2300      	movs	r3, #0
 80070bc:	ac08      	add	r4, sp, #32
 80070be:	6163      	str	r3, [r4, #20]
 80070c0:	3320      	adds	r3, #32
 80070c2:	7663      	strb	r3, [r4, #25]
 80070c4:	3310      	adds	r3, #16
 80070c6:	76a3      	strb	r3, [r4, #26]
 80070c8:	9507      	str	r5, [sp, #28]
 80070ca:	0035      	movs	r5, r6
 80070cc:	782b      	ldrb	r3, [r5, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <_svfiprintf_r+0x52>
 80070d2:	2b25      	cmp	r3, #37	; 0x25
 80070d4:	d146      	bne.n	8007164 <_svfiprintf_r+0xe0>
 80070d6:	1bab      	subs	r3, r5, r6
 80070d8:	9305      	str	r3, [sp, #20]
 80070da:	d00c      	beq.n	80070f6 <_svfiprintf_r+0x72>
 80070dc:	0032      	movs	r2, r6
 80070de:	0039      	movs	r1, r7
 80070e0:	9803      	ldr	r0, [sp, #12]
 80070e2:	f7ff ff6d 	bl	8006fc0 <__ssputs_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d100      	bne.n	80070ec <_svfiprintf_r+0x68>
 80070ea:	e0ae      	b.n	800724a <_svfiprintf_r+0x1c6>
 80070ec:	6962      	ldr	r2, [r4, #20]
 80070ee:	9b05      	ldr	r3, [sp, #20]
 80070f0:	4694      	mov	ip, r2
 80070f2:	4463      	add	r3, ip
 80070f4:	6163      	str	r3, [r4, #20]
 80070f6:	782b      	ldrb	r3, [r5, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d100      	bne.n	80070fe <_svfiprintf_r+0x7a>
 80070fc:	e0a5      	b.n	800724a <_svfiprintf_r+0x1c6>
 80070fe:	2201      	movs	r2, #1
 8007100:	2300      	movs	r3, #0
 8007102:	4252      	negs	r2, r2
 8007104:	6062      	str	r2, [r4, #4]
 8007106:	a904      	add	r1, sp, #16
 8007108:	3254      	adds	r2, #84	; 0x54
 800710a:	1852      	adds	r2, r2, r1
 800710c:	1c6e      	adds	r6, r5, #1
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	60e3      	str	r3, [r4, #12]
 8007112:	60a3      	str	r3, [r4, #8]
 8007114:	7013      	strb	r3, [r2, #0]
 8007116:	65a3      	str	r3, [r4, #88]	; 0x58
 8007118:	7831      	ldrb	r1, [r6, #0]
 800711a:	2205      	movs	r2, #5
 800711c:	4853      	ldr	r0, [pc, #332]	; (800726c <_svfiprintf_r+0x1e8>)
 800711e:	f000 fa25 	bl	800756c <memchr>
 8007122:	1c75      	adds	r5, r6, #1
 8007124:	2800      	cmp	r0, #0
 8007126:	d11f      	bne.n	8007168 <_svfiprintf_r+0xe4>
 8007128:	6822      	ldr	r2, [r4, #0]
 800712a:	06d3      	lsls	r3, r2, #27
 800712c:	d504      	bpl.n	8007138 <_svfiprintf_r+0xb4>
 800712e:	2353      	movs	r3, #83	; 0x53
 8007130:	a904      	add	r1, sp, #16
 8007132:	185b      	adds	r3, r3, r1
 8007134:	2120      	movs	r1, #32
 8007136:	7019      	strb	r1, [r3, #0]
 8007138:	0713      	lsls	r3, r2, #28
 800713a:	d504      	bpl.n	8007146 <_svfiprintf_r+0xc2>
 800713c:	2353      	movs	r3, #83	; 0x53
 800713e:	a904      	add	r1, sp, #16
 8007140:	185b      	adds	r3, r3, r1
 8007142:	212b      	movs	r1, #43	; 0x2b
 8007144:	7019      	strb	r1, [r3, #0]
 8007146:	7833      	ldrb	r3, [r6, #0]
 8007148:	2b2a      	cmp	r3, #42	; 0x2a
 800714a:	d016      	beq.n	800717a <_svfiprintf_r+0xf6>
 800714c:	0035      	movs	r5, r6
 800714e:	2100      	movs	r1, #0
 8007150:	200a      	movs	r0, #10
 8007152:	68e3      	ldr	r3, [r4, #12]
 8007154:	782a      	ldrb	r2, [r5, #0]
 8007156:	1c6e      	adds	r6, r5, #1
 8007158:	3a30      	subs	r2, #48	; 0x30
 800715a:	2a09      	cmp	r2, #9
 800715c:	d94e      	bls.n	80071fc <_svfiprintf_r+0x178>
 800715e:	2900      	cmp	r1, #0
 8007160:	d018      	beq.n	8007194 <_svfiprintf_r+0x110>
 8007162:	e010      	b.n	8007186 <_svfiprintf_r+0x102>
 8007164:	3501      	adds	r5, #1
 8007166:	e7b1      	b.n	80070cc <_svfiprintf_r+0x48>
 8007168:	4b40      	ldr	r3, [pc, #256]	; (800726c <_svfiprintf_r+0x1e8>)
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	1ac0      	subs	r0, r0, r3
 800716e:	2301      	movs	r3, #1
 8007170:	4083      	lsls	r3, r0
 8007172:	4313      	orrs	r3, r2
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	002e      	movs	r6, r5
 8007178:	e7ce      	b.n	8007118 <_svfiprintf_r+0x94>
 800717a:	9b07      	ldr	r3, [sp, #28]
 800717c:	1d19      	adds	r1, r3, #4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	9107      	str	r1, [sp, #28]
 8007182:	2b00      	cmp	r3, #0
 8007184:	db01      	blt.n	800718a <_svfiprintf_r+0x106>
 8007186:	930b      	str	r3, [sp, #44]	; 0x2c
 8007188:	e004      	b.n	8007194 <_svfiprintf_r+0x110>
 800718a:	425b      	negs	r3, r3
 800718c:	60e3      	str	r3, [r4, #12]
 800718e:	2302      	movs	r3, #2
 8007190:	4313      	orrs	r3, r2
 8007192:	6023      	str	r3, [r4, #0]
 8007194:	782b      	ldrb	r3, [r5, #0]
 8007196:	2b2e      	cmp	r3, #46	; 0x2e
 8007198:	d10a      	bne.n	80071b0 <_svfiprintf_r+0x12c>
 800719a:	786b      	ldrb	r3, [r5, #1]
 800719c:	2b2a      	cmp	r3, #42	; 0x2a
 800719e:	d135      	bne.n	800720c <_svfiprintf_r+0x188>
 80071a0:	9b07      	ldr	r3, [sp, #28]
 80071a2:	3502      	adds	r5, #2
 80071a4:	1d1a      	adds	r2, r3, #4
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	9207      	str	r2, [sp, #28]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	db2b      	blt.n	8007206 <_svfiprintf_r+0x182>
 80071ae:	9309      	str	r3, [sp, #36]	; 0x24
 80071b0:	4e2f      	ldr	r6, [pc, #188]	; (8007270 <_svfiprintf_r+0x1ec>)
 80071b2:	7829      	ldrb	r1, [r5, #0]
 80071b4:	2203      	movs	r2, #3
 80071b6:	0030      	movs	r0, r6
 80071b8:	f000 f9d8 	bl	800756c <memchr>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d006      	beq.n	80071ce <_svfiprintf_r+0x14a>
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	1b80      	subs	r0, r0, r6
 80071c4:	4083      	lsls	r3, r0
 80071c6:	6822      	ldr	r2, [r4, #0]
 80071c8:	3501      	adds	r5, #1
 80071ca:	4313      	orrs	r3, r2
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	7829      	ldrb	r1, [r5, #0]
 80071d0:	2206      	movs	r2, #6
 80071d2:	4828      	ldr	r0, [pc, #160]	; (8007274 <_svfiprintf_r+0x1f0>)
 80071d4:	1c6e      	adds	r6, r5, #1
 80071d6:	7621      	strb	r1, [r4, #24]
 80071d8:	f000 f9c8 	bl	800756c <memchr>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d03c      	beq.n	800725a <_svfiprintf_r+0x1d6>
 80071e0:	4b25      	ldr	r3, [pc, #148]	; (8007278 <_svfiprintf_r+0x1f4>)
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d125      	bne.n	8007232 <_svfiprintf_r+0x1ae>
 80071e6:	2207      	movs	r2, #7
 80071e8:	9b07      	ldr	r3, [sp, #28]
 80071ea:	3307      	adds	r3, #7
 80071ec:	4393      	bics	r3, r2
 80071ee:	3308      	adds	r3, #8
 80071f0:	9307      	str	r3, [sp, #28]
 80071f2:	6963      	ldr	r3, [r4, #20]
 80071f4:	9a04      	ldr	r2, [sp, #16]
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	6163      	str	r3, [r4, #20]
 80071fa:	e766      	b.n	80070ca <_svfiprintf_r+0x46>
 80071fc:	4343      	muls	r3, r0
 80071fe:	2101      	movs	r1, #1
 8007200:	189b      	adds	r3, r3, r2
 8007202:	0035      	movs	r5, r6
 8007204:	e7a6      	b.n	8007154 <_svfiprintf_r+0xd0>
 8007206:	2301      	movs	r3, #1
 8007208:	425b      	negs	r3, r3
 800720a:	e7d0      	b.n	80071ae <_svfiprintf_r+0x12a>
 800720c:	2300      	movs	r3, #0
 800720e:	200a      	movs	r0, #10
 8007210:	001a      	movs	r2, r3
 8007212:	3501      	adds	r5, #1
 8007214:	6063      	str	r3, [r4, #4]
 8007216:	7829      	ldrb	r1, [r5, #0]
 8007218:	1c6e      	adds	r6, r5, #1
 800721a:	3930      	subs	r1, #48	; 0x30
 800721c:	2909      	cmp	r1, #9
 800721e:	d903      	bls.n	8007228 <_svfiprintf_r+0x1a4>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0c5      	beq.n	80071b0 <_svfiprintf_r+0x12c>
 8007224:	9209      	str	r2, [sp, #36]	; 0x24
 8007226:	e7c3      	b.n	80071b0 <_svfiprintf_r+0x12c>
 8007228:	4342      	muls	r2, r0
 800722a:	2301      	movs	r3, #1
 800722c:	1852      	adds	r2, r2, r1
 800722e:	0035      	movs	r5, r6
 8007230:	e7f1      	b.n	8007216 <_svfiprintf_r+0x192>
 8007232:	ab07      	add	r3, sp, #28
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	003a      	movs	r2, r7
 8007238:	4b10      	ldr	r3, [pc, #64]	; (800727c <_svfiprintf_r+0x1f8>)
 800723a:	0021      	movs	r1, r4
 800723c:	9803      	ldr	r0, [sp, #12]
 800723e:	e000      	b.n	8007242 <_svfiprintf_r+0x1be>
 8007240:	bf00      	nop
 8007242:	9004      	str	r0, [sp, #16]
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	3301      	adds	r3, #1
 8007248:	d1d3      	bne.n	80071f2 <_svfiprintf_r+0x16e>
 800724a:	89bb      	ldrh	r3, [r7, #12]
 800724c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800724e:	065b      	lsls	r3, r3, #25
 8007250:	d400      	bmi.n	8007254 <_svfiprintf_r+0x1d0>
 8007252:	e72e      	b.n	80070b2 <_svfiprintf_r+0x2e>
 8007254:	2001      	movs	r0, #1
 8007256:	4240      	negs	r0, r0
 8007258:	e72b      	b.n	80070b2 <_svfiprintf_r+0x2e>
 800725a:	ab07      	add	r3, sp, #28
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	003a      	movs	r2, r7
 8007260:	4b06      	ldr	r3, [pc, #24]	; (800727c <_svfiprintf_r+0x1f8>)
 8007262:	0021      	movs	r1, r4
 8007264:	9803      	ldr	r0, [sp, #12]
 8007266:	f000 f879 	bl	800735c <_printf_i>
 800726a:	e7ea      	b.n	8007242 <_svfiprintf_r+0x1be>
 800726c:	08008a98 	.word	0x08008a98
 8007270:	08008a9e 	.word	0x08008a9e
 8007274:	08008aa2 	.word	0x08008aa2
 8007278:	00000000 	.word	0x00000000
 800727c:	08006fc1 	.word	0x08006fc1

08007280 <_printf_common>:
 8007280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007282:	0015      	movs	r5, r2
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	688a      	ldr	r2, [r1, #8]
 8007288:	690b      	ldr	r3, [r1, #16]
 800728a:	9000      	str	r0, [sp, #0]
 800728c:	000c      	movs	r4, r1
 800728e:	4293      	cmp	r3, r2
 8007290:	da00      	bge.n	8007294 <_printf_common+0x14>
 8007292:	0013      	movs	r3, r2
 8007294:	0022      	movs	r2, r4
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	3243      	adds	r2, #67	; 0x43
 800729a:	7812      	ldrb	r2, [r2, #0]
 800729c:	2a00      	cmp	r2, #0
 800729e:	d001      	beq.n	80072a4 <_printf_common+0x24>
 80072a0:	3301      	adds	r3, #1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	069b      	lsls	r3, r3, #26
 80072a8:	d502      	bpl.n	80072b0 <_printf_common+0x30>
 80072aa:	682b      	ldr	r3, [r5, #0]
 80072ac:	3302      	adds	r3, #2
 80072ae:	602b      	str	r3, [r5, #0]
 80072b0:	2706      	movs	r7, #6
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	401f      	ands	r7, r3
 80072b6:	d027      	beq.n	8007308 <_printf_common+0x88>
 80072b8:	0023      	movs	r3, r4
 80072ba:	3343      	adds	r3, #67	; 0x43
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	1e5a      	subs	r2, r3, #1
 80072c0:	4193      	sbcs	r3, r2
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	0692      	lsls	r2, r2, #26
 80072c6:	d430      	bmi.n	800732a <_printf_common+0xaa>
 80072c8:	0022      	movs	r2, r4
 80072ca:	9901      	ldr	r1, [sp, #4]
 80072cc:	3243      	adds	r2, #67	; 0x43
 80072ce:	9800      	ldr	r0, [sp, #0]
 80072d0:	9e08      	ldr	r6, [sp, #32]
 80072d2:	47b0      	blx	r6
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d025      	beq.n	8007324 <_printf_common+0xa4>
 80072d8:	2306      	movs	r3, #6
 80072da:	6820      	ldr	r0, [r4, #0]
 80072dc:	682a      	ldr	r2, [r5, #0]
 80072de:	68e1      	ldr	r1, [r4, #12]
 80072e0:	4003      	ands	r3, r0
 80072e2:	2500      	movs	r5, #0
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d103      	bne.n	80072f0 <_printf_common+0x70>
 80072e8:	1a8d      	subs	r5, r1, r2
 80072ea:	43eb      	mvns	r3, r5
 80072ec:	17db      	asrs	r3, r3, #31
 80072ee:	401d      	ands	r5, r3
 80072f0:	68a3      	ldr	r3, [r4, #8]
 80072f2:	6922      	ldr	r2, [r4, #16]
 80072f4:	4293      	cmp	r3, r2
 80072f6:	dd01      	ble.n	80072fc <_printf_common+0x7c>
 80072f8:	1a9b      	subs	r3, r3, r2
 80072fa:	18ed      	adds	r5, r5, r3
 80072fc:	2700      	movs	r7, #0
 80072fe:	42bd      	cmp	r5, r7
 8007300:	d120      	bne.n	8007344 <_printf_common+0xc4>
 8007302:	2000      	movs	r0, #0
 8007304:	e010      	b.n	8007328 <_printf_common+0xa8>
 8007306:	3701      	adds	r7, #1
 8007308:	68e3      	ldr	r3, [r4, #12]
 800730a:	682a      	ldr	r2, [r5, #0]
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	42bb      	cmp	r3, r7
 8007310:	ddd2      	ble.n	80072b8 <_printf_common+0x38>
 8007312:	0022      	movs	r2, r4
 8007314:	2301      	movs	r3, #1
 8007316:	3219      	adds	r2, #25
 8007318:	9901      	ldr	r1, [sp, #4]
 800731a:	9800      	ldr	r0, [sp, #0]
 800731c:	9e08      	ldr	r6, [sp, #32]
 800731e:	47b0      	blx	r6
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d1f0      	bne.n	8007306 <_printf_common+0x86>
 8007324:	2001      	movs	r0, #1
 8007326:	4240      	negs	r0, r0
 8007328:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800732a:	2030      	movs	r0, #48	; 0x30
 800732c:	18e1      	adds	r1, r4, r3
 800732e:	3143      	adds	r1, #67	; 0x43
 8007330:	7008      	strb	r0, [r1, #0]
 8007332:	0021      	movs	r1, r4
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	3145      	adds	r1, #69	; 0x45
 8007338:	7809      	ldrb	r1, [r1, #0]
 800733a:	18a2      	adds	r2, r4, r2
 800733c:	3243      	adds	r2, #67	; 0x43
 800733e:	3302      	adds	r3, #2
 8007340:	7011      	strb	r1, [r2, #0]
 8007342:	e7c1      	b.n	80072c8 <_printf_common+0x48>
 8007344:	0022      	movs	r2, r4
 8007346:	2301      	movs	r3, #1
 8007348:	321a      	adds	r2, #26
 800734a:	9901      	ldr	r1, [sp, #4]
 800734c:	9800      	ldr	r0, [sp, #0]
 800734e:	9e08      	ldr	r6, [sp, #32]
 8007350:	47b0      	blx	r6
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	d0e6      	beq.n	8007324 <_printf_common+0xa4>
 8007356:	3701      	adds	r7, #1
 8007358:	e7d1      	b.n	80072fe <_printf_common+0x7e>
	...

0800735c <_printf_i>:
 800735c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800735e:	b089      	sub	sp, #36	; 0x24
 8007360:	9204      	str	r2, [sp, #16]
 8007362:	000a      	movs	r2, r1
 8007364:	3243      	adds	r2, #67	; 0x43
 8007366:	9305      	str	r3, [sp, #20]
 8007368:	9003      	str	r0, [sp, #12]
 800736a:	9202      	str	r2, [sp, #8]
 800736c:	7e0a      	ldrb	r2, [r1, #24]
 800736e:	000c      	movs	r4, r1
 8007370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007372:	2a6e      	cmp	r2, #110	; 0x6e
 8007374:	d100      	bne.n	8007378 <_printf_i+0x1c>
 8007376:	e086      	b.n	8007486 <_printf_i+0x12a>
 8007378:	d81f      	bhi.n	80073ba <_printf_i+0x5e>
 800737a:	2a63      	cmp	r2, #99	; 0x63
 800737c:	d033      	beq.n	80073e6 <_printf_i+0x8a>
 800737e:	d808      	bhi.n	8007392 <_printf_i+0x36>
 8007380:	2a00      	cmp	r2, #0
 8007382:	d100      	bne.n	8007386 <_printf_i+0x2a>
 8007384:	e08c      	b.n	80074a0 <_printf_i+0x144>
 8007386:	2a58      	cmp	r2, #88	; 0x58
 8007388:	d04d      	beq.n	8007426 <_printf_i+0xca>
 800738a:	0025      	movs	r5, r4
 800738c:	3542      	adds	r5, #66	; 0x42
 800738e:	702a      	strb	r2, [r5, #0]
 8007390:	e030      	b.n	80073f4 <_printf_i+0x98>
 8007392:	2a64      	cmp	r2, #100	; 0x64
 8007394:	d001      	beq.n	800739a <_printf_i+0x3e>
 8007396:	2a69      	cmp	r2, #105	; 0x69
 8007398:	d1f7      	bne.n	800738a <_printf_i+0x2e>
 800739a:	6819      	ldr	r1, [r3, #0]
 800739c:	6825      	ldr	r5, [r4, #0]
 800739e:	1d0a      	adds	r2, r1, #4
 80073a0:	0628      	lsls	r0, r5, #24
 80073a2:	d529      	bpl.n	80073f8 <_printf_i+0x9c>
 80073a4:	6808      	ldr	r0, [r1, #0]
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	2800      	cmp	r0, #0
 80073aa:	da03      	bge.n	80073b4 <_printf_i+0x58>
 80073ac:	232d      	movs	r3, #45	; 0x2d
 80073ae:	9a02      	ldr	r2, [sp, #8]
 80073b0:	4240      	negs	r0, r0
 80073b2:	7013      	strb	r3, [r2, #0]
 80073b4:	4e6b      	ldr	r6, [pc, #428]	; (8007564 <_printf_i+0x208>)
 80073b6:	270a      	movs	r7, #10
 80073b8:	e04f      	b.n	800745a <_printf_i+0xfe>
 80073ba:	2a73      	cmp	r2, #115	; 0x73
 80073bc:	d074      	beq.n	80074a8 <_printf_i+0x14c>
 80073be:	d808      	bhi.n	80073d2 <_printf_i+0x76>
 80073c0:	2a6f      	cmp	r2, #111	; 0x6f
 80073c2:	d01f      	beq.n	8007404 <_printf_i+0xa8>
 80073c4:	2a70      	cmp	r2, #112	; 0x70
 80073c6:	d1e0      	bne.n	800738a <_printf_i+0x2e>
 80073c8:	2220      	movs	r2, #32
 80073ca:	6809      	ldr	r1, [r1, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	6022      	str	r2, [r4, #0]
 80073d0:	e003      	b.n	80073da <_printf_i+0x7e>
 80073d2:	2a75      	cmp	r2, #117	; 0x75
 80073d4:	d016      	beq.n	8007404 <_printf_i+0xa8>
 80073d6:	2a78      	cmp	r2, #120	; 0x78
 80073d8:	d1d7      	bne.n	800738a <_printf_i+0x2e>
 80073da:	0022      	movs	r2, r4
 80073dc:	2178      	movs	r1, #120	; 0x78
 80073de:	3245      	adds	r2, #69	; 0x45
 80073e0:	7011      	strb	r1, [r2, #0]
 80073e2:	4e61      	ldr	r6, [pc, #388]	; (8007568 <_printf_i+0x20c>)
 80073e4:	e022      	b.n	800742c <_printf_i+0xd0>
 80073e6:	0025      	movs	r5, r4
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	3542      	adds	r5, #66	; 0x42
 80073ec:	1d11      	adds	r1, r2, #4
 80073ee:	6019      	str	r1, [r3, #0]
 80073f0:	6813      	ldr	r3, [r2, #0]
 80073f2:	702b      	strb	r3, [r5, #0]
 80073f4:	2301      	movs	r3, #1
 80073f6:	e065      	b.n	80074c4 <_printf_i+0x168>
 80073f8:	6808      	ldr	r0, [r1, #0]
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	0669      	lsls	r1, r5, #25
 80073fe:	d5d3      	bpl.n	80073a8 <_printf_i+0x4c>
 8007400:	b200      	sxth	r0, r0
 8007402:	e7d1      	b.n	80073a8 <_printf_i+0x4c>
 8007404:	6819      	ldr	r1, [r3, #0]
 8007406:	6825      	ldr	r5, [r4, #0]
 8007408:	1d08      	adds	r0, r1, #4
 800740a:	6018      	str	r0, [r3, #0]
 800740c:	6808      	ldr	r0, [r1, #0]
 800740e:	062e      	lsls	r6, r5, #24
 8007410:	d505      	bpl.n	800741e <_printf_i+0xc2>
 8007412:	4e54      	ldr	r6, [pc, #336]	; (8007564 <_printf_i+0x208>)
 8007414:	2708      	movs	r7, #8
 8007416:	2a6f      	cmp	r2, #111	; 0x6f
 8007418:	d01b      	beq.n	8007452 <_printf_i+0xf6>
 800741a:	270a      	movs	r7, #10
 800741c:	e019      	b.n	8007452 <_printf_i+0xf6>
 800741e:	066d      	lsls	r5, r5, #25
 8007420:	d5f7      	bpl.n	8007412 <_printf_i+0xb6>
 8007422:	b280      	uxth	r0, r0
 8007424:	e7f5      	b.n	8007412 <_printf_i+0xb6>
 8007426:	3145      	adds	r1, #69	; 0x45
 8007428:	4e4e      	ldr	r6, [pc, #312]	; (8007564 <_printf_i+0x208>)
 800742a:	700a      	strb	r2, [r1, #0]
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	6822      	ldr	r2, [r4, #0]
 8007430:	1d01      	adds	r1, r0, #4
 8007432:	6800      	ldr	r0, [r0, #0]
 8007434:	6019      	str	r1, [r3, #0]
 8007436:	0615      	lsls	r5, r2, #24
 8007438:	d521      	bpl.n	800747e <_printf_i+0x122>
 800743a:	07d3      	lsls	r3, r2, #31
 800743c:	d502      	bpl.n	8007444 <_printf_i+0xe8>
 800743e:	2320      	movs	r3, #32
 8007440:	431a      	orrs	r2, r3
 8007442:	6022      	str	r2, [r4, #0]
 8007444:	2710      	movs	r7, #16
 8007446:	2800      	cmp	r0, #0
 8007448:	d103      	bne.n	8007452 <_printf_i+0xf6>
 800744a:	2320      	movs	r3, #32
 800744c:	6822      	ldr	r2, [r4, #0]
 800744e:	439a      	bics	r2, r3
 8007450:	6022      	str	r2, [r4, #0]
 8007452:	0023      	movs	r3, r4
 8007454:	2200      	movs	r2, #0
 8007456:	3343      	adds	r3, #67	; 0x43
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	6863      	ldr	r3, [r4, #4]
 800745c:	60a3      	str	r3, [r4, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	db58      	blt.n	8007514 <_printf_i+0x1b8>
 8007462:	2204      	movs	r2, #4
 8007464:	6821      	ldr	r1, [r4, #0]
 8007466:	4391      	bics	r1, r2
 8007468:	6021      	str	r1, [r4, #0]
 800746a:	2800      	cmp	r0, #0
 800746c:	d154      	bne.n	8007518 <_printf_i+0x1bc>
 800746e:	9d02      	ldr	r5, [sp, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d05a      	beq.n	800752a <_printf_i+0x1ce>
 8007474:	0025      	movs	r5, r4
 8007476:	7833      	ldrb	r3, [r6, #0]
 8007478:	3542      	adds	r5, #66	; 0x42
 800747a:	702b      	strb	r3, [r5, #0]
 800747c:	e055      	b.n	800752a <_printf_i+0x1ce>
 800747e:	0655      	lsls	r5, r2, #25
 8007480:	d5db      	bpl.n	800743a <_printf_i+0xde>
 8007482:	b280      	uxth	r0, r0
 8007484:	e7d9      	b.n	800743a <_printf_i+0xde>
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	680d      	ldr	r5, [r1, #0]
 800748a:	1d10      	adds	r0, r2, #4
 800748c:	6949      	ldr	r1, [r1, #20]
 800748e:	6018      	str	r0, [r3, #0]
 8007490:	6813      	ldr	r3, [r2, #0]
 8007492:	062e      	lsls	r6, r5, #24
 8007494:	d501      	bpl.n	800749a <_printf_i+0x13e>
 8007496:	6019      	str	r1, [r3, #0]
 8007498:	e002      	b.n	80074a0 <_printf_i+0x144>
 800749a:	066d      	lsls	r5, r5, #25
 800749c:	d5fb      	bpl.n	8007496 <_printf_i+0x13a>
 800749e:	8019      	strh	r1, [r3, #0]
 80074a0:	2300      	movs	r3, #0
 80074a2:	9d02      	ldr	r5, [sp, #8]
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	e04f      	b.n	8007548 <_printf_i+0x1ec>
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	1d11      	adds	r1, r2, #4
 80074ac:	6019      	str	r1, [r3, #0]
 80074ae:	6815      	ldr	r5, [r2, #0]
 80074b0:	2100      	movs	r1, #0
 80074b2:	6862      	ldr	r2, [r4, #4]
 80074b4:	0028      	movs	r0, r5
 80074b6:	f000 f859 	bl	800756c <memchr>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d001      	beq.n	80074c2 <_printf_i+0x166>
 80074be:	1b40      	subs	r0, r0, r5
 80074c0:	6060      	str	r0, [r4, #4]
 80074c2:	6863      	ldr	r3, [r4, #4]
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	2300      	movs	r3, #0
 80074c8:	9a02      	ldr	r2, [sp, #8]
 80074ca:	7013      	strb	r3, [r2, #0]
 80074cc:	e03c      	b.n	8007548 <_printf_i+0x1ec>
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	002a      	movs	r2, r5
 80074d2:	9904      	ldr	r1, [sp, #16]
 80074d4:	9803      	ldr	r0, [sp, #12]
 80074d6:	9d05      	ldr	r5, [sp, #20]
 80074d8:	47a8      	blx	r5
 80074da:	1c43      	adds	r3, r0, #1
 80074dc:	d03e      	beq.n	800755c <_printf_i+0x200>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	079b      	lsls	r3, r3, #30
 80074e2:	d415      	bmi.n	8007510 <_printf_i+0x1b4>
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	68e0      	ldr	r0, [r4, #12]
 80074e8:	4298      	cmp	r0, r3
 80074ea:	da39      	bge.n	8007560 <_printf_i+0x204>
 80074ec:	0018      	movs	r0, r3
 80074ee:	e037      	b.n	8007560 <_printf_i+0x204>
 80074f0:	0022      	movs	r2, r4
 80074f2:	2301      	movs	r3, #1
 80074f4:	3219      	adds	r2, #25
 80074f6:	9904      	ldr	r1, [sp, #16]
 80074f8:	9803      	ldr	r0, [sp, #12]
 80074fa:	9e05      	ldr	r6, [sp, #20]
 80074fc:	47b0      	blx	r6
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d02c      	beq.n	800755c <_printf_i+0x200>
 8007502:	3501      	adds	r5, #1
 8007504:	68e3      	ldr	r3, [r4, #12]
 8007506:	9a07      	ldr	r2, [sp, #28]
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	42ab      	cmp	r3, r5
 800750c:	dcf0      	bgt.n	80074f0 <_printf_i+0x194>
 800750e:	e7e9      	b.n	80074e4 <_printf_i+0x188>
 8007510:	2500      	movs	r5, #0
 8007512:	e7f7      	b.n	8007504 <_printf_i+0x1a8>
 8007514:	2800      	cmp	r0, #0
 8007516:	d0ad      	beq.n	8007474 <_printf_i+0x118>
 8007518:	9d02      	ldr	r5, [sp, #8]
 800751a:	0039      	movs	r1, r7
 800751c:	f7f8 fe82 	bl	8000224 <__aeabi_uidivmod>
 8007520:	5c73      	ldrb	r3, [r6, r1]
 8007522:	3d01      	subs	r5, #1
 8007524:	702b      	strb	r3, [r5, #0]
 8007526:	2800      	cmp	r0, #0
 8007528:	d1f7      	bne.n	800751a <_printf_i+0x1be>
 800752a:	2f08      	cmp	r7, #8
 800752c:	d109      	bne.n	8007542 <_printf_i+0x1e6>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	07db      	lsls	r3, r3, #31
 8007532:	d506      	bpl.n	8007542 <_printf_i+0x1e6>
 8007534:	6863      	ldr	r3, [r4, #4]
 8007536:	6922      	ldr	r2, [r4, #16]
 8007538:	4293      	cmp	r3, r2
 800753a:	dc02      	bgt.n	8007542 <_printf_i+0x1e6>
 800753c:	2330      	movs	r3, #48	; 0x30
 800753e:	3d01      	subs	r5, #1
 8007540:	702b      	strb	r3, [r5, #0]
 8007542:	9b02      	ldr	r3, [sp, #8]
 8007544:	1b5b      	subs	r3, r3, r5
 8007546:	6123      	str	r3, [r4, #16]
 8007548:	9b05      	ldr	r3, [sp, #20]
 800754a:	aa07      	add	r2, sp, #28
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	0021      	movs	r1, r4
 8007550:	9b04      	ldr	r3, [sp, #16]
 8007552:	9803      	ldr	r0, [sp, #12]
 8007554:	f7ff fe94 	bl	8007280 <_printf_common>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d1b8      	bne.n	80074ce <_printf_i+0x172>
 800755c:	2001      	movs	r0, #1
 800755e:	4240      	negs	r0, r0
 8007560:	b009      	add	sp, #36	; 0x24
 8007562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007564:	08008aa9 	.word	0x08008aa9
 8007568:	08008aba 	.word	0x08008aba

0800756c <memchr>:
 800756c:	b2c9      	uxtb	r1, r1
 800756e:	1882      	adds	r2, r0, r2
 8007570:	4290      	cmp	r0, r2
 8007572:	d101      	bne.n	8007578 <memchr+0xc>
 8007574:	2000      	movs	r0, #0
 8007576:	4770      	bx	lr
 8007578:	7803      	ldrb	r3, [r0, #0]
 800757a:	428b      	cmp	r3, r1
 800757c:	d0fb      	beq.n	8007576 <memchr+0xa>
 800757e:	3001      	adds	r0, #1
 8007580:	e7f6      	b.n	8007570 <memchr+0x4>

08007582 <memcpy>:
 8007582:	2300      	movs	r3, #0
 8007584:	b510      	push	{r4, lr}
 8007586:	429a      	cmp	r2, r3
 8007588:	d100      	bne.n	800758c <memcpy+0xa>
 800758a:	bd10      	pop	{r4, pc}
 800758c:	5ccc      	ldrb	r4, [r1, r3]
 800758e:	54c4      	strb	r4, [r0, r3]
 8007590:	3301      	adds	r3, #1
 8007592:	e7f8      	b.n	8007586 <memcpy+0x4>

08007594 <memmove>:
 8007594:	b510      	push	{r4, lr}
 8007596:	4288      	cmp	r0, r1
 8007598:	d902      	bls.n	80075a0 <memmove+0xc>
 800759a:	188b      	adds	r3, r1, r2
 800759c:	4298      	cmp	r0, r3
 800759e:	d303      	bcc.n	80075a8 <memmove+0x14>
 80075a0:	2300      	movs	r3, #0
 80075a2:	e007      	b.n	80075b4 <memmove+0x20>
 80075a4:	5c8b      	ldrb	r3, [r1, r2]
 80075a6:	5483      	strb	r3, [r0, r2]
 80075a8:	3a01      	subs	r2, #1
 80075aa:	d2fb      	bcs.n	80075a4 <memmove+0x10>
 80075ac:	bd10      	pop	{r4, pc}
 80075ae:	5ccc      	ldrb	r4, [r1, r3]
 80075b0:	54c4      	strb	r4, [r0, r3]
 80075b2:	3301      	adds	r3, #1
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d1fa      	bne.n	80075ae <memmove+0x1a>
 80075b8:	e7f8      	b.n	80075ac <memmove+0x18>
	...

080075bc <_free_r>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	0005      	movs	r5, r0
 80075c0:	2900      	cmp	r1, #0
 80075c2:	d010      	beq.n	80075e6 <_free_r+0x2a>
 80075c4:	1f0c      	subs	r4, r1, #4
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	da00      	bge.n	80075ce <_free_r+0x12>
 80075cc:	18e4      	adds	r4, r4, r3
 80075ce:	0028      	movs	r0, r5
 80075d0:	f000 f8d4 	bl	800777c <__malloc_lock>
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <_free_r+0x90>)
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d105      	bne.n	80075e8 <_free_r+0x2c>
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	6014      	str	r4, [r2, #0]
 80075e0:	0028      	movs	r0, r5
 80075e2:	f000 f8cc 	bl	800777e <__malloc_unlock>
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d909      	bls.n	8007600 <_free_r+0x44>
 80075ec:	6821      	ldr	r1, [r4, #0]
 80075ee:	1860      	adds	r0, r4, r1
 80075f0:	4283      	cmp	r3, r0
 80075f2:	d1f3      	bne.n	80075dc <_free_r+0x20>
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	1841      	adds	r1, r0, r1
 80075fa:	6021      	str	r1, [r4, #0]
 80075fc:	e7ee      	b.n	80075dc <_free_r+0x20>
 80075fe:	0013      	movs	r3, r2
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	2a00      	cmp	r2, #0
 8007604:	d001      	beq.n	800760a <_free_r+0x4e>
 8007606:	42a2      	cmp	r2, r4
 8007608:	d9f9      	bls.n	80075fe <_free_r+0x42>
 800760a:	6819      	ldr	r1, [r3, #0]
 800760c:	1858      	adds	r0, r3, r1
 800760e:	42a0      	cmp	r0, r4
 8007610:	d10b      	bne.n	800762a <_free_r+0x6e>
 8007612:	6820      	ldr	r0, [r4, #0]
 8007614:	1809      	adds	r1, r1, r0
 8007616:	1858      	adds	r0, r3, r1
 8007618:	6019      	str	r1, [r3, #0]
 800761a:	4282      	cmp	r2, r0
 800761c:	d1e0      	bne.n	80075e0 <_free_r+0x24>
 800761e:	6810      	ldr	r0, [r2, #0]
 8007620:	6852      	ldr	r2, [r2, #4]
 8007622:	1841      	adds	r1, r0, r1
 8007624:	6019      	str	r1, [r3, #0]
 8007626:	605a      	str	r2, [r3, #4]
 8007628:	e7da      	b.n	80075e0 <_free_r+0x24>
 800762a:	42a0      	cmp	r0, r4
 800762c:	d902      	bls.n	8007634 <_free_r+0x78>
 800762e:	230c      	movs	r3, #12
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	e7d5      	b.n	80075e0 <_free_r+0x24>
 8007634:	6821      	ldr	r1, [r4, #0]
 8007636:	1860      	adds	r0, r4, r1
 8007638:	4282      	cmp	r2, r0
 800763a:	d103      	bne.n	8007644 <_free_r+0x88>
 800763c:	6810      	ldr	r0, [r2, #0]
 800763e:	6852      	ldr	r2, [r2, #4]
 8007640:	1841      	adds	r1, r0, r1
 8007642:	6021      	str	r1, [r4, #0]
 8007644:	6062      	str	r2, [r4, #4]
 8007646:	605c      	str	r4, [r3, #4]
 8007648:	e7ca      	b.n	80075e0 <_free_r+0x24>
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	200000dc 	.word	0x200000dc

08007650 <_malloc_r>:
 8007650:	2303      	movs	r3, #3
 8007652:	b570      	push	{r4, r5, r6, lr}
 8007654:	1ccd      	adds	r5, r1, #3
 8007656:	439d      	bics	r5, r3
 8007658:	3508      	adds	r5, #8
 800765a:	0006      	movs	r6, r0
 800765c:	2d0c      	cmp	r5, #12
 800765e:	d21e      	bcs.n	800769e <_malloc_r+0x4e>
 8007660:	250c      	movs	r5, #12
 8007662:	42a9      	cmp	r1, r5
 8007664:	d81d      	bhi.n	80076a2 <_malloc_r+0x52>
 8007666:	0030      	movs	r0, r6
 8007668:	f000 f888 	bl	800777c <__malloc_lock>
 800766c:	4a25      	ldr	r2, [pc, #148]	; (8007704 <_malloc_r+0xb4>)
 800766e:	6814      	ldr	r4, [r2, #0]
 8007670:	0021      	movs	r1, r4
 8007672:	2900      	cmp	r1, #0
 8007674:	d119      	bne.n	80076aa <_malloc_r+0x5a>
 8007676:	4c24      	ldr	r4, [pc, #144]	; (8007708 <_malloc_r+0xb8>)
 8007678:	6823      	ldr	r3, [r4, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <_malloc_r+0x36>
 800767e:	0030      	movs	r0, r6
 8007680:	f000 f86a 	bl	8007758 <_sbrk_r>
 8007684:	6020      	str	r0, [r4, #0]
 8007686:	0029      	movs	r1, r5
 8007688:	0030      	movs	r0, r6
 800768a:	f000 f865 	bl	8007758 <_sbrk_r>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d12b      	bne.n	80076ea <_malloc_r+0x9a>
 8007692:	230c      	movs	r3, #12
 8007694:	0030      	movs	r0, r6
 8007696:	6033      	str	r3, [r6, #0]
 8007698:	f000 f871 	bl	800777e <__malloc_unlock>
 800769c:	e003      	b.n	80076a6 <_malloc_r+0x56>
 800769e:	2d00      	cmp	r5, #0
 80076a0:	dadf      	bge.n	8007662 <_malloc_r+0x12>
 80076a2:	230c      	movs	r3, #12
 80076a4:	6033      	str	r3, [r6, #0]
 80076a6:	2000      	movs	r0, #0
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	680b      	ldr	r3, [r1, #0]
 80076ac:	1b5b      	subs	r3, r3, r5
 80076ae:	d419      	bmi.n	80076e4 <_malloc_r+0x94>
 80076b0:	2b0b      	cmp	r3, #11
 80076b2:	d903      	bls.n	80076bc <_malloc_r+0x6c>
 80076b4:	600b      	str	r3, [r1, #0]
 80076b6:	18cc      	adds	r4, r1, r3
 80076b8:	6025      	str	r5, [r4, #0]
 80076ba:	e003      	b.n	80076c4 <_malloc_r+0x74>
 80076bc:	684b      	ldr	r3, [r1, #4]
 80076be:	428c      	cmp	r4, r1
 80076c0:	d10d      	bne.n	80076de <_malloc_r+0x8e>
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	0030      	movs	r0, r6
 80076c6:	f000 f85a 	bl	800777e <__malloc_unlock>
 80076ca:	0020      	movs	r0, r4
 80076cc:	2207      	movs	r2, #7
 80076ce:	300b      	adds	r0, #11
 80076d0:	1d23      	adds	r3, r4, #4
 80076d2:	4390      	bics	r0, r2
 80076d4:	1ac3      	subs	r3, r0, r3
 80076d6:	d0e7      	beq.n	80076a8 <_malloc_r+0x58>
 80076d8:	425a      	negs	r2, r3
 80076da:	50e2      	str	r2, [r4, r3]
 80076dc:	e7e4      	b.n	80076a8 <_malloc_r+0x58>
 80076de:	6063      	str	r3, [r4, #4]
 80076e0:	000c      	movs	r4, r1
 80076e2:	e7ef      	b.n	80076c4 <_malloc_r+0x74>
 80076e4:	000c      	movs	r4, r1
 80076e6:	6849      	ldr	r1, [r1, #4]
 80076e8:	e7c3      	b.n	8007672 <_malloc_r+0x22>
 80076ea:	2303      	movs	r3, #3
 80076ec:	1cc4      	adds	r4, r0, #3
 80076ee:	439c      	bics	r4, r3
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d0e1      	beq.n	80076b8 <_malloc_r+0x68>
 80076f4:	1a21      	subs	r1, r4, r0
 80076f6:	0030      	movs	r0, r6
 80076f8:	f000 f82e 	bl	8007758 <_sbrk_r>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d1db      	bne.n	80076b8 <_malloc_r+0x68>
 8007700:	e7c7      	b.n	8007692 <_malloc_r+0x42>
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	200000dc 	.word	0x200000dc
 8007708:	200000e0 	.word	0x200000e0

0800770c <_realloc_r>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	0007      	movs	r7, r0
 8007710:	000d      	movs	r5, r1
 8007712:	0016      	movs	r6, r2
 8007714:	2900      	cmp	r1, #0
 8007716:	d105      	bne.n	8007724 <_realloc_r+0x18>
 8007718:	0011      	movs	r1, r2
 800771a:	f7ff ff99 	bl	8007650 <_malloc_r>
 800771e:	0004      	movs	r4, r0
 8007720:	0020      	movs	r0, r4
 8007722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007724:	2a00      	cmp	r2, #0
 8007726:	d103      	bne.n	8007730 <_realloc_r+0x24>
 8007728:	f7ff ff48 	bl	80075bc <_free_r>
 800772c:	0034      	movs	r4, r6
 800772e:	e7f7      	b.n	8007720 <_realloc_r+0x14>
 8007730:	f000 f826 	bl	8007780 <_malloc_usable_size_r>
 8007734:	002c      	movs	r4, r5
 8007736:	42b0      	cmp	r0, r6
 8007738:	d2f2      	bcs.n	8007720 <_realloc_r+0x14>
 800773a:	0031      	movs	r1, r6
 800773c:	0038      	movs	r0, r7
 800773e:	f7ff ff87 	bl	8007650 <_malloc_r>
 8007742:	1e04      	subs	r4, r0, #0
 8007744:	d0ec      	beq.n	8007720 <_realloc_r+0x14>
 8007746:	0029      	movs	r1, r5
 8007748:	0032      	movs	r2, r6
 800774a:	f7ff ff1a 	bl	8007582 <memcpy>
 800774e:	0029      	movs	r1, r5
 8007750:	0038      	movs	r0, r7
 8007752:	f7ff ff33 	bl	80075bc <_free_r>
 8007756:	e7e3      	b.n	8007720 <_realloc_r+0x14>

08007758 <_sbrk_r>:
 8007758:	2300      	movs	r3, #0
 800775a:	b570      	push	{r4, r5, r6, lr}
 800775c:	4c06      	ldr	r4, [pc, #24]	; (8007778 <_sbrk_r+0x20>)
 800775e:	0005      	movs	r5, r0
 8007760:	0008      	movs	r0, r1
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	f7fb fda4 	bl	80032b0 <_sbrk>
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	d103      	bne.n	8007774 <_sbrk_r+0x1c>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d000      	beq.n	8007774 <_sbrk_r+0x1c>
 8007772:	602b      	str	r3, [r5, #0]
 8007774:	bd70      	pop	{r4, r5, r6, pc}
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	20000288 	.word	0x20000288

0800777c <__malloc_lock>:
 800777c:	4770      	bx	lr

0800777e <__malloc_unlock>:
 800777e:	4770      	bx	lr

08007780 <_malloc_usable_size_r>:
 8007780:	1f0b      	subs	r3, r1, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	1f18      	subs	r0, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	da01      	bge.n	800778e <_malloc_usable_size_r+0xe>
 800778a:	580b      	ldr	r3, [r1, r0]
 800778c:	18c0      	adds	r0, r0, r3
 800778e:	4770      	bx	lr

08007790 <pow>:
 8007790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007792:	2400      	movs	r4, #0
 8007794:	b091      	sub	sp, #68	; 0x44
 8007796:	001f      	movs	r7, r3
 8007798:	9000      	str	r0, [sp, #0]
 800779a:	9101      	str	r1, [sp, #4]
 800779c:	0016      	movs	r6, r2
 800779e:	f000 f9e7 	bl	8007b70 <__ieee754_pow>
 80077a2:	4bbe      	ldr	r3, [pc, #760]	; (8007a9c <pow+0x30c>)
 80077a4:	9002      	str	r0, [sp, #8]
 80077a6:	9103      	str	r1, [sp, #12]
 80077a8:	571c      	ldrsb	r4, [r3, r4]
 80077aa:	1c63      	adds	r3, r4, #1
 80077ac:	d100      	bne.n	80077b0 <pow+0x20>
 80077ae:	e0d4      	b.n	800795a <pow+0x1ca>
 80077b0:	0032      	movs	r2, r6
 80077b2:	003b      	movs	r3, r7
 80077b4:	0030      	movs	r0, r6
 80077b6:	0039      	movs	r1, r7
 80077b8:	f7fa fb64 	bl	8001e84 <__aeabi_dcmpun>
 80077bc:	1e05      	subs	r5, r0, #0
 80077be:	d000      	beq.n	80077c2 <pow+0x32>
 80077c0:	e0cb      	b.n	800795a <pow+0x1ca>
 80077c2:	9a00      	ldr	r2, [sp, #0]
 80077c4:	9b01      	ldr	r3, [sp, #4]
 80077c6:	0010      	movs	r0, r2
 80077c8:	0019      	movs	r1, r3
 80077ca:	f7fa fb5b 	bl	8001e84 <__aeabi_dcmpun>
 80077ce:	2200      	movs	r2, #0
 80077d0:	9005      	str	r0, [sp, #20]
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d01e      	beq.n	8007814 <pow+0x84>
 80077d6:	2300      	movs	r3, #0
 80077d8:	0030      	movs	r0, r6
 80077da:	0039      	movs	r1, r7
 80077dc:	f7f8 fd38 	bl	8000250 <__aeabi_dcmpeq>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d100      	bne.n	80077e6 <pow+0x56>
 80077e4:	e0b9      	b.n	800795a <pow+0x1ca>
 80077e6:	2301      	movs	r3, #1
 80077e8:	9306      	str	r3, [sp, #24]
 80077ea:	4bad      	ldr	r3, [pc, #692]	; (8007aa0 <pow+0x310>)
 80077ec:	950e      	str	r5, [sp, #56]	; 0x38
 80077ee:	9307      	str	r3, [sp, #28]
 80077f0:	9a00      	ldr	r2, [sp, #0]
 80077f2:	9b01      	ldr	r3, [sp, #4]
 80077f4:	9208      	str	r2, [sp, #32]
 80077f6:	9309      	str	r3, [sp, #36]	; 0x24
 80077f8:	2200      	movs	r2, #0
 80077fa:	4baa      	ldr	r3, [pc, #680]	; (8007aa4 <pow+0x314>)
 80077fc:	960a      	str	r6, [sp, #40]	; 0x28
 80077fe:	970b      	str	r7, [sp, #44]	; 0x2c
 8007800:	920c      	str	r2, [sp, #48]	; 0x30
 8007802:	930d      	str	r3, [sp, #52]	; 0x34
 8007804:	2c02      	cmp	r4, #2
 8007806:	d033      	beq.n	8007870 <pow+0xe0>
 8007808:	a806      	add	r0, sp, #24
 800780a:	f000 ff65 	bl	80086d8 <matherr>
 800780e:	2800      	cmp	r0, #0
 8007810:	d125      	bne.n	800785e <pow+0xce>
 8007812:	e059      	b.n	80078c8 <pow+0x138>
 8007814:	2300      	movs	r3, #0
 8007816:	9800      	ldr	r0, [sp, #0]
 8007818:	9901      	ldr	r1, [sp, #4]
 800781a:	f7f8 fd19 	bl	8000250 <__aeabi_dcmpeq>
 800781e:	2800      	cmp	r0, #0
 8007820:	d057      	beq.n	80078d2 <pow+0x142>
 8007822:	2200      	movs	r2, #0
 8007824:	2300      	movs	r3, #0
 8007826:	0030      	movs	r0, r6
 8007828:	0039      	movs	r1, r7
 800782a:	f7f8 fd11 	bl	8000250 <__aeabi_dcmpeq>
 800782e:	1e05      	subs	r5, r0, #0
 8007830:	d021      	beq.n	8007876 <pow+0xe6>
 8007832:	2301      	movs	r3, #1
 8007834:	9306      	str	r3, [sp, #24]
 8007836:	4b9a      	ldr	r3, [pc, #616]	; (8007aa0 <pow+0x310>)
 8007838:	960a      	str	r6, [sp, #40]	; 0x28
 800783a:	970b      	str	r7, [sp, #44]	; 0x2c
 800783c:	9307      	str	r3, [sp, #28]
 800783e:	9b05      	ldr	r3, [sp, #20]
 8007840:	930e      	str	r3, [sp, #56]	; 0x38
 8007842:	9a00      	ldr	r2, [sp, #0]
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	9208      	str	r2, [sp, #32]
 8007848:	9309      	str	r3, [sp, #36]	; 0x24
 800784a:	2200      	movs	r2, #0
 800784c:	2300      	movs	r3, #0
 800784e:	920c      	str	r2, [sp, #48]	; 0x30
 8007850:	930d      	str	r3, [sp, #52]	; 0x34
 8007852:	2c00      	cmp	r4, #0
 8007854:	d0d8      	beq.n	8007808 <pow+0x78>
 8007856:	2200      	movs	r2, #0
 8007858:	4b92      	ldr	r3, [pc, #584]	; (8007aa4 <pow+0x314>)
 800785a:	920c      	str	r2, [sp, #48]	; 0x30
 800785c:	930d      	str	r3, [sp, #52]	; 0x34
 800785e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <pow+0xe0>
 8007866:	f7ff fb59 	bl	8006f1c <__errno>
 800786a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	6003      	str	r3, [r0, #0]
 8007870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007872:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007874:	e06f      	b.n	8007956 <pow+0x1c6>
 8007876:	0030      	movs	r0, r6
 8007878:	0039      	movs	r1, r7
 800787a:	f000 ff25 	bl	80086c8 <finite>
 800787e:	2800      	cmp	r0, #0
 8007880:	d06b      	beq.n	800795a <pow+0x1ca>
 8007882:	2200      	movs	r2, #0
 8007884:	2300      	movs	r3, #0
 8007886:	0030      	movs	r0, r6
 8007888:	0039      	movs	r1, r7
 800788a:	f7f8 fce7 	bl	800025c <__aeabi_dcmplt>
 800788e:	2800      	cmp	r0, #0
 8007890:	d063      	beq.n	800795a <pow+0x1ca>
 8007892:	2301      	movs	r3, #1
 8007894:	9306      	str	r3, [sp, #24]
 8007896:	4b82      	ldr	r3, [pc, #520]	; (8007aa0 <pow+0x310>)
 8007898:	950e      	str	r5, [sp, #56]	; 0x38
 800789a:	9307      	str	r3, [sp, #28]
 800789c:	9b00      	ldr	r3, [sp, #0]
 800789e:	9c01      	ldr	r4, [sp, #4]
 80078a0:	9308      	str	r3, [sp, #32]
 80078a2:	9409      	str	r4, [sp, #36]	; 0x24
 80078a4:	4b7d      	ldr	r3, [pc, #500]	; (8007a9c <pow+0x30c>)
 80078a6:	960a      	str	r6, [sp, #40]	; 0x28
 80078a8:	970b      	str	r7, [sp, #44]	; 0x2c
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d104      	bne.n	80078bc <pow+0x12c>
 80078b2:	2300      	movs	r3, #0
 80078b4:	2400      	movs	r4, #0
 80078b6:	930c      	str	r3, [sp, #48]	; 0x30
 80078b8:	940d      	str	r4, [sp, #52]	; 0x34
 80078ba:	e7a5      	b.n	8007808 <pow+0x78>
 80078bc:	2000      	movs	r0, #0
 80078be:	497a      	ldr	r1, [pc, #488]	; (8007aa8 <pow+0x318>)
 80078c0:	900c      	str	r0, [sp, #48]	; 0x30
 80078c2:	910d      	str	r1, [sp, #52]	; 0x34
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d19f      	bne.n	8007808 <pow+0x78>
 80078c8:	f7ff fb28 	bl	8006f1c <__errno>
 80078cc:	2321      	movs	r3, #33	; 0x21
 80078ce:	6003      	str	r3, [r0, #0]
 80078d0:	e7c5      	b.n	800785e <pow+0xce>
 80078d2:	9802      	ldr	r0, [sp, #8]
 80078d4:	9903      	ldr	r1, [sp, #12]
 80078d6:	f000 fef7 	bl	80086c8 <finite>
 80078da:	9005      	str	r0, [sp, #20]
 80078dc:	2800      	cmp	r0, #0
 80078de:	d000      	beq.n	80078e2 <pow+0x152>
 80078e0:	e0a5      	b.n	8007a2e <pow+0x29e>
 80078e2:	9800      	ldr	r0, [sp, #0]
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	f000 feef 	bl	80086c8 <finite>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d100      	bne.n	80078f0 <pow+0x160>
 80078ee:	e09e      	b.n	8007a2e <pow+0x29e>
 80078f0:	0030      	movs	r0, r6
 80078f2:	0039      	movs	r1, r7
 80078f4:	f000 fee8 	bl	80086c8 <finite>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d100      	bne.n	80078fe <pow+0x16e>
 80078fc:	e097      	b.n	8007a2e <pow+0x29e>
 80078fe:	2500      	movs	r5, #0
 8007900:	4b66      	ldr	r3, [pc, #408]	; (8007a9c <pow+0x30c>)
 8007902:	ac06      	add	r4, sp, #24
 8007904:	575d      	ldrsb	r5, [r3, r5]
 8007906:	9a02      	ldr	r2, [sp, #8]
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	0019      	movs	r1, r3
 800790c:	0010      	movs	r0, r2
 800790e:	f7fa fab9 	bl	8001e84 <__aeabi_dcmpun>
 8007912:	4b63      	ldr	r3, [pc, #396]	; (8007aa0 <pow+0x310>)
 8007914:	2800      	cmp	r0, #0
 8007916:	d031      	beq.n	800797c <pow+0x1ec>
 8007918:	2201      	movs	r2, #1
 800791a:	6063      	str	r3, [r4, #4]
 800791c:	9b05      	ldr	r3, [sp, #20]
 800791e:	9206      	str	r2, [sp, #24]
 8007920:	6223      	str	r3, [r4, #32]
 8007922:	6126      	str	r6, [r4, #16]
 8007924:	6167      	str	r7, [r4, #20]
 8007926:	9a00      	ldr	r2, [sp, #0]
 8007928:	9b01      	ldr	r3, [sp, #4]
 800792a:	60a2      	str	r2, [r4, #8]
 800792c:	60e3      	str	r3, [r4, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	2300      	movs	r3, #0
 8007932:	2d00      	cmp	r5, #0
 8007934:	d115      	bne.n	8007962 <pow+0x1d2>
 8007936:	61a2      	str	r2, [r4, #24]
 8007938:	61e3      	str	r3, [r4, #28]
 800793a:	0020      	movs	r0, r4
 800793c:	f000 fecc 	bl	80086d8 <matherr>
 8007940:	2800      	cmp	r0, #0
 8007942:	d016      	beq.n	8007972 <pow+0x1e2>
 8007944:	6a23      	ldr	r3, [r4, #32]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <pow+0x1c2>
 800794a:	f7ff fae7 	bl	8006f1c <__errno>
 800794e:	6a23      	ldr	r3, [r4, #32]
 8007950:	6003      	str	r3, [r0, #0]
 8007952:	69a3      	ldr	r3, [r4, #24]
 8007954:	69e4      	ldr	r4, [r4, #28]
 8007956:	9302      	str	r3, [sp, #8]
 8007958:	9403      	str	r4, [sp, #12]
 800795a:	9802      	ldr	r0, [sp, #8]
 800795c:	9903      	ldr	r1, [sp, #12]
 800795e:	b011      	add	sp, #68	; 0x44
 8007960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007962:	0010      	movs	r0, r2
 8007964:	0019      	movs	r1, r3
 8007966:	f7f9 f8c9 	bl	8000afc <__aeabi_ddiv>
 800796a:	61a0      	str	r0, [r4, #24]
 800796c:	61e1      	str	r1, [r4, #28]
 800796e:	2d02      	cmp	r5, #2
 8007970:	d1e3      	bne.n	800793a <pow+0x1aa>
 8007972:	f7ff fad3 	bl	8006f1c <__errno>
 8007976:	2321      	movs	r3, #33	; 0x21
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	e7e3      	b.n	8007944 <pow+0x1b4>
 800797c:	2203      	movs	r2, #3
 800797e:	6126      	str	r6, [r4, #16]
 8007980:	6167      	str	r7, [r4, #20]
 8007982:	9206      	str	r2, [sp, #24]
 8007984:	6063      	str	r3, [r4, #4]
 8007986:	6220      	str	r0, [r4, #32]
 8007988:	9a00      	ldr	r2, [sp, #0]
 800798a:	9b01      	ldr	r3, [sp, #4]
 800798c:	0030      	movs	r0, r6
 800798e:	60a2      	str	r2, [r4, #8]
 8007990:	60e3      	str	r3, [r4, #12]
 8007992:	0039      	movs	r1, r7
 8007994:	2200      	movs	r2, #0
 8007996:	4b45      	ldr	r3, [pc, #276]	; (8007aac <pow+0x31c>)
 8007998:	f7f9 fcba 	bl	8001310 <__aeabi_dmul>
 800799c:	0006      	movs	r6, r0
 800799e:	000f      	movs	r7, r1
 80079a0:	2d00      	cmp	r5, #0
 80079a2:	d124      	bne.n	80079ee <pow+0x25e>
 80079a4:	9800      	ldr	r0, [sp, #0]
 80079a6:	9901      	ldr	r1, [sp, #4]
 80079a8:	22e0      	movs	r2, #224	; 0xe0
 80079aa:	4b41      	ldr	r3, [pc, #260]	; (8007ab0 <pow+0x320>)
 80079ac:	0612      	lsls	r2, r2, #24
 80079ae:	61a2      	str	r2, [r4, #24]
 80079b0:	61e3      	str	r3, [r4, #28]
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	f7f8 fc51 	bl	800025c <__aeabi_dcmplt>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d030      	beq.n	8007a20 <pow+0x290>
 80079be:	0030      	movs	r0, r6
 80079c0:	0039      	movs	r1, r7
 80079c2:	f000 fe91 	bl	80086e8 <rint>
 80079c6:	0032      	movs	r2, r6
 80079c8:	003b      	movs	r3, r7
 80079ca:	f7f8 fc41 	bl	8000250 <__aeabi_dcmpeq>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d104      	bne.n	80079dc <pow+0x24c>
 80079d2:	22e0      	movs	r2, #224	; 0xe0
 80079d4:	4b37      	ldr	r3, [pc, #220]	; (8007ab4 <pow+0x324>)
 80079d6:	0612      	lsls	r2, r2, #24
 80079d8:	61a2      	str	r2, [r4, #24]
 80079da:	61e3      	str	r3, [r4, #28]
 80079dc:	4b2f      	ldr	r3, [pc, #188]	; (8007a9c <pow+0x30c>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	b25b      	sxtb	r3, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d11c      	bne.n	8007a20 <pow+0x290>
 80079e6:	f7ff fa99 	bl	8006f1c <__errno>
 80079ea:	2322      	movs	r3, #34	; 0x22
 80079ec:	e7c4      	b.n	8007978 <pow+0x1e8>
 80079ee:	2200      	movs	r2, #0
 80079f0:	9800      	ldr	r0, [sp, #0]
 80079f2:	9901      	ldr	r1, [sp, #4]
 80079f4:	4b30      	ldr	r3, [pc, #192]	; (8007ab8 <pow+0x328>)
 80079f6:	61a2      	str	r2, [r4, #24]
 80079f8:	61e3      	str	r3, [r4, #28]
 80079fa:	2200      	movs	r2, #0
 80079fc:	2300      	movs	r3, #0
 80079fe:	f7f8 fc2d 	bl	800025c <__aeabi_dcmplt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d0ea      	beq.n	80079dc <pow+0x24c>
 8007a06:	0030      	movs	r0, r6
 8007a08:	0039      	movs	r1, r7
 8007a0a:	f000 fe6d 	bl	80086e8 <rint>
 8007a0e:	0032      	movs	r2, r6
 8007a10:	003b      	movs	r3, r7
 8007a12:	f7f8 fc1d 	bl	8000250 <__aeabi_dcmpeq>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d1e0      	bne.n	80079dc <pow+0x24c>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <pow+0x318>)
 8007a1e:	e7db      	b.n	80079d8 <pow+0x248>
 8007a20:	0020      	movs	r0, r4
 8007a22:	f000 fe59 	bl	80086d8 <matherr>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d000      	beq.n	8007a2c <pow+0x29c>
 8007a2a:	e78b      	b.n	8007944 <pow+0x1b4>
 8007a2c:	e7db      	b.n	80079e6 <pow+0x256>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	9802      	ldr	r0, [sp, #8]
 8007a32:	9903      	ldr	r1, [sp, #12]
 8007a34:	2300      	movs	r3, #0
 8007a36:	f7f8 fc0b 	bl	8000250 <__aeabi_dcmpeq>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d100      	bne.n	8007a40 <pow+0x2b0>
 8007a3e:	e78c      	b.n	800795a <pow+0x1ca>
 8007a40:	9800      	ldr	r0, [sp, #0]
 8007a42:	9901      	ldr	r1, [sp, #4]
 8007a44:	f000 fe40 	bl	80086c8 <finite>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d100      	bne.n	8007a4e <pow+0x2be>
 8007a4c:	e785      	b.n	800795a <pow+0x1ca>
 8007a4e:	0030      	movs	r0, r6
 8007a50:	0039      	movs	r1, r7
 8007a52:	f000 fe39 	bl	80086c8 <finite>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d100      	bne.n	8007a5c <pow+0x2cc>
 8007a5a:	e77e      	b.n	800795a <pow+0x1ca>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	9306      	str	r3, [sp, #24]
 8007a60:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <pow+0x310>)
 8007a62:	960a      	str	r6, [sp, #40]	; 0x28
 8007a64:	970b      	str	r7, [sp, #44]	; 0x2c
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	2300      	movs	r3, #0
 8007a6a:	930e      	str	r3, [sp, #56]	; 0x38
 8007a6c:	9b00      	ldr	r3, [sp, #0]
 8007a6e:	9c01      	ldr	r4, [sp, #4]
 8007a70:	9308      	str	r3, [sp, #32]
 8007a72:	9409      	str	r4, [sp, #36]	; 0x24
 8007a74:	2300      	movs	r3, #0
 8007a76:	2400      	movs	r4, #0
 8007a78:	930c      	str	r3, [sp, #48]	; 0x30
 8007a7a:	940d      	str	r4, [sp, #52]	; 0x34
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <pow+0x30c>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	b25b      	sxtb	r3, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d103      	bne.n	8007a8e <pow+0x2fe>
 8007a86:	f7ff fa49 	bl	8006f1c <__errno>
 8007a8a:	2322      	movs	r3, #34	; 0x22
 8007a8c:	e71f      	b.n	80078ce <pow+0x13e>
 8007a8e:	a806      	add	r0, sp, #24
 8007a90:	f000 fe22 	bl	80086d8 <matherr>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d000      	beq.n	8007a9a <pow+0x30a>
 8007a98:	e6e1      	b.n	800785e <pow+0xce>
 8007a9a:	e7f4      	b.n	8007a86 <pow+0x2f6>
 8007a9c:	2000009c 	.word	0x2000009c
 8007aa0:	08008acb 	.word	0x08008acb
 8007aa4:	3ff00000 	.word	0x3ff00000
 8007aa8:	fff00000 	.word	0xfff00000
 8007aac:	3fe00000 	.word	0x3fe00000
 8007ab0:	47efffff 	.word	0x47efffff
 8007ab4:	c7efffff 	.word	0xc7efffff
 8007ab8:	7ff00000 	.word	0x7ff00000

08007abc <sqrt>:
 8007abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007abe:	b08f      	sub	sp, #60	; 0x3c
 8007ac0:	0004      	movs	r4, r0
 8007ac2:	000d      	movs	r5, r1
 8007ac4:	f000 fd4a 	bl	800855c <__ieee754_sqrt>
 8007ac8:	4b27      	ldr	r3, [pc, #156]	; (8007b68 <sqrt+0xac>)
 8007aca:	9000      	str	r0, [sp, #0]
 8007acc:	9101      	str	r1, [sp, #4]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	b25b      	sxtb	r3, r3
 8007ad2:	9302      	str	r3, [sp, #8]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	d033      	beq.n	8007b40 <sqrt+0x84>
 8007ad8:	0022      	movs	r2, r4
 8007ada:	002b      	movs	r3, r5
 8007adc:	0020      	movs	r0, r4
 8007ade:	0029      	movs	r1, r5
 8007ae0:	f7fa f9d0 	bl	8001e84 <__aeabi_dcmpun>
 8007ae4:	9003      	str	r0, [sp, #12]
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d12a      	bne.n	8007b40 <sqrt+0x84>
 8007aea:	2600      	movs	r6, #0
 8007aec:	2700      	movs	r7, #0
 8007aee:	0032      	movs	r2, r6
 8007af0:	003b      	movs	r3, r7
 8007af2:	0020      	movs	r0, r4
 8007af4:	0029      	movs	r1, r5
 8007af6:	f7f8 fbb1 	bl	800025c <__aeabi_dcmplt>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d020      	beq.n	8007b40 <sqrt+0x84>
 8007afe:	2301      	movs	r3, #1
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <sqrt+0xb0>)
 8007b04:	9408      	str	r4, [sp, #32]
 8007b06:	9509      	str	r5, [sp, #36]	; 0x24
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	9406      	str	r4, [sp, #24]
 8007b0e:	9507      	str	r5, [sp, #28]
 8007b10:	930c      	str	r3, [sp, #48]	; 0x30
 8007b12:	9b02      	ldr	r3, [sp, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d117      	bne.n	8007b48 <sqrt+0x8c>
 8007b18:	960a      	str	r6, [sp, #40]	; 0x28
 8007b1a:	970b      	str	r7, [sp, #44]	; 0x2c
 8007b1c:	a804      	add	r0, sp, #16
 8007b1e:	f000 fddb 	bl	80086d8 <matherr>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d01b      	beq.n	8007b5e <sqrt+0xa2>
 8007b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b28:	9302      	str	r3, [sp, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <sqrt+0x7c>
 8007b2e:	f7ff f9f5 	bl	8006f1c <__errno>
 8007b32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b34:	9302      	str	r3, [sp, #8]
 8007b36:	6003      	str	r3, [r0, #0]
 8007b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	9401      	str	r4, [sp, #4]
 8007b40:	9800      	ldr	r0, [sp, #0]
 8007b42:	9901      	ldr	r1, [sp, #4]
 8007b44:	b00f      	add	sp, #60	; 0x3c
 8007b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b48:	003b      	movs	r3, r7
 8007b4a:	0032      	movs	r2, r6
 8007b4c:	0030      	movs	r0, r6
 8007b4e:	0039      	movs	r1, r7
 8007b50:	f7f8 ffd4 	bl	8000afc <__aeabi_ddiv>
 8007b54:	9b02      	ldr	r3, [sp, #8]
 8007b56:	900a      	str	r0, [sp, #40]	; 0x28
 8007b58:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d1de      	bne.n	8007b1c <sqrt+0x60>
 8007b5e:	f7ff f9dd 	bl	8006f1c <__errno>
 8007b62:	2321      	movs	r3, #33	; 0x21
 8007b64:	6003      	str	r3, [r0, #0]
 8007b66:	e7de      	b.n	8007b26 <sqrt+0x6a>
 8007b68:	2000009c 	.word	0x2000009c
 8007b6c:	08008acf 	.word	0x08008acf

08007b70 <__ieee754_pow>:
 8007b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b72:	b095      	sub	sp, #84	; 0x54
 8007b74:	9202      	str	r2, [sp, #8]
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	000e      	movs	r6, r1
 8007b7c:	9902      	ldr	r1, [sp, #8]
 8007b7e:	005d      	lsls	r5, r3, #1
 8007b80:	9304      	str	r3, [sp, #16]
 8007b82:	000b      	movs	r3, r1
 8007b84:	086d      	lsrs	r5, r5, #1
 8007b86:	0007      	movs	r7, r0
 8007b88:	432b      	orrs	r3, r5
 8007b8a:	d101      	bne.n	8007b90 <__ieee754_pow+0x20>
 8007b8c:	f000 fcad 	bl	80084ea <__ieee754_pow+0x97a>
 8007b90:	4b7e      	ldr	r3, [pc, #504]	; (8007d8c <__ieee754_pow+0x21c>)
 8007b92:	0074      	lsls	r4, r6, #1
 8007b94:	9608      	str	r6, [sp, #32]
 8007b96:	9000      	str	r0, [sp, #0]
 8007b98:	0864      	lsrs	r4, r4, #1
 8007b9a:	469c      	mov	ip, r3
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	dc0b      	bgt.n	8007bb8 <__ieee754_pow+0x48>
 8007ba0:	d104      	bne.n	8007bac <__ieee754_pow+0x3c>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d108      	bne.n	8007bb8 <__ieee754_pow+0x48>
 8007ba6:	42a5      	cmp	r5, r4
 8007ba8:	dc0c      	bgt.n	8007bc4 <__ieee754_pow+0x54>
 8007baa:	e001      	b.n	8007bb0 <__ieee754_pow+0x40>
 8007bac:	429d      	cmp	r5, r3
 8007bae:	dc03      	bgt.n	8007bb8 <__ieee754_pow+0x48>
 8007bb0:	4565      	cmp	r5, ip
 8007bb2:	d10d      	bne.n	8007bd0 <__ieee754_pow+0x60>
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d00b      	beq.n	8007bd0 <__ieee754_pow+0x60>
 8007bb8:	4b75      	ldr	r3, [pc, #468]	; (8007d90 <__ieee754_pow+0x220>)
 8007bba:	18e4      	adds	r4, r4, r3
 8007bbc:	4327      	orrs	r7, r4
 8007bbe:	d101      	bne.n	8007bc4 <__ieee754_pow+0x54>
 8007bc0:	f000 fc93 	bl	80084ea <__ieee754_pow+0x97a>
 8007bc4:	4873      	ldr	r0, [pc, #460]	; (8007d94 <__ieee754_pow+0x224>)
 8007bc6:	f000 fd89 	bl	80086dc <nan>
 8007bca:	9000      	str	r0, [sp, #0]
 8007bcc:	9101      	str	r1, [sp, #4]
 8007bce:	e061      	b.n	8007c94 <__ieee754_pow+0x124>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9306      	str	r3, [sp, #24]
 8007bd4:	2e00      	cmp	r6, #0
 8007bd6:	da17      	bge.n	8007c08 <__ieee754_pow+0x98>
 8007bd8:	4a6f      	ldr	r2, [pc, #444]	; (8007d98 <__ieee754_pow+0x228>)
 8007bda:	4295      	cmp	r5, r2
 8007bdc:	dc4d      	bgt.n	8007c7a <__ieee754_pow+0x10a>
 8007bde:	4a6f      	ldr	r2, [pc, #444]	; (8007d9c <__ieee754_pow+0x22c>)
 8007be0:	4295      	cmp	r5, r2
 8007be2:	dd11      	ble.n	8007c08 <__ieee754_pow+0x98>
 8007be4:	4b6e      	ldr	r3, [pc, #440]	; (8007da0 <__ieee754_pow+0x230>)
 8007be6:	152a      	asrs	r2, r5, #20
 8007be8:	18d2      	adds	r2, r2, r3
 8007bea:	2a14      	cmp	r2, #20
 8007bec:	dd25      	ble.n	8007c3a <__ieee754_pow+0xca>
 8007bee:	2034      	movs	r0, #52	; 0x34
 8007bf0:	1a82      	subs	r2, r0, r2
 8007bf2:	9802      	ldr	r0, [sp, #8]
 8007bf4:	40d0      	lsrs	r0, r2
 8007bf6:	0003      	movs	r3, r0
 8007bf8:	4093      	lsls	r3, r2
 8007bfa:	428b      	cmp	r3, r1
 8007bfc:	d104      	bne.n	8007c08 <__ieee754_pow+0x98>
 8007bfe:	2201      	movs	r2, #1
 8007c00:	4010      	ands	r0, r2
 8007c02:	1892      	adds	r2, r2, r2
 8007c04:	1a13      	subs	r3, r2, r0
 8007c06:	9306      	str	r3, [sp, #24]
 8007c08:	2900      	cmp	r1, #0
 8007c0a:	d15e      	bne.n	8007cca <__ieee754_pow+0x15a>
 8007c0c:	4565      	cmp	r5, ip
 8007c0e:	d123      	bne.n	8007c58 <__ieee754_pow+0xe8>
 8007c10:	4b5f      	ldr	r3, [pc, #380]	; (8007d90 <__ieee754_pow+0x220>)
 8007c12:	18e3      	adds	r3, r4, r3
 8007c14:	431f      	orrs	r7, r3
 8007c16:	d101      	bne.n	8007c1c <__ieee754_pow+0xac>
 8007c18:	f000 fc67 	bl	80084ea <__ieee754_pow+0x97a>
 8007c1c:	4b5f      	ldr	r3, [pc, #380]	; (8007d9c <__ieee754_pow+0x22c>)
 8007c1e:	429c      	cmp	r4, r3
 8007c20:	dd2d      	ble.n	8007c7e <__ieee754_pow+0x10e>
 8007c22:	9b02      	ldr	r3, [sp, #8]
 8007c24:	9c03      	ldr	r4, [sp, #12]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	9401      	str	r4, [sp, #4]
 8007c2a:	9b04      	ldr	r3, [sp, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da31      	bge.n	8007c94 <__ieee754_pow+0x124>
 8007c30:	2300      	movs	r3, #0
 8007c32:	2400      	movs	r4, #0
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	9401      	str	r4, [sp, #4]
 8007c38:	e02c      	b.n	8007c94 <__ieee754_pow+0x124>
 8007c3a:	2900      	cmp	r1, #0
 8007c3c:	d145      	bne.n	8007cca <__ieee754_pow+0x15a>
 8007c3e:	2314      	movs	r3, #20
 8007c40:	1a9a      	subs	r2, r3, r2
 8007c42:	002b      	movs	r3, r5
 8007c44:	4113      	asrs	r3, r2
 8007c46:	0019      	movs	r1, r3
 8007c48:	4091      	lsls	r1, r2
 8007c4a:	42a9      	cmp	r1, r5
 8007c4c:	d104      	bne.n	8007c58 <__ieee754_pow+0xe8>
 8007c4e:	2201      	movs	r2, #1
 8007c50:	4013      	ands	r3, r2
 8007c52:	1892      	adds	r2, r2, r2
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	9306      	str	r3, [sp, #24]
 8007c58:	4b52      	ldr	r3, [pc, #328]	; (8007da4 <__ieee754_pow+0x234>)
 8007c5a:	429d      	cmp	r5, r3
 8007c5c:	d11e      	bne.n	8007c9c <__ieee754_pow+0x12c>
 8007c5e:	0038      	movs	r0, r7
 8007c60:	0031      	movs	r1, r6
 8007c62:	9b04      	ldr	r3, [sp, #16]
 8007c64:	9000      	str	r0, [sp, #0]
 8007c66:	9101      	str	r1, [sp, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da13      	bge.n	8007c94 <__ieee754_pow+0x124>
 8007c6c:	003a      	movs	r2, r7
 8007c6e:	0033      	movs	r3, r6
 8007c70:	2000      	movs	r0, #0
 8007c72:	494c      	ldr	r1, [pc, #304]	; (8007da4 <__ieee754_pow+0x234>)
 8007c74:	f7f8 ff42 	bl	8000afc <__aeabi_ddiv>
 8007c78:	e7a7      	b.n	8007bca <__ieee754_pow+0x5a>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e7c3      	b.n	8007c06 <__ieee754_pow+0x96>
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dad5      	bge.n	8007c30 <__ieee754_pow+0xc0>
 8007c84:	2280      	movs	r2, #128	; 0x80
 8007c86:	0612      	lsls	r2, r2, #24
 8007c88:	4694      	mov	ip, r2
 8007c8a:	9b02      	ldr	r3, [sp, #8]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	4463      	add	r3, ip
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	9800      	ldr	r0, [sp, #0]
 8007c96:	9901      	ldr	r1, [sp, #4]
 8007c98:	b015      	add	sp, #84	; 0x54
 8007c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9c:	2380      	movs	r3, #128	; 0x80
 8007c9e:	9a04      	ldr	r2, [sp, #16]
 8007ca0:	05db      	lsls	r3, r3, #23
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d106      	bne.n	8007cb4 <__ieee754_pow+0x144>
 8007ca6:	003a      	movs	r2, r7
 8007ca8:	0033      	movs	r3, r6
 8007caa:	0038      	movs	r0, r7
 8007cac:	0031      	movs	r1, r6
 8007cae:	f7f9 fb2f 	bl	8001310 <__aeabi_dmul>
 8007cb2:	e78a      	b.n	8007bca <__ieee754_pow+0x5a>
 8007cb4:	4b3c      	ldr	r3, [pc, #240]	; (8007da8 <__ieee754_pow+0x238>)
 8007cb6:	9a04      	ldr	r2, [sp, #16]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d106      	bne.n	8007cca <__ieee754_pow+0x15a>
 8007cbc:	2e00      	cmp	r6, #0
 8007cbe:	db04      	blt.n	8007cca <__ieee754_pow+0x15a>
 8007cc0:	0038      	movs	r0, r7
 8007cc2:	0031      	movs	r1, r6
 8007cc4:	f000 fc4a 	bl	800855c <__ieee754_sqrt>
 8007cc8:	e77f      	b.n	8007bca <__ieee754_pow+0x5a>
 8007cca:	0038      	movs	r0, r7
 8007ccc:	0031      	movs	r1, r6
 8007cce:	f000 fcf7 	bl	80086c0 <fabs>
 8007cd2:	9000      	str	r0, [sp, #0]
 8007cd4:	9101      	str	r1, [sp, #4]
 8007cd6:	2f00      	cmp	r7, #0
 8007cd8:	d12e      	bne.n	8007d38 <__ieee754_pow+0x1c8>
 8007cda:	2c00      	cmp	r4, #0
 8007cdc:	d004      	beq.n	8007ce8 <__ieee754_pow+0x178>
 8007cde:	4a31      	ldr	r2, [pc, #196]	; (8007da4 <__ieee754_pow+0x234>)
 8007ce0:	00b3      	lsls	r3, r6, #2
 8007ce2:	089b      	lsrs	r3, r3, #2
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d127      	bne.n	8007d38 <__ieee754_pow+0x1c8>
 8007ce8:	9b04      	ldr	r3, [sp, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da07      	bge.n	8007cfe <__ieee754_pow+0x18e>
 8007cee:	9a00      	ldr	r2, [sp, #0]
 8007cf0:	9b01      	ldr	r3, [sp, #4]
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	492b      	ldr	r1, [pc, #172]	; (8007da4 <__ieee754_pow+0x234>)
 8007cf6:	f7f8 ff01 	bl	8000afc <__aeabi_ddiv>
 8007cfa:	9000      	str	r0, [sp, #0]
 8007cfc:	9101      	str	r1, [sp, #4]
 8007cfe:	9b08      	ldr	r3, [sp, #32]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dac7      	bge.n	8007c94 <__ieee754_pow+0x124>
 8007d04:	4b22      	ldr	r3, [pc, #136]	; (8007d90 <__ieee754_pow+0x220>)
 8007d06:	18e4      	adds	r4, r4, r3
 8007d08:	9b06      	ldr	r3, [sp, #24]
 8007d0a:	431c      	orrs	r4, r3
 8007d0c:	d108      	bne.n	8007d20 <__ieee754_pow+0x1b0>
 8007d0e:	9a00      	ldr	r2, [sp, #0]
 8007d10:	9b01      	ldr	r3, [sp, #4]
 8007d12:	0010      	movs	r0, r2
 8007d14:	0019      	movs	r1, r3
 8007d16:	f7f9 fd6d 	bl	80017f4 <__aeabi_dsub>
 8007d1a:	0002      	movs	r2, r0
 8007d1c:	000b      	movs	r3, r1
 8007d1e:	e7a9      	b.n	8007c74 <__ieee754_pow+0x104>
 8007d20:	9b06      	ldr	r3, [sp, #24]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d1b6      	bne.n	8007c94 <__ieee754_pow+0x124>
 8007d26:	9800      	ldr	r0, [sp, #0]
 8007d28:	2180      	movs	r1, #128	; 0x80
 8007d2a:	0002      	movs	r2, r0
 8007d2c:	9801      	ldr	r0, [sp, #4]
 8007d2e:	0609      	lsls	r1, r1, #24
 8007d30:	1843      	adds	r3, r0, r1
 8007d32:	9200      	str	r2, [sp, #0]
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	e7ad      	b.n	8007c94 <__ieee754_pow+0x124>
 8007d38:	0ff3      	lsrs	r3, r6, #31
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	9310      	str	r3, [sp, #64]	; 0x40
 8007d3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d40:	9b06      	ldr	r3, [sp, #24]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	d104      	bne.n	8007d50 <__ieee754_pow+0x1e0>
 8007d46:	003a      	movs	r2, r7
 8007d48:	0033      	movs	r3, r6
 8007d4a:	0038      	movs	r0, r7
 8007d4c:	0031      	movs	r1, r6
 8007d4e:	e7e2      	b.n	8007d16 <__ieee754_pow+0x1a6>
 8007d50:	4b16      	ldr	r3, [pc, #88]	; (8007dac <__ieee754_pow+0x23c>)
 8007d52:	429d      	cmp	r5, r3
 8007d54:	dc00      	bgt.n	8007d58 <__ieee754_pow+0x1e8>
 8007d56:	e0f7      	b.n	8007f48 <__ieee754_pow+0x3d8>
 8007d58:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <__ieee754_pow+0x240>)
 8007d5a:	429d      	cmp	r5, r3
 8007d5c:	dd0b      	ble.n	8007d76 <__ieee754_pow+0x206>
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <__ieee754_pow+0x22c>)
 8007d60:	429c      	cmp	r4, r3
 8007d62:	dc0e      	bgt.n	8007d82 <__ieee754_pow+0x212>
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	db00      	blt.n	8007d6c <__ieee754_pow+0x1fc>
 8007d6a:	e761      	b.n	8007c30 <__ieee754_pow+0xc0>
 8007d6c:	4a11      	ldr	r2, [pc, #68]	; (8007db4 <__ieee754_pow+0x244>)
 8007d6e:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <__ieee754_pow+0x248>)
 8007d70:	0010      	movs	r0, r2
 8007d72:	0019      	movs	r1, r3
 8007d74:	e79b      	b.n	8007cae <__ieee754_pow+0x13e>
 8007d76:	4b11      	ldr	r3, [pc, #68]	; (8007dbc <__ieee754_pow+0x24c>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	ddf3      	ble.n	8007d64 <__ieee754_pow+0x1f4>
 8007d7c:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <__ieee754_pow+0x234>)
 8007d7e:	429c      	cmp	r4, r3
 8007d80:	dd1e      	ble.n	8007dc0 <__ieee754_pow+0x250>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dcf1      	bgt.n	8007d6c <__ieee754_pow+0x1fc>
 8007d88:	e752      	b.n	8007c30 <__ieee754_pow+0xc0>
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	7ff00000 	.word	0x7ff00000
 8007d90:	c0100000 	.word	0xc0100000
 8007d94:	08008a9d 	.word	0x08008a9d
 8007d98:	433fffff 	.word	0x433fffff
 8007d9c:	3fefffff 	.word	0x3fefffff
 8007da0:	fffffc01 	.word	0xfffffc01
 8007da4:	3ff00000 	.word	0x3ff00000
 8007da8:	3fe00000 	.word	0x3fe00000
 8007dac:	41e00000 	.word	0x41e00000
 8007db0:	43f00000 	.word	0x43f00000
 8007db4:	8800759c 	.word	0x8800759c
 8007db8:	7e37e43c 	.word	0x7e37e43c
 8007dbc:	3feffffe 	.word	0x3feffffe
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	9800      	ldr	r0, [sp, #0]
 8007dc4:	9901      	ldr	r1, [sp, #4]
 8007dc6:	4b52      	ldr	r3, [pc, #328]	; (8007f10 <__ieee754_pow+0x3a0>)
 8007dc8:	f7f9 fd14 	bl	80017f4 <__aeabi_dsub>
 8007dcc:	22c0      	movs	r2, #192	; 0xc0
 8007dce:	4b51      	ldr	r3, [pc, #324]	; (8007f14 <__ieee754_pow+0x3a4>)
 8007dd0:	05d2      	lsls	r2, r2, #23
 8007dd2:	0006      	movs	r6, r0
 8007dd4:	000f      	movs	r7, r1
 8007dd6:	f7f9 fa9b 	bl	8001310 <__aeabi_dmul>
 8007dda:	4a4f      	ldr	r2, [pc, #316]	; (8007f18 <__ieee754_pow+0x3a8>)
 8007ddc:	9000      	str	r0, [sp, #0]
 8007dde:	9101      	str	r1, [sp, #4]
 8007de0:	4b4e      	ldr	r3, [pc, #312]	; (8007f1c <__ieee754_pow+0x3ac>)
 8007de2:	0030      	movs	r0, r6
 8007de4:	0039      	movs	r1, r7
 8007de6:	f7f9 fa93 	bl	8001310 <__aeabi_dmul>
 8007dea:	2200      	movs	r2, #0
 8007dec:	9004      	str	r0, [sp, #16]
 8007dee:	9105      	str	r1, [sp, #20]
 8007df0:	4b4b      	ldr	r3, [pc, #300]	; (8007f20 <__ieee754_pow+0x3b0>)
 8007df2:	0030      	movs	r0, r6
 8007df4:	0039      	movs	r1, r7
 8007df6:	f7f9 fa8b 	bl	8001310 <__aeabi_dmul>
 8007dfa:	0002      	movs	r2, r0
 8007dfc:	000b      	movs	r3, r1
 8007dfe:	4849      	ldr	r0, [pc, #292]	; (8007f24 <__ieee754_pow+0x3b4>)
 8007e00:	4949      	ldr	r1, [pc, #292]	; (8007f28 <__ieee754_pow+0x3b8>)
 8007e02:	f7f9 fcf7 	bl	80017f4 <__aeabi_dsub>
 8007e06:	0032      	movs	r2, r6
 8007e08:	003b      	movs	r3, r7
 8007e0a:	f7f9 fa81 	bl	8001310 <__aeabi_dmul>
 8007e0e:	0002      	movs	r2, r0
 8007e10:	000b      	movs	r3, r1
 8007e12:	2000      	movs	r0, #0
 8007e14:	4945      	ldr	r1, [pc, #276]	; (8007f2c <__ieee754_pow+0x3bc>)
 8007e16:	f7f9 fced 	bl	80017f4 <__aeabi_dsub>
 8007e1a:	0032      	movs	r2, r6
 8007e1c:	0004      	movs	r4, r0
 8007e1e:	000d      	movs	r5, r1
 8007e20:	003b      	movs	r3, r7
 8007e22:	0030      	movs	r0, r6
 8007e24:	0039      	movs	r1, r7
 8007e26:	f7f9 fa73 	bl	8001310 <__aeabi_dmul>
 8007e2a:	0002      	movs	r2, r0
 8007e2c:	000b      	movs	r3, r1
 8007e2e:	0020      	movs	r0, r4
 8007e30:	0029      	movs	r1, r5
 8007e32:	f7f9 fa6d 	bl	8001310 <__aeabi_dmul>
 8007e36:	4a3e      	ldr	r2, [pc, #248]	; (8007f30 <__ieee754_pow+0x3c0>)
 8007e38:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <__ieee754_pow+0x3a4>)
 8007e3a:	f7f9 fa69 	bl	8001310 <__aeabi_dmul>
 8007e3e:	0002      	movs	r2, r0
 8007e40:	000b      	movs	r3, r1
 8007e42:	9804      	ldr	r0, [sp, #16]
 8007e44:	9905      	ldr	r1, [sp, #20]
 8007e46:	f7f9 fcd5 	bl	80017f4 <__aeabi_dsub>
 8007e4a:	0002      	movs	r2, r0
 8007e4c:	000b      	movs	r3, r1
 8007e4e:	0004      	movs	r4, r0
 8007e50:	000d      	movs	r5, r1
 8007e52:	9800      	ldr	r0, [sp, #0]
 8007e54:	9901      	ldr	r1, [sp, #4]
 8007e56:	f7f8 fb35 	bl	80004c4 <__aeabi_dadd>
 8007e5a:	9a00      	ldr	r2, [sp, #0]
 8007e5c:	9b01      	ldr	r3, [sp, #4]
 8007e5e:	2000      	movs	r0, #0
 8007e60:	9004      	str	r0, [sp, #16]
 8007e62:	9105      	str	r1, [sp, #20]
 8007e64:	f7f9 fcc6 	bl	80017f4 <__aeabi_dsub>
 8007e68:	0002      	movs	r2, r0
 8007e6a:	000b      	movs	r3, r1
 8007e6c:	0020      	movs	r0, r4
 8007e6e:	0029      	movs	r1, r5
 8007e70:	f7f9 fcc0 	bl	80017f4 <__aeabi_dsub>
 8007e74:	9b06      	ldr	r3, [sp, #24]
 8007e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	0006      	movs	r6, r0
 8007e7c:	000f      	movs	r7, r1
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	d000      	beq.n	8007e84 <__ieee754_pow+0x314>
 8007e82:	e1de      	b.n	8008242 <__ieee754_pow+0x6d2>
 8007e84:	2300      	movs	r3, #0
 8007e86:	4c2b      	ldr	r4, [pc, #172]	; (8007f34 <__ieee754_pow+0x3c4>)
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	9401      	str	r4, [sp, #4]
 8007e8c:	9c02      	ldr	r4, [sp, #8]
 8007e8e:	9d03      	ldr	r5, [sp, #12]
 8007e90:	9802      	ldr	r0, [sp, #8]
 8007e92:	9903      	ldr	r1, [sp, #12]
 8007e94:	2400      	movs	r4, #0
 8007e96:	002b      	movs	r3, r5
 8007e98:	0022      	movs	r2, r4
 8007e9a:	f7f9 fcab 	bl	80017f4 <__aeabi_dsub>
 8007e9e:	9a04      	ldr	r2, [sp, #16]
 8007ea0:	9b05      	ldr	r3, [sp, #20]
 8007ea2:	f7f9 fa35 	bl	8001310 <__aeabi_dmul>
 8007ea6:	9a02      	ldr	r2, [sp, #8]
 8007ea8:	9b03      	ldr	r3, [sp, #12]
 8007eaa:	9006      	str	r0, [sp, #24]
 8007eac:	9107      	str	r1, [sp, #28]
 8007eae:	0030      	movs	r0, r6
 8007eb0:	0039      	movs	r1, r7
 8007eb2:	f7f9 fa2d 	bl	8001310 <__aeabi_dmul>
 8007eb6:	0002      	movs	r2, r0
 8007eb8:	000b      	movs	r3, r1
 8007eba:	9806      	ldr	r0, [sp, #24]
 8007ebc:	9907      	ldr	r1, [sp, #28]
 8007ebe:	f7f8 fb01 	bl	80004c4 <__aeabi_dadd>
 8007ec2:	0022      	movs	r2, r4
 8007ec4:	002b      	movs	r3, r5
 8007ec6:	9006      	str	r0, [sp, #24]
 8007ec8:	9107      	str	r1, [sp, #28]
 8007eca:	9804      	ldr	r0, [sp, #16]
 8007ecc:	9905      	ldr	r1, [sp, #20]
 8007ece:	f7f9 fa1f 	bl	8001310 <__aeabi_dmul>
 8007ed2:	0006      	movs	r6, r0
 8007ed4:	000f      	movs	r7, r1
 8007ed6:	000b      	movs	r3, r1
 8007ed8:	0002      	movs	r2, r0
 8007eda:	9806      	ldr	r0, [sp, #24]
 8007edc:	9907      	ldr	r1, [sp, #28]
 8007ede:	9604      	str	r6, [sp, #16]
 8007ee0:	9705      	str	r7, [sp, #20]
 8007ee2:	f7f8 faef 	bl	80004c4 <__aeabi_dadd>
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <__ieee754_pow+0x3c8>)
 8007ee8:	0005      	movs	r5, r0
 8007eea:	000c      	movs	r4, r1
 8007eec:	9108      	str	r1, [sp, #32]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	dc00      	bgt.n	8007ef4 <__ieee754_pow+0x384>
 8007ef2:	e2d8      	b.n	80084a6 <__ieee754_pow+0x936>
 8007ef4:	4b11      	ldr	r3, [pc, #68]	; (8007f3c <__ieee754_pow+0x3cc>)
 8007ef6:	18cb      	adds	r3, r1, r3
 8007ef8:	4303      	orrs	r3, r0
 8007efa:	d100      	bne.n	8007efe <__ieee754_pow+0x38e>
 8007efc:	e1da      	b.n	80082b4 <__ieee754_pow+0x744>
 8007efe:	9800      	ldr	r0, [sp, #0]
 8007f00:	9901      	ldr	r1, [sp, #4]
 8007f02:	4a0f      	ldr	r2, [pc, #60]	; (8007f40 <__ieee754_pow+0x3d0>)
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <__ieee754_pow+0x3d4>)
 8007f06:	f7f9 fa03 	bl	8001310 <__aeabi_dmul>
 8007f0a:	4a0d      	ldr	r2, [pc, #52]	; (8007f40 <__ieee754_pow+0x3d0>)
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <__ieee754_pow+0x3d4>)
 8007f0e:	e6ce      	b.n	8007cae <__ieee754_pow+0x13e>
 8007f10:	3ff00000 	.word	0x3ff00000
 8007f14:	3ff71547 	.word	0x3ff71547
 8007f18:	f85ddf44 	.word	0xf85ddf44
 8007f1c:	3e54ae0b 	.word	0x3e54ae0b
 8007f20:	3fd00000 	.word	0x3fd00000
 8007f24:	55555555 	.word	0x55555555
 8007f28:	3fd55555 	.word	0x3fd55555
 8007f2c:	3fe00000 	.word	0x3fe00000
 8007f30:	652b82fe 	.word	0x652b82fe
 8007f34:	bff00000 	.word	0xbff00000
 8007f38:	408fffff 	.word	0x408fffff
 8007f3c:	bf700000 	.word	0xbf700000
 8007f40:	8800759c 	.word	0x8800759c
 8007f44:	7e37e43c 	.word	0x7e37e43c
 8007f48:	4bbf      	ldr	r3, [pc, #764]	; (8008248 <__ieee754_pow+0x6d8>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	dc0a      	bgt.n	8007f66 <__ieee754_pow+0x3f6>
 8007f50:	9800      	ldr	r0, [sp, #0]
 8007f52:	9901      	ldr	r1, [sp, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	4bbd      	ldr	r3, [pc, #756]	; (800824c <__ieee754_pow+0x6dc>)
 8007f58:	f7f9 f9da 	bl	8001310 <__aeabi_dmul>
 8007f5c:	2235      	movs	r2, #53	; 0x35
 8007f5e:	9000      	str	r0, [sp, #0]
 8007f60:	9101      	str	r1, [sp, #4]
 8007f62:	9c01      	ldr	r4, [sp, #4]
 8007f64:	4252      	negs	r2, r2
 8007f66:	49ba      	ldr	r1, [pc, #744]	; (8008250 <__ieee754_pow+0x6e0>)
 8007f68:	1523      	asrs	r3, r4, #20
 8007f6a:	185b      	adds	r3, r3, r1
 8007f6c:	189b      	adds	r3, r3, r2
 8007f6e:	0324      	lsls	r4, r4, #12
 8007f70:	4db8      	ldr	r5, [pc, #736]	; (8008254 <__ieee754_pow+0x6e4>)
 8007f72:	4ab9      	ldr	r2, [pc, #740]	; (8008258 <__ieee754_pow+0x6e8>)
 8007f74:	930d      	str	r3, [sp, #52]	; 0x34
 8007f76:	0b23      	lsrs	r3, r4, #12
 8007f78:	431d      	orrs	r5, r3
 8007f7a:	2400      	movs	r4, #0
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	dd09      	ble.n	8007f94 <__ieee754_pow+0x424>
 8007f80:	4ab6      	ldr	r2, [pc, #728]	; (800825c <__ieee754_pow+0x6ec>)
 8007f82:	3401      	adds	r4, #1
 8007f84:	4293      	cmp	r3, r2
 8007f86:	dd05      	ble.n	8007f94 <__ieee754_pow+0x424>
 8007f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f8a:	191b      	adds	r3, r3, r4
 8007f8c:	2400      	movs	r4, #0
 8007f8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f90:	4bb3      	ldr	r3, [pc, #716]	; (8008260 <__ieee754_pow+0x6f0>)
 8007f92:	18ed      	adds	r5, r5, r3
 8007f94:	9800      	ldr	r0, [sp, #0]
 8007f96:	9901      	ldr	r1, [sp, #4]
 8007f98:	0029      	movs	r1, r5
 8007f9a:	00e3      	lsls	r3, r4, #3
 8007f9c:	9311      	str	r3, [sp, #68]	; 0x44
 8007f9e:	4bb1      	ldr	r3, [pc, #708]	; (8008264 <__ieee754_pow+0x6f4>)
 8007fa0:	00e2      	lsls	r2, r4, #3
 8007fa2:	189b      	adds	r3, r3, r2
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	900e      	str	r0, [sp, #56]	; 0x38
 8007faa:	910f      	str	r1, [sp, #60]	; 0x3c
 8007fac:	920a      	str	r2, [sp, #40]	; 0x28
 8007fae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fb0:	f7f9 fc20 	bl	80017f4 <__aeabi_dsub>
 8007fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fb8:	0006      	movs	r6, r0
 8007fba:	000f      	movs	r7, r1
 8007fbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fc0:	f7f8 fa80 	bl	80004c4 <__aeabi_dadd>
 8007fc4:	0002      	movs	r2, r0
 8007fc6:	000b      	movs	r3, r1
 8007fc8:	2000      	movs	r0, #0
 8007fca:	49a2      	ldr	r1, [pc, #648]	; (8008254 <__ieee754_pow+0x6e4>)
 8007fcc:	f7f8 fd96 	bl	8000afc <__aeabi_ddiv>
 8007fd0:	9012      	str	r0, [sp, #72]	; 0x48
 8007fd2:	9113      	str	r1, [sp, #76]	; 0x4c
 8007fd4:	0002      	movs	r2, r0
 8007fd6:	000b      	movs	r3, r1
 8007fd8:	0030      	movs	r0, r6
 8007fda:	0039      	movs	r1, r7
 8007fdc:	f7f9 f998 	bl	8001310 <__aeabi_dmul>
 8007fe0:	9008      	str	r0, [sp, #32]
 8007fe2:	9109      	str	r1, [sp, #36]	; 0x24
 8007fe4:	9a08      	ldr	r2, [sp, #32]
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	2180      	movs	r1, #128	; 0x80
 8007fea:	9204      	str	r2, [sp, #16]
 8007fec:	9305      	str	r3, [sp, #20]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	0589      	lsls	r1, r1, #22
 8007ff2:	106d      	asrs	r5, r5, #1
 8007ff4:	430d      	orrs	r5, r1
 8007ff6:	2180      	movs	r1, #128	; 0x80
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	9a04      	ldr	r2, [sp, #16]
 8007ffc:	9b05      	ldr	r3, [sp, #20]
 8007ffe:	9200      	str	r2, [sp, #0]
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	0309      	lsls	r1, r1, #12
 8008006:	186d      	adds	r5, r5, r1
 8008008:	04a4      	lsls	r4, r4, #18
 800800a:	192b      	adds	r3, r5, r4
 800800c:	9800      	ldr	r0, [sp, #0]
 800800e:	9901      	ldr	r1, [sp, #4]
 8008010:	0014      	movs	r4, r2
 8008012:	001d      	movs	r5, r3
 8008014:	f7f9 f97c 	bl	8001310 <__aeabi_dmul>
 8008018:	0002      	movs	r2, r0
 800801a:	000b      	movs	r3, r1
 800801c:	0030      	movs	r0, r6
 800801e:	0039      	movs	r1, r7
 8008020:	f7f9 fbe8 	bl	80017f4 <__aeabi_dsub>
 8008024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008028:	0006      	movs	r6, r0
 800802a:	000f      	movs	r7, r1
 800802c:	0020      	movs	r0, r4
 800802e:	0029      	movs	r1, r5
 8008030:	f7f9 fbe0 	bl	80017f4 <__aeabi_dsub>
 8008034:	0002      	movs	r2, r0
 8008036:	000b      	movs	r3, r1
 8008038:	980e      	ldr	r0, [sp, #56]	; 0x38
 800803a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800803c:	f7f9 fbda 	bl	80017f4 <__aeabi_dsub>
 8008040:	9a00      	ldr	r2, [sp, #0]
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	f7f9 f964 	bl	8001310 <__aeabi_dmul>
 8008048:	0002      	movs	r2, r0
 800804a:	000b      	movs	r3, r1
 800804c:	0030      	movs	r0, r6
 800804e:	0039      	movs	r1, r7
 8008050:	f7f9 fbd0 	bl	80017f4 <__aeabi_dsub>
 8008054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008058:	f7f9 f95a 	bl	8001310 <__aeabi_dmul>
 800805c:	9a08      	ldr	r2, [sp, #32]
 800805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008060:	900a      	str	r0, [sp, #40]	; 0x28
 8008062:	910b      	str	r1, [sp, #44]	; 0x2c
 8008064:	0010      	movs	r0, r2
 8008066:	0019      	movs	r1, r3
 8008068:	f7f9 f952 	bl	8001310 <__aeabi_dmul>
 800806c:	0006      	movs	r6, r0
 800806e:	000f      	movs	r7, r1
 8008070:	4a7d      	ldr	r2, [pc, #500]	; (8008268 <__ieee754_pow+0x6f8>)
 8008072:	4b7e      	ldr	r3, [pc, #504]	; (800826c <__ieee754_pow+0x6fc>)
 8008074:	f7f9 f94c 	bl	8001310 <__aeabi_dmul>
 8008078:	4a7d      	ldr	r2, [pc, #500]	; (8008270 <__ieee754_pow+0x700>)
 800807a:	4b7e      	ldr	r3, [pc, #504]	; (8008274 <__ieee754_pow+0x704>)
 800807c:	f7f8 fa22 	bl	80004c4 <__aeabi_dadd>
 8008080:	0032      	movs	r2, r6
 8008082:	003b      	movs	r3, r7
 8008084:	f7f9 f944 	bl	8001310 <__aeabi_dmul>
 8008088:	4a7b      	ldr	r2, [pc, #492]	; (8008278 <__ieee754_pow+0x708>)
 800808a:	4b7c      	ldr	r3, [pc, #496]	; (800827c <__ieee754_pow+0x70c>)
 800808c:	f7f8 fa1a 	bl	80004c4 <__aeabi_dadd>
 8008090:	0032      	movs	r2, r6
 8008092:	003b      	movs	r3, r7
 8008094:	f7f9 f93c 	bl	8001310 <__aeabi_dmul>
 8008098:	4a79      	ldr	r2, [pc, #484]	; (8008280 <__ieee754_pow+0x710>)
 800809a:	4b7a      	ldr	r3, [pc, #488]	; (8008284 <__ieee754_pow+0x714>)
 800809c:	f7f8 fa12 	bl	80004c4 <__aeabi_dadd>
 80080a0:	0032      	movs	r2, r6
 80080a2:	003b      	movs	r3, r7
 80080a4:	f7f9 f934 	bl	8001310 <__aeabi_dmul>
 80080a8:	4a77      	ldr	r2, [pc, #476]	; (8008288 <__ieee754_pow+0x718>)
 80080aa:	4b78      	ldr	r3, [pc, #480]	; (800828c <__ieee754_pow+0x71c>)
 80080ac:	f7f8 fa0a 	bl	80004c4 <__aeabi_dadd>
 80080b0:	0032      	movs	r2, r6
 80080b2:	003b      	movs	r3, r7
 80080b4:	f7f9 f92c 	bl	8001310 <__aeabi_dmul>
 80080b8:	4a75      	ldr	r2, [pc, #468]	; (8008290 <__ieee754_pow+0x720>)
 80080ba:	4b76      	ldr	r3, [pc, #472]	; (8008294 <__ieee754_pow+0x724>)
 80080bc:	f7f8 fa02 	bl	80004c4 <__aeabi_dadd>
 80080c0:	0032      	movs	r2, r6
 80080c2:	0004      	movs	r4, r0
 80080c4:	000d      	movs	r5, r1
 80080c6:	003b      	movs	r3, r7
 80080c8:	0030      	movs	r0, r6
 80080ca:	0039      	movs	r1, r7
 80080cc:	f7f9 f920 	bl	8001310 <__aeabi_dmul>
 80080d0:	0002      	movs	r2, r0
 80080d2:	000b      	movs	r3, r1
 80080d4:	0020      	movs	r0, r4
 80080d6:	0029      	movs	r1, r5
 80080d8:	f7f9 f91a 	bl	8001310 <__aeabi_dmul>
 80080dc:	9a00      	ldr	r2, [sp, #0]
 80080de:	9b01      	ldr	r3, [sp, #4]
 80080e0:	0004      	movs	r4, r0
 80080e2:	000d      	movs	r5, r1
 80080e4:	9808      	ldr	r0, [sp, #32]
 80080e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080e8:	f7f8 f9ec 	bl	80004c4 <__aeabi_dadd>
 80080ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f0:	f7f9 f90e 	bl	8001310 <__aeabi_dmul>
 80080f4:	0022      	movs	r2, r4
 80080f6:	002b      	movs	r3, r5
 80080f8:	f7f8 f9e4 	bl	80004c4 <__aeabi_dadd>
 80080fc:	9a00      	ldr	r2, [sp, #0]
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	900e      	str	r0, [sp, #56]	; 0x38
 8008102:	910f      	str	r1, [sp, #60]	; 0x3c
 8008104:	0010      	movs	r0, r2
 8008106:	0019      	movs	r1, r3
 8008108:	f7f9 f902 	bl	8001310 <__aeabi_dmul>
 800810c:	2200      	movs	r2, #0
 800810e:	4b62      	ldr	r3, [pc, #392]	; (8008298 <__ieee754_pow+0x728>)
 8008110:	0004      	movs	r4, r0
 8008112:	000d      	movs	r5, r1
 8008114:	f7f8 f9d6 	bl	80004c4 <__aeabi_dadd>
 8008118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800811a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800811c:	f7f8 f9d2 	bl	80004c4 <__aeabi_dadd>
 8008120:	9e04      	ldr	r6, [sp, #16]
 8008122:	000f      	movs	r7, r1
 8008124:	0032      	movs	r2, r6
 8008126:	000b      	movs	r3, r1
 8008128:	9800      	ldr	r0, [sp, #0]
 800812a:	9901      	ldr	r1, [sp, #4]
 800812c:	f7f9 f8f0 	bl	8001310 <__aeabi_dmul>
 8008130:	2200      	movs	r2, #0
 8008132:	9000      	str	r0, [sp, #0]
 8008134:	9101      	str	r1, [sp, #4]
 8008136:	4b58      	ldr	r3, [pc, #352]	; (8008298 <__ieee754_pow+0x728>)
 8008138:	0030      	movs	r0, r6
 800813a:	0039      	movs	r1, r7
 800813c:	f7f9 fb5a 	bl	80017f4 <__aeabi_dsub>
 8008140:	0022      	movs	r2, r4
 8008142:	002b      	movs	r3, r5
 8008144:	f7f9 fb56 	bl	80017f4 <__aeabi_dsub>
 8008148:	0002      	movs	r2, r0
 800814a:	000b      	movs	r3, r1
 800814c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800814e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008150:	f7f9 fb50 	bl	80017f4 <__aeabi_dsub>
 8008154:	9a08      	ldr	r2, [sp, #32]
 8008156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008158:	f7f9 f8da 	bl	8001310 <__aeabi_dmul>
 800815c:	0032      	movs	r2, r6
 800815e:	0004      	movs	r4, r0
 8008160:	000d      	movs	r5, r1
 8008162:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008166:	003b      	movs	r3, r7
 8008168:	f7f9 f8d2 	bl	8001310 <__aeabi_dmul>
 800816c:	0002      	movs	r2, r0
 800816e:	000b      	movs	r3, r1
 8008170:	0020      	movs	r0, r4
 8008172:	0029      	movs	r1, r5
 8008174:	f7f8 f9a6 	bl	80004c4 <__aeabi_dadd>
 8008178:	0004      	movs	r4, r0
 800817a:	000d      	movs	r5, r1
 800817c:	0002      	movs	r2, r0
 800817e:	000b      	movs	r3, r1
 8008180:	9800      	ldr	r0, [sp, #0]
 8008182:	9901      	ldr	r1, [sp, #4]
 8008184:	f7f8 f99e 	bl	80004c4 <__aeabi_dadd>
 8008188:	22e0      	movs	r2, #224	; 0xe0
 800818a:	9e04      	ldr	r6, [sp, #16]
 800818c:	0612      	lsls	r2, r2, #24
 800818e:	4b43      	ldr	r3, [pc, #268]	; (800829c <__ieee754_pow+0x72c>)
 8008190:	0030      	movs	r0, r6
 8008192:	000f      	movs	r7, r1
 8008194:	f7f9 f8bc 	bl	8001310 <__aeabi_dmul>
 8008198:	9008      	str	r0, [sp, #32]
 800819a:	9109      	str	r1, [sp, #36]	; 0x24
 800819c:	9a00      	ldr	r2, [sp, #0]
 800819e:	9b01      	ldr	r3, [sp, #4]
 80081a0:	0030      	movs	r0, r6
 80081a2:	0039      	movs	r1, r7
 80081a4:	f7f9 fb26 	bl	80017f4 <__aeabi_dsub>
 80081a8:	0002      	movs	r2, r0
 80081aa:	000b      	movs	r3, r1
 80081ac:	0020      	movs	r0, r4
 80081ae:	0029      	movs	r1, r5
 80081b0:	f7f9 fb20 	bl	80017f4 <__aeabi_dsub>
 80081b4:	4a3a      	ldr	r2, [pc, #232]	; (80082a0 <__ieee754_pow+0x730>)
 80081b6:	4b39      	ldr	r3, [pc, #228]	; (800829c <__ieee754_pow+0x72c>)
 80081b8:	f7f9 f8aa 	bl	8001310 <__aeabi_dmul>
 80081bc:	4a39      	ldr	r2, [pc, #228]	; (80082a4 <__ieee754_pow+0x734>)
 80081be:	0004      	movs	r4, r0
 80081c0:	000d      	movs	r5, r1
 80081c2:	4b39      	ldr	r3, [pc, #228]	; (80082a8 <__ieee754_pow+0x738>)
 80081c4:	0030      	movs	r0, r6
 80081c6:	0039      	movs	r1, r7
 80081c8:	f7f9 f8a2 	bl	8001310 <__aeabi_dmul>
 80081cc:	0002      	movs	r2, r0
 80081ce:	000b      	movs	r3, r1
 80081d0:	0020      	movs	r0, r4
 80081d2:	0029      	movs	r1, r5
 80081d4:	f7f8 f976 	bl	80004c4 <__aeabi_dadd>
 80081d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081da:	4b34      	ldr	r3, [pc, #208]	; (80082ac <__ieee754_pow+0x73c>)
 80081dc:	189b      	adds	r3, r3, r2
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f7f8 f96f 	bl	80004c4 <__aeabi_dadd>
 80081e6:	9000      	str	r0, [sp, #0]
 80081e8:	9101      	str	r1, [sp, #4]
 80081ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80081ec:	f7f9 fe66 	bl	8001ebc <__aeabi_i2d>
 80081f0:	0004      	movs	r4, r0
 80081f2:	000d      	movs	r5, r1
 80081f4:	9808      	ldr	r0, [sp, #32]
 80081f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081fa:	4b2d      	ldr	r3, [pc, #180]	; (80082b0 <__ieee754_pow+0x740>)
 80081fc:	189b      	adds	r3, r3, r2
 80081fe:	681e      	ldr	r6, [r3, #0]
 8008200:	685f      	ldr	r7, [r3, #4]
 8008202:	9a00      	ldr	r2, [sp, #0]
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	f7f8 f95d 	bl	80004c4 <__aeabi_dadd>
 800820a:	0032      	movs	r2, r6
 800820c:	003b      	movs	r3, r7
 800820e:	f7f8 f959 	bl	80004c4 <__aeabi_dadd>
 8008212:	0022      	movs	r2, r4
 8008214:	002b      	movs	r3, r5
 8008216:	f7f8 f955 	bl	80004c4 <__aeabi_dadd>
 800821a:	9804      	ldr	r0, [sp, #16]
 800821c:	0022      	movs	r2, r4
 800821e:	002b      	movs	r3, r5
 8008220:	9004      	str	r0, [sp, #16]
 8008222:	9105      	str	r1, [sp, #20]
 8008224:	f7f9 fae6 	bl	80017f4 <__aeabi_dsub>
 8008228:	0032      	movs	r2, r6
 800822a:	003b      	movs	r3, r7
 800822c:	f7f9 fae2 	bl	80017f4 <__aeabi_dsub>
 8008230:	9a08      	ldr	r2, [sp, #32]
 8008232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008234:	f7f9 fade 	bl	80017f4 <__aeabi_dsub>
 8008238:	0002      	movs	r2, r0
 800823a:	000b      	movs	r3, r1
 800823c:	9800      	ldr	r0, [sp, #0]
 800823e:	9901      	ldr	r1, [sp, #4]
 8008240:	e616      	b.n	8007e70 <__ieee754_pow+0x300>
 8008242:	2300      	movs	r3, #0
 8008244:	4c03      	ldr	r4, [pc, #12]	; (8008254 <__ieee754_pow+0x6e4>)
 8008246:	e61f      	b.n	8007e88 <__ieee754_pow+0x318>
 8008248:	000fffff 	.word	0x000fffff
 800824c:	43400000 	.word	0x43400000
 8008250:	fffffc01 	.word	0xfffffc01
 8008254:	3ff00000 	.word	0x3ff00000
 8008258:	0003988e 	.word	0x0003988e
 800825c:	000bb679 	.word	0x000bb679
 8008260:	fff00000 	.word	0xfff00000
 8008264:	08008ad8 	.word	0x08008ad8
 8008268:	4a454eef 	.word	0x4a454eef
 800826c:	3fca7e28 	.word	0x3fca7e28
 8008270:	93c9db65 	.word	0x93c9db65
 8008274:	3fcd864a 	.word	0x3fcd864a
 8008278:	a91d4101 	.word	0xa91d4101
 800827c:	3fd17460 	.word	0x3fd17460
 8008280:	518f264d 	.word	0x518f264d
 8008284:	3fd55555 	.word	0x3fd55555
 8008288:	db6fabff 	.word	0xdb6fabff
 800828c:	3fdb6db6 	.word	0x3fdb6db6
 8008290:	33333303 	.word	0x33333303
 8008294:	3fe33333 	.word	0x3fe33333
 8008298:	40080000 	.word	0x40080000
 800829c:	3feec709 	.word	0x3feec709
 80082a0:	dc3a03fd 	.word	0xdc3a03fd
 80082a4:	145b01f5 	.word	0x145b01f5
 80082a8:	be3e2fe0 	.word	0xbe3e2fe0
 80082ac:	08008af8 	.word	0x08008af8
 80082b0:	08008ae8 	.word	0x08008ae8
 80082b4:	4a8f      	ldr	r2, [pc, #572]	; (80084f4 <__ieee754_pow+0x984>)
 80082b6:	4b90      	ldr	r3, [pc, #576]	; (80084f8 <__ieee754_pow+0x988>)
 80082b8:	9806      	ldr	r0, [sp, #24]
 80082ba:	9907      	ldr	r1, [sp, #28]
 80082bc:	f7f8 f902 	bl	80004c4 <__aeabi_dadd>
 80082c0:	0032      	movs	r2, r6
 80082c2:	9002      	str	r0, [sp, #8]
 80082c4:	9103      	str	r1, [sp, #12]
 80082c6:	003b      	movs	r3, r7
 80082c8:	0028      	movs	r0, r5
 80082ca:	0021      	movs	r1, r4
 80082cc:	f7f9 fa92 	bl	80017f4 <__aeabi_dsub>
 80082d0:	0002      	movs	r2, r0
 80082d2:	000b      	movs	r3, r1
 80082d4:	9802      	ldr	r0, [sp, #8]
 80082d6:	9903      	ldr	r1, [sp, #12]
 80082d8:	f7f7 ffd4 	bl	8000284 <__aeabi_dcmpgt>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d000      	beq.n	80082e2 <__ieee754_pow+0x772>
 80082e0:	e60d      	b.n	8007efe <__ieee754_pow+0x38e>
 80082e2:	2100      	movs	r1, #0
 80082e4:	4a85      	ldr	r2, [pc, #532]	; (80084fc <__ieee754_pow+0x98c>)
 80082e6:	0063      	lsls	r3, r4, #1
 80082e8:	085b      	lsrs	r3, r3, #1
 80082ea:	9102      	str	r1, [sp, #8]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	dd25      	ble.n	800833c <__ieee754_pow+0x7cc>
 80082f0:	4a83      	ldr	r2, [pc, #524]	; (8008500 <__ieee754_pow+0x990>)
 80082f2:	151b      	asrs	r3, r3, #20
 80082f4:	189b      	adds	r3, r3, r2
 80082f6:	2280      	movs	r2, #128	; 0x80
 80082f8:	0352      	lsls	r2, r2, #13
 80082fa:	4694      	mov	ip, r2
 80082fc:	411a      	asrs	r2, r3
 80082fe:	1914      	adds	r4, r2, r4
 8008300:	0060      	lsls	r0, r4, #1
 8008302:	4b80      	ldr	r3, [pc, #512]	; (8008504 <__ieee754_pow+0x994>)
 8008304:	0d40      	lsrs	r0, r0, #21
 8008306:	4d80      	ldr	r5, [pc, #512]	; (8008508 <__ieee754_pow+0x998>)
 8008308:	18c0      	adds	r0, r0, r3
 800830a:	4105      	asrs	r5, r0
 800830c:	0021      	movs	r1, r4
 800830e:	43a9      	bics	r1, r5
 8008310:	000b      	movs	r3, r1
 8008312:	4661      	mov	r1, ip
 8008314:	0324      	lsls	r4, r4, #12
 8008316:	0b24      	lsrs	r4, r4, #12
 8008318:	4321      	orrs	r1, r4
 800831a:	2414      	movs	r4, #20
 800831c:	1a20      	subs	r0, r4, r0
 800831e:	4101      	asrs	r1, r0
 8008320:	9102      	str	r1, [sp, #8]
 8008322:	9908      	ldr	r1, [sp, #32]
 8008324:	2200      	movs	r2, #0
 8008326:	2900      	cmp	r1, #0
 8008328:	da02      	bge.n	8008330 <__ieee754_pow+0x7c0>
 800832a:	9902      	ldr	r1, [sp, #8]
 800832c:	4249      	negs	r1, r1
 800832e:	9102      	str	r1, [sp, #8]
 8008330:	0030      	movs	r0, r6
 8008332:	0039      	movs	r1, r7
 8008334:	f7f9 fa5e 	bl	80017f4 <__aeabi_dsub>
 8008338:	9004      	str	r0, [sp, #16]
 800833a:	9105      	str	r1, [sp, #20]
 800833c:	9a06      	ldr	r2, [sp, #24]
 800833e:	9b07      	ldr	r3, [sp, #28]
 8008340:	9804      	ldr	r0, [sp, #16]
 8008342:	9905      	ldr	r1, [sp, #20]
 8008344:	2600      	movs	r6, #0
 8008346:	f7f8 f8bd 	bl	80004c4 <__aeabi_dadd>
 800834a:	2200      	movs	r2, #0
 800834c:	4b6f      	ldr	r3, [pc, #444]	; (800850c <__ieee754_pow+0x99c>)
 800834e:	0030      	movs	r0, r6
 8008350:	000f      	movs	r7, r1
 8008352:	f7f8 ffdd 	bl	8001310 <__aeabi_dmul>
 8008356:	9a04      	ldr	r2, [sp, #16]
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	9008      	str	r0, [sp, #32]
 800835c:	9109      	str	r1, [sp, #36]	; 0x24
 800835e:	0030      	movs	r0, r6
 8008360:	0039      	movs	r1, r7
 8008362:	f7f9 fa47 	bl	80017f4 <__aeabi_dsub>
 8008366:	0002      	movs	r2, r0
 8008368:	000b      	movs	r3, r1
 800836a:	9806      	ldr	r0, [sp, #24]
 800836c:	9907      	ldr	r1, [sp, #28]
 800836e:	f7f9 fa41 	bl	80017f4 <__aeabi_dsub>
 8008372:	4a67      	ldr	r2, [pc, #412]	; (8008510 <__ieee754_pow+0x9a0>)
 8008374:	4b67      	ldr	r3, [pc, #412]	; (8008514 <__ieee754_pow+0x9a4>)
 8008376:	f7f8 ffcb 	bl	8001310 <__aeabi_dmul>
 800837a:	4a67      	ldr	r2, [pc, #412]	; (8008518 <__ieee754_pow+0x9a8>)
 800837c:	0004      	movs	r4, r0
 800837e:	000d      	movs	r5, r1
 8008380:	4b66      	ldr	r3, [pc, #408]	; (800851c <__ieee754_pow+0x9ac>)
 8008382:	0030      	movs	r0, r6
 8008384:	0039      	movs	r1, r7
 8008386:	f7f8 ffc3 	bl	8001310 <__aeabi_dmul>
 800838a:	0002      	movs	r2, r0
 800838c:	000b      	movs	r3, r1
 800838e:	0020      	movs	r0, r4
 8008390:	0029      	movs	r1, r5
 8008392:	f7f8 f897 	bl	80004c4 <__aeabi_dadd>
 8008396:	0004      	movs	r4, r0
 8008398:	000d      	movs	r5, r1
 800839a:	0002      	movs	r2, r0
 800839c:	000b      	movs	r3, r1
 800839e:	9808      	ldr	r0, [sp, #32]
 80083a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083a2:	f7f8 f88f 	bl	80004c4 <__aeabi_dadd>
 80083a6:	9a08      	ldr	r2, [sp, #32]
 80083a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083aa:	0006      	movs	r6, r0
 80083ac:	000f      	movs	r7, r1
 80083ae:	f7f9 fa21 	bl	80017f4 <__aeabi_dsub>
 80083b2:	0002      	movs	r2, r0
 80083b4:	000b      	movs	r3, r1
 80083b6:	0020      	movs	r0, r4
 80083b8:	0029      	movs	r1, r5
 80083ba:	f7f9 fa1b 	bl	80017f4 <__aeabi_dsub>
 80083be:	0032      	movs	r2, r6
 80083c0:	9004      	str	r0, [sp, #16]
 80083c2:	9105      	str	r1, [sp, #20]
 80083c4:	003b      	movs	r3, r7
 80083c6:	0030      	movs	r0, r6
 80083c8:	0039      	movs	r1, r7
 80083ca:	f7f8 ffa1 	bl	8001310 <__aeabi_dmul>
 80083ce:	0004      	movs	r4, r0
 80083d0:	000d      	movs	r5, r1
 80083d2:	4a53      	ldr	r2, [pc, #332]	; (8008520 <__ieee754_pow+0x9b0>)
 80083d4:	4b53      	ldr	r3, [pc, #332]	; (8008524 <__ieee754_pow+0x9b4>)
 80083d6:	f7f8 ff9b 	bl	8001310 <__aeabi_dmul>
 80083da:	4a53      	ldr	r2, [pc, #332]	; (8008528 <__ieee754_pow+0x9b8>)
 80083dc:	4b53      	ldr	r3, [pc, #332]	; (800852c <__ieee754_pow+0x9bc>)
 80083de:	f7f9 fa09 	bl	80017f4 <__aeabi_dsub>
 80083e2:	0022      	movs	r2, r4
 80083e4:	002b      	movs	r3, r5
 80083e6:	f7f8 ff93 	bl	8001310 <__aeabi_dmul>
 80083ea:	4a51      	ldr	r2, [pc, #324]	; (8008530 <__ieee754_pow+0x9c0>)
 80083ec:	4b51      	ldr	r3, [pc, #324]	; (8008534 <__ieee754_pow+0x9c4>)
 80083ee:	f7f8 f869 	bl	80004c4 <__aeabi_dadd>
 80083f2:	0022      	movs	r2, r4
 80083f4:	002b      	movs	r3, r5
 80083f6:	f7f8 ff8b 	bl	8001310 <__aeabi_dmul>
 80083fa:	4a4f      	ldr	r2, [pc, #316]	; (8008538 <__ieee754_pow+0x9c8>)
 80083fc:	4b4f      	ldr	r3, [pc, #316]	; (800853c <__ieee754_pow+0x9cc>)
 80083fe:	f7f9 f9f9 	bl	80017f4 <__aeabi_dsub>
 8008402:	0022      	movs	r2, r4
 8008404:	002b      	movs	r3, r5
 8008406:	f7f8 ff83 	bl	8001310 <__aeabi_dmul>
 800840a:	4a4d      	ldr	r2, [pc, #308]	; (8008540 <__ieee754_pow+0x9d0>)
 800840c:	4b4d      	ldr	r3, [pc, #308]	; (8008544 <__ieee754_pow+0x9d4>)
 800840e:	f7f8 f859 	bl	80004c4 <__aeabi_dadd>
 8008412:	0022      	movs	r2, r4
 8008414:	002b      	movs	r3, r5
 8008416:	f7f8 ff7b 	bl	8001310 <__aeabi_dmul>
 800841a:	0002      	movs	r2, r0
 800841c:	000b      	movs	r3, r1
 800841e:	0030      	movs	r0, r6
 8008420:	0039      	movs	r1, r7
 8008422:	f7f9 f9e7 	bl	80017f4 <__aeabi_dsub>
 8008426:	0004      	movs	r4, r0
 8008428:	000d      	movs	r5, r1
 800842a:	0002      	movs	r2, r0
 800842c:	000b      	movs	r3, r1
 800842e:	0030      	movs	r0, r6
 8008430:	0039      	movs	r1, r7
 8008432:	f7f8 ff6d 	bl	8001310 <__aeabi_dmul>
 8008436:	2380      	movs	r3, #128	; 0x80
 8008438:	9006      	str	r0, [sp, #24]
 800843a:	9107      	str	r1, [sp, #28]
 800843c:	2200      	movs	r2, #0
 800843e:	05db      	lsls	r3, r3, #23
 8008440:	0020      	movs	r0, r4
 8008442:	0029      	movs	r1, r5
 8008444:	f7f9 f9d6 	bl	80017f4 <__aeabi_dsub>
 8008448:	0002      	movs	r2, r0
 800844a:	000b      	movs	r3, r1
 800844c:	9806      	ldr	r0, [sp, #24]
 800844e:	9907      	ldr	r1, [sp, #28]
 8008450:	f7f8 fb54 	bl	8000afc <__aeabi_ddiv>
 8008454:	9a04      	ldr	r2, [sp, #16]
 8008456:	9b05      	ldr	r3, [sp, #20]
 8008458:	0004      	movs	r4, r0
 800845a:	000d      	movs	r5, r1
 800845c:	0030      	movs	r0, r6
 800845e:	0039      	movs	r1, r7
 8008460:	f7f8 ff56 	bl	8001310 <__aeabi_dmul>
 8008464:	9a04      	ldr	r2, [sp, #16]
 8008466:	9b05      	ldr	r3, [sp, #20]
 8008468:	f7f8 f82c 	bl	80004c4 <__aeabi_dadd>
 800846c:	0002      	movs	r2, r0
 800846e:	000b      	movs	r3, r1
 8008470:	0020      	movs	r0, r4
 8008472:	0029      	movs	r1, r5
 8008474:	f7f9 f9be 	bl	80017f4 <__aeabi_dsub>
 8008478:	0032      	movs	r2, r6
 800847a:	003b      	movs	r3, r7
 800847c:	f7f9 f9ba 	bl	80017f4 <__aeabi_dsub>
 8008480:	0002      	movs	r2, r0
 8008482:	000b      	movs	r3, r1
 8008484:	2000      	movs	r0, #0
 8008486:	4930      	ldr	r1, [pc, #192]	; (8008548 <__ieee754_pow+0x9d8>)
 8008488:	f7f9 f9b4 	bl	80017f4 <__aeabi_dsub>
 800848c:	9b02      	ldr	r3, [sp, #8]
 800848e:	051b      	lsls	r3, r3, #20
 8008490:	185b      	adds	r3, r3, r1
 8008492:	151a      	asrs	r2, r3, #20
 8008494:	2a00      	cmp	r2, #0
 8008496:	dc26      	bgt.n	80084e6 <__ieee754_pow+0x976>
 8008498:	9a02      	ldr	r2, [sp, #8]
 800849a:	f000 f9ad 	bl	80087f8 <scalbn>
 800849e:	9a00      	ldr	r2, [sp, #0]
 80084a0:	9b01      	ldr	r3, [sp, #4]
 80084a2:	f7ff fc04 	bl	8007cae <__ieee754_pow+0x13e>
 80084a6:	4a29      	ldr	r2, [pc, #164]	; (800854c <__ieee754_pow+0x9dc>)
 80084a8:	004b      	lsls	r3, r1, #1
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	4293      	cmp	r3, r2
 80084ae:	dc00      	bgt.n	80084b2 <__ieee754_pow+0x942>
 80084b0:	e717      	b.n	80082e2 <__ieee754_pow+0x772>
 80084b2:	4b27      	ldr	r3, [pc, #156]	; (8008550 <__ieee754_pow+0x9e0>)
 80084b4:	18cb      	adds	r3, r1, r3
 80084b6:	4303      	orrs	r3, r0
 80084b8:	d009      	beq.n	80084ce <__ieee754_pow+0x95e>
 80084ba:	9800      	ldr	r0, [sp, #0]
 80084bc:	9901      	ldr	r1, [sp, #4]
 80084be:	4a25      	ldr	r2, [pc, #148]	; (8008554 <__ieee754_pow+0x9e4>)
 80084c0:	4b25      	ldr	r3, [pc, #148]	; (8008558 <__ieee754_pow+0x9e8>)
 80084c2:	f7f8 ff25 	bl	8001310 <__aeabi_dmul>
 80084c6:	4a23      	ldr	r2, [pc, #140]	; (8008554 <__ieee754_pow+0x9e4>)
 80084c8:	4b23      	ldr	r3, [pc, #140]	; (8008558 <__ieee754_pow+0x9e8>)
 80084ca:	f7ff fbf0 	bl	8007cae <__ieee754_pow+0x13e>
 80084ce:	0032      	movs	r2, r6
 80084d0:	003b      	movs	r3, r7
 80084d2:	f7f9 f98f 	bl	80017f4 <__aeabi_dsub>
 80084d6:	9a06      	ldr	r2, [sp, #24]
 80084d8:	9b07      	ldr	r3, [sp, #28]
 80084da:	f7f7 fedd 	bl	8000298 <__aeabi_dcmpge>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d100      	bne.n	80084e4 <__ieee754_pow+0x974>
 80084e2:	e6fe      	b.n	80082e2 <__ieee754_pow+0x772>
 80084e4:	e7e9      	b.n	80084ba <__ieee754_pow+0x94a>
 80084e6:	0019      	movs	r1, r3
 80084e8:	e7d9      	b.n	800849e <__ieee754_pow+0x92e>
 80084ea:	2300      	movs	r3, #0
 80084ec:	4c16      	ldr	r4, [pc, #88]	; (8008548 <__ieee754_pow+0x9d8>)
 80084ee:	f7ff fba1 	bl	8007c34 <__ieee754_pow+0xc4>
 80084f2:	46c0      	nop			; (mov r8, r8)
 80084f4:	652b82fe 	.word	0x652b82fe
 80084f8:	3c971547 	.word	0x3c971547
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	fffffc02 	.word	0xfffffc02
 8008504:	fffffc01 	.word	0xfffffc01
 8008508:	000fffff 	.word	0x000fffff
 800850c:	3fe62e43 	.word	0x3fe62e43
 8008510:	fefa39ef 	.word	0xfefa39ef
 8008514:	3fe62e42 	.word	0x3fe62e42
 8008518:	0ca86c39 	.word	0x0ca86c39
 800851c:	be205c61 	.word	0xbe205c61
 8008520:	72bea4d0 	.word	0x72bea4d0
 8008524:	3e663769 	.word	0x3e663769
 8008528:	c5d26bf1 	.word	0xc5d26bf1
 800852c:	3ebbbd41 	.word	0x3ebbbd41
 8008530:	af25de2c 	.word	0xaf25de2c
 8008534:	3f11566a 	.word	0x3f11566a
 8008538:	16bebd93 	.word	0x16bebd93
 800853c:	3f66c16c 	.word	0x3f66c16c
 8008540:	5555553e 	.word	0x5555553e
 8008544:	3fc55555 	.word	0x3fc55555
 8008548:	3ff00000 	.word	0x3ff00000
 800854c:	4090cbff 	.word	0x4090cbff
 8008550:	3f6f3400 	.word	0x3f6f3400
 8008554:	c2f8f359 	.word	0xc2f8f359
 8008558:	01a56e1f 	.word	0x01a56e1f

0800855c <__ieee754_sqrt>:
 800855c:	4b55      	ldr	r3, [pc, #340]	; (80086b4 <__ieee754_sqrt+0x158>)
 800855e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008560:	001a      	movs	r2, r3
 8008562:	0005      	movs	r5, r0
 8008564:	000c      	movs	r4, r1
 8008566:	400a      	ands	r2, r1
 8008568:	429a      	cmp	r2, r3
 800856a:	d10f      	bne.n	800858c <__ieee754_sqrt+0x30>
 800856c:	0002      	movs	r2, r0
 800856e:	000b      	movs	r3, r1
 8008570:	f7f8 fece 	bl	8001310 <__aeabi_dmul>
 8008574:	0002      	movs	r2, r0
 8008576:	000b      	movs	r3, r1
 8008578:	0028      	movs	r0, r5
 800857a:	0021      	movs	r1, r4
 800857c:	f7f7 ffa2 	bl	80004c4 <__aeabi_dadd>
 8008580:	0005      	movs	r5, r0
 8008582:	000c      	movs	r4, r1
 8008584:	0028      	movs	r0, r5
 8008586:	0021      	movs	r1, r4
 8008588:	b003      	add	sp, #12
 800858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800858c:	0002      	movs	r2, r0
 800858e:	2900      	cmp	r1, #0
 8008590:	dc10      	bgt.n	80085b4 <__ieee754_sqrt+0x58>
 8008592:	004b      	lsls	r3, r1, #1
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	4303      	orrs	r3, r0
 8008598:	d0f4      	beq.n	8008584 <__ieee754_sqrt+0x28>
 800859a:	2000      	movs	r0, #0
 800859c:	4281      	cmp	r1, r0
 800859e:	d100      	bne.n	80085a2 <__ieee754_sqrt+0x46>
 80085a0:	e07f      	b.n	80086a2 <__ieee754_sqrt+0x146>
 80085a2:	000b      	movs	r3, r1
 80085a4:	0028      	movs	r0, r5
 80085a6:	f7f9 f925 	bl	80017f4 <__aeabi_dsub>
 80085aa:	0002      	movs	r2, r0
 80085ac:	000b      	movs	r3, r1
 80085ae:	f7f8 faa5 	bl	8000afc <__aeabi_ddiv>
 80085b2:	e7e5      	b.n	8008580 <__ieee754_sqrt+0x24>
 80085b4:	1508      	asrs	r0, r1, #20
 80085b6:	d074      	beq.n	80086a2 <__ieee754_sqrt+0x146>
 80085b8:	4b3f      	ldr	r3, [pc, #252]	; (80086b8 <__ieee754_sqrt+0x15c>)
 80085ba:	0309      	lsls	r1, r1, #12
 80085bc:	18c0      	adds	r0, r0, r3
 80085be:	2380      	movs	r3, #128	; 0x80
 80085c0:	0b09      	lsrs	r1, r1, #12
 80085c2:	035b      	lsls	r3, r3, #13
 80085c4:	4319      	orrs	r1, r3
 80085c6:	07c3      	lsls	r3, r0, #31
 80085c8:	d503      	bpl.n	80085d2 <__ieee754_sqrt+0x76>
 80085ca:	0fd3      	lsrs	r3, r2, #31
 80085cc:	0049      	lsls	r1, r1, #1
 80085ce:	18c9      	adds	r1, r1, r3
 80085d0:	0052      	lsls	r2, r2, #1
 80085d2:	2400      	movs	r4, #0
 80085d4:	1043      	asrs	r3, r0, #1
 80085d6:	0049      	lsls	r1, r1, #1
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	2580      	movs	r5, #128	; 0x80
 80085dc:	0fd3      	lsrs	r3, r2, #31
 80085de:	18cb      	adds	r3, r1, r3
 80085e0:	0020      	movs	r0, r4
 80085e2:	2116      	movs	r1, #22
 80085e4:	0052      	lsls	r2, r2, #1
 80085e6:	03ad      	lsls	r5, r5, #14
 80085e8:	1946      	adds	r6, r0, r5
 80085ea:	429e      	cmp	r6, r3
 80085ec:	dc02      	bgt.n	80085f4 <__ieee754_sqrt+0x98>
 80085ee:	1970      	adds	r0, r6, r5
 80085f0:	1b9b      	subs	r3, r3, r6
 80085f2:	1964      	adds	r4, r4, r5
 80085f4:	0fd6      	lsrs	r6, r2, #31
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	3901      	subs	r1, #1
 80085fa:	199b      	adds	r3, r3, r6
 80085fc:	0052      	lsls	r2, r2, #1
 80085fe:	086d      	lsrs	r5, r5, #1
 8008600:	2900      	cmp	r1, #0
 8008602:	d1f1      	bne.n	80085e8 <__ieee754_sqrt+0x8c>
 8008604:	2520      	movs	r5, #32
 8008606:	2680      	movs	r6, #128	; 0x80
 8008608:	46ac      	mov	ip, r5
 800860a:	9100      	str	r1, [sp, #0]
 800860c:	0636      	lsls	r6, r6, #24
 800860e:	9d00      	ldr	r5, [sp, #0]
 8008610:	1977      	adds	r7, r6, r5
 8008612:	4283      	cmp	r3, r0
 8008614:	dc02      	bgt.n	800861c <__ieee754_sqrt+0xc0>
 8008616:	d112      	bne.n	800863e <__ieee754_sqrt+0xe2>
 8008618:	4297      	cmp	r7, r2
 800861a:	d810      	bhi.n	800863e <__ieee754_sqrt+0xe2>
 800861c:	19bd      	adds	r5, r7, r6
 800861e:	9500      	str	r5, [sp, #0]
 8008620:	0005      	movs	r5, r0
 8008622:	2f00      	cmp	r7, #0
 8008624:	da03      	bge.n	800862e <__ieee754_sqrt+0xd2>
 8008626:	9d00      	ldr	r5, [sp, #0]
 8008628:	43ed      	mvns	r5, r5
 800862a:	0fed      	lsrs	r5, r5, #31
 800862c:	1945      	adds	r5, r0, r5
 800862e:	1a1b      	subs	r3, r3, r0
 8008630:	42ba      	cmp	r2, r7
 8008632:	4180      	sbcs	r0, r0
 8008634:	4240      	negs	r0, r0
 8008636:	1a1b      	subs	r3, r3, r0
 8008638:	0028      	movs	r0, r5
 800863a:	1bd2      	subs	r2, r2, r7
 800863c:	1989      	adds	r1, r1, r6
 800863e:	0fd5      	lsrs	r5, r2, #31
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	18eb      	adds	r3, r5, r3
 8008644:	2501      	movs	r5, #1
 8008646:	426d      	negs	r5, r5
 8008648:	44ac      	add	ip, r5
 800864a:	4665      	mov	r5, ip
 800864c:	0052      	lsls	r2, r2, #1
 800864e:	0876      	lsrs	r6, r6, #1
 8008650:	2d00      	cmp	r5, #0
 8008652:	d1dc      	bne.n	800860e <__ieee754_sqrt+0xb2>
 8008654:	4313      	orrs	r3, r2
 8008656:	d003      	beq.n	8008660 <__ieee754_sqrt+0x104>
 8008658:	1c4b      	adds	r3, r1, #1
 800865a:	d127      	bne.n	80086ac <__ieee754_sqrt+0x150>
 800865c:	4661      	mov	r1, ip
 800865e:	3401      	adds	r4, #1
 8008660:	4b16      	ldr	r3, [pc, #88]	; (80086bc <__ieee754_sqrt+0x160>)
 8008662:	1060      	asrs	r0, r4, #1
 8008664:	18c0      	adds	r0, r0, r3
 8008666:	0849      	lsrs	r1, r1, #1
 8008668:	07e3      	lsls	r3, r4, #31
 800866a:	d502      	bpl.n	8008672 <__ieee754_sqrt+0x116>
 800866c:	2380      	movs	r3, #128	; 0x80
 800866e:	061b      	lsls	r3, r3, #24
 8008670:	4319      	orrs	r1, r3
 8008672:	9b01      	ldr	r3, [sp, #4]
 8008674:	000d      	movs	r5, r1
 8008676:	051c      	lsls	r4, r3, #20
 8008678:	1823      	adds	r3, r4, r0
 800867a:	001c      	movs	r4, r3
 800867c:	e782      	b.n	8008584 <__ieee754_sqrt+0x28>
 800867e:	0ad1      	lsrs	r1, r2, #11
 8008680:	3b15      	subs	r3, #21
 8008682:	0552      	lsls	r2, r2, #21
 8008684:	2900      	cmp	r1, #0
 8008686:	d0fa      	beq.n	800867e <__ieee754_sqrt+0x122>
 8008688:	2480      	movs	r4, #128	; 0x80
 800868a:	0364      	lsls	r4, r4, #13
 800868c:	4221      	tst	r1, r4
 800868e:	d00a      	beq.n	80086a6 <__ieee754_sqrt+0x14a>
 8008690:	2420      	movs	r4, #32
 8008692:	0016      	movs	r6, r2
 8008694:	1a24      	subs	r4, r4, r0
 8008696:	40e6      	lsrs	r6, r4
 8008698:	1e45      	subs	r5, r0, #1
 800869a:	4082      	lsls	r2, r0
 800869c:	4331      	orrs	r1, r6
 800869e:	1b58      	subs	r0, r3, r5
 80086a0:	e78a      	b.n	80085b8 <__ieee754_sqrt+0x5c>
 80086a2:	2300      	movs	r3, #0
 80086a4:	e7ee      	b.n	8008684 <__ieee754_sqrt+0x128>
 80086a6:	0049      	lsls	r1, r1, #1
 80086a8:	3001      	adds	r0, #1
 80086aa:	e7ef      	b.n	800868c <__ieee754_sqrt+0x130>
 80086ac:	2301      	movs	r3, #1
 80086ae:	3101      	adds	r1, #1
 80086b0:	4399      	bics	r1, r3
 80086b2:	e7d5      	b.n	8008660 <__ieee754_sqrt+0x104>
 80086b4:	7ff00000 	.word	0x7ff00000
 80086b8:	fffffc01 	.word	0xfffffc01
 80086bc:	3fe00000 	.word	0x3fe00000

080086c0 <fabs>:
 80086c0:	0049      	lsls	r1, r1, #1
 80086c2:	084b      	lsrs	r3, r1, #1
 80086c4:	0019      	movs	r1, r3
 80086c6:	4770      	bx	lr

080086c8 <finite>:
 80086c8:	0048      	lsls	r0, r1, #1
 80086ca:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <finite+0xc>)
 80086cc:	0840      	lsrs	r0, r0, #1
 80086ce:	18c0      	adds	r0, r0, r3
 80086d0:	0fc0      	lsrs	r0, r0, #31
 80086d2:	4770      	bx	lr
 80086d4:	80100000 	.word	0x80100000

080086d8 <matherr>:
 80086d8:	2000      	movs	r0, #0
 80086da:	4770      	bx	lr

080086dc <nan>:
 80086dc:	2000      	movs	r0, #0
 80086de:	4901      	ldr	r1, [pc, #4]	; (80086e4 <nan+0x8>)
 80086e0:	4770      	bx	lr
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	7ff80000 	.word	0x7ff80000

080086e8 <rint>:
 80086e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ea:	004a      	lsls	r2, r1, #1
 80086ec:	4e3e      	ldr	r6, [pc, #248]	; (80087e8 <rint+0x100>)
 80086ee:	0d52      	lsrs	r2, r2, #21
 80086f0:	b085      	sub	sp, #20
 80086f2:	1996      	adds	r6, r2, r6
 80086f4:	000d      	movs	r5, r1
 80086f6:	9101      	str	r1, [sp, #4]
 80086f8:	0003      	movs	r3, r0
 80086fa:	0fcc      	lsrs	r4, r1, #31
 80086fc:	2e13      	cmp	r6, #19
 80086fe:	dc57      	bgt.n	80087b0 <rint+0xc8>
 8008700:	2e00      	cmp	r6, #0
 8008702:	da2a      	bge.n	800875a <rint+0x72>
 8008704:	004a      	lsls	r2, r1, #1
 8008706:	0852      	lsrs	r2, r2, #1
 8008708:	4302      	orrs	r2, r0
 800870a:	d024      	beq.n	8008756 <rint+0x6e>
 800870c:	030a      	lsls	r2, r1, #12
 800870e:	0b12      	lsrs	r2, r2, #12
 8008710:	4302      	orrs	r2, r0
 8008712:	4253      	negs	r3, r2
 8008714:	4313      	orrs	r3, r2
 8008716:	2280      	movs	r2, #128	; 0x80
 8008718:	0c4d      	lsrs	r5, r1, #17
 800871a:	0312      	lsls	r2, r2, #12
 800871c:	0b1b      	lsrs	r3, r3, #12
 800871e:	4013      	ands	r3, r2
 8008720:	046d      	lsls	r5, r5, #17
 8008722:	432b      	orrs	r3, r5
 8008724:	0019      	movs	r1, r3
 8008726:	4b31      	ldr	r3, [pc, #196]	; (80087ec <rint+0x104>)
 8008728:	00e2      	lsls	r2, r4, #3
 800872a:	189b      	adds	r3, r3, r2
 800872c:	681e      	ldr	r6, [r3, #0]
 800872e:	685f      	ldr	r7, [r3, #4]
 8008730:	0002      	movs	r2, r0
 8008732:	000b      	movs	r3, r1
 8008734:	0030      	movs	r0, r6
 8008736:	0039      	movs	r1, r7
 8008738:	f7f7 fec4 	bl	80004c4 <__aeabi_dadd>
 800873c:	9002      	str	r0, [sp, #8]
 800873e:	9103      	str	r1, [sp, #12]
 8008740:	9802      	ldr	r0, [sp, #8]
 8008742:	9903      	ldr	r1, [sp, #12]
 8008744:	003b      	movs	r3, r7
 8008746:	0032      	movs	r2, r6
 8008748:	f7f9 f854 	bl	80017f4 <__aeabi_dsub>
 800874c:	004b      	lsls	r3, r1, #1
 800874e:	085b      	lsrs	r3, r3, #1
 8008750:	07e4      	lsls	r4, r4, #31
 8008752:	4323      	orrs	r3, r4
 8008754:	0019      	movs	r1, r3
 8008756:	b005      	add	sp, #20
 8008758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875a:	4a25      	ldr	r2, [pc, #148]	; (80087f0 <rint+0x108>)
 800875c:	4132      	asrs	r2, r6
 800875e:	0017      	movs	r7, r2
 8008760:	400f      	ands	r7, r1
 8008762:	4307      	orrs	r7, r0
 8008764:	d0f7      	beq.n	8008756 <rint+0x6e>
 8008766:	0852      	lsrs	r2, r2, #1
 8008768:	0011      	movs	r1, r2
 800876a:	4029      	ands	r1, r5
 800876c:	430b      	orrs	r3, r1
 800876e:	d00a      	beq.n	8008786 <rint+0x9e>
 8008770:	2300      	movs	r3, #0
 8008772:	2e13      	cmp	r6, #19
 8008774:	d101      	bne.n	800877a <rint+0x92>
 8008776:	2380      	movs	r3, #128	; 0x80
 8008778:	061b      	lsls	r3, r3, #24
 800877a:	2780      	movs	r7, #128	; 0x80
 800877c:	02ff      	lsls	r7, r7, #11
 800877e:	4137      	asrs	r7, r6
 8008780:	4395      	bics	r5, r2
 8008782:	432f      	orrs	r7, r5
 8008784:	9701      	str	r7, [sp, #4]
 8008786:	9901      	ldr	r1, [sp, #4]
 8008788:	001a      	movs	r2, r3
 800878a:	000b      	movs	r3, r1
 800878c:	4917      	ldr	r1, [pc, #92]	; (80087ec <rint+0x104>)
 800878e:	00e4      	lsls	r4, r4, #3
 8008790:	190c      	adds	r4, r1, r4
 8008792:	6865      	ldr	r5, [r4, #4]
 8008794:	6824      	ldr	r4, [r4, #0]
 8008796:	0020      	movs	r0, r4
 8008798:	0029      	movs	r1, r5
 800879a:	f7f7 fe93 	bl	80004c4 <__aeabi_dadd>
 800879e:	9002      	str	r0, [sp, #8]
 80087a0:	9103      	str	r1, [sp, #12]
 80087a2:	9802      	ldr	r0, [sp, #8]
 80087a4:	9903      	ldr	r1, [sp, #12]
 80087a6:	0022      	movs	r2, r4
 80087a8:	002b      	movs	r3, r5
 80087aa:	f7f9 f823 	bl	80017f4 <__aeabi_dsub>
 80087ae:	e7d2      	b.n	8008756 <rint+0x6e>
 80087b0:	2e33      	cmp	r6, #51	; 0x33
 80087b2:	dd08      	ble.n	80087c6 <rint+0xde>
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	429e      	cmp	r6, r3
 80087ba:	d1cc      	bne.n	8008756 <rint+0x6e>
 80087bc:	0002      	movs	r2, r0
 80087be:	000b      	movs	r3, r1
 80087c0:	f7f7 fe80 	bl	80004c4 <__aeabi_dadd>
 80087c4:	e7c7      	b.n	8008756 <rint+0x6e>
 80087c6:	2601      	movs	r6, #1
 80087c8:	4d0a      	ldr	r5, [pc, #40]	; (80087f4 <rint+0x10c>)
 80087ca:	4276      	negs	r6, r6
 80087cc:	1952      	adds	r2, r2, r5
 80087ce:	40d6      	lsrs	r6, r2
 80087d0:	4206      	tst	r6, r0
 80087d2:	d0c0      	beq.n	8008756 <rint+0x6e>
 80087d4:	0876      	lsrs	r6, r6, #1
 80087d6:	4206      	tst	r6, r0
 80087d8:	d0d5      	beq.n	8008786 <rint+0x9e>
 80087da:	2180      	movs	r1, #128	; 0x80
 80087dc:	05c9      	lsls	r1, r1, #23
 80087de:	4111      	asrs	r1, r2
 80087e0:	43b3      	bics	r3, r6
 80087e2:	430b      	orrs	r3, r1
 80087e4:	e7cf      	b.n	8008786 <rint+0x9e>
 80087e6:	46c0      	nop			; (mov r8, r8)
 80087e8:	fffffc01 	.word	0xfffffc01
 80087ec:	08008b08 	.word	0x08008b08
 80087f0:	000fffff 	.word	0x000fffff
 80087f4:	fffffbed 	.word	0xfffffbed

080087f8 <scalbn>:
 80087f8:	004b      	lsls	r3, r1, #1
 80087fa:	b570      	push	{r4, r5, r6, lr}
 80087fc:	0d5b      	lsrs	r3, r3, #21
 80087fe:	0014      	movs	r4, r2
 8008800:	000a      	movs	r2, r1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10d      	bne.n	8008822 <scalbn+0x2a>
 8008806:	004b      	lsls	r3, r1, #1
 8008808:	085b      	lsrs	r3, r3, #1
 800880a:	4303      	orrs	r3, r0
 800880c:	d010      	beq.n	8008830 <scalbn+0x38>
 800880e:	4b21      	ldr	r3, [pc, #132]	; (8008894 <scalbn+0x9c>)
 8008810:	2200      	movs	r2, #0
 8008812:	f7f8 fd7d 	bl	8001310 <__aeabi_dmul>
 8008816:	4b20      	ldr	r3, [pc, #128]	; (8008898 <scalbn+0xa0>)
 8008818:	429c      	cmp	r4, r3
 800881a:	da0a      	bge.n	8008832 <scalbn+0x3a>
 800881c:	4a1f      	ldr	r2, [pc, #124]	; (800889c <scalbn+0xa4>)
 800881e:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <scalbn+0xa8>)
 8008820:	e017      	b.n	8008852 <scalbn+0x5a>
 8008822:	4d20      	ldr	r5, [pc, #128]	; (80088a4 <scalbn+0xac>)
 8008824:	42ab      	cmp	r3, r5
 8008826:	d108      	bne.n	800883a <scalbn+0x42>
 8008828:	0002      	movs	r2, r0
 800882a:	000b      	movs	r3, r1
 800882c:	f7f7 fe4a 	bl	80004c4 <__aeabi_dadd>
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	000a      	movs	r2, r1
 8008834:	004b      	lsls	r3, r1, #1
 8008836:	0d5b      	lsrs	r3, r3, #21
 8008838:	3b36      	subs	r3, #54	; 0x36
 800883a:	4d1b      	ldr	r5, [pc, #108]	; (80088a8 <scalbn+0xb0>)
 800883c:	18e3      	adds	r3, r4, r3
 800883e:	42ab      	cmp	r3, r5
 8008840:	dd0a      	ble.n	8008858 <scalbn+0x60>
 8008842:	0002      	movs	r2, r0
 8008844:	000b      	movs	r3, r1
 8008846:	4819      	ldr	r0, [pc, #100]	; (80088ac <scalbn+0xb4>)
 8008848:	4919      	ldr	r1, [pc, #100]	; (80088b0 <scalbn+0xb8>)
 800884a:	f000 f839 	bl	80088c0 <copysign>
 800884e:	4a17      	ldr	r2, [pc, #92]	; (80088ac <scalbn+0xb4>)
 8008850:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <scalbn+0xb8>)
 8008852:	f7f8 fd5d 	bl	8001310 <__aeabi_dmul>
 8008856:	e7eb      	b.n	8008830 <scalbn+0x38>
 8008858:	2b00      	cmp	r3, #0
 800885a:	dd05      	ble.n	8008868 <scalbn+0x70>
 800885c:	4c15      	ldr	r4, [pc, #84]	; (80088b4 <scalbn+0xbc>)
 800885e:	051b      	lsls	r3, r3, #20
 8008860:	4022      	ands	r2, r4
 8008862:	431a      	orrs	r2, r3
 8008864:	0011      	movs	r1, r2
 8008866:	e7e3      	b.n	8008830 <scalbn+0x38>
 8008868:	001d      	movs	r5, r3
 800886a:	3535      	adds	r5, #53	; 0x35
 800886c:	da09      	bge.n	8008882 <scalbn+0x8a>
 800886e:	4b12      	ldr	r3, [pc, #72]	; (80088b8 <scalbn+0xc0>)
 8008870:	0002      	movs	r2, r0
 8008872:	429c      	cmp	r4, r3
 8008874:	dce6      	bgt.n	8008844 <scalbn+0x4c>
 8008876:	000b      	movs	r3, r1
 8008878:	4808      	ldr	r0, [pc, #32]	; (800889c <scalbn+0xa4>)
 800887a:	4909      	ldr	r1, [pc, #36]	; (80088a0 <scalbn+0xa8>)
 800887c:	f000 f820 	bl	80088c0 <copysign>
 8008880:	e7cc      	b.n	800881c <scalbn+0x24>
 8008882:	4c0c      	ldr	r4, [pc, #48]	; (80088b4 <scalbn+0xbc>)
 8008884:	3336      	adds	r3, #54	; 0x36
 8008886:	4022      	ands	r2, r4
 8008888:	051b      	lsls	r3, r3, #20
 800888a:	4313      	orrs	r3, r2
 800888c:	0019      	movs	r1, r3
 800888e:	2200      	movs	r2, #0
 8008890:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <scalbn+0xc4>)
 8008892:	e7de      	b.n	8008852 <scalbn+0x5a>
 8008894:	43500000 	.word	0x43500000
 8008898:	ffff3cb0 	.word	0xffff3cb0
 800889c:	c2f8f359 	.word	0xc2f8f359
 80088a0:	01a56e1f 	.word	0x01a56e1f
 80088a4:	000007ff 	.word	0x000007ff
 80088a8:	000007fe 	.word	0x000007fe
 80088ac:	8800759c 	.word	0x8800759c
 80088b0:	7e37e43c 	.word	0x7e37e43c
 80088b4:	800fffff 	.word	0x800fffff
 80088b8:	0000c350 	.word	0x0000c350
 80088bc:	3c900000 	.word	0x3c900000

080088c0 <copysign>:
 80088c0:	b530      	push	{r4, r5, lr}
 80088c2:	004a      	lsls	r2, r1, #1
 80088c4:	0fdb      	lsrs	r3, r3, #31
 80088c6:	07db      	lsls	r3, r3, #31
 80088c8:	0852      	lsrs	r2, r2, #1
 80088ca:	431a      	orrs	r2, r3
 80088cc:	0011      	movs	r1, r2
 80088ce:	bd30      	pop	{r4, r5, pc}

080088d0 <_init>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d6:	bc08      	pop	{r3}
 80088d8:	469e      	mov	lr, r3
 80088da:	4770      	bx	lr

080088dc <_fini>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e2:	bc08      	pop	{r3}
 80088e4:	469e      	mov	lr, r3
 80088e6:	4770      	bx	lr
