
477_BluetoothInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008aa0  08008aa0  00018aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce0  08008ce0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ce8  08008ce8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008cf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200000a8  08008d98  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08008d98  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5e6  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002168  00000000  00000000  0002f6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00031820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e90  00000000  00000000  00032798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015429  00000000  00000000  00033628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c454  00000000  00000000  00048a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008128b  00000000  00000000  00054ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003efc  00000000  00000000  000d61ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008a84 	.word	0x08008a84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	08008a84 	.word	0x08008a84

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f000 fffd 	bl	8001414 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 ff55 	bl	80012d4 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ffef 	bl	8001414 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffe5 	bl	8001414 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff77 	bl	800134c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff6d 	bl	800134c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_uldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d111      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d10f      	bne.n	80004a8 <__aeabi_uldivmod+0x28>
 8000488:	2900      	cmp	r1, #0
 800048a:	d100      	bne.n	800048e <__aeabi_uldivmod+0xe>
 800048c:	2800      	cmp	r0, #0
 800048e:	d002      	beq.n	8000496 <__aeabi_uldivmod+0x16>
 8000490:	2100      	movs	r1, #0
 8000492:	43c9      	mvns	r1, r1
 8000494:	1c08      	adds	r0, r1, #0
 8000496:	b407      	push	{r0, r1, r2}
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <__aeabi_uldivmod+0x24>)
 800049a:	a102      	add	r1, pc, #8	; (adr r1, 80004a4 <__aeabi_uldivmod+0x24>)
 800049c:	1840      	adds	r0, r0, r1
 800049e:	9002      	str	r0, [sp, #8]
 80004a0:	bd03      	pop	{r0, r1, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	ffffff5d 	.word	0xffffff5d
 80004a8:	b403      	push	{r0, r1}
 80004aa:	4668      	mov	r0, sp
 80004ac:	b501      	push	{r0, lr}
 80004ae:	9802      	ldr	r0, [sp, #8]
 80004b0:	f000 f830 	bl	8000514 <__udivmoddi4>
 80004b4:	9b01      	ldr	r3, [sp, #4]
 80004b6:	469e      	mov	lr, r3
 80004b8:	b002      	add	sp, #8
 80004ba:	bc0c      	pop	{r2, r3}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <__aeabi_lmul>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	46ce      	mov	lr, r9
 80004c4:	4647      	mov	r7, r8
 80004c6:	0415      	lsls	r5, r2, #16
 80004c8:	0c2d      	lsrs	r5, r5, #16
 80004ca:	002e      	movs	r6, r5
 80004cc:	b580      	push	{r7, lr}
 80004ce:	0407      	lsls	r7, r0, #16
 80004d0:	0c14      	lsrs	r4, r2, #16
 80004d2:	0c3f      	lsrs	r7, r7, #16
 80004d4:	4699      	mov	r9, r3
 80004d6:	0c03      	lsrs	r3, r0, #16
 80004d8:	437e      	muls	r6, r7
 80004da:	435d      	muls	r5, r3
 80004dc:	4367      	muls	r7, r4
 80004de:	4363      	muls	r3, r4
 80004e0:	197f      	adds	r7, r7, r5
 80004e2:	0c34      	lsrs	r4, r6, #16
 80004e4:	19e4      	adds	r4, r4, r7
 80004e6:	469c      	mov	ip, r3
 80004e8:	42a5      	cmp	r5, r4
 80004ea:	d903      	bls.n	80004f4 <__aeabi_lmul+0x34>
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	025b      	lsls	r3, r3, #9
 80004f0:	4698      	mov	r8, r3
 80004f2:	44c4      	add	ip, r8
 80004f4:	464b      	mov	r3, r9
 80004f6:	4343      	muls	r3, r0
 80004f8:	4351      	muls	r1, r2
 80004fa:	0c25      	lsrs	r5, r4, #16
 80004fc:	0436      	lsls	r6, r6, #16
 80004fe:	4465      	add	r5, ip
 8000500:	0c36      	lsrs	r6, r6, #16
 8000502:	0424      	lsls	r4, r4, #16
 8000504:	19a4      	adds	r4, r4, r6
 8000506:	195b      	adds	r3, r3, r5
 8000508:	1859      	adds	r1, r3, r1
 800050a:	0020      	movs	r0, r4
 800050c:	bc0c      	pop	{r2, r3}
 800050e:	4690      	mov	r8, r2
 8000510:	4699      	mov	r9, r3
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000514 <__udivmoddi4>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	464f      	mov	r7, r9
 8000518:	4646      	mov	r6, r8
 800051a:	46d6      	mov	lr, sl
 800051c:	b5c0      	push	{r6, r7, lr}
 800051e:	0004      	movs	r4, r0
 8000520:	b082      	sub	sp, #8
 8000522:	000d      	movs	r5, r1
 8000524:	4691      	mov	r9, r2
 8000526:	4698      	mov	r8, r3
 8000528:	428b      	cmp	r3, r1
 800052a:	d82f      	bhi.n	800058c <__udivmoddi4+0x78>
 800052c:	d02c      	beq.n	8000588 <__udivmoddi4+0x74>
 800052e:	4641      	mov	r1, r8
 8000530:	4648      	mov	r0, r9
 8000532:	f001 fe05 	bl	8002140 <__clzdi2>
 8000536:	0029      	movs	r1, r5
 8000538:	0006      	movs	r6, r0
 800053a:	0020      	movs	r0, r4
 800053c:	f001 fe00 	bl	8002140 <__clzdi2>
 8000540:	1a33      	subs	r3, r6, r0
 8000542:	469c      	mov	ip, r3
 8000544:	3b20      	subs	r3, #32
 8000546:	469a      	mov	sl, r3
 8000548:	d500      	bpl.n	800054c <__udivmoddi4+0x38>
 800054a:	e076      	b.n	800063a <__udivmoddi4+0x126>
 800054c:	464b      	mov	r3, r9
 800054e:	4652      	mov	r2, sl
 8000550:	4093      	lsls	r3, r2
 8000552:	001f      	movs	r7, r3
 8000554:	464b      	mov	r3, r9
 8000556:	4662      	mov	r2, ip
 8000558:	4093      	lsls	r3, r2
 800055a:	001e      	movs	r6, r3
 800055c:	42af      	cmp	r7, r5
 800055e:	d828      	bhi.n	80005b2 <__udivmoddi4+0x9e>
 8000560:	d025      	beq.n	80005ae <__udivmoddi4+0x9a>
 8000562:	4653      	mov	r3, sl
 8000564:	1ba4      	subs	r4, r4, r6
 8000566:	41bd      	sbcs	r5, r7
 8000568:	2b00      	cmp	r3, #0
 800056a:	da00      	bge.n	800056e <__udivmoddi4+0x5a>
 800056c:	e07b      	b.n	8000666 <__udivmoddi4+0x152>
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	4652      	mov	r2, sl
 800057a:	4093      	lsls	r3, r2
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	4662      	mov	r2, ip
 8000582:	4093      	lsls	r3, r2
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	e018      	b.n	80005ba <__udivmoddi4+0xa6>
 8000588:	4282      	cmp	r2, r0
 800058a:	d9d0      	bls.n	800052e <__udivmoddi4+0x1a>
 800058c:	2200      	movs	r2, #0
 800058e:	2300      	movs	r3, #0
 8000590:	9200      	str	r2, [sp, #0]
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <__udivmoddi4+0x8a>
 800059a:	601c      	str	r4, [r3, #0]
 800059c:	605d      	str	r5, [r3, #4]
 800059e:	9800      	ldr	r0, [sp, #0]
 80005a0:	9901      	ldr	r1, [sp, #4]
 80005a2:	b002      	add	sp, #8
 80005a4:	bc1c      	pop	{r2, r3, r4}
 80005a6:	4690      	mov	r8, r2
 80005a8:	4699      	mov	r9, r3
 80005aa:	46a2      	mov	sl, r4
 80005ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d9d7      	bls.n	8000562 <__udivmoddi4+0x4e>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2300      	movs	r3, #0
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	4663      	mov	r3, ip
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0e9      	beq.n	8000594 <__udivmoddi4+0x80>
 80005c0:	07fb      	lsls	r3, r7, #31
 80005c2:	4698      	mov	r8, r3
 80005c4:	4641      	mov	r1, r8
 80005c6:	0872      	lsrs	r2, r6, #1
 80005c8:	430a      	orrs	r2, r1
 80005ca:	087b      	lsrs	r3, r7, #1
 80005cc:	4666      	mov	r6, ip
 80005ce:	e00e      	b.n	80005ee <__udivmoddi4+0xda>
 80005d0:	42ab      	cmp	r3, r5
 80005d2:	d101      	bne.n	80005d8 <__udivmoddi4+0xc4>
 80005d4:	42a2      	cmp	r2, r4
 80005d6:	d80c      	bhi.n	80005f2 <__udivmoddi4+0xde>
 80005d8:	1aa4      	subs	r4, r4, r2
 80005da:	419d      	sbcs	r5, r3
 80005dc:	2001      	movs	r0, #1
 80005de:	1924      	adds	r4, r4, r4
 80005e0:	416d      	adcs	r5, r5
 80005e2:	2100      	movs	r1, #0
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1824      	adds	r4, r4, r0
 80005e8:	414d      	adcs	r5, r1
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d006      	beq.n	80005fc <__udivmoddi4+0xe8>
 80005ee:	42ab      	cmp	r3, r5
 80005f0:	d9ee      	bls.n	80005d0 <__udivmoddi4+0xbc>
 80005f2:	3e01      	subs	r6, #1
 80005f4:	1924      	adds	r4, r4, r4
 80005f6:	416d      	adcs	r5, r5
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d1f8      	bne.n	80005ee <__udivmoddi4+0xda>
 80005fc:	9800      	ldr	r0, [sp, #0]
 80005fe:	9901      	ldr	r1, [sp, #4]
 8000600:	4653      	mov	r3, sl
 8000602:	1900      	adds	r0, r0, r4
 8000604:	4169      	adcs	r1, r5
 8000606:	2b00      	cmp	r3, #0
 8000608:	db23      	blt.n	8000652 <__udivmoddi4+0x13e>
 800060a:	002b      	movs	r3, r5
 800060c:	4652      	mov	r2, sl
 800060e:	40d3      	lsrs	r3, r2
 8000610:	002a      	movs	r2, r5
 8000612:	4664      	mov	r4, ip
 8000614:	40e2      	lsrs	r2, r4
 8000616:	001c      	movs	r4, r3
 8000618:	4653      	mov	r3, sl
 800061a:	0015      	movs	r5, r2
 800061c:	2b00      	cmp	r3, #0
 800061e:	db2d      	blt.n	800067c <__udivmoddi4+0x168>
 8000620:	0026      	movs	r6, r4
 8000622:	4657      	mov	r7, sl
 8000624:	40be      	lsls	r6, r7
 8000626:	0033      	movs	r3, r6
 8000628:	0026      	movs	r6, r4
 800062a:	4667      	mov	r7, ip
 800062c:	40be      	lsls	r6, r7
 800062e:	0032      	movs	r2, r6
 8000630:	1a80      	subs	r0, r0, r2
 8000632:	4199      	sbcs	r1, r3
 8000634:	9000      	str	r0, [sp, #0]
 8000636:	9101      	str	r1, [sp, #4]
 8000638:	e7ac      	b.n	8000594 <__udivmoddi4+0x80>
 800063a:	4662      	mov	r2, ip
 800063c:	2320      	movs	r3, #32
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	464a      	mov	r2, r9
 8000642:	40da      	lsrs	r2, r3
 8000644:	4661      	mov	r1, ip
 8000646:	0013      	movs	r3, r2
 8000648:	4642      	mov	r2, r8
 800064a:	408a      	lsls	r2, r1
 800064c:	0017      	movs	r7, r2
 800064e:	431f      	orrs	r7, r3
 8000650:	e780      	b.n	8000554 <__udivmoddi4+0x40>
 8000652:	4662      	mov	r2, ip
 8000654:	2320      	movs	r3, #32
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	4666      	mov	r6, ip
 800065c:	409a      	lsls	r2, r3
 800065e:	0023      	movs	r3, r4
 8000660:	40f3      	lsrs	r3, r6
 8000662:	4313      	orrs	r3, r2
 8000664:	e7d4      	b.n	8000610 <__udivmoddi4+0xfc>
 8000666:	4662      	mov	r2, ip
 8000668:	2320      	movs	r3, #32
 800066a:	2100      	movs	r1, #0
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	9100      	str	r1, [sp, #0]
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	40da      	lsrs	r2, r3
 8000678:	9201      	str	r2, [sp, #4]
 800067a:	e780      	b.n	800057e <__udivmoddi4+0x6a>
 800067c:	2320      	movs	r3, #32
 800067e:	4662      	mov	r2, ip
 8000680:	0026      	movs	r6, r4
 8000682:	1a9b      	subs	r3, r3, r2
 8000684:	40de      	lsrs	r6, r3
 8000686:	002f      	movs	r7, r5
 8000688:	46b0      	mov	r8, r6
 800068a:	4666      	mov	r6, ip
 800068c:	40b7      	lsls	r7, r6
 800068e:	4646      	mov	r6, r8
 8000690:	003b      	movs	r3, r7
 8000692:	4333      	orrs	r3, r6
 8000694:	e7c8      	b.n	8000628 <__udivmoddi4+0x114>
 8000696:	46c0      	nop			; (mov r8, r8)

08000698 <__aeabi_dadd>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	464f      	mov	r7, r9
 800069c:	4646      	mov	r6, r8
 800069e:	46d6      	mov	lr, sl
 80006a0:	000c      	movs	r4, r1
 80006a2:	0309      	lsls	r1, r1, #12
 80006a4:	b5c0      	push	{r6, r7, lr}
 80006a6:	0a49      	lsrs	r1, r1, #9
 80006a8:	0f47      	lsrs	r7, r0, #29
 80006aa:	005e      	lsls	r6, r3, #1
 80006ac:	4339      	orrs	r1, r7
 80006ae:	031f      	lsls	r7, r3, #12
 80006b0:	0fdb      	lsrs	r3, r3, #31
 80006b2:	469c      	mov	ip, r3
 80006b4:	0065      	lsls	r5, r4, #1
 80006b6:	0a7b      	lsrs	r3, r7, #9
 80006b8:	0f57      	lsrs	r7, r2, #29
 80006ba:	431f      	orrs	r7, r3
 80006bc:	0d6d      	lsrs	r5, r5, #21
 80006be:	0fe4      	lsrs	r4, r4, #31
 80006c0:	0d76      	lsrs	r6, r6, #21
 80006c2:	46a1      	mov	r9, r4
 80006c4:	00c0      	lsls	r0, r0, #3
 80006c6:	46b8      	mov	r8, r7
 80006c8:	00d2      	lsls	r2, r2, #3
 80006ca:	1bab      	subs	r3, r5, r6
 80006cc:	4564      	cmp	r4, ip
 80006ce:	d07b      	beq.n	80007c8 <__aeabi_dadd+0x130>
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	dd5f      	ble.n	8000794 <__aeabi_dadd+0xfc>
 80006d4:	2e00      	cmp	r6, #0
 80006d6:	d000      	beq.n	80006da <__aeabi_dadd+0x42>
 80006d8:	e0a4      	b.n	8000824 <__aeabi_dadd+0x18c>
 80006da:	003e      	movs	r6, r7
 80006dc:	4316      	orrs	r6, r2
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x4a>
 80006e0:	e112      	b.n	8000908 <__aeabi_dadd+0x270>
 80006e2:	1e5e      	subs	r6, r3, #1
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x52>
 80006e8:	e19e      	b.n	8000a28 <__aeabi_dadd+0x390>
 80006ea:	1a87      	subs	r7, r0, r2
 80006ec:	4643      	mov	r3, r8
 80006ee:	42b8      	cmp	r0, r7
 80006f0:	4180      	sbcs	r0, r0
 80006f2:	2501      	movs	r5, #1
 80006f4:	1ac9      	subs	r1, r1, r3
 80006f6:	4240      	negs	r0, r0
 80006f8:	1a09      	subs	r1, r1, r0
 80006fa:	020b      	lsls	r3, r1, #8
 80006fc:	d400      	bmi.n	8000700 <__aeabi_dadd+0x68>
 80006fe:	e131      	b.n	8000964 <__aeabi_dadd+0x2cc>
 8000700:	0249      	lsls	r1, r1, #9
 8000702:	0a4e      	lsrs	r6, r1, #9
 8000704:	2e00      	cmp	r6, #0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x72>
 8000708:	e16e      	b.n	80009e8 <__aeabi_dadd+0x350>
 800070a:	0030      	movs	r0, r6
 800070c:	f001 fcfa 	bl	8002104 <__clzsi2>
 8000710:	0003      	movs	r3, r0
 8000712:	3b08      	subs	r3, #8
 8000714:	2b1f      	cmp	r3, #31
 8000716:	dd00      	ble.n	800071a <__aeabi_dadd+0x82>
 8000718:	e161      	b.n	80009de <__aeabi_dadd+0x346>
 800071a:	2220      	movs	r2, #32
 800071c:	0039      	movs	r1, r7
 800071e:	1ad2      	subs	r2, r2, r3
 8000720:	409e      	lsls	r6, r3
 8000722:	40d1      	lsrs	r1, r2
 8000724:	409f      	lsls	r7, r3
 8000726:	430e      	orrs	r6, r1
 8000728:	429d      	cmp	r5, r3
 800072a:	dd00      	ble.n	800072e <__aeabi_dadd+0x96>
 800072c:	e151      	b.n	80009d2 <__aeabi_dadd+0x33a>
 800072e:	1b5d      	subs	r5, r3, r5
 8000730:	1c6b      	adds	r3, r5, #1
 8000732:	2b1f      	cmp	r3, #31
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0xa0>
 8000736:	e17c      	b.n	8000a32 <__aeabi_dadd+0x39a>
 8000738:	2120      	movs	r1, #32
 800073a:	1ac9      	subs	r1, r1, r3
 800073c:	003d      	movs	r5, r7
 800073e:	0030      	movs	r0, r6
 8000740:	408f      	lsls	r7, r1
 8000742:	4088      	lsls	r0, r1
 8000744:	40dd      	lsrs	r5, r3
 8000746:	1e79      	subs	r1, r7, #1
 8000748:	418f      	sbcs	r7, r1
 800074a:	0031      	movs	r1, r6
 800074c:	2207      	movs	r2, #7
 800074e:	4328      	orrs	r0, r5
 8000750:	40d9      	lsrs	r1, r3
 8000752:	2500      	movs	r5, #0
 8000754:	4307      	orrs	r7, r0
 8000756:	403a      	ands	r2, r7
 8000758:	2a00      	cmp	r2, #0
 800075a:	d009      	beq.n	8000770 <__aeabi_dadd+0xd8>
 800075c:	230f      	movs	r3, #15
 800075e:	403b      	ands	r3, r7
 8000760:	2b04      	cmp	r3, #4
 8000762:	d005      	beq.n	8000770 <__aeabi_dadd+0xd8>
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	42bb      	cmp	r3, r7
 8000768:	41bf      	sbcs	r7, r7
 800076a:	427f      	negs	r7, r7
 800076c:	19c9      	adds	r1, r1, r7
 800076e:	001f      	movs	r7, r3
 8000770:	020b      	lsls	r3, r1, #8
 8000772:	d400      	bmi.n	8000776 <__aeabi_dadd+0xde>
 8000774:	e226      	b.n	8000bc4 <__aeabi_dadd+0x52c>
 8000776:	1c6a      	adds	r2, r5, #1
 8000778:	4bc6      	ldr	r3, [pc, #792]	; (8000a94 <__aeabi_dadd+0x3fc>)
 800077a:	0555      	lsls	r5, r2, #21
 800077c:	0d6d      	lsrs	r5, r5, #21
 800077e:	429a      	cmp	r2, r3
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0xec>
 8000782:	e106      	b.n	8000992 <__aeabi_dadd+0x2fa>
 8000784:	4ac4      	ldr	r2, [pc, #784]	; (8000a98 <__aeabi_dadd+0x400>)
 8000786:	08ff      	lsrs	r7, r7, #3
 8000788:	400a      	ands	r2, r1
 800078a:	0753      	lsls	r3, r2, #29
 800078c:	0252      	lsls	r2, r2, #9
 800078e:	433b      	orrs	r3, r7
 8000790:	0b12      	lsrs	r2, r2, #12
 8000792:	e08e      	b.n	80008b2 <__aeabi_dadd+0x21a>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d000      	beq.n	800079a <__aeabi_dadd+0x102>
 8000798:	e0b8      	b.n	800090c <__aeabi_dadd+0x274>
 800079a:	1c6b      	adds	r3, r5, #1
 800079c:	055b      	lsls	r3, r3, #21
 800079e:	0d5b      	lsrs	r3, r3, #21
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_dadd+0x10e>
 80007a4:	e130      	b.n	8000a08 <__aeabi_dadd+0x370>
 80007a6:	1a87      	subs	r7, r0, r2
 80007a8:	4643      	mov	r3, r8
 80007aa:	42b8      	cmp	r0, r7
 80007ac:	41b6      	sbcs	r6, r6
 80007ae:	1acb      	subs	r3, r1, r3
 80007b0:	4276      	negs	r6, r6
 80007b2:	1b9e      	subs	r6, r3, r6
 80007b4:	0233      	lsls	r3, r6, #8
 80007b6:	d500      	bpl.n	80007ba <__aeabi_dadd+0x122>
 80007b8:	e14c      	b.n	8000a54 <__aeabi_dadd+0x3bc>
 80007ba:	003b      	movs	r3, r7
 80007bc:	4333      	orrs	r3, r6
 80007be:	d1a1      	bne.n	8000704 <__aeabi_dadd+0x6c>
 80007c0:	2200      	movs	r2, #0
 80007c2:	2400      	movs	r4, #0
 80007c4:	2500      	movs	r5, #0
 80007c6:	e070      	b.n	80008aa <__aeabi_dadd+0x212>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dc00      	bgt.n	80007ce <__aeabi_dadd+0x136>
 80007cc:	e0e5      	b.n	800099a <__aeabi_dadd+0x302>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x13c>
 80007d2:	e083      	b.n	80008dc <__aeabi_dadd+0x244>
 80007d4:	4eaf      	ldr	r6, [pc, #700]	; (8000a94 <__aeabi_dadd+0x3fc>)
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d060      	beq.n	800089c <__aeabi_dadd+0x204>
 80007da:	2680      	movs	r6, #128	; 0x80
 80007dc:	0436      	lsls	r6, r6, #16
 80007de:	4337      	orrs	r7, r6
 80007e0:	46b8      	mov	r8, r7
 80007e2:	2b38      	cmp	r3, #56	; 0x38
 80007e4:	dc00      	bgt.n	80007e8 <__aeabi_dadd+0x150>
 80007e6:	e13e      	b.n	8000a66 <__aeabi_dadd+0x3ce>
 80007e8:	4643      	mov	r3, r8
 80007ea:	4313      	orrs	r3, r2
 80007ec:	001f      	movs	r7, r3
 80007ee:	1e7a      	subs	r2, r7, #1
 80007f0:	4197      	sbcs	r7, r2
 80007f2:	183f      	adds	r7, r7, r0
 80007f4:	4287      	cmp	r7, r0
 80007f6:	4180      	sbcs	r0, r0
 80007f8:	4240      	negs	r0, r0
 80007fa:	1809      	adds	r1, r1, r0
 80007fc:	020b      	lsls	r3, r1, #8
 80007fe:	d400      	bmi.n	8000802 <__aeabi_dadd+0x16a>
 8000800:	e0b0      	b.n	8000964 <__aeabi_dadd+0x2cc>
 8000802:	4ba4      	ldr	r3, [pc, #656]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000804:	3501      	adds	r5, #1
 8000806:	429d      	cmp	r5, r3
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x174>
 800080a:	e0c3      	b.n	8000994 <__aeabi_dadd+0x2fc>
 800080c:	4aa2      	ldr	r2, [pc, #648]	; (8000a98 <__aeabi_dadd+0x400>)
 800080e:	087b      	lsrs	r3, r7, #1
 8000810:	400a      	ands	r2, r1
 8000812:	2101      	movs	r1, #1
 8000814:	400f      	ands	r7, r1
 8000816:	431f      	orrs	r7, r3
 8000818:	0851      	lsrs	r1, r2, #1
 800081a:	07d3      	lsls	r3, r2, #31
 800081c:	2207      	movs	r2, #7
 800081e:	431f      	orrs	r7, r3
 8000820:	403a      	ands	r2, r7
 8000822:	e799      	b.n	8000758 <__aeabi_dadd+0xc0>
 8000824:	4e9b      	ldr	r6, [pc, #620]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000826:	42b5      	cmp	r5, r6
 8000828:	d038      	beq.n	800089c <__aeabi_dadd+0x204>
 800082a:	2680      	movs	r6, #128	; 0x80
 800082c:	0436      	lsls	r6, r6, #16
 800082e:	4337      	orrs	r7, r6
 8000830:	46b8      	mov	r8, r7
 8000832:	2b38      	cmp	r3, #56	; 0x38
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x1a0>
 8000836:	e0dc      	b.n	80009f2 <__aeabi_dadd+0x35a>
 8000838:	2b1f      	cmp	r3, #31
 800083a:	dc00      	bgt.n	800083e <__aeabi_dadd+0x1a6>
 800083c:	e130      	b.n	8000aa0 <__aeabi_dadd+0x408>
 800083e:	001e      	movs	r6, r3
 8000840:	4647      	mov	r7, r8
 8000842:	3e20      	subs	r6, #32
 8000844:	40f7      	lsrs	r7, r6
 8000846:	46bc      	mov	ip, r7
 8000848:	2b20      	cmp	r3, #32
 800084a:	d004      	beq.n	8000856 <__aeabi_dadd+0x1be>
 800084c:	2640      	movs	r6, #64	; 0x40
 800084e:	1af3      	subs	r3, r6, r3
 8000850:	4646      	mov	r6, r8
 8000852:	409e      	lsls	r6, r3
 8000854:	4332      	orrs	r2, r6
 8000856:	0017      	movs	r7, r2
 8000858:	4663      	mov	r3, ip
 800085a:	1e7a      	subs	r2, r7, #1
 800085c:	4197      	sbcs	r7, r2
 800085e:	431f      	orrs	r7, r3
 8000860:	e0cc      	b.n	80009fc <__aeabi_dadd+0x364>
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x1d0>
 8000866:	e204      	b.n	8000c72 <__aeabi_dadd+0x5da>
 8000868:	4643      	mov	r3, r8
 800086a:	4313      	orrs	r3, r2
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x1d8>
 800086e:	e159      	b.n	8000b24 <__aeabi_dadd+0x48c>
 8000870:	074b      	lsls	r3, r1, #29
 8000872:	08c0      	lsrs	r0, r0, #3
 8000874:	4318      	orrs	r0, r3
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	08c9      	lsrs	r1, r1, #3
 800087a:	031b      	lsls	r3, r3, #12
 800087c:	4219      	tst	r1, r3
 800087e:	d008      	beq.n	8000892 <__aeabi_dadd+0x1fa>
 8000880:	4645      	mov	r5, r8
 8000882:	08ed      	lsrs	r5, r5, #3
 8000884:	421d      	tst	r5, r3
 8000886:	d104      	bne.n	8000892 <__aeabi_dadd+0x1fa>
 8000888:	4643      	mov	r3, r8
 800088a:	08d0      	lsrs	r0, r2, #3
 800088c:	0759      	lsls	r1, r3, #29
 800088e:	4308      	orrs	r0, r1
 8000890:	0029      	movs	r1, r5
 8000892:	0f42      	lsrs	r2, r0, #29
 8000894:	00c9      	lsls	r1, r1, #3
 8000896:	4d7f      	ldr	r5, [pc, #508]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000898:	4311      	orrs	r1, r2
 800089a:	00c0      	lsls	r0, r0, #3
 800089c:	074b      	lsls	r3, r1, #29
 800089e:	08ca      	lsrs	r2, r1, #3
 80008a0:	497c      	ldr	r1, [pc, #496]	; (8000a94 <__aeabi_dadd+0x3fc>)
 80008a2:	08c0      	lsrs	r0, r0, #3
 80008a4:	4303      	orrs	r3, r0
 80008a6:	428d      	cmp	r5, r1
 80008a8:	d068      	beq.n	800097c <__aeabi_dadd+0x2e4>
 80008aa:	0312      	lsls	r2, r2, #12
 80008ac:	056d      	lsls	r5, r5, #21
 80008ae:	0b12      	lsrs	r2, r2, #12
 80008b0:	0d6d      	lsrs	r5, r5, #21
 80008b2:	2100      	movs	r1, #0
 80008b4:	0312      	lsls	r2, r2, #12
 80008b6:	0018      	movs	r0, r3
 80008b8:	0b13      	lsrs	r3, r2, #12
 80008ba:	0d0a      	lsrs	r2, r1, #20
 80008bc:	0512      	lsls	r2, r2, #20
 80008be:	431a      	orrs	r2, r3
 80008c0:	4b76      	ldr	r3, [pc, #472]	; (8000a9c <__aeabi_dadd+0x404>)
 80008c2:	052d      	lsls	r5, r5, #20
 80008c4:	4013      	ands	r3, r2
 80008c6:	432b      	orrs	r3, r5
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	07e4      	lsls	r4, r4, #31
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	4323      	orrs	r3, r4
 80008d0:	0019      	movs	r1, r3
 80008d2:	bc1c      	pop	{r2, r3, r4}
 80008d4:	4690      	mov	r8, r2
 80008d6:	4699      	mov	r9, r3
 80008d8:	46a2      	mov	sl, r4
 80008da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008dc:	003e      	movs	r6, r7
 80008de:	4316      	orrs	r6, r2
 80008e0:	d012      	beq.n	8000908 <__aeabi_dadd+0x270>
 80008e2:	1e5e      	subs	r6, r3, #1
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x252>
 80008e8:	e100      	b.n	8000aec <__aeabi_dadd+0x454>
 80008ea:	1887      	adds	r7, r0, r2
 80008ec:	4287      	cmp	r7, r0
 80008ee:	4180      	sbcs	r0, r0
 80008f0:	4441      	add	r1, r8
 80008f2:	4240      	negs	r0, r0
 80008f4:	1809      	adds	r1, r1, r0
 80008f6:	2501      	movs	r5, #1
 80008f8:	020b      	lsls	r3, r1, #8
 80008fa:	d533      	bpl.n	8000964 <__aeabi_dadd+0x2cc>
 80008fc:	2502      	movs	r5, #2
 80008fe:	e785      	b.n	800080c <__aeabi_dadd+0x174>
 8000900:	4664      	mov	r4, ip
 8000902:	0033      	movs	r3, r6
 8000904:	4641      	mov	r1, r8
 8000906:	0010      	movs	r0, r2
 8000908:	001d      	movs	r5, r3
 800090a:	e7c7      	b.n	800089c <__aeabi_dadd+0x204>
 800090c:	2d00      	cmp	r5, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x27a>
 8000910:	e0da      	b.n	8000ac8 <__aeabi_dadd+0x430>
 8000912:	000c      	movs	r4, r1
 8000914:	4304      	orrs	r4, r0
 8000916:	d0f3      	beq.n	8000900 <__aeabi_dadd+0x268>
 8000918:	1c5c      	adds	r4, r3, #1
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x286>
 800091c:	e19f      	b.n	8000c5e <__aeabi_dadd+0x5c6>
 800091e:	4c5d      	ldr	r4, [pc, #372]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000920:	42a6      	cmp	r6, r4
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x28e>
 8000924:	e12f      	b.n	8000b86 <__aeabi_dadd+0x4ee>
 8000926:	43db      	mvns	r3, r3
 8000928:	2b38      	cmp	r3, #56	; 0x38
 800092a:	dd00      	ble.n	800092e <__aeabi_dadd+0x296>
 800092c:	e166      	b.n	8000bfc <__aeabi_dadd+0x564>
 800092e:	2b1f      	cmp	r3, #31
 8000930:	dd00      	ble.n	8000934 <__aeabi_dadd+0x29c>
 8000932:	e183      	b.n	8000c3c <__aeabi_dadd+0x5a4>
 8000934:	2420      	movs	r4, #32
 8000936:	0005      	movs	r5, r0
 8000938:	1ae4      	subs	r4, r4, r3
 800093a:	000f      	movs	r7, r1
 800093c:	40dd      	lsrs	r5, r3
 800093e:	40d9      	lsrs	r1, r3
 8000940:	40a0      	lsls	r0, r4
 8000942:	4643      	mov	r3, r8
 8000944:	40a7      	lsls	r7, r4
 8000946:	1a5b      	subs	r3, r3, r1
 8000948:	1e44      	subs	r4, r0, #1
 800094a:	41a0      	sbcs	r0, r4
 800094c:	4698      	mov	r8, r3
 800094e:	432f      	orrs	r7, r5
 8000950:	4338      	orrs	r0, r7
 8000952:	1a17      	subs	r7, r2, r0
 8000954:	42ba      	cmp	r2, r7
 8000956:	4192      	sbcs	r2, r2
 8000958:	4643      	mov	r3, r8
 800095a:	4252      	negs	r2, r2
 800095c:	1a99      	subs	r1, r3, r2
 800095e:	4664      	mov	r4, ip
 8000960:	0035      	movs	r5, r6
 8000962:	e6ca      	b.n	80006fa <__aeabi_dadd+0x62>
 8000964:	2207      	movs	r2, #7
 8000966:	403a      	ands	r2, r7
 8000968:	2a00      	cmp	r2, #0
 800096a:	d000      	beq.n	800096e <__aeabi_dadd+0x2d6>
 800096c:	e6f6      	b.n	800075c <__aeabi_dadd+0xc4>
 800096e:	074b      	lsls	r3, r1, #29
 8000970:	08ca      	lsrs	r2, r1, #3
 8000972:	4948      	ldr	r1, [pc, #288]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000974:	08ff      	lsrs	r7, r7, #3
 8000976:	433b      	orrs	r3, r7
 8000978:	428d      	cmp	r5, r1
 800097a:	d196      	bne.n	80008aa <__aeabi_dadd+0x212>
 800097c:	0019      	movs	r1, r3
 800097e:	4311      	orrs	r1, r2
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x2ec>
 8000982:	e19e      	b.n	8000cc2 <__aeabi_dadd+0x62a>
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0309      	lsls	r1, r1, #12
 8000988:	430a      	orrs	r2, r1
 800098a:	0312      	lsls	r2, r2, #12
 800098c:	0b12      	lsrs	r2, r2, #12
 800098e:	4d41      	ldr	r5, [pc, #260]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000990:	e78f      	b.n	80008b2 <__aeabi_dadd+0x21a>
 8000992:	0015      	movs	r5, r2
 8000994:	2200      	movs	r2, #0
 8000996:	2300      	movs	r3, #0
 8000998:	e78b      	b.n	80008b2 <__aeabi_dadd+0x21a>
 800099a:	2b00      	cmp	r3, #0
 800099c:	d000      	beq.n	80009a0 <__aeabi_dadd+0x308>
 800099e:	e0c7      	b.n	8000b30 <__aeabi_dadd+0x498>
 80009a0:	1c6b      	adds	r3, r5, #1
 80009a2:	055f      	lsls	r7, r3, #21
 80009a4:	0d7f      	lsrs	r7, r7, #21
 80009a6:	2f01      	cmp	r7, #1
 80009a8:	dc00      	bgt.n	80009ac <__aeabi_dadd+0x314>
 80009aa:	e0f1      	b.n	8000b90 <__aeabi_dadd+0x4f8>
 80009ac:	4d39      	ldr	r5, [pc, #228]	; (8000a94 <__aeabi_dadd+0x3fc>)
 80009ae:	42ab      	cmp	r3, r5
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dadd+0x31c>
 80009b2:	e0b9      	b.n	8000b28 <__aeabi_dadd+0x490>
 80009b4:	1885      	adds	r5, r0, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	4285      	cmp	r5, r0
 80009ba:	4189      	sbcs	r1, r1
 80009bc:	4442      	add	r2, r8
 80009be:	4249      	negs	r1, r1
 80009c0:	1851      	adds	r1, r2, r1
 80009c2:	2207      	movs	r2, #7
 80009c4:	07cf      	lsls	r7, r1, #31
 80009c6:	086d      	lsrs	r5, r5, #1
 80009c8:	432f      	orrs	r7, r5
 80009ca:	0849      	lsrs	r1, r1, #1
 80009cc:	403a      	ands	r2, r7
 80009ce:	001d      	movs	r5, r3
 80009d0:	e6c2      	b.n	8000758 <__aeabi_dadd+0xc0>
 80009d2:	2207      	movs	r2, #7
 80009d4:	4930      	ldr	r1, [pc, #192]	; (8000a98 <__aeabi_dadd+0x400>)
 80009d6:	1aed      	subs	r5, r5, r3
 80009d8:	4031      	ands	r1, r6
 80009da:	403a      	ands	r2, r7
 80009dc:	e6bc      	b.n	8000758 <__aeabi_dadd+0xc0>
 80009de:	003e      	movs	r6, r7
 80009e0:	3828      	subs	r0, #40	; 0x28
 80009e2:	4086      	lsls	r6, r0
 80009e4:	2700      	movs	r7, #0
 80009e6:	e69f      	b.n	8000728 <__aeabi_dadd+0x90>
 80009e8:	0038      	movs	r0, r7
 80009ea:	f001 fb8b 	bl	8002104 <__clzsi2>
 80009ee:	3020      	adds	r0, #32
 80009f0:	e68e      	b.n	8000710 <__aeabi_dadd+0x78>
 80009f2:	4643      	mov	r3, r8
 80009f4:	4313      	orrs	r3, r2
 80009f6:	001f      	movs	r7, r3
 80009f8:	1e7a      	subs	r2, r7, #1
 80009fa:	4197      	sbcs	r7, r2
 80009fc:	1bc7      	subs	r7, r0, r7
 80009fe:	42b8      	cmp	r0, r7
 8000a00:	4180      	sbcs	r0, r0
 8000a02:	4240      	negs	r0, r0
 8000a04:	1a09      	subs	r1, r1, r0
 8000a06:	e678      	b.n	80006fa <__aeabi_dadd+0x62>
 8000a08:	000e      	movs	r6, r1
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	4306      	orrs	r6, r0
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d161      	bne.n	8000ad8 <__aeabi_dadd+0x440>
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_dadd+0x382>
 8000a18:	e0f4      	b.n	8000c04 <__aeabi_dadd+0x56c>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x388>
 8000a1e:	e11b      	b.n	8000c58 <__aeabi_dadd+0x5c0>
 8000a20:	4664      	mov	r4, ip
 8000a22:	0039      	movs	r1, r7
 8000a24:	0010      	movs	r0, r2
 8000a26:	e739      	b.n	800089c <__aeabi_dadd+0x204>
 8000a28:	4f1a      	ldr	r7, [pc, #104]	; (8000a94 <__aeabi_dadd+0x3fc>)
 8000a2a:	42bb      	cmp	r3, r7
 8000a2c:	d07a      	beq.n	8000b24 <__aeabi_dadd+0x48c>
 8000a2e:	0033      	movs	r3, r6
 8000a30:	e6ff      	b.n	8000832 <__aeabi_dadd+0x19a>
 8000a32:	0030      	movs	r0, r6
 8000a34:	3d1f      	subs	r5, #31
 8000a36:	40e8      	lsrs	r0, r5
 8000a38:	2b20      	cmp	r3, #32
 8000a3a:	d003      	beq.n	8000a44 <__aeabi_dadd+0x3ac>
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	1acb      	subs	r3, r1, r3
 8000a40:	409e      	lsls	r6, r3
 8000a42:	4337      	orrs	r7, r6
 8000a44:	1e7b      	subs	r3, r7, #1
 8000a46:	419f      	sbcs	r7, r3
 8000a48:	2207      	movs	r2, #7
 8000a4a:	4307      	orrs	r7, r0
 8000a4c:	403a      	ands	r2, r7
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	e789      	b.n	8000968 <__aeabi_dadd+0x2d0>
 8000a54:	1a17      	subs	r7, r2, r0
 8000a56:	4643      	mov	r3, r8
 8000a58:	42ba      	cmp	r2, r7
 8000a5a:	41b6      	sbcs	r6, r6
 8000a5c:	1a59      	subs	r1, r3, r1
 8000a5e:	4276      	negs	r6, r6
 8000a60:	1b8e      	subs	r6, r1, r6
 8000a62:	4664      	mov	r4, ip
 8000a64:	e64e      	b.n	8000704 <__aeabi_dadd+0x6c>
 8000a66:	2b1f      	cmp	r3, #31
 8000a68:	dd00      	ble.n	8000a6c <__aeabi_dadd+0x3d4>
 8000a6a:	e0ad      	b.n	8000bc8 <__aeabi_dadd+0x530>
 8000a6c:	2620      	movs	r6, #32
 8000a6e:	4647      	mov	r7, r8
 8000a70:	1af6      	subs	r6, r6, r3
 8000a72:	40b7      	lsls	r7, r6
 8000a74:	46b9      	mov	r9, r7
 8000a76:	0017      	movs	r7, r2
 8000a78:	46b2      	mov	sl, r6
 8000a7a:	40df      	lsrs	r7, r3
 8000a7c:	464e      	mov	r6, r9
 8000a7e:	433e      	orrs	r6, r7
 8000a80:	0037      	movs	r7, r6
 8000a82:	4656      	mov	r6, sl
 8000a84:	40b2      	lsls	r2, r6
 8000a86:	1e56      	subs	r6, r2, #1
 8000a88:	41b2      	sbcs	r2, r6
 8000a8a:	4317      	orrs	r7, r2
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	40da      	lsrs	r2, r3
 8000a90:	1889      	adds	r1, r1, r2
 8000a92:	e6ae      	b.n	80007f2 <__aeabi_dadd+0x15a>
 8000a94:	000007ff 	.word	0x000007ff
 8000a98:	ff7fffff 	.word	0xff7fffff
 8000a9c:	800fffff 	.word	0x800fffff
 8000aa0:	2620      	movs	r6, #32
 8000aa2:	4647      	mov	r7, r8
 8000aa4:	1af6      	subs	r6, r6, r3
 8000aa6:	40b7      	lsls	r7, r6
 8000aa8:	46b9      	mov	r9, r7
 8000aaa:	0017      	movs	r7, r2
 8000aac:	46b2      	mov	sl, r6
 8000aae:	40df      	lsrs	r7, r3
 8000ab0:	464e      	mov	r6, r9
 8000ab2:	433e      	orrs	r6, r7
 8000ab4:	0037      	movs	r7, r6
 8000ab6:	4656      	mov	r6, sl
 8000ab8:	40b2      	lsls	r2, r6
 8000aba:	1e56      	subs	r6, r2, #1
 8000abc:	41b2      	sbcs	r2, r6
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	40da      	lsrs	r2, r3
 8000ac4:	1a89      	subs	r1, r1, r2
 8000ac6:	e799      	b.n	80009fc <__aeabi_dadd+0x364>
 8000ac8:	4c7f      	ldr	r4, [pc, #508]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000aca:	42a6      	cmp	r6, r4
 8000acc:	d05b      	beq.n	8000b86 <__aeabi_dadd+0x4ee>
 8000ace:	2480      	movs	r4, #128	; 0x80
 8000ad0:	0424      	lsls	r4, r4, #16
 8000ad2:	425b      	negs	r3, r3
 8000ad4:	4321      	orrs	r1, r4
 8000ad6:	e727      	b.n	8000928 <__aeabi_dadd+0x290>
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d10c      	bne.n	8000af6 <__aeabi_dadd+0x45e>
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x44a>
 8000ae0:	e0cb      	b.n	8000c7a <__aeabi_dadd+0x5e2>
 8000ae2:	4664      	mov	r4, ip
 8000ae4:	0039      	movs	r1, r7
 8000ae6:	0010      	movs	r0, r2
 8000ae8:	4d77      	ldr	r5, [pc, #476]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000aea:	e6d7      	b.n	800089c <__aeabi_dadd+0x204>
 8000aec:	4f76      	ldr	r7, [pc, #472]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000aee:	42bb      	cmp	r3, r7
 8000af0:	d018      	beq.n	8000b24 <__aeabi_dadd+0x48c>
 8000af2:	0033      	movs	r3, r6
 8000af4:	e675      	b.n	80007e2 <__aeabi_dadd+0x14a>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d014      	beq.n	8000b24 <__aeabi_dadd+0x48c>
 8000afa:	074b      	lsls	r3, r1, #29
 8000afc:	08c0      	lsrs	r0, r0, #3
 8000afe:	4318      	orrs	r0, r3
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	031b      	lsls	r3, r3, #12
 8000b06:	4219      	tst	r1, r3
 8000b08:	d007      	beq.n	8000b1a <__aeabi_dadd+0x482>
 8000b0a:	08fc      	lsrs	r4, r7, #3
 8000b0c:	421c      	tst	r4, r3
 8000b0e:	d104      	bne.n	8000b1a <__aeabi_dadd+0x482>
 8000b10:	0779      	lsls	r1, r7, #29
 8000b12:	08d0      	lsrs	r0, r2, #3
 8000b14:	4308      	orrs	r0, r1
 8000b16:	46e1      	mov	r9, ip
 8000b18:	0021      	movs	r1, r4
 8000b1a:	464c      	mov	r4, r9
 8000b1c:	0f42      	lsrs	r2, r0, #29
 8000b1e:	00c9      	lsls	r1, r1, #3
 8000b20:	4311      	orrs	r1, r2
 8000b22:	00c0      	lsls	r0, r0, #3
 8000b24:	4d68      	ldr	r5, [pc, #416]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000b26:	e6b9      	b.n	800089c <__aeabi_dadd+0x204>
 8000b28:	001d      	movs	r5, r3
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e6c0      	b.n	80008b2 <__aeabi_dadd+0x21a>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d15b      	bne.n	8000bec <__aeabi_dadd+0x554>
 8000b34:	000d      	movs	r5, r1
 8000b36:	4305      	orrs	r5, r0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x4a4>
 8000b3a:	e6e2      	b.n	8000902 <__aeabi_dadd+0x26a>
 8000b3c:	1c5d      	adds	r5, r3, #1
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x4aa>
 8000b40:	e0b0      	b.n	8000ca4 <__aeabi_dadd+0x60c>
 8000b42:	4d61      	ldr	r5, [pc, #388]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000b44:	42ae      	cmp	r6, r5
 8000b46:	d01f      	beq.n	8000b88 <__aeabi_dadd+0x4f0>
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	2b38      	cmp	r3, #56	; 0x38
 8000b4c:	dc71      	bgt.n	8000c32 <__aeabi_dadd+0x59a>
 8000b4e:	2b1f      	cmp	r3, #31
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_dadd+0x4bc>
 8000b52:	e096      	b.n	8000c82 <__aeabi_dadd+0x5ea>
 8000b54:	2520      	movs	r5, #32
 8000b56:	000f      	movs	r7, r1
 8000b58:	1aed      	subs	r5, r5, r3
 8000b5a:	40af      	lsls	r7, r5
 8000b5c:	46b9      	mov	r9, r7
 8000b5e:	0007      	movs	r7, r0
 8000b60:	46aa      	mov	sl, r5
 8000b62:	40df      	lsrs	r7, r3
 8000b64:	464d      	mov	r5, r9
 8000b66:	433d      	orrs	r5, r7
 8000b68:	002f      	movs	r7, r5
 8000b6a:	4655      	mov	r5, sl
 8000b6c:	40a8      	lsls	r0, r5
 8000b6e:	40d9      	lsrs	r1, r3
 8000b70:	1e45      	subs	r5, r0, #1
 8000b72:	41a8      	sbcs	r0, r5
 8000b74:	4488      	add	r8, r1
 8000b76:	4307      	orrs	r7, r0
 8000b78:	18bf      	adds	r7, r7, r2
 8000b7a:	4297      	cmp	r7, r2
 8000b7c:	4192      	sbcs	r2, r2
 8000b7e:	4251      	negs	r1, r2
 8000b80:	4441      	add	r1, r8
 8000b82:	0035      	movs	r5, r6
 8000b84:	e63a      	b.n	80007fc <__aeabi_dadd+0x164>
 8000b86:	4664      	mov	r4, ip
 8000b88:	0035      	movs	r5, r6
 8000b8a:	4641      	mov	r1, r8
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	e685      	b.n	800089c <__aeabi_dadd+0x204>
 8000b90:	000b      	movs	r3, r1
 8000b92:	4303      	orrs	r3, r0
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d000      	beq.n	8000b9a <__aeabi_dadd+0x502>
 8000b98:	e663      	b.n	8000862 <__aeabi_dadd+0x1ca>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d0f5      	beq.n	8000b8a <__aeabi_dadd+0x4f2>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x50e>
 8000ba4:	e67a      	b.n	800089c <__aeabi_dadd+0x204>
 8000ba6:	1887      	adds	r7, r0, r2
 8000ba8:	4287      	cmp	r7, r0
 8000baa:	4180      	sbcs	r0, r0
 8000bac:	2207      	movs	r2, #7
 8000bae:	4441      	add	r1, r8
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	1809      	adds	r1, r1, r0
 8000bb4:	403a      	ands	r2, r7
 8000bb6:	020b      	lsls	r3, r1, #8
 8000bb8:	d400      	bmi.n	8000bbc <__aeabi_dadd+0x524>
 8000bba:	e6d5      	b.n	8000968 <__aeabi_dadd+0x2d0>
 8000bbc:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <__aeabi_dadd+0x634>)
 8000bbe:	3501      	adds	r5, #1
 8000bc0:	4019      	ands	r1, r3
 8000bc2:	e5c9      	b.n	8000758 <__aeabi_dadd+0xc0>
 8000bc4:	0038      	movs	r0, r7
 8000bc6:	e669      	b.n	800089c <__aeabi_dadd+0x204>
 8000bc8:	001e      	movs	r6, r3
 8000bca:	4647      	mov	r7, r8
 8000bcc:	3e20      	subs	r6, #32
 8000bce:	40f7      	lsrs	r7, r6
 8000bd0:	46bc      	mov	ip, r7
 8000bd2:	2b20      	cmp	r3, #32
 8000bd4:	d004      	beq.n	8000be0 <__aeabi_dadd+0x548>
 8000bd6:	2640      	movs	r6, #64	; 0x40
 8000bd8:	1af3      	subs	r3, r6, r3
 8000bda:	4646      	mov	r6, r8
 8000bdc:	409e      	lsls	r6, r3
 8000bde:	4332      	orrs	r2, r6
 8000be0:	0017      	movs	r7, r2
 8000be2:	4663      	mov	r3, ip
 8000be4:	1e7a      	subs	r2, r7, #1
 8000be6:	4197      	sbcs	r7, r2
 8000be8:	431f      	orrs	r7, r3
 8000bea:	e602      	b.n	80007f2 <__aeabi_dadd+0x15a>
 8000bec:	4d36      	ldr	r5, [pc, #216]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000bee:	42ae      	cmp	r6, r5
 8000bf0:	d0ca      	beq.n	8000b88 <__aeabi_dadd+0x4f0>
 8000bf2:	2580      	movs	r5, #128	; 0x80
 8000bf4:	042d      	lsls	r5, r5, #16
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	4329      	orrs	r1, r5
 8000bfa:	e7a6      	b.n	8000b4a <__aeabi_dadd+0x4b2>
 8000bfc:	4308      	orrs	r0, r1
 8000bfe:	1e41      	subs	r1, r0, #1
 8000c00:	4188      	sbcs	r0, r1
 8000c02:	e6a6      	b.n	8000952 <__aeabi_dadd+0x2ba>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x572>
 8000c08:	e648      	b.n	800089c <__aeabi_dadd+0x204>
 8000c0a:	1a87      	subs	r7, r0, r2
 8000c0c:	4643      	mov	r3, r8
 8000c0e:	42b8      	cmp	r0, r7
 8000c10:	41b6      	sbcs	r6, r6
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	4276      	negs	r6, r6
 8000c16:	1b9e      	subs	r6, r3, r6
 8000c18:	0233      	lsls	r3, r6, #8
 8000c1a:	d54b      	bpl.n	8000cb4 <__aeabi_dadd+0x61c>
 8000c1c:	1a17      	subs	r7, r2, r0
 8000c1e:	4643      	mov	r3, r8
 8000c20:	42ba      	cmp	r2, r7
 8000c22:	4192      	sbcs	r2, r2
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	4252      	negs	r2, r2
 8000c28:	1a89      	subs	r1, r1, r2
 8000c2a:	2207      	movs	r2, #7
 8000c2c:	4664      	mov	r4, ip
 8000c2e:	403a      	ands	r2, r7
 8000c30:	e592      	b.n	8000758 <__aeabi_dadd+0xc0>
 8000c32:	4301      	orrs	r1, r0
 8000c34:	000f      	movs	r7, r1
 8000c36:	1e79      	subs	r1, r7, #1
 8000c38:	418f      	sbcs	r7, r1
 8000c3a:	e79d      	b.n	8000b78 <__aeabi_dadd+0x4e0>
 8000c3c:	001c      	movs	r4, r3
 8000c3e:	000f      	movs	r7, r1
 8000c40:	3c20      	subs	r4, #32
 8000c42:	40e7      	lsrs	r7, r4
 8000c44:	2b20      	cmp	r3, #32
 8000c46:	d003      	beq.n	8000c50 <__aeabi_dadd+0x5b8>
 8000c48:	2440      	movs	r4, #64	; 0x40
 8000c4a:	1ae3      	subs	r3, r4, r3
 8000c4c:	4099      	lsls	r1, r3
 8000c4e:	4308      	orrs	r0, r1
 8000c50:	1e41      	subs	r1, r0, #1
 8000c52:	4188      	sbcs	r0, r1
 8000c54:	4338      	orrs	r0, r7
 8000c56:	e67c      	b.n	8000952 <__aeabi_dadd+0x2ba>
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2400      	movs	r4, #0
 8000c5c:	e625      	b.n	80008aa <__aeabi_dadd+0x212>
 8000c5e:	1a17      	subs	r7, r2, r0
 8000c60:	4643      	mov	r3, r8
 8000c62:	42ba      	cmp	r2, r7
 8000c64:	4192      	sbcs	r2, r2
 8000c66:	1a59      	subs	r1, r3, r1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	1a89      	subs	r1, r1, r2
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	0035      	movs	r5, r6
 8000c70:	e543      	b.n	80006fa <__aeabi_dadd+0x62>
 8000c72:	4641      	mov	r1, r8
 8000c74:	0010      	movs	r0, r2
 8000c76:	4d14      	ldr	r5, [pc, #80]	; (8000cc8 <__aeabi_dadd+0x630>)
 8000c78:	e610      	b.n	800089c <__aeabi_dadd+0x204>
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	2400      	movs	r4, #0
 8000c7e:	0312      	lsls	r2, r2, #12
 8000c80:	e680      	b.n	8000984 <__aeabi_dadd+0x2ec>
 8000c82:	001d      	movs	r5, r3
 8000c84:	000f      	movs	r7, r1
 8000c86:	3d20      	subs	r5, #32
 8000c88:	40ef      	lsrs	r7, r5
 8000c8a:	46bc      	mov	ip, r7
 8000c8c:	2b20      	cmp	r3, #32
 8000c8e:	d003      	beq.n	8000c98 <__aeabi_dadd+0x600>
 8000c90:	2540      	movs	r5, #64	; 0x40
 8000c92:	1aeb      	subs	r3, r5, r3
 8000c94:	4099      	lsls	r1, r3
 8000c96:	4308      	orrs	r0, r1
 8000c98:	0007      	movs	r7, r0
 8000c9a:	4663      	mov	r3, ip
 8000c9c:	1e78      	subs	r0, r7, #1
 8000c9e:	4187      	sbcs	r7, r0
 8000ca0:	431f      	orrs	r7, r3
 8000ca2:	e769      	b.n	8000b78 <__aeabi_dadd+0x4e0>
 8000ca4:	1887      	adds	r7, r0, r2
 8000ca6:	4297      	cmp	r7, r2
 8000ca8:	419b      	sbcs	r3, r3
 8000caa:	4441      	add	r1, r8
 8000cac:	425b      	negs	r3, r3
 8000cae:	18c9      	adds	r1, r1, r3
 8000cb0:	0035      	movs	r5, r6
 8000cb2:	e5a3      	b.n	80007fc <__aeabi_dadd+0x164>
 8000cb4:	003b      	movs	r3, r7
 8000cb6:	4333      	orrs	r3, r6
 8000cb8:	d0ce      	beq.n	8000c58 <__aeabi_dadd+0x5c0>
 8000cba:	2207      	movs	r2, #7
 8000cbc:	0031      	movs	r1, r6
 8000cbe:	403a      	ands	r2, r7
 8000cc0:	e652      	b.n	8000968 <__aeabi_dadd+0x2d0>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	e5f4      	b.n	80008b2 <__aeabi_dadd+0x21a>
 8000cc8:	000007ff 	.word	0x000007ff
 8000ccc:	ff7fffff 	.word	0xff7fffff

08000cd0 <__aeabi_ddiv>:
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd2:	4657      	mov	r7, sl
 8000cd4:	46de      	mov	lr, fp
 8000cd6:	464e      	mov	r6, r9
 8000cd8:	4645      	mov	r5, r8
 8000cda:	b5e0      	push	{r5, r6, r7, lr}
 8000cdc:	4683      	mov	fp, r0
 8000cde:	0007      	movs	r7, r0
 8000ce0:	030e      	lsls	r6, r1, #12
 8000ce2:	0048      	lsls	r0, r1, #1
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	4692      	mov	sl, r2
 8000ce8:	001c      	movs	r4, r3
 8000cea:	0b36      	lsrs	r6, r6, #12
 8000cec:	0d40      	lsrs	r0, r0, #21
 8000cee:	0fcd      	lsrs	r5, r1, #31
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_ddiv+0x26>
 8000cf4:	e09d      	b.n	8000e32 <__aeabi_ddiv+0x162>
 8000cf6:	4b95      	ldr	r3, [pc, #596]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	d039      	beq.n	8000d70 <__aeabi_ddiv+0xa0>
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	00f6      	lsls	r6, r6, #3
 8000d00:	041b      	lsls	r3, r3, #16
 8000d02:	431e      	orrs	r6, r3
 8000d04:	4a92      	ldr	r2, [pc, #584]	; (8000f50 <__aeabi_ddiv+0x280>)
 8000d06:	0f7b      	lsrs	r3, r7, #29
 8000d08:	4333      	orrs	r3, r6
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	4694      	mov	ip, r2
 8000d0e:	0003      	movs	r3, r0
 8000d10:	4463      	add	r3, ip
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2300      	movs	r3, #0
 8000d16:	2600      	movs	r6, #0
 8000d18:	00ff      	lsls	r7, r7, #3
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	0323      	lsls	r3, r4, #12
 8000d1e:	0b1b      	lsrs	r3, r3, #12
 8000d20:	4698      	mov	r8, r3
 8000d22:	0063      	lsls	r3, r4, #1
 8000d24:	0fe4      	lsrs	r4, r4, #31
 8000d26:	4652      	mov	r2, sl
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	9401      	str	r4, [sp, #4]
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x60>
 8000d2e:	e0b3      	b.n	8000e98 <__aeabi_ddiv+0x1c8>
 8000d30:	4986      	ldr	r1, [pc, #536]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x68>
 8000d36:	e09e      	b.n	8000e76 <__aeabi_ddiv+0x1a6>
 8000d38:	4642      	mov	r2, r8
 8000d3a:	00d1      	lsls	r1, r2, #3
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	0412      	lsls	r2, r2, #16
 8000d40:	430a      	orrs	r2, r1
 8000d42:	4651      	mov	r1, sl
 8000d44:	0f49      	lsrs	r1, r1, #29
 8000d46:	4311      	orrs	r1, r2
 8000d48:	468b      	mov	fp, r1
 8000d4a:	4981      	ldr	r1, [pc, #516]	; (8000f50 <__aeabi_ddiv+0x280>)
 8000d4c:	4652      	mov	r2, sl
 8000d4e:	468c      	mov	ip, r1
 8000d50:	9900      	ldr	r1, [sp, #0]
 8000d52:	4463      	add	r3, ip
 8000d54:	1acb      	subs	r3, r1, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	002b      	movs	r3, r5
 8000d5e:	4063      	eors	r3, r4
 8000d60:	469a      	mov	sl, r3
 8000d62:	2e0f      	cmp	r6, #15
 8000d64:	d900      	bls.n	8000d68 <__aeabi_ddiv+0x98>
 8000d66:	e105      	b.n	8000f74 <__aeabi_ddiv+0x2a4>
 8000d68:	4b7a      	ldr	r3, [pc, #488]	; (8000f54 <__aeabi_ddiv+0x284>)
 8000d6a:	00b6      	lsls	r6, r6, #2
 8000d6c:	599b      	ldr	r3, [r3, r6]
 8000d6e:	469f      	mov	pc, r3
 8000d70:	465b      	mov	r3, fp
 8000d72:	4333      	orrs	r3, r6
 8000d74:	4699      	mov	r9, r3
 8000d76:	d000      	beq.n	8000d7a <__aeabi_ddiv+0xaa>
 8000d78:	e0b8      	b.n	8000eec <__aeabi_ddiv+0x21c>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	2608      	movs	r6, #8
 8000d7e:	2700      	movs	r7, #0
 8000d80:	9000      	str	r0, [sp, #0]
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	e7ca      	b.n	8000d1c <__aeabi_ddiv+0x4c>
 8000d86:	46cb      	mov	fp, r9
 8000d88:	003a      	movs	r2, r7
 8000d8a:	9902      	ldr	r1, [sp, #8]
 8000d8c:	9501      	str	r5, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
 8000d90:	469a      	mov	sl, r3
 8000d92:	2902      	cmp	r1, #2
 8000d94:	d027      	beq.n	8000de6 <__aeabi_ddiv+0x116>
 8000d96:	2903      	cmp	r1, #3
 8000d98:	d100      	bne.n	8000d9c <__aeabi_ddiv+0xcc>
 8000d9a:	e280      	b.n	800129e <__aeabi_ddiv+0x5ce>
 8000d9c:	2901      	cmp	r1, #1
 8000d9e:	d044      	beq.n	8000e2a <__aeabi_ddiv+0x15a>
 8000da0:	496d      	ldr	r1, [pc, #436]	; (8000f58 <__aeabi_ddiv+0x288>)
 8000da2:	9b00      	ldr	r3, [sp, #0]
 8000da4:	468c      	mov	ip, r1
 8000da6:	4463      	add	r3, ip
 8000da8:	001c      	movs	r4, r3
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	dd38      	ble.n	8000e20 <__aeabi_ddiv+0x150>
 8000dae:	0753      	lsls	r3, r2, #29
 8000db0:	d000      	beq.n	8000db4 <__aeabi_ddiv+0xe4>
 8000db2:	e213      	b.n	80011dc <__aeabi_ddiv+0x50c>
 8000db4:	08d2      	lsrs	r2, r2, #3
 8000db6:	465b      	mov	r3, fp
 8000db8:	01db      	lsls	r3, r3, #7
 8000dba:	d509      	bpl.n	8000dd0 <__aeabi_ddiv+0x100>
 8000dbc:	4659      	mov	r1, fp
 8000dbe:	4b67      	ldr	r3, [pc, #412]	; (8000f5c <__aeabi_ddiv+0x28c>)
 8000dc0:	4019      	ands	r1, r3
 8000dc2:	468b      	mov	fp, r1
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	00c9      	lsls	r1, r1, #3
 8000dc8:	468c      	mov	ip, r1
 8000dca:	9b00      	ldr	r3, [sp, #0]
 8000dcc:	4463      	add	r3, ip
 8000dce:	001c      	movs	r4, r3
 8000dd0:	4b63      	ldr	r3, [pc, #396]	; (8000f60 <__aeabi_ddiv+0x290>)
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	dc07      	bgt.n	8000de6 <__aeabi_ddiv+0x116>
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	0564      	lsls	r4, r4, #21
 8000dda:	075f      	lsls	r7, r3, #29
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	4317      	orrs	r7, r2
 8000de0:	0b1b      	lsrs	r3, r3, #12
 8000de2:	0d62      	lsrs	r2, r4, #21
 8000de4:	e002      	b.n	8000dec <__aeabi_ddiv+0x11c>
 8000de6:	2300      	movs	r3, #0
 8000de8:	2700      	movs	r7, #0
 8000dea:	4a58      	ldr	r2, [pc, #352]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000dec:	2100      	movs	r1, #0
 8000dee:	031b      	lsls	r3, r3, #12
 8000df0:	0b1c      	lsrs	r4, r3, #12
 8000df2:	0d0b      	lsrs	r3, r1, #20
 8000df4:	051b      	lsls	r3, r3, #20
 8000df6:	4323      	orrs	r3, r4
 8000df8:	0514      	lsls	r4, r2, #20
 8000dfa:	4a5a      	ldr	r2, [pc, #360]	; (8000f64 <__aeabi_ddiv+0x294>)
 8000dfc:	0038      	movs	r0, r7
 8000dfe:	4013      	ands	r3, r2
 8000e00:	431c      	orrs	r4, r3
 8000e02:	4653      	mov	r3, sl
 8000e04:	0064      	lsls	r4, r4, #1
 8000e06:	07db      	lsls	r3, r3, #31
 8000e08:	0864      	lsrs	r4, r4, #1
 8000e0a:	431c      	orrs	r4, r3
 8000e0c:	0021      	movs	r1, r4
 8000e0e:	b005      	add	sp, #20
 8000e10:	bc3c      	pop	{r2, r3, r4, r5}
 8000e12:	4690      	mov	r8, r2
 8000e14:	4699      	mov	r9, r3
 8000e16:	46a2      	mov	sl, r4
 8000e18:	46ab      	mov	fp, r5
 8000e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4252      	negs	r2, r2
 8000e20:	2301      	movs	r3, #1
 8000e22:	1b1b      	subs	r3, r3, r4
 8000e24:	2b38      	cmp	r3, #56	; 0x38
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_ddiv+0x15a>
 8000e28:	e1ad      	b.n	8001186 <__aeabi_ddiv+0x4b6>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	2700      	movs	r7, #0
 8000e30:	e7dc      	b.n	8000dec <__aeabi_ddiv+0x11c>
 8000e32:	465b      	mov	r3, fp
 8000e34:	4333      	orrs	r3, r6
 8000e36:	4699      	mov	r9, r3
 8000e38:	d05e      	beq.n	8000ef8 <__aeabi_ddiv+0x228>
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_ddiv+0x170>
 8000e3e:	e18a      	b.n	8001156 <__aeabi_ddiv+0x486>
 8000e40:	0030      	movs	r0, r6
 8000e42:	f001 f95f 	bl	8002104 <__clzsi2>
 8000e46:	0003      	movs	r3, r0
 8000e48:	3b0b      	subs	r3, #11
 8000e4a:	2b1c      	cmp	r3, #28
 8000e4c:	dd00      	ble.n	8000e50 <__aeabi_ddiv+0x180>
 8000e4e:	e17b      	b.n	8001148 <__aeabi_ddiv+0x478>
 8000e50:	221d      	movs	r2, #29
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	465a      	mov	r2, fp
 8000e56:	0001      	movs	r1, r0
 8000e58:	40da      	lsrs	r2, r3
 8000e5a:	3908      	subs	r1, #8
 8000e5c:	408e      	lsls	r6, r1
 8000e5e:	0013      	movs	r3, r2
 8000e60:	465f      	mov	r7, fp
 8000e62:	4333      	orrs	r3, r6
 8000e64:	4699      	mov	r9, r3
 8000e66:	408f      	lsls	r7, r1
 8000e68:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <__aeabi_ddiv+0x298>)
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2300      	movs	r3, #0
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	e752      	b.n	8000d1c <__aeabi_ddiv+0x4c>
 8000e76:	4641      	mov	r1, r8
 8000e78:	4653      	mov	r3, sl
 8000e7a:	430b      	orrs	r3, r1
 8000e7c:	493b      	ldr	r1, [pc, #236]	; (8000f6c <__aeabi_ddiv+0x29c>)
 8000e7e:	469b      	mov	fp, r3
 8000e80:	468c      	mov	ip, r1
 8000e82:	9b00      	ldr	r3, [sp, #0]
 8000e84:	4463      	add	r3, ip
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	465b      	mov	r3, fp
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d13b      	bne.n	8000f06 <__aeabi_ddiv+0x236>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	2200      	movs	r2, #0
 8000e92:	431e      	orrs	r6, r3
 8000e94:	2102      	movs	r1, #2
 8000e96:	e761      	b.n	8000d5c <__aeabi_ddiv+0x8c>
 8000e98:	4643      	mov	r3, r8
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	469b      	mov	fp, r3
 8000e9e:	d037      	beq.n	8000f10 <__aeabi_ddiv+0x240>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_ddiv+0x1d8>
 8000ea6:	e162      	b.n	800116e <__aeabi_ddiv+0x49e>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	f001 f92b 	bl	8002104 <__clzsi2>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	3b0b      	subs	r3, #11
 8000eb2:	2b1c      	cmp	r3, #28
 8000eb4:	dd00      	ble.n	8000eb8 <__aeabi_ddiv+0x1e8>
 8000eb6:	e153      	b.n	8001160 <__aeabi_ddiv+0x490>
 8000eb8:	0002      	movs	r2, r0
 8000eba:	4641      	mov	r1, r8
 8000ebc:	3a08      	subs	r2, #8
 8000ebe:	4091      	lsls	r1, r2
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	211d      	movs	r1, #29
 8000ec4:	1acb      	subs	r3, r1, r3
 8000ec6:	4651      	mov	r1, sl
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	000b      	movs	r3, r1
 8000ecc:	4641      	mov	r1, r8
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	469b      	mov	fp, r3
 8000ed2:	4653      	mov	r3, sl
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	9b00      	ldr	r3, [sp, #0]
 8000eda:	4925      	ldr	r1, [pc, #148]	; (8000f70 <__aeabi_ddiv+0x2a0>)
 8000edc:	469c      	mov	ip, r3
 8000ede:	4460      	add	r0, ip
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	468c      	mov	ip, r1
 8000ee4:	4463      	add	r3, ip
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e737      	b.n	8000d5c <__aeabi_ddiv+0x8c>
 8000eec:	2303      	movs	r3, #3
 8000eee:	46b1      	mov	r9, r6
 8000ef0:	9000      	str	r0, [sp, #0]
 8000ef2:	260c      	movs	r6, #12
 8000ef4:	9302      	str	r3, [sp, #8]
 8000ef6:	e711      	b.n	8000d1c <__aeabi_ddiv+0x4c>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	2604      	movs	r6, #4
 8000f00:	2700      	movs	r7, #0
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	e70a      	b.n	8000d1c <__aeabi_ddiv+0x4c>
 8000f06:	2303      	movs	r3, #3
 8000f08:	46c3      	mov	fp, r8
 8000f0a:	431e      	orrs	r6, r3
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	e725      	b.n	8000d5c <__aeabi_ddiv+0x8c>
 8000f10:	3301      	adds	r3, #1
 8000f12:	431e      	orrs	r6, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	2101      	movs	r1, #1
 8000f18:	e720      	b.n	8000d5c <__aeabi_ddiv+0x8c>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	2700      	movs	r7, #0
 8000f22:	031b      	lsls	r3, r3, #12
 8000f24:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000f26:	e761      	b.n	8000dec <__aeabi_ddiv+0x11c>
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	031b      	lsls	r3, r3, #12
 8000f2e:	4219      	tst	r1, r3
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x264>
 8000f32:	e0e2      	b.n	80010fa <__aeabi_ddiv+0x42a>
 8000f34:	4659      	mov	r1, fp
 8000f36:	4219      	tst	r1, r3
 8000f38:	d000      	beq.n	8000f3c <__aeabi_ddiv+0x26c>
 8000f3a:	e0de      	b.n	80010fa <__aeabi_ddiv+0x42a>
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	031b      	lsls	r3, r3, #12
 8000f40:	0017      	movs	r7, r2
 8000f42:	0b1b      	lsrs	r3, r3, #12
 8000f44:	46a2      	mov	sl, r4
 8000f46:	4a01      	ldr	r2, [pc, #4]	; (8000f4c <__aeabi_ddiv+0x27c>)
 8000f48:	e750      	b.n	8000dec <__aeabi_ddiv+0x11c>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	000007ff 	.word	0x000007ff
 8000f50:	fffffc01 	.word	0xfffffc01
 8000f54:	08008b74 	.word	0x08008b74
 8000f58:	000003ff 	.word	0x000003ff
 8000f5c:	feffffff 	.word	0xfeffffff
 8000f60:	000007fe 	.word	0x000007fe
 8000f64:	800fffff 	.word	0x800fffff
 8000f68:	fffffc0d 	.word	0xfffffc0d
 8000f6c:	fffff801 	.word	0xfffff801
 8000f70:	000003f3 	.word	0x000003f3
 8000f74:	45d9      	cmp	r9, fp
 8000f76:	d900      	bls.n	8000f7a <__aeabi_ddiv+0x2aa>
 8000f78:	e0cb      	b.n	8001112 <__aeabi_ddiv+0x442>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x2ae>
 8000f7c:	e0c6      	b.n	800110c <__aeabi_ddiv+0x43c>
 8000f7e:	003c      	movs	r4, r7
 8000f80:	4648      	mov	r0, r9
 8000f82:	2700      	movs	r7, #0
 8000f84:	9b00      	ldr	r3, [sp, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	465b      	mov	r3, fp
 8000f8c:	0e16      	lsrs	r6, r2, #24
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	431e      	orrs	r6, r3
 8000f92:	0213      	lsls	r3, r2, #8
 8000f94:	4698      	mov	r8, r3
 8000f96:	0433      	lsls	r3, r6, #16
 8000f98:	0c1b      	lsrs	r3, r3, #16
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	0c31      	lsrs	r1, r6, #16
 8000f9e:	9101      	str	r1, [sp, #4]
 8000fa0:	f7ff f940 	bl	8000224 <__aeabi_uidivmod>
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	4342      	muls	r2, r0
 8000fa8:	040b      	lsls	r3, r1, #16
 8000faa:	0c21      	lsrs	r1, r4, #16
 8000fac:	0005      	movs	r5, r0
 8000fae:	4319      	orrs	r1, r3
 8000fb0:	428a      	cmp	r2, r1
 8000fb2:	d907      	bls.n	8000fc4 <__aeabi_ddiv+0x2f4>
 8000fb4:	1989      	adds	r1, r1, r6
 8000fb6:	3d01      	subs	r5, #1
 8000fb8:	428e      	cmp	r6, r1
 8000fba:	d803      	bhi.n	8000fc4 <__aeabi_ddiv+0x2f4>
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d901      	bls.n	8000fc4 <__aeabi_ddiv+0x2f4>
 8000fc0:	1e85      	subs	r5, r0, #2
 8000fc2:	1989      	adds	r1, r1, r6
 8000fc4:	1a88      	subs	r0, r1, r2
 8000fc6:	9901      	ldr	r1, [sp, #4]
 8000fc8:	f7ff f92c 	bl	8000224 <__aeabi_uidivmod>
 8000fcc:	0409      	lsls	r1, r1, #16
 8000fce:	468c      	mov	ip, r1
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	0421      	lsls	r1, r4, #16
 8000fd4:	4664      	mov	r4, ip
 8000fd6:	4342      	muls	r2, r0
 8000fd8:	0c09      	lsrs	r1, r1, #16
 8000fda:	0003      	movs	r3, r0
 8000fdc:	4321      	orrs	r1, r4
 8000fde:	428a      	cmp	r2, r1
 8000fe0:	d904      	bls.n	8000fec <__aeabi_ddiv+0x31c>
 8000fe2:	1989      	adds	r1, r1, r6
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	428e      	cmp	r6, r1
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x31c>
 8000fea:	e0f1      	b.n	80011d0 <__aeabi_ddiv+0x500>
 8000fec:	042d      	lsls	r5, r5, #16
 8000fee:	431d      	orrs	r5, r3
 8000ff0:	46ab      	mov	fp, r5
 8000ff2:	4643      	mov	r3, r8
 8000ff4:	1a89      	subs	r1, r1, r2
 8000ff6:	4642      	mov	r2, r8
 8000ff8:	0c28      	lsrs	r0, r5, #16
 8000ffa:	0412      	lsls	r2, r2, #16
 8000ffc:	0c1d      	lsrs	r5, r3, #16
 8000ffe:	465b      	mov	r3, fp
 8001000:	0c14      	lsrs	r4, r2, #16
 8001002:	0022      	movs	r2, r4
 8001004:	041b      	lsls	r3, r3, #16
 8001006:	0c1b      	lsrs	r3, r3, #16
 8001008:	435a      	muls	r2, r3
 800100a:	9403      	str	r4, [sp, #12]
 800100c:	436b      	muls	r3, r5
 800100e:	4344      	muls	r4, r0
 8001010:	9502      	str	r5, [sp, #8]
 8001012:	4368      	muls	r0, r5
 8001014:	191b      	adds	r3, r3, r4
 8001016:	0c15      	lsrs	r5, r2, #16
 8001018:	18eb      	adds	r3, r5, r3
 800101a:	429c      	cmp	r4, r3
 800101c:	d903      	bls.n	8001026 <__aeabi_ddiv+0x356>
 800101e:	2480      	movs	r4, #128	; 0x80
 8001020:	0264      	lsls	r4, r4, #9
 8001022:	46a4      	mov	ip, r4
 8001024:	4460      	add	r0, ip
 8001026:	0c1c      	lsrs	r4, r3, #16
 8001028:	0415      	lsls	r5, r2, #16
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	0c2d      	lsrs	r5, r5, #16
 800102e:	1820      	adds	r0, r4, r0
 8001030:	195d      	adds	r5, r3, r5
 8001032:	4281      	cmp	r1, r0
 8001034:	d377      	bcc.n	8001126 <__aeabi_ddiv+0x456>
 8001036:	d073      	beq.n	8001120 <__aeabi_ddiv+0x450>
 8001038:	1a0c      	subs	r4, r1, r0
 800103a:	4aa2      	ldr	r2, [pc, #648]	; (80012c4 <__aeabi_ddiv+0x5f4>)
 800103c:	1b7d      	subs	r5, r7, r5
 800103e:	42af      	cmp	r7, r5
 8001040:	41bf      	sbcs	r7, r7
 8001042:	4694      	mov	ip, r2
 8001044:	9b00      	ldr	r3, [sp, #0]
 8001046:	427f      	negs	r7, r7
 8001048:	4463      	add	r3, ip
 800104a:	1be0      	subs	r0, r4, r7
 800104c:	001c      	movs	r4, r3
 800104e:	4286      	cmp	r6, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x384>
 8001052:	e0db      	b.n	800120c <__aeabi_ddiv+0x53c>
 8001054:	9901      	ldr	r1, [sp, #4]
 8001056:	f7ff f8e5 	bl	8000224 <__aeabi_uidivmod>
 800105a:	464a      	mov	r2, r9
 800105c:	4342      	muls	r2, r0
 800105e:	040b      	lsls	r3, r1, #16
 8001060:	0c29      	lsrs	r1, r5, #16
 8001062:	0007      	movs	r7, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d907      	bls.n	800107a <__aeabi_ddiv+0x3aa>
 800106a:	1989      	adds	r1, r1, r6
 800106c:	3f01      	subs	r7, #1
 800106e:	428e      	cmp	r6, r1
 8001070:	d803      	bhi.n	800107a <__aeabi_ddiv+0x3aa>
 8001072:	428a      	cmp	r2, r1
 8001074:	d901      	bls.n	800107a <__aeabi_ddiv+0x3aa>
 8001076:	1e87      	subs	r7, r0, #2
 8001078:	1989      	adds	r1, r1, r6
 800107a:	1a88      	subs	r0, r1, r2
 800107c:	9901      	ldr	r1, [sp, #4]
 800107e:	f7ff f8d1 	bl	8000224 <__aeabi_uidivmod>
 8001082:	0409      	lsls	r1, r1, #16
 8001084:	464a      	mov	r2, r9
 8001086:	4689      	mov	r9, r1
 8001088:	0429      	lsls	r1, r5, #16
 800108a:	464d      	mov	r5, r9
 800108c:	4342      	muls	r2, r0
 800108e:	0c09      	lsrs	r1, r1, #16
 8001090:	0003      	movs	r3, r0
 8001092:	4329      	orrs	r1, r5
 8001094:	428a      	cmp	r2, r1
 8001096:	d907      	bls.n	80010a8 <__aeabi_ddiv+0x3d8>
 8001098:	1989      	adds	r1, r1, r6
 800109a:	3b01      	subs	r3, #1
 800109c:	428e      	cmp	r6, r1
 800109e:	d803      	bhi.n	80010a8 <__aeabi_ddiv+0x3d8>
 80010a0:	428a      	cmp	r2, r1
 80010a2:	d901      	bls.n	80010a8 <__aeabi_ddiv+0x3d8>
 80010a4:	1e83      	subs	r3, r0, #2
 80010a6:	1989      	adds	r1, r1, r6
 80010a8:	043f      	lsls	r7, r7, #16
 80010aa:	1a89      	subs	r1, r1, r2
 80010ac:	003a      	movs	r2, r7
 80010ae:	9f03      	ldr	r7, [sp, #12]
 80010b0:	431a      	orrs	r2, r3
 80010b2:	0038      	movs	r0, r7
 80010b4:	0413      	lsls	r3, r2, #16
 80010b6:	0c1b      	lsrs	r3, r3, #16
 80010b8:	4358      	muls	r0, r3
 80010ba:	4681      	mov	r9, r0
 80010bc:	9802      	ldr	r0, [sp, #8]
 80010be:	0c15      	lsrs	r5, r2, #16
 80010c0:	436f      	muls	r7, r5
 80010c2:	4343      	muls	r3, r0
 80010c4:	4345      	muls	r5, r0
 80010c6:	4648      	mov	r0, r9
 80010c8:	0c00      	lsrs	r0, r0, #16
 80010ca:	4684      	mov	ip, r0
 80010cc:	19db      	adds	r3, r3, r7
 80010ce:	4463      	add	r3, ip
 80010d0:	429f      	cmp	r7, r3
 80010d2:	d903      	bls.n	80010dc <__aeabi_ddiv+0x40c>
 80010d4:	2080      	movs	r0, #128	; 0x80
 80010d6:	0240      	lsls	r0, r0, #9
 80010d8:	4684      	mov	ip, r0
 80010da:	4465      	add	r5, ip
 80010dc:	4648      	mov	r0, r9
 80010de:	0c1f      	lsrs	r7, r3, #16
 80010e0:	0400      	lsls	r0, r0, #16
 80010e2:	041b      	lsls	r3, r3, #16
 80010e4:	0c00      	lsrs	r0, r0, #16
 80010e6:	197d      	adds	r5, r7, r5
 80010e8:	1818      	adds	r0, r3, r0
 80010ea:	42a9      	cmp	r1, r5
 80010ec:	d200      	bcs.n	80010f0 <__aeabi_ddiv+0x420>
 80010ee:	e084      	b.n	80011fa <__aeabi_ddiv+0x52a>
 80010f0:	d100      	bne.n	80010f4 <__aeabi_ddiv+0x424>
 80010f2:	e07f      	b.n	80011f4 <__aeabi_ddiv+0x524>
 80010f4:	2301      	movs	r3, #1
 80010f6:	431a      	orrs	r2, r3
 80010f8:	e657      	b.n	8000daa <__aeabi_ddiv+0xda>
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	464a      	mov	r2, r9
 80010fe:	031b      	lsls	r3, r3, #12
 8001100:	4313      	orrs	r3, r2
 8001102:	031b      	lsls	r3, r3, #12
 8001104:	0b1b      	lsrs	r3, r3, #12
 8001106:	46aa      	mov	sl, r5
 8001108:	4a6f      	ldr	r2, [pc, #444]	; (80012c8 <__aeabi_ddiv+0x5f8>)
 800110a:	e66f      	b.n	8000dec <__aeabi_ddiv+0x11c>
 800110c:	42ba      	cmp	r2, r7
 800110e:	d900      	bls.n	8001112 <__aeabi_ddiv+0x442>
 8001110:	e735      	b.n	8000f7e <__aeabi_ddiv+0x2ae>
 8001112:	464b      	mov	r3, r9
 8001114:	07dc      	lsls	r4, r3, #31
 8001116:	0858      	lsrs	r0, r3, #1
 8001118:	087b      	lsrs	r3, r7, #1
 800111a:	431c      	orrs	r4, r3
 800111c:	07ff      	lsls	r7, r7, #31
 800111e:	e734      	b.n	8000f8a <__aeabi_ddiv+0x2ba>
 8001120:	2400      	movs	r4, #0
 8001122:	42af      	cmp	r7, r5
 8001124:	d289      	bcs.n	800103a <__aeabi_ddiv+0x36a>
 8001126:	4447      	add	r7, r8
 8001128:	4547      	cmp	r7, r8
 800112a:	41a4      	sbcs	r4, r4
 800112c:	465b      	mov	r3, fp
 800112e:	4264      	negs	r4, r4
 8001130:	19a4      	adds	r4, r4, r6
 8001132:	1864      	adds	r4, r4, r1
 8001134:	3b01      	subs	r3, #1
 8001136:	42a6      	cmp	r6, r4
 8001138:	d21e      	bcs.n	8001178 <__aeabi_ddiv+0x4a8>
 800113a:	42a0      	cmp	r0, r4
 800113c:	d86d      	bhi.n	800121a <__aeabi_ddiv+0x54a>
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x472>
 8001140:	e0b6      	b.n	80012b0 <__aeabi_ddiv+0x5e0>
 8001142:	1a24      	subs	r4, r4, r0
 8001144:	469b      	mov	fp, r3
 8001146:	e778      	b.n	800103a <__aeabi_ddiv+0x36a>
 8001148:	0003      	movs	r3, r0
 800114a:	465a      	mov	r2, fp
 800114c:	3b28      	subs	r3, #40	; 0x28
 800114e:	409a      	lsls	r2, r3
 8001150:	2700      	movs	r7, #0
 8001152:	4691      	mov	r9, r2
 8001154:	e688      	b.n	8000e68 <__aeabi_ddiv+0x198>
 8001156:	4658      	mov	r0, fp
 8001158:	f000 ffd4 	bl	8002104 <__clzsi2>
 800115c:	3020      	adds	r0, #32
 800115e:	e672      	b.n	8000e46 <__aeabi_ddiv+0x176>
 8001160:	0003      	movs	r3, r0
 8001162:	4652      	mov	r2, sl
 8001164:	3b28      	subs	r3, #40	; 0x28
 8001166:	409a      	lsls	r2, r3
 8001168:	4693      	mov	fp, r2
 800116a:	2200      	movs	r2, #0
 800116c:	e6b4      	b.n	8000ed8 <__aeabi_ddiv+0x208>
 800116e:	4650      	mov	r0, sl
 8001170:	f000 ffc8 	bl	8002104 <__clzsi2>
 8001174:	3020      	adds	r0, #32
 8001176:	e69a      	b.n	8000eae <__aeabi_ddiv+0x1de>
 8001178:	42a6      	cmp	r6, r4
 800117a:	d1e2      	bne.n	8001142 <__aeabi_ddiv+0x472>
 800117c:	45b8      	cmp	r8, r7
 800117e:	d9dc      	bls.n	800113a <__aeabi_ddiv+0x46a>
 8001180:	1a34      	subs	r4, r6, r0
 8001182:	469b      	mov	fp, r3
 8001184:	e759      	b.n	800103a <__aeabi_ddiv+0x36a>
 8001186:	2b1f      	cmp	r3, #31
 8001188:	dc65      	bgt.n	8001256 <__aeabi_ddiv+0x586>
 800118a:	4c50      	ldr	r4, [pc, #320]	; (80012cc <__aeabi_ddiv+0x5fc>)
 800118c:	9900      	ldr	r1, [sp, #0]
 800118e:	46a4      	mov	ip, r4
 8001190:	465c      	mov	r4, fp
 8001192:	4461      	add	r1, ip
 8001194:	0008      	movs	r0, r1
 8001196:	408c      	lsls	r4, r1
 8001198:	0011      	movs	r1, r2
 800119a:	4082      	lsls	r2, r0
 800119c:	40d9      	lsrs	r1, r3
 800119e:	1e50      	subs	r0, r2, #1
 80011a0:	4182      	sbcs	r2, r0
 80011a2:	430c      	orrs	r4, r1
 80011a4:	4314      	orrs	r4, r2
 80011a6:	465a      	mov	r2, fp
 80011a8:	40da      	lsrs	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	0762      	lsls	r2, r4, #29
 80011ae:	d009      	beq.n	80011c4 <__aeabi_ddiv+0x4f4>
 80011b0:	220f      	movs	r2, #15
 80011b2:	4022      	ands	r2, r4
 80011b4:	2a04      	cmp	r2, #4
 80011b6:	d005      	beq.n	80011c4 <__aeabi_ddiv+0x4f4>
 80011b8:	0022      	movs	r2, r4
 80011ba:	1d14      	adds	r4, r2, #4
 80011bc:	4294      	cmp	r4, r2
 80011be:	4189      	sbcs	r1, r1
 80011c0:	4249      	negs	r1, r1
 80011c2:	185b      	adds	r3, r3, r1
 80011c4:	021a      	lsls	r2, r3, #8
 80011c6:	d562      	bpl.n	800128e <__aeabi_ddiv+0x5be>
 80011c8:	2201      	movs	r2, #1
 80011ca:	2300      	movs	r3, #0
 80011cc:	2700      	movs	r7, #0
 80011ce:	e60d      	b.n	8000dec <__aeabi_ddiv+0x11c>
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d800      	bhi.n	80011d6 <__aeabi_ddiv+0x506>
 80011d4:	e70a      	b.n	8000fec <__aeabi_ddiv+0x31c>
 80011d6:	1e83      	subs	r3, r0, #2
 80011d8:	1989      	adds	r1, r1, r6
 80011da:	e707      	b.n	8000fec <__aeabi_ddiv+0x31c>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x516>
 80011e4:	e5e6      	b.n	8000db4 <__aeabi_ddiv+0xe4>
 80011e6:	1d17      	adds	r7, r2, #4
 80011e8:	4297      	cmp	r7, r2
 80011ea:	4192      	sbcs	r2, r2
 80011ec:	4253      	negs	r3, r2
 80011ee:	449b      	add	fp, r3
 80011f0:	08fa      	lsrs	r2, r7, #3
 80011f2:	e5e0      	b.n	8000db6 <__aeabi_ddiv+0xe6>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x52a>
 80011f8:	e5d7      	b.n	8000daa <__aeabi_ddiv+0xda>
 80011fa:	1871      	adds	r1, r6, r1
 80011fc:	1e53      	subs	r3, r2, #1
 80011fe:	42b1      	cmp	r1, r6
 8001200:	d327      	bcc.n	8001252 <__aeabi_ddiv+0x582>
 8001202:	42a9      	cmp	r1, r5
 8001204:	d315      	bcc.n	8001232 <__aeabi_ddiv+0x562>
 8001206:	d058      	beq.n	80012ba <__aeabi_ddiv+0x5ea>
 8001208:	001a      	movs	r2, r3
 800120a:	e773      	b.n	80010f4 <__aeabi_ddiv+0x424>
 800120c:	2b00      	cmp	r3, #0
 800120e:	dc00      	bgt.n	8001212 <__aeabi_ddiv+0x542>
 8001210:	e604      	b.n	8000e1c <__aeabi_ddiv+0x14c>
 8001212:	2301      	movs	r3, #1
 8001214:	2200      	movs	r2, #0
 8001216:	449b      	add	fp, r3
 8001218:	e5cd      	b.n	8000db6 <__aeabi_ddiv+0xe6>
 800121a:	2302      	movs	r3, #2
 800121c:	4447      	add	r7, r8
 800121e:	4547      	cmp	r7, r8
 8001220:	4189      	sbcs	r1, r1
 8001222:	425b      	negs	r3, r3
 8001224:	469c      	mov	ip, r3
 8001226:	4249      	negs	r1, r1
 8001228:	1989      	adds	r1, r1, r6
 800122a:	190c      	adds	r4, r1, r4
 800122c:	44e3      	add	fp, ip
 800122e:	1a24      	subs	r4, r4, r0
 8001230:	e703      	b.n	800103a <__aeabi_ddiv+0x36a>
 8001232:	4643      	mov	r3, r8
 8001234:	005f      	lsls	r7, r3, #1
 8001236:	4547      	cmp	r7, r8
 8001238:	419b      	sbcs	r3, r3
 800123a:	46b8      	mov	r8, r7
 800123c:	425b      	negs	r3, r3
 800123e:	199e      	adds	r6, r3, r6
 8001240:	3a02      	subs	r2, #2
 8001242:	1989      	adds	r1, r1, r6
 8001244:	42a9      	cmp	r1, r5
 8001246:	d000      	beq.n	800124a <__aeabi_ddiv+0x57a>
 8001248:	e754      	b.n	80010f4 <__aeabi_ddiv+0x424>
 800124a:	4540      	cmp	r0, r8
 800124c:	d000      	beq.n	8001250 <__aeabi_ddiv+0x580>
 800124e:	e751      	b.n	80010f4 <__aeabi_ddiv+0x424>
 8001250:	e5ab      	b.n	8000daa <__aeabi_ddiv+0xda>
 8001252:	001a      	movs	r2, r3
 8001254:	e7f6      	b.n	8001244 <__aeabi_ddiv+0x574>
 8001256:	211f      	movs	r1, #31
 8001258:	465f      	mov	r7, fp
 800125a:	4249      	negs	r1, r1
 800125c:	1b0c      	subs	r4, r1, r4
 800125e:	40e7      	lsrs	r7, r4
 8001260:	2b20      	cmp	r3, #32
 8001262:	d007      	beq.n	8001274 <__aeabi_ddiv+0x5a4>
 8001264:	491a      	ldr	r1, [pc, #104]	; (80012d0 <__aeabi_ddiv+0x600>)
 8001266:	9b00      	ldr	r3, [sp, #0]
 8001268:	468c      	mov	ip, r1
 800126a:	4463      	add	r3, ip
 800126c:	0018      	movs	r0, r3
 800126e:	465b      	mov	r3, fp
 8001270:	4083      	lsls	r3, r0
 8001272:	431a      	orrs	r2, r3
 8001274:	1e50      	subs	r0, r2, #1
 8001276:	4182      	sbcs	r2, r0
 8001278:	433a      	orrs	r2, r7
 800127a:	2707      	movs	r7, #7
 800127c:	2300      	movs	r3, #0
 800127e:	4017      	ands	r7, r2
 8001280:	d009      	beq.n	8001296 <__aeabi_ddiv+0x5c6>
 8001282:	210f      	movs	r1, #15
 8001284:	2300      	movs	r3, #0
 8001286:	4011      	ands	r1, r2
 8001288:	0014      	movs	r4, r2
 800128a:	2904      	cmp	r1, #4
 800128c:	d195      	bne.n	80011ba <__aeabi_ddiv+0x4ea>
 800128e:	0022      	movs	r2, r4
 8001290:	075f      	lsls	r7, r3, #29
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	0b1b      	lsrs	r3, r3, #12
 8001296:	08d2      	lsrs	r2, r2, #3
 8001298:	4317      	orrs	r7, r2
 800129a:	2200      	movs	r2, #0
 800129c:	e5a6      	b.n	8000dec <__aeabi_ddiv+0x11c>
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	4659      	mov	r1, fp
 80012a2:	031b      	lsls	r3, r3, #12
 80012a4:	430b      	orrs	r3, r1
 80012a6:	031b      	lsls	r3, r3, #12
 80012a8:	0017      	movs	r7, r2
 80012aa:	0b1b      	lsrs	r3, r3, #12
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <__aeabi_ddiv+0x5f8>)
 80012ae:	e59d      	b.n	8000dec <__aeabi_ddiv+0x11c>
 80012b0:	42bd      	cmp	r5, r7
 80012b2:	d8b2      	bhi.n	800121a <__aeabi_ddiv+0x54a>
 80012b4:	469b      	mov	fp, r3
 80012b6:	2400      	movs	r4, #0
 80012b8:	e6bf      	b.n	800103a <__aeabi_ddiv+0x36a>
 80012ba:	4580      	cmp	r8, r0
 80012bc:	d3b9      	bcc.n	8001232 <__aeabi_ddiv+0x562>
 80012be:	001a      	movs	r2, r3
 80012c0:	e7c3      	b.n	800124a <__aeabi_ddiv+0x57a>
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	000003ff 	.word	0x000003ff
 80012c8:	000007ff 	.word	0x000007ff
 80012cc:	0000041e 	.word	0x0000041e
 80012d0:	0000043e 	.word	0x0000043e

080012d4 <__eqdf2>:
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	464f      	mov	r7, r9
 80012d8:	4646      	mov	r6, r8
 80012da:	46d6      	mov	lr, sl
 80012dc:	4684      	mov	ip, r0
 80012de:	b5c0      	push	{r6, r7, lr}
 80012e0:	4680      	mov	r8, r0
 80012e2:	4e19      	ldr	r6, [pc, #100]	; (8001348 <__eqdf2+0x74>)
 80012e4:	0318      	lsls	r0, r3, #12
 80012e6:	030f      	lsls	r7, r1, #12
 80012e8:	004d      	lsls	r5, r1, #1
 80012ea:	0b00      	lsrs	r0, r0, #12
 80012ec:	005c      	lsls	r4, r3, #1
 80012ee:	4682      	mov	sl, r0
 80012f0:	0b3f      	lsrs	r7, r7, #12
 80012f2:	0d6d      	lsrs	r5, r5, #21
 80012f4:	0fc9      	lsrs	r1, r1, #31
 80012f6:	4691      	mov	r9, r2
 80012f8:	0d64      	lsrs	r4, r4, #21
 80012fa:	0fdb      	lsrs	r3, r3, #31
 80012fc:	2001      	movs	r0, #1
 80012fe:	42b5      	cmp	r5, r6
 8001300:	d00a      	beq.n	8001318 <__eqdf2+0x44>
 8001302:	42b4      	cmp	r4, r6
 8001304:	d003      	beq.n	800130e <__eqdf2+0x3a>
 8001306:	42a5      	cmp	r5, r4
 8001308:	d101      	bne.n	800130e <__eqdf2+0x3a>
 800130a:	4557      	cmp	r7, sl
 800130c:	d00c      	beq.n	8001328 <__eqdf2+0x54>
 800130e:	bc1c      	pop	{r2, r3, r4}
 8001310:	4690      	mov	r8, r2
 8001312:	4699      	mov	r9, r3
 8001314:	46a2      	mov	sl, r4
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001318:	4666      	mov	r6, ip
 800131a:	433e      	orrs	r6, r7
 800131c:	d1f7      	bne.n	800130e <__eqdf2+0x3a>
 800131e:	42ac      	cmp	r4, r5
 8001320:	d1f5      	bne.n	800130e <__eqdf2+0x3a>
 8001322:	4654      	mov	r4, sl
 8001324:	4314      	orrs	r4, r2
 8001326:	d1f2      	bne.n	800130e <__eqdf2+0x3a>
 8001328:	2001      	movs	r0, #1
 800132a:	45c8      	cmp	r8, r9
 800132c:	d1ef      	bne.n	800130e <__eqdf2+0x3a>
 800132e:	4299      	cmp	r1, r3
 8001330:	d007      	beq.n	8001342 <__eqdf2+0x6e>
 8001332:	2d00      	cmp	r5, #0
 8001334:	d1eb      	bne.n	800130e <__eqdf2+0x3a>
 8001336:	4663      	mov	r3, ip
 8001338:	431f      	orrs	r7, r3
 800133a:	0038      	movs	r0, r7
 800133c:	1e47      	subs	r7, r0, #1
 800133e:	41b8      	sbcs	r0, r7
 8001340:	e7e5      	b.n	800130e <__eqdf2+0x3a>
 8001342:	2000      	movs	r0, #0
 8001344:	e7e3      	b.n	800130e <__eqdf2+0x3a>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	000007ff 	.word	0x000007ff

0800134c <__gedf2>:
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	464f      	mov	r7, r9
 8001350:	4646      	mov	r6, r8
 8001352:	46d6      	mov	lr, sl
 8001354:	004d      	lsls	r5, r1, #1
 8001356:	b5c0      	push	{r6, r7, lr}
 8001358:	030e      	lsls	r6, r1, #12
 800135a:	0fc9      	lsrs	r1, r1, #31
 800135c:	468a      	mov	sl, r1
 800135e:	492c      	ldr	r1, [pc, #176]	; (8001410 <__gedf2+0xc4>)
 8001360:	031f      	lsls	r7, r3, #12
 8001362:	005c      	lsls	r4, r3, #1
 8001364:	4680      	mov	r8, r0
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d6d      	lsrs	r5, r5, #21
 800136a:	4691      	mov	r9, r2
 800136c:	0b3f      	lsrs	r7, r7, #12
 800136e:	0d64      	lsrs	r4, r4, #21
 8001370:	0fdb      	lsrs	r3, r3, #31
 8001372:	428d      	cmp	r5, r1
 8001374:	d01e      	beq.n	80013b4 <__gedf2+0x68>
 8001376:	428c      	cmp	r4, r1
 8001378:	d016      	beq.n	80013a8 <__gedf2+0x5c>
 800137a:	2d00      	cmp	r5, #0
 800137c:	d11e      	bne.n	80013bc <__gedf2+0x70>
 800137e:	4330      	orrs	r0, r6
 8001380:	4684      	mov	ip, r0
 8001382:	2c00      	cmp	r4, #0
 8001384:	d101      	bne.n	800138a <__gedf2+0x3e>
 8001386:	433a      	orrs	r2, r7
 8001388:	d023      	beq.n	80013d2 <__gedf2+0x86>
 800138a:	4662      	mov	r2, ip
 800138c:	2a00      	cmp	r2, #0
 800138e:	d01a      	beq.n	80013c6 <__gedf2+0x7a>
 8001390:	459a      	cmp	sl, r3
 8001392:	d029      	beq.n	80013e8 <__gedf2+0x9c>
 8001394:	4651      	mov	r1, sl
 8001396:	2002      	movs	r0, #2
 8001398:	3901      	subs	r1, #1
 800139a:	4008      	ands	r0, r1
 800139c:	3801      	subs	r0, #1
 800139e:	bc1c      	pop	{r2, r3, r4}
 80013a0:	4690      	mov	r8, r2
 80013a2:	4699      	mov	r9, r3
 80013a4:	46a2      	mov	sl, r4
 80013a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a8:	0039      	movs	r1, r7
 80013aa:	4311      	orrs	r1, r2
 80013ac:	d0e5      	beq.n	800137a <__gedf2+0x2e>
 80013ae:	2002      	movs	r0, #2
 80013b0:	4240      	negs	r0, r0
 80013b2:	e7f4      	b.n	800139e <__gedf2+0x52>
 80013b4:	4330      	orrs	r0, r6
 80013b6:	d1fa      	bne.n	80013ae <__gedf2+0x62>
 80013b8:	42ac      	cmp	r4, r5
 80013ba:	d00f      	beq.n	80013dc <__gedf2+0x90>
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d10f      	bne.n	80013e0 <__gedf2+0x94>
 80013c0:	433a      	orrs	r2, r7
 80013c2:	d0e7      	beq.n	8001394 <__gedf2+0x48>
 80013c4:	e00c      	b.n	80013e0 <__gedf2+0x94>
 80013c6:	2201      	movs	r2, #1
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4393      	bics	r3, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	3001      	adds	r0, #1
 80013d0:	e7e5      	b.n	800139e <__gedf2+0x52>
 80013d2:	4663      	mov	r3, ip
 80013d4:	2000      	movs	r0, #0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0e1      	beq.n	800139e <__gedf2+0x52>
 80013da:	e7db      	b.n	8001394 <__gedf2+0x48>
 80013dc:	433a      	orrs	r2, r7
 80013de:	d1e6      	bne.n	80013ae <__gedf2+0x62>
 80013e0:	459a      	cmp	sl, r3
 80013e2:	d1d7      	bne.n	8001394 <__gedf2+0x48>
 80013e4:	42a5      	cmp	r5, r4
 80013e6:	dcd5      	bgt.n	8001394 <__gedf2+0x48>
 80013e8:	42a5      	cmp	r5, r4
 80013ea:	db05      	blt.n	80013f8 <__gedf2+0xac>
 80013ec:	42be      	cmp	r6, r7
 80013ee:	d8d1      	bhi.n	8001394 <__gedf2+0x48>
 80013f0:	d008      	beq.n	8001404 <__gedf2+0xb8>
 80013f2:	2000      	movs	r0, #0
 80013f4:	42be      	cmp	r6, r7
 80013f6:	d2d2      	bcs.n	800139e <__gedf2+0x52>
 80013f8:	4650      	mov	r0, sl
 80013fa:	2301      	movs	r3, #1
 80013fc:	3801      	subs	r0, #1
 80013fe:	4398      	bics	r0, r3
 8001400:	3001      	adds	r0, #1
 8001402:	e7cc      	b.n	800139e <__gedf2+0x52>
 8001404:	45c8      	cmp	r8, r9
 8001406:	d8c5      	bhi.n	8001394 <__gedf2+0x48>
 8001408:	2000      	movs	r0, #0
 800140a:	45c8      	cmp	r8, r9
 800140c:	d3f4      	bcc.n	80013f8 <__gedf2+0xac>
 800140e:	e7c6      	b.n	800139e <__gedf2+0x52>
 8001410:	000007ff 	.word	0x000007ff

08001414 <__ledf2>:
 8001414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001416:	464f      	mov	r7, r9
 8001418:	4646      	mov	r6, r8
 800141a:	46d6      	mov	lr, sl
 800141c:	004d      	lsls	r5, r1, #1
 800141e:	b5c0      	push	{r6, r7, lr}
 8001420:	030e      	lsls	r6, r1, #12
 8001422:	0fc9      	lsrs	r1, r1, #31
 8001424:	468a      	mov	sl, r1
 8001426:	492e      	ldr	r1, [pc, #184]	; (80014e0 <__ledf2+0xcc>)
 8001428:	031f      	lsls	r7, r3, #12
 800142a:	005c      	lsls	r4, r3, #1
 800142c:	4680      	mov	r8, r0
 800142e:	0b36      	lsrs	r6, r6, #12
 8001430:	0d6d      	lsrs	r5, r5, #21
 8001432:	4691      	mov	r9, r2
 8001434:	0b3f      	lsrs	r7, r7, #12
 8001436:	0d64      	lsrs	r4, r4, #21
 8001438:	0fdb      	lsrs	r3, r3, #31
 800143a:	428d      	cmp	r5, r1
 800143c:	d018      	beq.n	8001470 <__ledf2+0x5c>
 800143e:	428c      	cmp	r4, r1
 8001440:	d011      	beq.n	8001466 <__ledf2+0x52>
 8001442:	2d00      	cmp	r5, #0
 8001444:	d118      	bne.n	8001478 <__ledf2+0x64>
 8001446:	4330      	orrs	r0, r6
 8001448:	4684      	mov	ip, r0
 800144a:	2c00      	cmp	r4, #0
 800144c:	d11e      	bne.n	800148c <__ledf2+0x78>
 800144e:	433a      	orrs	r2, r7
 8001450:	d11c      	bne.n	800148c <__ledf2+0x78>
 8001452:	4663      	mov	r3, ip
 8001454:	2000      	movs	r0, #0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d030      	beq.n	80014bc <__ledf2+0xa8>
 800145a:	4651      	mov	r1, sl
 800145c:	2002      	movs	r0, #2
 800145e:	3901      	subs	r1, #1
 8001460:	4008      	ands	r0, r1
 8001462:	3801      	subs	r0, #1
 8001464:	e02a      	b.n	80014bc <__ledf2+0xa8>
 8001466:	0039      	movs	r1, r7
 8001468:	4311      	orrs	r1, r2
 800146a:	d0ea      	beq.n	8001442 <__ledf2+0x2e>
 800146c:	2002      	movs	r0, #2
 800146e:	e025      	b.n	80014bc <__ledf2+0xa8>
 8001470:	4330      	orrs	r0, r6
 8001472:	d1fb      	bne.n	800146c <__ledf2+0x58>
 8001474:	42ac      	cmp	r4, r5
 8001476:	d026      	beq.n	80014c6 <__ledf2+0xb2>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d126      	bne.n	80014ca <__ledf2+0xb6>
 800147c:	433a      	orrs	r2, r7
 800147e:	d124      	bne.n	80014ca <__ledf2+0xb6>
 8001480:	4651      	mov	r1, sl
 8001482:	2002      	movs	r0, #2
 8001484:	3901      	subs	r1, #1
 8001486:	4008      	ands	r0, r1
 8001488:	3801      	subs	r0, #1
 800148a:	e017      	b.n	80014bc <__ledf2+0xa8>
 800148c:	4662      	mov	r2, ip
 800148e:	2a00      	cmp	r2, #0
 8001490:	d00f      	beq.n	80014b2 <__ledf2+0x9e>
 8001492:	459a      	cmp	sl, r3
 8001494:	d1e1      	bne.n	800145a <__ledf2+0x46>
 8001496:	42a5      	cmp	r5, r4
 8001498:	db05      	blt.n	80014a6 <__ledf2+0x92>
 800149a:	42be      	cmp	r6, r7
 800149c:	d8dd      	bhi.n	800145a <__ledf2+0x46>
 800149e:	d019      	beq.n	80014d4 <__ledf2+0xc0>
 80014a0:	2000      	movs	r0, #0
 80014a2:	42be      	cmp	r6, r7
 80014a4:	d20a      	bcs.n	80014bc <__ledf2+0xa8>
 80014a6:	4650      	mov	r0, sl
 80014a8:	2301      	movs	r3, #1
 80014aa:	3801      	subs	r0, #1
 80014ac:	4398      	bics	r0, r3
 80014ae:	3001      	adds	r0, #1
 80014b0:	e004      	b.n	80014bc <__ledf2+0xa8>
 80014b2:	2201      	movs	r2, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4393      	bics	r3, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	3001      	adds	r0, #1
 80014bc:	bc1c      	pop	{r2, r3, r4}
 80014be:	4690      	mov	r8, r2
 80014c0:	4699      	mov	r9, r3
 80014c2:	46a2      	mov	sl, r4
 80014c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c6:	433a      	orrs	r2, r7
 80014c8:	d1d0      	bne.n	800146c <__ledf2+0x58>
 80014ca:	459a      	cmp	sl, r3
 80014cc:	d1c5      	bne.n	800145a <__ledf2+0x46>
 80014ce:	42a5      	cmp	r5, r4
 80014d0:	dcc3      	bgt.n	800145a <__ledf2+0x46>
 80014d2:	e7e0      	b.n	8001496 <__ledf2+0x82>
 80014d4:	45c8      	cmp	r8, r9
 80014d6:	d8c0      	bhi.n	800145a <__ledf2+0x46>
 80014d8:	2000      	movs	r0, #0
 80014da:	45c8      	cmp	r8, r9
 80014dc:	d3e3      	bcc.n	80014a6 <__ledf2+0x92>
 80014de:	e7ed      	b.n	80014bc <__ledf2+0xa8>
 80014e0:	000007ff 	.word	0x000007ff

080014e4 <__aeabi_dmul>:
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	4657      	mov	r7, sl
 80014e8:	46de      	mov	lr, fp
 80014ea:	464e      	mov	r6, r9
 80014ec:	4645      	mov	r5, r8
 80014ee:	b5e0      	push	{r5, r6, r7, lr}
 80014f0:	4683      	mov	fp, r0
 80014f2:	0006      	movs	r6, r0
 80014f4:	030f      	lsls	r7, r1, #12
 80014f6:	0048      	lsls	r0, r1, #1
 80014f8:	b087      	sub	sp, #28
 80014fa:	4692      	mov	sl, r2
 80014fc:	001d      	movs	r5, r3
 80014fe:	0b3f      	lsrs	r7, r7, #12
 8001500:	0d40      	lsrs	r0, r0, #21
 8001502:	0fcc      	lsrs	r4, r1, #31
 8001504:	2800      	cmp	r0, #0
 8001506:	d100      	bne.n	800150a <__aeabi_dmul+0x26>
 8001508:	e06f      	b.n	80015ea <__aeabi_dmul+0x106>
 800150a:	4bde      	ldr	r3, [pc, #888]	; (8001884 <__aeabi_dmul+0x3a0>)
 800150c:	4298      	cmp	r0, r3
 800150e:	d038      	beq.n	8001582 <__aeabi_dmul+0x9e>
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	00ff      	lsls	r7, r7, #3
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	431f      	orrs	r7, r3
 8001518:	0f73      	lsrs	r3, r6, #29
 800151a:	433b      	orrs	r3, r7
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	4bda      	ldr	r3, [pc, #872]	; (8001888 <__aeabi_dmul+0x3a4>)
 8001520:	2700      	movs	r7, #0
 8001522:	4699      	mov	r9, r3
 8001524:	2300      	movs	r3, #0
 8001526:	469b      	mov	fp, r3
 8001528:	00f6      	lsls	r6, r6, #3
 800152a:	4481      	add	r9, r0
 800152c:	032b      	lsls	r3, r5, #12
 800152e:	0069      	lsls	r1, r5, #1
 8001530:	0b1b      	lsrs	r3, r3, #12
 8001532:	4652      	mov	r2, sl
 8001534:	4698      	mov	r8, r3
 8001536:	0d49      	lsrs	r1, r1, #21
 8001538:	0fed      	lsrs	r5, r5, #31
 800153a:	2900      	cmp	r1, #0
 800153c:	d100      	bne.n	8001540 <__aeabi_dmul+0x5c>
 800153e:	e085      	b.n	800164c <__aeabi_dmul+0x168>
 8001540:	4bd0      	ldr	r3, [pc, #832]	; (8001884 <__aeabi_dmul+0x3a0>)
 8001542:	4299      	cmp	r1, r3
 8001544:	d100      	bne.n	8001548 <__aeabi_dmul+0x64>
 8001546:	e073      	b.n	8001630 <__aeabi_dmul+0x14c>
 8001548:	4643      	mov	r3, r8
 800154a:	00da      	lsls	r2, r3, #3
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	4313      	orrs	r3, r2
 8001552:	4652      	mov	r2, sl
 8001554:	48cc      	ldr	r0, [pc, #816]	; (8001888 <__aeabi_dmul+0x3a4>)
 8001556:	0f52      	lsrs	r2, r2, #29
 8001558:	4684      	mov	ip, r0
 800155a:	4313      	orrs	r3, r2
 800155c:	4652      	mov	r2, sl
 800155e:	2000      	movs	r0, #0
 8001560:	4461      	add	r1, ip
 8001562:	00d2      	lsls	r2, r2, #3
 8001564:	4489      	add	r9, r1
 8001566:	0021      	movs	r1, r4
 8001568:	4069      	eors	r1, r5
 800156a:	9100      	str	r1, [sp, #0]
 800156c:	468c      	mov	ip, r1
 800156e:	2101      	movs	r1, #1
 8001570:	4449      	add	r1, r9
 8001572:	468a      	mov	sl, r1
 8001574:	2f0f      	cmp	r7, #15
 8001576:	d900      	bls.n	800157a <__aeabi_dmul+0x96>
 8001578:	e090      	b.n	800169c <__aeabi_dmul+0x1b8>
 800157a:	49c4      	ldr	r1, [pc, #784]	; (800188c <__aeabi_dmul+0x3a8>)
 800157c:	00bf      	lsls	r7, r7, #2
 800157e:	59cf      	ldr	r7, [r1, r7]
 8001580:	46bf      	mov	pc, r7
 8001582:	465b      	mov	r3, fp
 8001584:	433b      	orrs	r3, r7
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	d000      	beq.n	800158c <__aeabi_dmul+0xa8>
 800158a:	e16a      	b.n	8001862 <__aeabi_dmul+0x37e>
 800158c:	2302      	movs	r3, #2
 800158e:	2708      	movs	r7, #8
 8001590:	2600      	movs	r6, #0
 8001592:	4681      	mov	r9, r0
 8001594:	469b      	mov	fp, r3
 8001596:	e7c9      	b.n	800152c <__aeabi_dmul+0x48>
 8001598:	0032      	movs	r2, r6
 800159a:	4658      	mov	r0, fp
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	4661      	mov	r1, ip
 80015a0:	9100      	str	r1, [sp, #0]
 80015a2:	2802      	cmp	r0, #2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0xc4>
 80015a6:	e075      	b.n	8001694 <__aeabi_dmul+0x1b0>
 80015a8:	2803      	cmp	r0, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xca>
 80015ac:	e1fe      	b.n	80019ac <__aeabi_dmul+0x4c8>
 80015ae:	2801      	cmp	r0, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xd0>
 80015b2:	e12c      	b.n	800180e <__aeabi_dmul+0x32a>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2700      	movs	r7, #0
 80015b8:	2600      	movs	r6, #0
 80015ba:	2500      	movs	r5, #0
 80015bc:	033f      	lsls	r7, r7, #12
 80015be:	0d2a      	lsrs	r2, r5, #20
 80015c0:	0b3f      	lsrs	r7, r7, #12
 80015c2:	48b3      	ldr	r0, [pc, #716]	; (8001890 <__aeabi_dmul+0x3ac>)
 80015c4:	0512      	lsls	r2, r2, #20
 80015c6:	433a      	orrs	r2, r7
 80015c8:	4002      	ands	r2, r0
 80015ca:	051b      	lsls	r3, r3, #20
 80015cc:	4313      	orrs	r3, r2
 80015ce:	9a00      	ldr	r2, [sp, #0]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	07d1      	lsls	r1, r2, #31
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	430b      	orrs	r3, r1
 80015d8:	0030      	movs	r0, r6
 80015da:	0019      	movs	r1, r3
 80015dc:	b007      	add	sp, #28
 80015de:	bc3c      	pop	{r2, r3, r4, r5}
 80015e0:	4690      	mov	r8, r2
 80015e2:	4699      	mov	r9, r3
 80015e4:	46a2      	mov	sl, r4
 80015e6:	46ab      	mov	fp, r5
 80015e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ea:	465b      	mov	r3, fp
 80015ec:	433b      	orrs	r3, r7
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dmul+0x110>
 80015f2:	e12f      	b.n	8001854 <__aeabi_dmul+0x370>
 80015f4:	2f00      	cmp	r7, #0
 80015f6:	d100      	bne.n	80015fa <__aeabi_dmul+0x116>
 80015f8:	e1a5      	b.n	8001946 <__aeabi_dmul+0x462>
 80015fa:	0038      	movs	r0, r7
 80015fc:	f000 fd82 	bl	8002104 <__clzsi2>
 8001600:	0003      	movs	r3, r0
 8001602:	3b0b      	subs	r3, #11
 8001604:	2b1c      	cmp	r3, #28
 8001606:	dd00      	ble.n	800160a <__aeabi_dmul+0x126>
 8001608:	e196      	b.n	8001938 <__aeabi_dmul+0x454>
 800160a:	221d      	movs	r2, #29
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	465a      	mov	r2, fp
 8001610:	0001      	movs	r1, r0
 8001612:	40da      	lsrs	r2, r3
 8001614:	465e      	mov	r6, fp
 8001616:	3908      	subs	r1, #8
 8001618:	408f      	lsls	r7, r1
 800161a:	0013      	movs	r3, r2
 800161c:	408e      	lsls	r6, r1
 800161e:	433b      	orrs	r3, r7
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	4b9c      	ldr	r3, [pc, #624]	; (8001894 <__aeabi_dmul+0x3b0>)
 8001624:	2700      	movs	r7, #0
 8001626:	1a1b      	subs	r3, r3, r0
 8001628:	4699      	mov	r9, r3
 800162a:	2300      	movs	r3, #0
 800162c:	469b      	mov	fp, r3
 800162e:	e77d      	b.n	800152c <__aeabi_dmul+0x48>
 8001630:	4641      	mov	r1, r8
 8001632:	4653      	mov	r3, sl
 8001634:	430b      	orrs	r3, r1
 8001636:	4993      	ldr	r1, [pc, #588]	; (8001884 <__aeabi_dmul+0x3a0>)
 8001638:	468c      	mov	ip, r1
 800163a:	44e1      	add	r9, ip
 800163c:	2b00      	cmp	r3, #0
 800163e:	d000      	beq.n	8001642 <__aeabi_dmul+0x15e>
 8001640:	e11a      	b.n	8001878 <__aeabi_dmul+0x394>
 8001642:	2202      	movs	r2, #2
 8001644:	2002      	movs	r0, #2
 8001646:	4317      	orrs	r7, r2
 8001648:	2200      	movs	r2, #0
 800164a:	e78c      	b.n	8001566 <__aeabi_dmul+0x82>
 800164c:	4313      	orrs	r3, r2
 800164e:	d100      	bne.n	8001652 <__aeabi_dmul+0x16e>
 8001650:	e10d      	b.n	800186e <__aeabi_dmul+0x38a>
 8001652:	4643      	mov	r3, r8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dmul+0x176>
 8001658:	e181      	b.n	800195e <__aeabi_dmul+0x47a>
 800165a:	4640      	mov	r0, r8
 800165c:	f000 fd52 	bl	8002104 <__clzsi2>
 8001660:	0002      	movs	r2, r0
 8001662:	3a0b      	subs	r2, #11
 8001664:	2a1c      	cmp	r2, #28
 8001666:	dd00      	ble.n	800166a <__aeabi_dmul+0x186>
 8001668:	e172      	b.n	8001950 <__aeabi_dmul+0x46c>
 800166a:	0001      	movs	r1, r0
 800166c:	4643      	mov	r3, r8
 800166e:	3908      	subs	r1, #8
 8001670:	408b      	lsls	r3, r1
 8001672:	4698      	mov	r8, r3
 8001674:	231d      	movs	r3, #29
 8001676:	1a9a      	subs	r2, r3, r2
 8001678:	4653      	mov	r3, sl
 800167a:	40d3      	lsrs	r3, r2
 800167c:	001a      	movs	r2, r3
 800167e:	4643      	mov	r3, r8
 8001680:	4313      	orrs	r3, r2
 8001682:	4652      	mov	r2, sl
 8001684:	408a      	lsls	r2, r1
 8001686:	4649      	mov	r1, r9
 8001688:	1a08      	subs	r0, r1, r0
 800168a:	4982      	ldr	r1, [pc, #520]	; (8001894 <__aeabi_dmul+0x3b0>)
 800168c:	4689      	mov	r9, r1
 800168e:	4481      	add	r9, r0
 8001690:	2000      	movs	r0, #0
 8001692:	e768      	b.n	8001566 <__aeabi_dmul+0x82>
 8001694:	4b7b      	ldr	r3, [pc, #492]	; (8001884 <__aeabi_dmul+0x3a0>)
 8001696:	2700      	movs	r7, #0
 8001698:	2600      	movs	r6, #0
 800169a:	e78e      	b.n	80015ba <__aeabi_dmul+0xd6>
 800169c:	0c14      	lsrs	r4, r2, #16
 800169e:	0412      	lsls	r2, r2, #16
 80016a0:	0c12      	lsrs	r2, r2, #16
 80016a2:	0011      	movs	r1, r2
 80016a4:	0c37      	lsrs	r7, r6, #16
 80016a6:	0436      	lsls	r6, r6, #16
 80016a8:	0c35      	lsrs	r5, r6, #16
 80016aa:	4379      	muls	r1, r7
 80016ac:	0028      	movs	r0, r5
 80016ae:	468c      	mov	ip, r1
 80016b0:	002e      	movs	r6, r5
 80016b2:	4360      	muls	r0, r4
 80016b4:	4460      	add	r0, ip
 80016b6:	4683      	mov	fp, r0
 80016b8:	4356      	muls	r6, r2
 80016ba:	0021      	movs	r1, r4
 80016bc:	0c30      	lsrs	r0, r6, #16
 80016be:	4680      	mov	r8, r0
 80016c0:	4658      	mov	r0, fp
 80016c2:	4379      	muls	r1, r7
 80016c4:	4440      	add	r0, r8
 80016c6:	9102      	str	r1, [sp, #8]
 80016c8:	4584      	cmp	ip, r0
 80016ca:	d906      	bls.n	80016da <__aeabi_dmul+0x1f6>
 80016cc:	4688      	mov	r8, r1
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0249      	lsls	r1, r1, #9
 80016d2:	468c      	mov	ip, r1
 80016d4:	44e0      	add	r8, ip
 80016d6:	4641      	mov	r1, r8
 80016d8:	9102      	str	r1, [sp, #8]
 80016da:	0436      	lsls	r6, r6, #16
 80016dc:	0c01      	lsrs	r1, r0, #16
 80016de:	0c36      	lsrs	r6, r6, #16
 80016e0:	0400      	lsls	r0, r0, #16
 80016e2:	468b      	mov	fp, r1
 80016e4:	1981      	adds	r1, r0, r6
 80016e6:	0c1e      	lsrs	r6, r3, #16
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	9103      	str	r1, [sp, #12]
 80016ee:	0019      	movs	r1, r3
 80016f0:	4379      	muls	r1, r7
 80016f2:	468c      	mov	ip, r1
 80016f4:	0028      	movs	r0, r5
 80016f6:	4375      	muls	r5, r6
 80016f8:	4465      	add	r5, ip
 80016fa:	46a8      	mov	r8, r5
 80016fc:	4358      	muls	r0, r3
 80016fe:	0c05      	lsrs	r5, r0, #16
 8001700:	4445      	add	r5, r8
 8001702:	4377      	muls	r7, r6
 8001704:	42a9      	cmp	r1, r5
 8001706:	d903      	bls.n	8001710 <__aeabi_dmul+0x22c>
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0249      	lsls	r1, r1, #9
 800170c:	468c      	mov	ip, r1
 800170e:	4467      	add	r7, ip
 8001710:	0c29      	lsrs	r1, r5, #16
 8001712:	468c      	mov	ip, r1
 8001714:	0039      	movs	r1, r7
 8001716:	0400      	lsls	r0, r0, #16
 8001718:	0c00      	lsrs	r0, r0, #16
 800171a:	042d      	lsls	r5, r5, #16
 800171c:	182d      	adds	r5, r5, r0
 800171e:	4461      	add	r1, ip
 8001720:	44ab      	add	fp, r5
 8001722:	9105      	str	r1, [sp, #20]
 8001724:	4659      	mov	r1, fp
 8001726:	9104      	str	r1, [sp, #16]
 8001728:	9901      	ldr	r1, [sp, #4]
 800172a:	040f      	lsls	r7, r1, #16
 800172c:	0c3f      	lsrs	r7, r7, #16
 800172e:	0c08      	lsrs	r0, r1, #16
 8001730:	0039      	movs	r1, r7
 8001732:	4351      	muls	r1, r2
 8001734:	4342      	muls	r2, r0
 8001736:	4690      	mov	r8, r2
 8001738:	0002      	movs	r2, r0
 800173a:	468c      	mov	ip, r1
 800173c:	0c09      	lsrs	r1, r1, #16
 800173e:	468b      	mov	fp, r1
 8001740:	4362      	muls	r2, r4
 8001742:	437c      	muls	r4, r7
 8001744:	4444      	add	r4, r8
 8001746:	445c      	add	r4, fp
 8001748:	45a0      	cmp	r8, r4
 800174a:	d903      	bls.n	8001754 <__aeabi_dmul+0x270>
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0249      	lsls	r1, r1, #9
 8001750:	4688      	mov	r8, r1
 8001752:	4442      	add	r2, r8
 8001754:	0c21      	lsrs	r1, r4, #16
 8001756:	4688      	mov	r8, r1
 8001758:	4661      	mov	r1, ip
 800175a:	0409      	lsls	r1, r1, #16
 800175c:	0c09      	lsrs	r1, r1, #16
 800175e:	468c      	mov	ip, r1
 8001760:	0039      	movs	r1, r7
 8001762:	4359      	muls	r1, r3
 8001764:	4343      	muls	r3, r0
 8001766:	4370      	muls	r0, r6
 8001768:	437e      	muls	r6, r7
 800176a:	0c0f      	lsrs	r7, r1, #16
 800176c:	18f6      	adds	r6, r6, r3
 800176e:	0424      	lsls	r4, r4, #16
 8001770:	19be      	adds	r6, r7, r6
 8001772:	4464      	add	r4, ip
 8001774:	4442      	add	r2, r8
 8001776:	468c      	mov	ip, r1
 8001778:	42b3      	cmp	r3, r6
 800177a:	d903      	bls.n	8001784 <__aeabi_dmul+0x2a0>
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	025b      	lsls	r3, r3, #9
 8001780:	4698      	mov	r8, r3
 8001782:	4440      	add	r0, r8
 8001784:	9b02      	ldr	r3, [sp, #8]
 8001786:	4661      	mov	r1, ip
 8001788:	4698      	mov	r8, r3
 800178a:	9b04      	ldr	r3, [sp, #16]
 800178c:	0437      	lsls	r7, r6, #16
 800178e:	4443      	add	r3, r8
 8001790:	469b      	mov	fp, r3
 8001792:	45ab      	cmp	fp, r5
 8001794:	41ad      	sbcs	r5, r5
 8001796:	426b      	negs	r3, r5
 8001798:	040d      	lsls	r5, r1, #16
 800179a:	9905      	ldr	r1, [sp, #20]
 800179c:	0c2d      	lsrs	r5, r5, #16
 800179e:	468c      	mov	ip, r1
 80017a0:	197f      	adds	r7, r7, r5
 80017a2:	4467      	add	r7, ip
 80017a4:	18fd      	adds	r5, r7, r3
 80017a6:	46a8      	mov	r8, r5
 80017a8:	465d      	mov	r5, fp
 80017aa:	192d      	adds	r5, r5, r4
 80017ac:	42a5      	cmp	r5, r4
 80017ae:	41a4      	sbcs	r4, r4
 80017b0:	4693      	mov	fp, r2
 80017b2:	4264      	negs	r4, r4
 80017b4:	46a4      	mov	ip, r4
 80017b6:	44c3      	add	fp, r8
 80017b8:	44dc      	add	ip, fp
 80017ba:	428f      	cmp	r7, r1
 80017bc:	41bf      	sbcs	r7, r7
 80017be:	4598      	cmp	r8, r3
 80017c0:	419b      	sbcs	r3, r3
 80017c2:	4593      	cmp	fp, r2
 80017c4:	4192      	sbcs	r2, r2
 80017c6:	45a4      	cmp	ip, r4
 80017c8:	41a4      	sbcs	r4, r4
 80017ca:	425b      	negs	r3, r3
 80017cc:	427f      	negs	r7, r7
 80017ce:	431f      	orrs	r7, r3
 80017d0:	0c36      	lsrs	r6, r6, #16
 80017d2:	4252      	negs	r2, r2
 80017d4:	4264      	negs	r4, r4
 80017d6:	19bf      	adds	r7, r7, r6
 80017d8:	4322      	orrs	r2, r4
 80017da:	18bf      	adds	r7, r7, r2
 80017dc:	4662      	mov	r2, ip
 80017de:	1838      	adds	r0, r7, r0
 80017e0:	0243      	lsls	r3, r0, #9
 80017e2:	0dd2      	lsrs	r2, r2, #23
 80017e4:	9903      	ldr	r1, [sp, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	026a      	lsls	r2, r5, #9
 80017ea:	430a      	orrs	r2, r1
 80017ec:	1e50      	subs	r0, r2, #1
 80017ee:	4182      	sbcs	r2, r0
 80017f0:	4661      	mov	r1, ip
 80017f2:	0ded      	lsrs	r5, r5, #23
 80017f4:	432a      	orrs	r2, r5
 80017f6:	024e      	lsls	r6, r1, #9
 80017f8:	4332      	orrs	r2, r6
 80017fa:	01d9      	lsls	r1, r3, #7
 80017fc:	d400      	bmi.n	8001800 <__aeabi_dmul+0x31c>
 80017fe:	e0b3      	b.n	8001968 <__aeabi_dmul+0x484>
 8001800:	2601      	movs	r6, #1
 8001802:	0850      	lsrs	r0, r2, #1
 8001804:	4032      	ands	r2, r6
 8001806:	4302      	orrs	r2, r0
 8001808:	07de      	lsls	r6, r3, #31
 800180a:	4332      	orrs	r2, r6
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	4c22      	ldr	r4, [pc, #136]	; (8001898 <__aeabi_dmul+0x3b4>)
 8001810:	4454      	add	r4, sl
 8001812:	2c00      	cmp	r4, #0
 8001814:	dd62      	ble.n	80018dc <__aeabi_dmul+0x3f8>
 8001816:	0751      	lsls	r1, r2, #29
 8001818:	d009      	beq.n	800182e <__aeabi_dmul+0x34a>
 800181a:	200f      	movs	r0, #15
 800181c:	4010      	ands	r0, r2
 800181e:	2804      	cmp	r0, #4
 8001820:	d005      	beq.n	800182e <__aeabi_dmul+0x34a>
 8001822:	1d10      	adds	r0, r2, #4
 8001824:	4290      	cmp	r0, r2
 8001826:	4192      	sbcs	r2, r2
 8001828:	4252      	negs	r2, r2
 800182a:	189b      	adds	r3, r3, r2
 800182c:	0002      	movs	r2, r0
 800182e:	01d9      	lsls	r1, r3, #7
 8001830:	d504      	bpl.n	800183c <__aeabi_dmul+0x358>
 8001832:	2480      	movs	r4, #128	; 0x80
 8001834:	4819      	ldr	r0, [pc, #100]	; (800189c <__aeabi_dmul+0x3b8>)
 8001836:	00e4      	lsls	r4, r4, #3
 8001838:	4003      	ands	r3, r0
 800183a:	4454      	add	r4, sl
 800183c:	4818      	ldr	r0, [pc, #96]	; (80018a0 <__aeabi_dmul+0x3bc>)
 800183e:	4284      	cmp	r4, r0
 8001840:	dd00      	ble.n	8001844 <__aeabi_dmul+0x360>
 8001842:	e727      	b.n	8001694 <__aeabi_dmul+0x1b0>
 8001844:	075e      	lsls	r6, r3, #29
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	08d2      	lsrs	r2, r2, #3
 800184a:	0b1f      	lsrs	r7, r3, #12
 800184c:	0563      	lsls	r3, r4, #21
 800184e:	4316      	orrs	r6, r2
 8001850:	0d5b      	lsrs	r3, r3, #21
 8001852:	e6b2      	b.n	80015ba <__aeabi_dmul+0xd6>
 8001854:	2300      	movs	r3, #0
 8001856:	4699      	mov	r9, r3
 8001858:	3301      	adds	r3, #1
 800185a:	2704      	movs	r7, #4
 800185c:	2600      	movs	r6, #0
 800185e:	469b      	mov	fp, r3
 8001860:	e664      	b.n	800152c <__aeabi_dmul+0x48>
 8001862:	2303      	movs	r3, #3
 8001864:	9701      	str	r7, [sp, #4]
 8001866:	4681      	mov	r9, r0
 8001868:	270c      	movs	r7, #12
 800186a:	469b      	mov	fp, r3
 800186c:	e65e      	b.n	800152c <__aeabi_dmul+0x48>
 800186e:	2201      	movs	r2, #1
 8001870:	2001      	movs	r0, #1
 8001872:	4317      	orrs	r7, r2
 8001874:	2200      	movs	r2, #0
 8001876:	e676      	b.n	8001566 <__aeabi_dmul+0x82>
 8001878:	2303      	movs	r3, #3
 800187a:	2003      	movs	r0, #3
 800187c:	431f      	orrs	r7, r3
 800187e:	4643      	mov	r3, r8
 8001880:	e671      	b.n	8001566 <__aeabi_dmul+0x82>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	000007ff 	.word	0x000007ff
 8001888:	fffffc01 	.word	0xfffffc01
 800188c:	08008bb4 	.word	0x08008bb4
 8001890:	800fffff 	.word	0x800fffff
 8001894:	fffffc0d 	.word	0xfffffc0d
 8001898:	000003ff 	.word	0x000003ff
 800189c:	feffffff 	.word	0xfeffffff
 80018a0:	000007fe 	.word	0x000007fe
 80018a4:	2300      	movs	r3, #0
 80018a6:	2780      	movs	r7, #128	; 0x80
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	033f      	lsls	r7, r7, #12
 80018ac:	2600      	movs	r6, #0
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <__aeabi_dmul+0x4d8>)
 80018b0:	e683      	b.n	80015ba <__aeabi_dmul+0xd6>
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	0032      	movs	r2, r6
 80018b6:	46a4      	mov	ip, r4
 80018b8:	4658      	mov	r0, fp
 80018ba:	e670      	b.n	800159e <__aeabi_dmul+0xba>
 80018bc:	46ac      	mov	ip, r5
 80018be:	e66e      	b.n	800159e <__aeabi_dmul+0xba>
 80018c0:	2780      	movs	r7, #128	; 0x80
 80018c2:	9901      	ldr	r1, [sp, #4]
 80018c4:	033f      	lsls	r7, r7, #12
 80018c6:	4239      	tst	r1, r7
 80018c8:	d02d      	beq.n	8001926 <__aeabi_dmul+0x442>
 80018ca:	423b      	tst	r3, r7
 80018cc:	d12b      	bne.n	8001926 <__aeabi_dmul+0x442>
 80018ce:	431f      	orrs	r7, r3
 80018d0:	033f      	lsls	r7, r7, #12
 80018d2:	0b3f      	lsrs	r7, r7, #12
 80018d4:	9500      	str	r5, [sp, #0]
 80018d6:	0016      	movs	r6, r2
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <__aeabi_dmul+0x4d8>)
 80018da:	e66e      	b.n	80015ba <__aeabi_dmul+0xd6>
 80018dc:	2501      	movs	r5, #1
 80018de:	1b2d      	subs	r5, r5, r4
 80018e0:	2d38      	cmp	r5, #56	; 0x38
 80018e2:	dd00      	ble.n	80018e6 <__aeabi_dmul+0x402>
 80018e4:	e666      	b.n	80015b4 <__aeabi_dmul+0xd0>
 80018e6:	2d1f      	cmp	r5, #31
 80018e8:	dc40      	bgt.n	800196c <__aeabi_dmul+0x488>
 80018ea:	4835      	ldr	r0, [pc, #212]	; (80019c0 <__aeabi_dmul+0x4dc>)
 80018ec:	001c      	movs	r4, r3
 80018ee:	4450      	add	r0, sl
 80018f0:	0016      	movs	r6, r2
 80018f2:	4082      	lsls	r2, r0
 80018f4:	4084      	lsls	r4, r0
 80018f6:	40ee      	lsrs	r6, r5
 80018f8:	1e50      	subs	r0, r2, #1
 80018fa:	4182      	sbcs	r2, r0
 80018fc:	4334      	orrs	r4, r6
 80018fe:	4314      	orrs	r4, r2
 8001900:	40eb      	lsrs	r3, r5
 8001902:	0762      	lsls	r2, r4, #29
 8001904:	d009      	beq.n	800191a <__aeabi_dmul+0x436>
 8001906:	220f      	movs	r2, #15
 8001908:	4022      	ands	r2, r4
 800190a:	2a04      	cmp	r2, #4
 800190c:	d005      	beq.n	800191a <__aeabi_dmul+0x436>
 800190e:	0022      	movs	r2, r4
 8001910:	1d14      	adds	r4, r2, #4
 8001912:	4294      	cmp	r4, r2
 8001914:	4180      	sbcs	r0, r0
 8001916:	4240      	negs	r0, r0
 8001918:	181b      	adds	r3, r3, r0
 800191a:	021a      	lsls	r2, r3, #8
 800191c:	d53e      	bpl.n	800199c <__aeabi_dmul+0x4b8>
 800191e:	2301      	movs	r3, #1
 8001920:	2700      	movs	r7, #0
 8001922:	2600      	movs	r6, #0
 8001924:	e649      	b.n	80015ba <__aeabi_dmul+0xd6>
 8001926:	2780      	movs	r7, #128	; 0x80
 8001928:	9b01      	ldr	r3, [sp, #4]
 800192a:	033f      	lsls	r7, r7, #12
 800192c:	431f      	orrs	r7, r3
 800192e:	033f      	lsls	r7, r7, #12
 8001930:	0b3f      	lsrs	r7, r7, #12
 8001932:	9400      	str	r4, [sp, #0]
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <__aeabi_dmul+0x4d8>)
 8001936:	e640      	b.n	80015ba <__aeabi_dmul+0xd6>
 8001938:	0003      	movs	r3, r0
 800193a:	465a      	mov	r2, fp
 800193c:	3b28      	subs	r3, #40	; 0x28
 800193e:	409a      	lsls	r2, r3
 8001940:	2600      	movs	r6, #0
 8001942:	9201      	str	r2, [sp, #4]
 8001944:	e66d      	b.n	8001622 <__aeabi_dmul+0x13e>
 8001946:	4658      	mov	r0, fp
 8001948:	f000 fbdc 	bl	8002104 <__clzsi2>
 800194c:	3020      	adds	r0, #32
 800194e:	e657      	b.n	8001600 <__aeabi_dmul+0x11c>
 8001950:	0003      	movs	r3, r0
 8001952:	4652      	mov	r2, sl
 8001954:	3b28      	subs	r3, #40	; 0x28
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	2200      	movs	r2, #0
 800195c:	e693      	b.n	8001686 <__aeabi_dmul+0x1a2>
 800195e:	4650      	mov	r0, sl
 8001960:	f000 fbd0 	bl	8002104 <__clzsi2>
 8001964:	3020      	adds	r0, #32
 8001966:	e67b      	b.n	8001660 <__aeabi_dmul+0x17c>
 8001968:	46ca      	mov	sl, r9
 800196a:	e750      	b.n	800180e <__aeabi_dmul+0x32a>
 800196c:	201f      	movs	r0, #31
 800196e:	001e      	movs	r6, r3
 8001970:	4240      	negs	r0, r0
 8001972:	1b04      	subs	r4, r0, r4
 8001974:	40e6      	lsrs	r6, r4
 8001976:	2d20      	cmp	r5, #32
 8001978:	d003      	beq.n	8001982 <__aeabi_dmul+0x49e>
 800197a:	4c12      	ldr	r4, [pc, #72]	; (80019c4 <__aeabi_dmul+0x4e0>)
 800197c:	4454      	add	r4, sl
 800197e:	40a3      	lsls	r3, r4
 8001980:	431a      	orrs	r2, r3
 8001982:	1e50      	subs	r0, r2, #1
 8001984:	4182      	sbcs	r2, r0
 8001986:	4332      	orrs	r2, r6
 8001988:	2607      	movs	r6, #7
 800198a:	2700      	movs	r7, #0
 800198c:	4016      	ands	r6, r2
 800198e:	d009      	beq.n	80019a4 <__aeabi_dmul+0x4c0>
 8001990:	200f      	movs	r0, #15
 8001992:	2300      	movs	r3, #0
 8001994:	4010      	ands	r0, r2
 8001996:	0014      	movs	r4, r2
 8001998:	2804      	cmp	r0, #4
 800199a:	d1b9      	bne.n	8001910 <__aeabi_dmul+0x42c>
 800199c:	0022      	movs	r2, r4
 800199e:	075e      	lsls	r6, r3, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	0b1f      	lsrs	r7, r3, #12
 80019a4:	08d2      	lsrs	r2, r2, #3
 80019a6:	4316      	orrs	r6, r2
 80019a8:	2300      	movs	r3, #0
 80019aa:	e606      	b.n	80015ba <__aeabi_dmul+0xd6>
 80019ac:	2780      	movs	r7, #128	; 0x80
 80019ae:	033f      	lsls	r7, r7, #12
 80019b0:	431f      	orrs	r7, r3
 80019b2:	033f      	lsls	r7, r7, #12
 80019b4:	0b3f      	lsrs	r7, r7, #12
 80019b6:	0016      	movs	r6, r2
 80019b8:	4b00      	ldr	r3, [pc, #0]	; (80019bc <__aeabi_dmul+0x4d8>)
 80019ba:	e5fe      	b.n	80015ba <__aeabi_dmul+0xd6>
 80019bc:	000007ff 	.word	0x000007ff
 80019c0:	0000041e 	.word	0x0000041e
 80019c4:	0000043e 	.word	0x0000043e

080019c8 <__aeabi_dsub>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	4657      	mov	r7, sl
 80019cc:	464e      	mov	r6, r9
 80019ce:	4645      	mov	r5, r8
 80019d0:	46de      	mov	lr, fp
 80019d2:	000c      	movs	r4, r1
 80019d4:	0309      	lsls	r1, r1, #12
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	0a49      	lsrs	r1, r1, #9
 80019da:	0f46      	lsrs	r6, r0, #29
 80019dc:	005f      	lsls	r7, r3, #1
 80019de:	4331      	orrs	r1, r6
 80019e0:	031e      	lsls	r6, r3, #12
 80019e2:	0fdb      	lsrs	r3, r3, #31
 80019e4:	0a76      	lsrs	r6, r6, #9
 80019e6:	469b      	mov	fp, r3
 80019e8:	0f53      	lsrs	r3, r2, #29
 80019ea:	4333      	orrs	r3, r6
 80019ec:	4ec8      	ldr	r6, [pc, #800]	; (8001d10 <__aeabi_dsub+0x348>)
 80019ee:	0065      	lsls	r5, r4, #1
 80019f0:	00c0      	lsls	r0, r0, #3
 80019f2:	0fe4      	lsrs	r4, r4, #31
 80019f4:	00d2      	lsls	r2, r2, #3
 80019f6:	0d6d      	lsrs	r5, r5, #21
 80019f8:	46a2      	mov	sl, r4
 80019fa:	4681      	mov	r9, r0
 80019fc:	0d7f      	lsrs	r7, r7, #21
 80019fe:	469c      	mov	ip, r3
 8001a00:	4690      	mov	r8, r2
 8001a02:	42b7      	cmp	r7, r6
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x40>
 8001a06:	e0b9      	b.n	8001b7c <__aeabi_dsub+0x1b4>
 8001a08:	465b      	mov	r3, fp
 8001a0a:	2601      	movs	r6, #1
 8001a0c:	4073      	eors	r3, r6
 8001a0e:	469b      	mov	fp, r3
 8001a10:	1bee      	subs	r6, r5, r7
 8001a12:	45a3      	cmp	fp, r4
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x50>
 8001a16:	e083      	b.n	8001b20 <__aeabi_dsub+0x158>
 8001a18:	2e00      	cmp	r6, #0
 8001a1a:	dd63      	ble.n	8001ae4 <__aeabi_dsub+0x11c>
 8001a1c:	2f00      	cmp	r7, #0
 8001a1e:	d000      	beq.n	8001a22 <__aeabi_dsub+0x5a>
 8001a20:	e0b1      	b.n	8001b86 <__aeabi_dsub+0x1be>
 8001a22:	4663      	mov	r3, ip
 8001a24:	4313      	orrs	r3, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x62>
 8001a28:	e123      	b.n	8001c72 <__aeabi_dsub+0x2aa>
 8001a2a:	1e73      	subs	r3, r6, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d000      	beq.n	8001a32 <__aeabi_dsub+0x6a>
 8001a30:	e1ba      	b.n	8001da8 <__aeabi_dsub+0x3e0>
 8001a32:	1a86      	subs	r6, r0, r2
 8001a34:	4663      	mov	r3, ip
 8001a36:	42b0      	cmp	r0, r6
 8001a38:	4180      	sbcs	r0, r0
 8001a3a:	2501      	movs	r5, #1
 8001a3c:	1ac9      	subs	r1, r1, r3
 8001a3e:	4240      	negs	r0, r0
 8001a40:	1a09      	subs	r1, r1, r0
 8001a42:	020b      	lsls	r3, r1, #8
 8001a44:	d400      	bmi.n	8001a48 <__aeabi_dsub+0x80>
 8001a46:	e147      	b.n	8001cd8 <__aeabi_dsub+0x310>
 8001a48:	0249      	lsls	r1, r1, #9
 8001a4a:	0a4b      	lsrs	r3, r1, #9
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	4643      	mov	r3, r8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dsub+0x8e>
 8001a54:	e189      	b.n	8001d6a <__aeabi_dsub+0x3a2>
 8001a56:	4640      	mov	r0, r8
 8001a58:	f000 fb54 	bl	8002104 <__clzsi2>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	3b08      	subs	r3, #8
 8001a60:	2b1f      	cmp	r3, #31
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dsub+0x9e>
 8001a64:	e17c      	b.n	8001d60 <__aeabi_dsub+0x398>
 8001a66:	2220      	movs	r2, #32
 8001a68:	0030      	movs	r0, r6
 8001a6a:	1ad2      	subs	r2, r2, r3
 8001a6c:	4641      	mov	r1, r8
 8001a6e:	40d0      	lsrs	r0, r2
 8001a70:	4099      	lsls	r1, r3
 8001a72:	0002      	movs	r2, r0
 8001a74:	409e      	lsls	r6, r3
 8001a76:	430a      	orrs	r2, r1
 8001a78:	429d      	cmp	r5, r3
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dsub+0xb6>
 8001a7c:	e16a      	b.n	8001d54 <__aeabi_dsub+0x38c>
 8001a7e:	1b5d      	subs	r5, r3, r5
 8001a80:	1c6b      	adds	r3, r5, #1
 8001a82:	2b1f      	cmp	r3, #31
 8001a84:	dd00      	ble.n	8001a88 <__aeabi_dsub+0xc0>
 8001a86:	e194      	b.n	8001db2 <__aeabi_dsub+0x3ea>
 8001a88:	2120      	movs	r1, #32
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	0035      	movs	r5, r6
 8001a8e:	1ac9      	subs	r1, r1, r3
 8001a90:	408e      	lsls	r6, r1
 8001a92:	40da      	lsrs	r2, r3
 8001a94:	4088      	lsls	r0, r1
 8001a96:	40dd      	lsrs	r5, r3
 8001a98:	1e71      	subs	r1, r6, #1
 8001a9a:	418e      	sbcs	r6, r1
 8001a9c:	0011      	movs	r1, r2
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	4328      	orrs	r0, r5
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	4306      	orrs	r6, r0
 8001aa6:	4032      	ands	r2, r6
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	d009      	beq.n	8001ac0 <__aeabi_dsub+0xf8>
 8001aac:	230f      	movs	r3, #15
 8001aae:	4033      	ands	r3, r6
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d005      	beq.n	8001ac0 <__aeabi_dsub+0xf8>
 8001ab4:	1d33      	adds	r3, r6, #4
 8001ab6:	42b3      	cmp	r3, r6
 8001ab8:	41b6      	sbcs	r6, r6
 8001aba:	4276      	negs	r6, r6
 8001abc:	1989      	adds	r1, r1, r6
 8001abe:	001e      	movs	r6, r3
 8001ac0:	020b      	lsls	r3, r1, #8
 8001ac2:	d400      	bmi.n	8001ac6 <__aeabi_dsub+0xfe>
 8001ac4:	e23d      	b.n	8001f42 <__aeabi_dsub+0x57a>
 8001ac6:	1c6a      	adds	r2, r5, #1
 8001ac8:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <__aeabi_dsub+0x348>)
 8001aca:	0555      	lsls	r5, r2, #21
 8001acc:	0d6d      	lsrs	r5, r5, #21
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dsub+0x10c>
 8001ad2:	e119      	b.n	8001d08 <__aeabi_dsub+0x340>
 8001ad4:	4a8f      	ldr	r2, [pc, #572]	; (8001d14 <__aeabi_dsub+0x34c>)
 8001ad6:	08f6      	lsrs	r6, r6, #3
 8001ad8:	400a      	ands	r2, r1
 8001ada:	0757      	lsls	r7, r2, #29
 8001adc:	0252      	lsls	r2, r2, #9
 8001ade:	4337      	orrs	r7, r6
 8001ae0:	0b12      	lsrs	r2, r2, #12
 8001ae2:	e09b      	b.n	8001c1c <__aeabi_dsub+0x254>
 8001ae4:	2e00      	cmp	r6, #0
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dsub+0x122>
 8001ae8:	e0c5      	b.n	8001c76 <__aeabi_dsub+0x2ae>
 8001aea:	1c6e      	adds	r6, r5, #1
 8001aec:	0576      	lsls	r6, r6, #21
 8001aee:	0d76      	lsrs	r6, r6, #21
 8001af0:	2e01      	cmp	r6, #1
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dsub+0x12e>
 8001af4:	e148      	b.n	8001d88 <__aeabi_dsub+0x3c0>
 8001af6:	4667      	mov	r7, ip
 8001af8:	1a86      	subs	r6, r0, r2
 8001afa:	1bcb      	subs	r3, r1, r7
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	41bf      	sbcs	r7, r7
 8001b00:	427f      	negs	r7, r7
 8001b02:	46b8      	mov	r8, r7
 8001b04:	001f      	movs	r7, r3
 8001b06:	4643      	mov	r3, r8
 8001b08:	1aff      	subs	r7, r7, r3
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	46b8      	mov	r8, r7
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	d500      	bpl.n	8001b14 <__aeabi_dsub+0x14c>
 8001b12:	e15f      	b.n	8001dd4 <__aeabi_dsub+0x40c>
 8001b14:	4337      	orrs	r7, r6
 8001b16:	d19a      	bne.n	8001a4e <__aeabi_dsub+0x86>
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2400      	movs	r4, #0
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	e079      	b.n	8001c14 <__aeabi_dsub+0x24c>
 8001b20:	2e00      	cmp	r6, #0
 8001b22:	dc00      	bgt.n	8001b26 <__aeabi_dsub+0x15e>
 8001b24:	e0fa      	b.n	8001d1c <__aeabi_dsub+0x354>
 8001b26:	2f00      	cmp	r7, #0
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x164>
 8001b2a:	e08d      	b.n	8001c48 <__aeabi_dsub+0x280>
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <__aeabi_dsub+0x348>)
 8001b2e:	429d      	cmp	r5, r3
 8001b30:	d067      	beq.n	8001c02 <__aeabi_dsub+0x23a>
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	4667      	mov	r7, ip
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	431f      	orrs	r7, r3
 8001b3a:	46bc      	mov	ip, r7
 8001b3c:	2e38      	cmp	r6, #56	; 0x38
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_dsub+0x17a>
 8001b40:	e152      	b.n	8001de8 <__aeabi_dsub+0x420>
 8001b42:	4663      	mov	r3, ip
 8001b44:	4313      	orrs	r3, r2
 8001b46:	1e5a      	subs	r2, r3, #1
 8001b48:	4193      	sbcs	r3, r2
 8001b4a:	181e      	adds	r6, r3, r0
 8001b4c:	4286      	cmp	r6, r0
 8001b4e:	4180      	sbcs	r0, r0
 8001b50:	4240      	negs	r0, r0
 8001b52:	1809      	adds	r1, r1, r0
 8001b54:	020b      	lsls	r3, r1, #8
 8001b56:	d400      	bmi.n	8001b5a <__aeabi_dsub+0x192>
 8001b58:	e0be      	b.n	8001cd8 <__aeabi_dsub+0x310>
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <__aeabi_dsub+0x348>)
 8001b5c:	3501      	adds	r5, #1
 8001b5e:	429d      	cmp	r5, r3
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x19c>
 8001b62:	e0d2      	b.n	8001d0a <__aeabi_dsub+0x342>
 8001b64:	4a6b      	ldr	r2, [pc, #428]	; (8001d14 <__aeabi_dsub+0x34c>)
 8001b66:	0873      	lsrs	r3, r6, #1
 8001b68:	400a      	ands	r2, r1
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	400e      	ands	r6, r1
 8001b6e:	431e      	orrs	r6, r3
 8001b70:	0851      	lsrs	r1, r2, #1
 8001b72:	07d3      	lsls	r3, r2, #31
 8001b74:	2207      	movs	r2, #7
 8001b76:	431e      	orrs	r6, r3
 8001b78:	4032      	ands	r2, r6
 8001b7a:	e795      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001b7c:	001e      	movs	r6, r3
 8001b7e:	4316      	orrs	r6, r2
 8001b80:	d000      	beq.n	8001b84 <__aeabi_dsub+0x1bc>
 8001b82:	e745      	b.n	8001a10 <__aeabi_dsub+0x48>
 8001b84:	e740      	b.n	8001a08 <__aeabi_dsub+0x40>
 8001b86:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <__aeabi_dsub+0x348>)
 8001b88:	429d      	cmp	r5, r3
 8001b8a:	d03a      	beq.n	8001c02 <__aeabi_dsub+0x23a>
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	4667      	mov	r7, ip
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	431f      	orrs	r7, r3
 8001b94:	46bc      	mov	ip, r7
 8001b96:	2e38      	cmp	r6, #56	; 0x38
 8001b98:	dd00      	ble.n	8001b9c <__aeabi_dsub+0x1d4>
 8001b9a:	e0eb      	b.n	8001d74 <__aeabi_dsub+0x3ac>
 8001b9c:	2e1f      	cmp	r6, #31
 8001b9e:	dc00      	bgt.n	8001ba2 <__aeabi_dsub+0x1da>
 8001ba0:	e13a      	b.n	8001e18 <__aeabi_dsub+0x450>
 8001ba2:	0033      	movs	r3, r6
 8001ba4:	4667      	mov	r7, ip
 8001ba6:	3b20      	subs	r3, #32
 8001ba8:	40df      	lsrs	r7, r3
 8001baa:	003b      	movs	r3, r7
 8001bac:	2e20      	cmp	r6, #32
 8001bae:	d005      	beq.n	8001bbc <__aeabi_dsub+0x1f4>
 8001bb0:	2740      	movs	r7, #64	; 0x40
 8001bb2:	1bbf      	subs	r7, r7, r6
 8001bb4:	4666      	mov	r6, ip
 8001bb6:	40be      	lsls	r6, r7
 8001bb8:	4332      	orrs	r2, r6
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4646      	mov	r6, r8
 8001bbe:	1e72      	subs	r2, r6, #1
 8001bc0:	4196      	sbcs	r6, r2
 8001bc2:	4333      	orrs	r3, r6
 8001bc4:	e0da      	b.n	8001d7c <__aeabi_dsub+0x3b4>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x204>
 8001bca:	e214      	b.n	8001ff6 <__aeabi_dsub+0x62e>
 8001bcc:	4663      	mov	r3, ip
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x20c>
 8001bd2:	e168      	b.n	8001ea6 <__aeabi_dsub+0x4de>
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	074e      	lsls	r6, r1, #29
 8001bd8:	08c0      	lsrs	r0, r0, #3
 8001bda:	08c9      	lsrs	r1, r1, #3
 8001bdc:	031b      	lsls	r3, r3, #12
 8001bde:	4306      	orrs	r6, r0
 8001be0:	4219      	tst	r1, r3
 8001be2:	d008      	beq.n	8001bf6 <__aeabi_dsub+0x22e>
 8001be4:	4660      	mov	r0, ip
 8001be6:	08c0      	lsrs	r0, r0, #3
 8001be8:	4218      	tst	r0, r3
 8001bea:	d104      	bne.n	8001bf6 <__aeabi_dsub+0x22e>
 8001bec:	4663      	mov	r3, ip
 8001bee:	0001      	movs	r1, r0
 8001bf0:	08d2      	lsrs	r2, r2, #3
 8001bf2:	075e      	lsls	r6, r3, #29
 8001bf4:	4316      	orrs	r6, r2
 8001bf6:	00f3      	lsls	r3, r6, #3
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	00c9      	lsls	r1, r1, #3
 8001bfc:	0f72      	lsrs	r2, r6, #29
 8001bfe:	4d44      	ldr	r5, [pc, #272]	; (8001d10 <__aeabi_dsub+0x348>)
 8001c00:	4311      	orrs	r1, r2
 8001c02:	464b      	mov	r3, r9
 8001c04:	08de      	lsrs	r6, r3, #3
 8001c06:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <__aeabi_dsub+0x348>)
 8001c08:	074f      	lsls	r7, r1, #29
 8001c0a:	4337      	orrs	r7, r6
 8001c0c:	08ca      	lsrs	r2, r1, #3
 8001c0e:	429d      	cmp	r5, r3
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x24c>
 8001c12:	e06e      	b.n	8001cf2 <__aeabi_dsub+0x32a>
 8001c14:	0312      	lsls	r2, r2, #12
 8001c16:	056d      	lsls	r5, r5, #21
 8001c18:	0b12      	lsrs	r2, r2, #12
 8001c1a:	0d6d      	lsrs	r5, r5, #21
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	0312      	lsls	r2, r2, #12
 8001c20:	0b13      	lsrs	r3, r2, #12
 8001c22:	0d0a      	lsrs	r2, r1, #20
 8001c24:	0512      	lsls	r2, r2, #20
 8001c26:	431a      	orrs	r2, r3
 8001c28:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <__aeabi_dsub+0x350>)
 8001c2a:	052d      	lsls	r5, r5, #20
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	432b      	orrs	r3, r5
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	07e4      	lsls	r4, r4, #31
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	4323      	orrs	r3, r4
 8001c38:	0038      	movs	r0, r7
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	bc3c      	pop	{r2, r3, r4, r5}
 8001c3e:	4690      	mov	r8, r2
 8001c40:	4699      	mov	r9, r3
 8001c42:	46a2      	mov	sl, r4
 8001c44:	46ab      	mov	fp, r5
 8001c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c48:	4663      	mov	r3, ip
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	d011      	beq.n	8001c72 <__aeabi_dsub+0x2aa>
 8001c4e:	1e73      	subs	r3, r6, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d000      	beq.n	8001c56 <__aeabi_dsub+0x28e>
 8001c54:	e107      	b.n	8001e66 <__aeabi_dsub+0x49e>
 8001c56:	1886      	adds	r6, r0, r2
 8001c58:	4286      	cmp	r6, r0
 8001c5a:	4180      	sbcs	r0, r0
 8001c5c:	4461      	add	r1, ip
 8001c5e:	4240      	negs	r0, r0
 8001c60:	1809      	adds	r1, r1, r0
 8001c62:	2501      	movs	r5, #1
 8001c64:	020b      	lsls	r3, r1, #8
 8001c66:	d537      	bpl.n	8001cd8 <__aeabi_dsub+0x310>
 8001c68:	2502      	movs	r5, #2
 8001c6a:	e77b      	b.n	8001b64 <__aeabi_dsub+0x19c>
 8001c6c:	003e      	movs	r6, r7
 8001c6e:	4661      	mov	r1, ip
 8001c70:	4691      	mov	r9, r2
 8001c72:	0035      	movs	r5, r6
 8001c74:	e7c5      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001c76:	465c      	mov	r4, fp
 8001c78:	2d00      	cmp	r5, #0
 8001c7a:	d000      	beq.n	8001c7e <__aeabi_dsub+0x2b6>
 8001c7c:	e0e1      	b.n	8001e42 <__aeabi_dsub+0x47a>
 8001c7e:	000b      	movs	r3, r1
 8001c80:	4303      	orrs	r3, r0
 8001c82:	d0f3      	beq.n	8001c6c <__aeabi_dsub+0x2a4>
 8001c84:	1c73      	adds	r3, r6, #1
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x2c2>
 8001c88:	e1ac      	b.n	8001fe4 <__aeabi_dsub+0x61c>
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <__aeabi_dsub+0x348>)
 8001c8c:	429f      	cmp	r7, r3
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dsub+0x2ca>
 8001c90:	e13a      	b.n	8001f08 <__aeabi_dsub+0x540>
 8001c92:	43f3      	mvns	r3, r6
 8001c94:	2b38      	cmp	r3, #56	; 0x38
 8001c96:	dd00      	ble.n	8001c9a <__aeabi_dsub+0x2d2>
 8001c98:	e16f      	b.n	8001f7a <__aeabi_dsub+0x5b2>
 8001c9a:	2b1f      	cmp	r3, #31
 8001c9c:	dd00      	ble.n	8001ca0 <__aeabi_dsub+0x2d8>
 8001c9e:	e18c      	b.n	8001fba <__aeabi_dsub+0x5f2>
 8001ca0:	2520      	movs	r5, #32
 8001ca2:	000e      	movs	r6, r1
 8001ca4:	1aed      	subs	r5, r5, r3
 8001ca6:	40ae      	lsls	r6, r5
 8001ca8:	46b0      	mov	r8, r6
 8001caa:	0006      	movs	r6, r0
 8001cac:	46aa      	mov	sl, r5
 8001cae:	40de      	lsrs	r6, r3
 8001cb0:	4645      	mov	r5, r8
 8001cb2:	4335      	orrs	r5, r6
 8001cb4:	002e      	movs	r6, r5
 8001cb6:	4655      	mov	r5, sl
 8001cb8:	40d9      	lsrs	r1, r3
 8001cba:	40a8      	lsls	r0, r5
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	1e45      	subs	r5, r0, #1
 8001cc0:	41a8      	sbcs	r0, r5
 8001cc2:	1a5b      	subs	r3, r3, r1
 8001cc4:	469c      	mov	ip, r3
 8001cc6:	4330      	orrs	r0, r6
 8001cc8:	1a16      	subs	r6, r2, r0
 8001cca:	42b2      	cmp	r2, r6
 8001ccc:	4192      	sbcs	r2, r2
 8001cce:	4663      	mov	r3, ip
 8001cd0:	4252      	negs	r2, r2
 8001cd2:	1a99      	subs	r1, r3, r2
 8001cd4:	003d      	movs	r5, r7
 8001cd6:	e6b4      	b.n	8001a42 <__aeabi_dsub+0x7a>
 8001cd8:	2207      	movs	r2, #7
 8001cda:	4032      	ands	r2, r6
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d000      	beq.n	8001ce2 <__aeabi_dsub+0x31a>
 8001ce0:	e6e4      	b.n	8001aac <__aeabi_dsub+0xe4>
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <__aeabi_dsub+0x348>)
 8001ce4:	08f6      	lsrs	r6, r6, #3
 8001ce6:	074f      	lsls	r7, r1, #29
 8001ce8:	4337      	orrs	r7, r6
 8001cea:	08ca      	lsrs	r2, r1, #3
 8001cec:	429d      	cmp	r5, r3
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_dsub+0x32a>
 8001cf0:	e790      	b.n	8001c14 <__aeabi_dsub+0x24c>
 8001cf2:	003b      	movs	r3, r7
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dsub+0x332>
 8001cf8:	e1a6      	b.n	8002048 <__aeabi_dsub+0x680>
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	031b      	lsls	r3, r3, #12
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	0312      	lsls	r2, r2, #12
 8001d02:	0b12      	lsrs	r2, r2, #12
 8001d04:	4d02      	ldr	r5, [pc, #8]	; (8001d10 <__aeabi_dsub+0x348>)
 8001d06:	e789      	b.n	8001c1c <__aeabi_dsub+0x254>
 8001d08:	0015      	movs	r5, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2700      	movs	r7, #0
 8001d0e:	e785      	b.n	8001c1c <__aeabi_dsub+0x254>
 8001d10:	000007ff 	.word	0x000007ff
 8001d14:	ff7fffff 	.word	0xff7fffff
 8001d18:	800fffff 	.word	0x800fffff
 8001d1c:	2e00      	cmp	r6, #0
 8001d1e:	d000      	beq.n	8001d22 <__aeabi_dsub+0x35a>
 8001d20:	e0c7      	b.n	8001eb2 <__aeabi_dsub+0x4ea>
 8001d22:	1c6b      	adds	r3, r5, #1
 8001d24:	055e      	lsls	r6, r3, #21
 8001d26:	0d76      	lsrs	r6, r6, #21
 8001d28:	2e01      	cmp	r6, #1
 8001d2a:	dc00      	bgt.n	8001d2e <__aeabi_dsub+0x366>
 8001d2c:	e0f0      	b.n	8001f10 <__aeabi_dsub+0x548>
 8001d2e:	4dc8      	ldr	r5, [pc, #800]	; (8002050 <__aeabi_dsub+0x688>)
 8001d30:	42ab      	cmp	r3, r5
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dsub+0x36e>
 8001d34:	e0b9      	b.n	8001eaa <__aeabi_dsub+0x4e2>
 8001d36:	1885      	adds	r5, r0, r2
 8001d38:	000a      	movs	r2, r1
 8001d3a:	4285      	cmp	r5, r0
 8001d3c:	4189      	sbcs	r1, r1
 8001d3e:	4462      	add	r2, ip
 8001d40:	4249      	negs	r1, r1
 8001d42:	1851      	adds	r1, r2, r1
 8001d44:	2207      	movs	r2, #7
 8001d46:	07ce      	lsls	r6, r1, #31
 8001d48:	086d      	lsrs	r5, r5, #1
 8001d4a:	432e      	orrs	r6, r5
 8001d4c:	0849      	lsrs	r1, r1, #1
 8001d4e:	4032      	ands	r2, r6
 8001d50:	001d      	movs	r5, r3
 8001d52:	e6a9      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001d54:	49bf      	ldr	r1, [pc, #764]	; (8002054 <__aeabi_dsub+0x68c>)
 8001d56:	1aed      	subs	r5, r5, r3
 8001d58:	4011      	ands	r1, r2
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	4032      	ands	r2, r6
 8001d5e:	e6a3      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001d60:	0032      	movs	r2, r6
 8001d62:	3828      	subs	r0, #40	; 0x28
 8001d64:	4082      	lsls	r2, r0
 8001d66:	2600      	movs	r6, #0
 8001d68:	e686      	b.n	8001a78 <__aeabi_dsub+0xb0>
 8001d6a:	0030      	movs	r0, r6
 8001d6c:	f000 f9ca 	bl	8002104 <__clzsi2>
 8001d70:	3020      	adds	r0, #32
 8001d72:	e673      	b.n	8001a5c <__aeabi_dsub+0x94>
 8001d74:	4663      	mov	r3, ip
 8001d76:	4313      	orrs	r3, r2
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	4193      	sbcs	r3, r2
 8001d7c:	1ac6      	subs	r6, r0, r3
 8001d7e:	42b0      	cmp	r0, r6
 8001d80:	4180      	sbcs	r0, r0
 8001d82:	4240      	negs	r0, r0
 8001d84:	1a09      	subs	r1, r1, r0
 8001d86:	e65c      	b.n	8001a42 <__aeabi_dsub+0x7a>
 8001d88:	000e      	movs	r6, r1
 8001d8a:	4667      	mov	r7, ip
 8001d8c:	4306      	orrs	r6, r0
 8001d8e:	4317      	orrs	r7, r2
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	d15e      	bne.n	8001e52 <__aeabi_dsub+0x48a>
 8001d94:	2e00      	cmp	r6, #0
 8001d96:	d000      	beq.n	8001d9a <__aeabi_dsub+0x3d2>
 8001d98:	e0f3      	b.n	8001f82 <__aeabi_dsub+0x5ba>
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x3d8>
 8001d9e:	e11e      	b.n	8001fde <__aeabi_dsub+0x616>
 8001da0:	465c      	mov	r4, fp
 8001da2:	4661      	mov	r1, ip
 8001da4:	4691      	mov	r9, r2
 8001da6:	e72c      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001da8:	4fa9      	ldr	r7, [pc, #676]	; (8002050 <__aeabi_dsub+0x688>)
 8001daa:	42be      	cmp	r6, r7
 8001dac:	d07b      	beq.n	8001ea6 <__aeabi_dsub+0x4de>
 8001dae:	001e      	movs	r6, r3
 8001db0:	e6f1      	b.n	8001b96 <__aeabi_dsub+0x1ce>
 8001db2:	0010      	movs	r0, r2
 8001db4:	3d1f      	subs	r5, #31
 8001db6:	40e8      	lsrs	r0, r5
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d003      	beq.n	8001dc4 <__aeabi_dsub+0x3fc>
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	4316      	orrs	r6, r2
 8001dc4:	1e73      	subs	r3, r6, #1
 8001dc6:	419e      	sbcs	r6, r3
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4306      	orrs	r6, r0
 8001dcc:	4032      	ands	r2, r6
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	e783      	b.n	8001cdc <__aeabi_dsub+0x314>
 8001dd4:	1a16      	subs	r6, r2, r0
 8001dd6:	4663      	mov	r3, ip
 8001dd8:	42b2      	cmp	r2, r6
 8001dda:	4180      	sbcs	r0, r0
 8001ddc:	1a59      	subs	r1, r3, r1
 8001dde:	4240      	negs	r0, r0
 8001de0:	1a0b      	subs	r3, r1, r0
 8001de2:	4698      	mov	r8, r3
 8001de4:	465c      	mov	r4, fp
 8001de6:	e632      	b.n	8001a4e <__aeabi_dsub+0x86>
 8001de8:	2e1f      	cmp	r6, #31
 8001dea:	dd00      	ble.n	8001dee <__aeabi_dsub+0x426>
 8001dec:	e0ab      	b.n	8001f46 <__aeabi_dsub+0x57e>
 8001dee:	2720      	movs	r7, #32
 8001df0:	1bbb      	subs	r3, r7, r6
 8001df2:	469a      	mov	sl, r3
 8001df4:	4663      	mov	r3, ip
 8001df6:	4657      	mov	r7, sl
 8001df8:	40bb      	lsls	r3, r7
 8001dfa:	4699      	mov	r9, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	464f      	mov	r7, r9
 8001e00:	40f3      	lsrs	r3, r6
 8001e02:	431f      	orrs	r7, r3
 8001e04:	003b      	movs	r3, r7
 8001e06:	4657      	mov	r7, sl
 8001e08:	40ba      	lsls	r2, r7
 8001e0a:	1e57      	subs	r7, r2, #1
 8001e0c:	41ba      	sbcs	r2, r7
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	4662      	mov	r2, ip
 8001e12:	40f2      	lsrs	r2, r6
 8001e14:	1889      	adds	r1, r1, r2
 8001e16:	e698      	b.n	8001b4a <__aeabi_dsub+0x182>
 8001e18:	2720      	movs	r7, #32
 8001e1a:	1bbb      	subs	r3, r7, r6
 8001e1c:	469a      	mov	sl, r3
 8001e1e:	4663      	mov	r3, ip
 8001e20:	4657      	mov	r7, sl
 8001e22:	40bb      	lsls	r3, r7
 8001e24:	4699      	mov	r9, r3
 8001e26:	0013      	movs	r3, r2
 8001e28:	464f      	mov	r7, r9
 8001e2a:	40f3      	lsrs	r3, r6
 8001e2c:	431f      	orrs	r7, r3
 8001e2e:	003b      	movs	r3, r7
 8001e30:	4657      	mov	r7, sl
 8001e32:	40ba      	lsls	r2, r7
 8001e34:	1e57      	subs	r7, r2, #1
 8001e36:	41ba      	sbcs	r2, r7
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	4662      	mov	r2, ip
 8001e3c:	40f2      	lsrs	r2, r6
 8001e3e:	1a89      	subs	r1, r1, r2
 8001e40:	e79c      	b.n	8001d7c <__aeabi_dsub+0x3b4>
 8001e42:	4b83      	ldr	r3, [pc, #524]	; (8002050 <__aeabi_dsub+0x688>)
 8001e44:	429f      	cmp	r7, r3
 8001e46:	d05f      	beq.n	8001f08 <__aeabi_dsub+0x540>
 8001e48:	2580      	movs	r5, #128	; 0x80
 8001e4a:	042d      	lsls	r5, r5, #16
 8001e4c:	4273      	negs	r3, r6
 8001e4e:	4329      	orrs	r1, r5
 8001e50:	e720      	b.n	8001c94 <__aeabi_dsub+0x2cc>
 8001e52:	2e00      	cmp	r6, #0
 8001e54:	d10c      	bne.n	8001e70 <__aeabi_dsub+0x4a8>
 8001e56:	2f00      	cmp	r7, #0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x494>
 8001e5a:	e0d0      	b.n	8001ffe <__aeabi_dsub+0x636>
 8001e5c:	465c      	mov	r4, fp
 8001e5e:	4661      	mov	r1, ip
 8001e60:	4691      	mov	r9, r2
 8001e62:	4d7b      	ldr	r5, [pc, #492]	; (8002050 <__aeabi_dsub+0x688>)
 8001e64:	e6cd      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001e66:	4f7a      	ldr	r7, [pc, #488]	; (8002050 <__aeabi_dsub+0x688>)
 8001e68:	42be      	cmp	r6, r7
 8001e6a:	d01c      	beq.n	8001ea6 <__aeabi_dsub+0x4de>
 8001e6c:	001e      	movs	r6, r3
 8001e6e:	e665      	b.n	8001b3c <__aeabi_dsub+0x174>
 8001e70:	2f00      	cmp	r7, #0
 8001e72:	d018      	beq.n	8001ea6 <__aeabi_dsub+0x4de>
 8001e74:	08c0      	lsrs	r0, r0, #3
 8001e76:	074e      	lsls	r6, r1, #29
 8001e78:	4306      	orrs	r6, r0
 8001e7a:	2080      	movs	r0, #128	; 0x80
 8001e7c:	08c9      	lsrs	r1, r1, #3
 8001e7e:	0300      	lsls	r0, r0, #12
 8001e80:	4201      	tst	r1, r0
 8001e82:	d008      	beq.n	8001e96 <__aeabi_dsub+0x4ce>
 8001e84:	4663      	mov	r3, ip
 8001e86:	08dc      	lsrs	r4, r3, #3
 8001e88:	4204      	tst	r4, r0
 8001e8a:	d104      	bne.n	8001e96 <__aeabi_dsub+0x4ce>
 8001e8c:	0021      	movs	r1, r4
 8001e8e:	46da      	mov	sl, fp
 8001e90:	08d2      	lsrs	r2, r2, #3
 8001e92:	075e      	lsls	r6, r3, #29
 8001e94:	4316      	orrs	r6, r2
 8001e96:	00f3      	lsls	r3, r6, #3
 8001e98:	4699      	mov	r9, r3
 8001e9a:	2401      	movs	r4, #1
 8001e9c:	4653      	mov	r3, sl
 8001e9e:	00c9      	lsls	r1, r1, #3
 8001ea0:	0f72      	lsrs	r2, r6, #29
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	401c      	ands	r4, r3
 8001ea6:	4d6a      	ldr	r5, [pc, #424]	; (8002050 <__aeabi_dsub+0x688>)
 8001ea8:	e6ab      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001eaa:	001d      	movs	r5, r3
 8001eac:	2200      	movs	r2, #0
 8001eae:	2700      	movs	r7, #0
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dsub+0x254>
 8001eb2:	2d00      	cmp	r5, #0
 8001eb4:	d159      	bne.n	8001f6a <__aeabi_dsub+0x5a2>
 8001eb6:	000b      	movs	r3, r1
 8001eb8:	4303      	orrs	r3, r0
 8001eba:	d100      	bne.n	8001ebe <__aeabi_dsub+0x4f6>
 8001ebc:	e6d6      	b.n	8001c6c <__aeabi_dsub+0x2a4>
 8001ebe:	1c73      	adds	r3, r6, #1
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x4fc>
 8001ec2:	e0b2      	b.n	800202a <__aeabi_dsub+0x662>
 8001ec4:	4b62      	ldr	r3, [pc, #392]	; (8002050 <__aeabi_dsub+0x688>)
 8001ec6:	429f      	cmp	r7, r3
 8001ec8:	d01e      	beq.n	8001f08 <__aeabi_dsub+0x540>
 8001eca:	43f3      	mvns	r3, r6
 8001ecc:	2b38      	cmp	r3, #56	; 0x38
 8001ece:	dc6f      	bgt.n	8001fb0 <__aeabi_dsub+0x5e8>
 8001ed0:	2b1f      	cmp	r3, #31
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0x50e>
 8001ed4:	e097      	b.n	8002006 <__aeabi_dsub+0x63e>
 8001ed6:	2520      	movs	r5, #32
 8001ed8:	000e      	movs	r6, r1
 8001eda:	1aed      	subs	r5, r5, r3
 8001edc:	40ae      	lsls	r6, r5
 8001ede:	46b0      	mov	r8, r6
 8001ee0:	0006      	movs	r6, r0
 8001ee2:	46aa      	mov	sl, r5
 8001ee4:	40de      	lsrs	r6, r3
 8001ee6:	4645      	mov	r5, r8
 8001ee8:	4335      	orrs	r5, r6
 8001eea:	002e      	movs	r6, r5
 8001eec:	4655      	mov	r5, sl
 8001eee:	40a8      	lsls	r0, r5
 8001ef0:	40d9      	lsrs	r1, r3
 8001ef2:	1e45      	subs	r5, r0, #1
 8001ef4:	41a8      	sbcs	r0, r5
 8001ef6:	448c      	add	ip, r1
 8001ef8:	4306      	orrs	r6, r0
 8001efa:	18b6      	adds	r6, r6, r2
 8001efc:	4296      	cmp	r6, r2
 8001efe:	4192      	sbcs	r2, r2
 8001f00:	4251      	negs	r1, r2
 8001f02:	4461      	add	r1, ip
 8001f04:	003d      	movs	r5, r7
 8001f06:	e625      	b.n	8001b54 <__aeabi_dsub+0x18c>
 8001f08:	003d      	movs	r5, r7
 8001f0a:	4661      	mov	r1, ip
 8001f0c:	4691      	mov	r9, r2
 8001f0e:	e678      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001f10:	000b      	movs	r3, r1
 8001f12:	4303      	orrs	r3, r0
 8001f14:	2d00      	cmp	r5, #0
 8001f16:	d000      	beq.n	8001f1a <__aeabi_dsub+0x552>
 8001f18:	e655      	b.n	8001bc6 <__aeabi_dsub+0x1fe>
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f5      	beq.n	8001f0a <__aeabi_dsub+0x542>
 8001f1e:	4663      	mov	r3, ip
 8001f20:	4313      	orrs	r3, r2
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x55e>
 8001f24:	e66d      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001f26:	1886      	adds	r6, r0, r2
 8001f28:	4286      	cmp	r6, r0
 8001f2a:	4180      	sbcs	r0, r0
 8001f2c:	4461      	add	r1, ip
 8001f2e:	4240      	negs	r0, r0
 8001f30:	1809      	adds	r1, r1, r0
 8001f32:	2200      	movs	r2, #0
 8001f34:	020b      	lsls	r3, r1, #8
 8001f36:	d400      	bmi.n	8001f3a <__aeabi_dsub+0x572>
 8001f38:	e6d0      	b.n	8001cdc <__aeabi_dsub+0x314>
 8001f3a:	4b46      	ldr	r3, [pc, #280]	; (8002054 <__aeabi_dsub+0x68c>)
 8001f3c:	3501      	adds	r5, #1
 8001f3e:	4019      	ands	r1, r3
 8001f40:	e5b2      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001f42:	46b1      	mov	r9, r6
 8001f44:	e65d      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001f46:	0033      	movs	r3, r6
 8001f48:	4667      	mov	r7, ip
 8001f4a:	3b20      	subs	r3, #32
 8001f4c:	40df      	lsrs	r7, r3
 8001f4e:	003b      	movs	r3, r7
 8001f50:	2e20      	cmp	r6, #32
 8001f52:	d005      	beq.n	8001f60 <__aeabi_dsub+0x598>
 8001f54:	2740      	movs	r7, #64	; 0x40
 8001f56:	1bbf      	subs	r7, r7, r6
 8001f58:	4666      	mov	r6, ip
 8001f5a:	40be      	lsls	r6, r7
 8001f5c:	4332      	orrs	r2, r6
 8001f5e:	4690      	mov	r8, r2
 8001f60:	4646      	mov	r6, r8
 8001f62:	1e72      	subs	r2, r6, #1
 8001f64:	4196      	sbcs	r6, r2
 8001f66:	4333      	orrs	r3, r6
 8001f68:	e5ef      	b.n	8001b4a <__aeabi_dsub+0x182>
 8001f6a:	4b39      	ldr	r3, [pc, #228]	; (8002050 <__aeabi_dsub+0x688>)
 8001f6c:	429f      	cmp	r7, r3
 8001f6e:	d0cb      	beq.n	8001f08 <__aeabi_dsub+0x540>
 8001f70:	2580      	movs	r5, #128	; 0x80
 8001f72:	042d      	lsls	r5, r5, #16
 8001f74:	4273      	negs	r3, r6
 8001f76:	4329      	orrs	r1, r5
 8001f78:	e7a8      	b.n	8001ecc <__aeabi_dsub+0x504>
 8001f7a:	4308      	orrs	r0, r1
 8001f7c:	1e41      	subs	r1, r0, #1
 8001f7e:	4188      	sbcs	r0, r1
 8001f80:	e6a2      	b.n	8001cc8 <__aeabi_dsub+0x300>
 8001f82:	2f00      	cmp	r7, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x5c0>
 8001f86:	e63c      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001f88:	4663      	mov	r3, ip
 8001f8a:	1a86      	subs	r6, r0, r2
 8001f8c:	1acf      	subs	r7, r1, r3
 8001f8e:	42b0      	cmp	r0, r6
 8001f90:	419b      	sbcs	r3, r3
 8001f92:	425b      	negs	r3, r3
 8001f94:	1afb      	subs	r3, r7, r3
 8001f96:	4698      	mov	r8, r3
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	d54e      	bpl.n	800203a <__aeabi_dsub+0x672>
 8001f9c:	1a16      	subs	r6, r2, r0
 8001f9e:	4663      	mov	r3, ip
 8001fa0:	42b2      	cmp	r2, r6
 8001fa2:	4192      	sbcs	r2, r2
 8001fa4:	1a59      	subs	r1, r3, r1
 8001fa6:	4252      	negs	r2, r2
 8001fa8:	1a89      	subs	r1, r1, r2
 8001faa:	465c      	mov	r4, fp
 8001fac:	2200      	movs	r2, #0
 8001fae:	e57b      	b.n	8001aa8 <__aeabi_dsub+0xe0>
 8001fb0:	4301      	orrs	r1, r0
 8001fb2:	000e      	movs	r6, r1
 8001fb4:	1e71      	subs	r1, r6, #1
 8001fb6:	418e      	sbcs	r6, r1
 8001fb8:	e79f      	b.n	8001efa <__aeabi_dsub+0x532>
 8001fba:	001d      	movs	r5, r3
 8001fbc:	000e      	movs	r6, r1
 8001fbe:	3d20      	subs	r5, #32
 8001fc0:	40ee      	lsrs	r6, r5
 8001fc2:	46b0      	mov	r8, r6
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d004      	beq.n	8001fd2 <__aeabi_dsub+0x60a>
 8001fc8:	2540      	movs	r5, #64	; 0x40
 8001fca:	1aeb      	subs	r3, r5, r3
 8001fcc:	4099      	lsls	r1, r3
 8001fce:	4308      	orrs	r0, r1
 8001fd0:	4681      	mov	r9, r0
 8001fd2:	4648      	mov	r0, r9
 8001fd4:	4643      	mov	r3, r8
 8001fd6:	1e41      	subs	r1, r0, #1
 8001fd8:	4188      	sbcs	r0, r1
 8001fda:	4318      	orrs	r0, r3
 8001fdc:	e674      	b.n	8001cc8 <__aeabi_dsub+0x300>
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2400      	movs	r4, #0
 8001fe2:	e617      	b.n	8001c14 <__aeabi_dsub+0x24c>
 8001fe4:	1a16      	subs	r6, r2, r0
 8001fe6:	4663      	mov	r3, ip
 8001fe8:	42b2      	cmp	r2, r6
 8001fea:	4192      	sbcs	r2, r2
 8001fec:	1a59      	subs	r1, r3, r1
 8001fee:	4252      	negs	r2, r2
 8001ff0:	1a89      	subs	r1, r1, r2
 8001ff2:	003d      	movs	r5, r7
 8001ff4:	e525      	b.n	8001a42 <__aeabi_dsub+0x7a>
 8001ff6:	4661      	mov	r1, ip
 8001ff8:	4691      	mov	r9, r2
 8001ffa:	4d15      	ldr	r5, [pc, #84]	; (8002050 <__aeabi_dsub+0x688>)
 8001ffc:	e601      	b.n	8001c02 <__aeabi_dsub+0x23a>
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	2400      	movs	r4, #0
 8002002:	0312      	lsls	r2, r2, #12
 8002004:	e679      	b.n	8001cfa <__aeabi_dsub+0x332>
 8002006:	001d      	movs	r5, r3
 8002008:	000e      	movs	r6, r1
 800200a:	3d20      	subs	r5, #32
 800200c:	40ee      	lsrs	r6, r5
 800200e:	46b0      	mov	r8, r6
 8002010:	2b20      	cmp	r3, #32
 8002012:	d004      	beq.n	800201e <__aeabi_dsub+0x656>
 8002014:	2540      	movs	r5, #64	; 0x40
 8002016:	1aeb      	subs	r3, r5, r3
 8002018:	4099      	lsls	r1, r3
 800201a:	4308      	orrs	r0, r1
 800201c:	4681      	mov	r9, r0
 800201e:	464e      	mov	r6, r9
 8002020:	4643      	mov	r3, r8
 8002022:	1e71      	subs	r1, r6, #1
 8002024:	418e      	sbcs	r6, r1
 8002026:	431e      	orrs	r6, r3
 8002028:	e767      	b.n	8001efa <__aeabi_dsub+0x532>
 800202a:	1886      	adds	r6, r0, r2
 800202c:	4296      	cmp	r6, r2
 800202e:	419b      	sbcs	r3, r3
 8002030:	4461      	add	r1, ip
 8002032:	425b      	negs	r3, r3
 8002034:	18c9      	adds	r1, r1, r3
 8002036:	003d      	movs	r5, r7
 8002038:	e58c      	b.n	8001b54 <__aeabi_dsub+0x18c>
 800203a:	4647      	mov	r7, r8
 800203c:	4337      	orrs	r7, r6
 800203e:	d0ce      	beq.n	8001fde <__aeabi_dsub+0x616>
 8002040:	2207      	movs	r2, #7
 8002042:	4641      	mov	r1, r8
 8002044:	4032      	ands	r2, r6
 8002046:	e649      	b.n	8001cdc <__aeabi_dsub+0x314>
 8002048:	2700      	movs	r7, #0
 800204a:	003a      	movs	r2, r7
 800204c:	e5e6      	b.n	8001c1c <__aeabi_dsub+0x254>
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	000007ff 	.word	0x000007ff
 8002054:	ff7fffff 	.word	0xff7fffff

08002058 <__aeabi_dcmpun>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4e0c      	ldr	r6, [pc, #48]	; (800208c <__aeabi_dcmpun+0x34>)
 800205c:	030d      	lsls	r5, r1, #12
 800205e:	031c      	lsls	r4, r3, #12
 8002060:	0049      	lsls	r1, r1, #1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	0b2d      	lsrs	r5, r5, #12
 8002066:	0d49      	lsrs	r1, r1, #21
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	42b1      	cmp	r1, r6
 800206e:	d008      	beq.n	8002082 <__aeabi_dcmpun+0x2a>
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <__aeabi_dcmpun+0x34>)
 8002072:	2000      	movs	r0, #0
 8002074:	428b      	cmp	r3, r1
 8002076:	d103      	bne.n	8002080 <__aeabi_dcmpun+0x28>
 8002078:	4314      	orrs	r4, r2
 800207a:	0020      	movs	r0, r4
 800207c:	1e44      	subs	r4, r0, #1
 800207e:	41a0      	sbcs	r0, r4
 8002080:	bd70      	pop	{r4, r5, r6, pc}
 8002082:	4305      	orrs	r5, r0
 8002084:	2001      	movs	r0, #1
 8002086:	2d00      	cmp	r5, #0
 8002088:	d1fa      	bne.n	8002080 <__aeabi_dcmpun+0x28>
 800208a:	e7f1      	b.n	8002070 <__aeabi_dcmpun+0x18>
 800208c:	000007ff 	.word	0x000007ff

08002090 <__aeabi_i2d>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	2800      	cmp	r0, #0
 8002094:	d02d      	beq.n	80020f2 <__aeabi_i2d+0x62>
 8002096:	17c3      	asrs	r3, r0, #31
 8002098:	18c5      	adds	r5, r0, r3
 800209a:	405d      	eors	r5, r3
 800209c:	0fc4      	lsrs	r4, r0, #31
 800209e:	0028      	movs	r0, r5
 80020a0:	f000 f830 	bl	8002104 <__clzsi2>
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <__aeabi_i2d+0x6c>)
 80020a6:	1a1b      	subs	r3, r3, r0
 80020a8:	055b      	lsls	r3, r3, #21
 80020aa:	0d5b      	lsrs	r3, r3, #21
 80020ac:	280a      	cmp	r0, #10
 80020ae:	dd15      	ble.n	80020dc <__aeabi_i2d+0x4c>
 80020b0:	380b      	subs	r0, #11
 80020b2:	4085      	lsls	r5, r0
 80020b4:	2200      	movs	r2, #0
 80020b6:	032d      	lsls	r5, r5, #12
 80020b8:	0b2d      	lsrs	r5, r5, #12
 80020ba:	2100      	movs	r1, #0
 80020bc:	0010      	movs	r0, r2
 80020be:	032d      	lsls	r5, r5, #12
 80020c0:	0d0a      	lsrs	r2, r1, #20
 80020c2:	0b2d      	lsrs	r5, r5, #12
 80020c4:	0512      	lsls	r2, r2, #20
 80020c6:	432a      	orrs	r2, r5
 80020c8:	4d0d      	ldr	r5, [pc, #52]	; (8002100 <__aeabi_i2d+0x70>)
 80020ca:	051b      	lsls	r3, r3, #20
 80020cc:	402a      	ands	r2, r5
 80020ce:	4313      	orrs	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	07e4      	lsls	r4, r4, #31
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	4323      	orrs	r3, r4
 80020d8:	0019      	movs	r1, r3
 80020da:	bd70      	pop	{r4, r5, r6, pc}
 80020dc:	0002      	movs	r2, r0
 80020de:	0029      	movs	r1, r5
 80020e0:	3215      	adds	r2, #21
 80020e2:	4091      	lsls	r1, r2
 80020e4:	000a      	movs	r2, r1
 80020e6:	210b      	movs	r1, #11
 80020e8:	1a08      	subs	r0, r1, r0
 80020ea:	40c5      	lsrs	r5, r0
 80020ec:	032d      	lsls	r5, r5, #12
 80020ee:	0b2d      	lsrs	r5, r5, #12
 80020f0:	e7e3      	b.n	80020ba <__aeabi_i2d+0x2a>
 80020f2:	2400      	movs	r4, #0
 80020f4:	2300      	movs	r3, #0
 80020f6:	2500      	movs	r5, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	e7de      	b.n	80020ba <__aeabi_i2d+0x2a>
 80020fc:	0000041e 	.word	0x0000041e
 8002100:	800fffff 	.word	0x800fffff

08002104 <__clzsi2>:
 8002104:	211c      	movs	r1, #28
 8002106:	2301      	movs	r3, #1
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	4298      	cmp	r0, r3
 800210c:	d301      	bcc.n	8002112 <__clzsi2+0xe>
 800210e:	0c00      	lsrs	r0, r0, #16
 8002110:	3910      	subs	r1, #16
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	4298      	cmp	r0, r3
 8002116:	d301      	bcc.n	800211c <__clzsi2+0x18>
 8002118:	0a00      	lsrs	r0, r0, #8
 800211a:	3908      	subs	r1, #8
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	4298      	cmp	r0, r3
 8002120:	d301      	bcc.n	8002126 <__clzsi2+0x22>
 8002122:	0900      	lsrs	r0, r0, #4
 8002124:	3904      	subs	r1, #4
 8002126:	a202      	add	r2, pc, #8	; (adr r2, 8002130 <__clzsi2+0x2c>)
 8002128:	5c10      	ldrb	r0, [r2, r0]
 800212a:	1840      	adds	r0, r0, r1
 800212c:	4770      	bx	lr
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	02020304 	.word	0x02020304
 8002134:	01010101 	.word	0x01010101
	...

08002140 <__clzdi2>:
 8002140:	b510      	push	{r4, lr}
 8002142:	2900      	cmp	r1, #0
 8002144:	d103      	bne.n	800214e <__clzdi2+0xe>
 8002146:	f7ff ffdd 	bl	8002104 <__clzsi2>
 800214a:	3020      	adds	r0, #32
 800214c:	e002      	b.n	8002154 <__clzdi2+0x14>
 800214e:	1c08      	adds	r0, r1, #0
 8002150:	f7ff ffd8 	bl	8002104 <__clzsi2>
 8002154:	bd10      	pop	{r4, pc}
 8002156:	46c0      	nop			; (mov r8, r8)

08002158 <compStr>:
//**********************************************************************
//  HELPER RN4020 Functions (START)
//**********************************************************************

int compStr(uint8_t* strcomp, uint8_t* expcomp)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
	//int sizeStrComp = sizeof(strcomp)/sizeof(strcomp[0]);
	//int sizeExpComp = sizeof(strcomp)/sizeof(expcomp[0]);
	if(strcomp[0] != expcomp[0]) {
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <compStr+0x1a>
		return FALSE;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <compStr+0x1c>
//		if (strcomp[i] != expcomp[i])
//		{
//			return FALSE;
//		}
//	}
	return TRUE;
 8002172:	2301      	movs	r3, #1
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <resetRxBuffer>:

void resetRxBuffer(uint8_t *rxBuffer)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	int sizeRx = sizeof(rxBuffer) / sizeof(rxBuffer[0]);
 8002184:	2304      	movs	r3, #4
 8002186:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < sizeRx; i++) {
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e007      	b.n	800219e <resetRxBuffer+0x22>
		rxBuffer[i] = 0;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	18d3      	adds	r3, r2, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeRx; i++) {
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dbf3      	blt.n	800218e <resetRxBuffer+0x12>
	}
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b004      	add	sp, #16
 80021ac:	bd80      	pop	{r7, pc}

080021ae <RN4020_resetDefaultStep>:

//**********************************************************************
//  RN4020 Functions (START)
//**********************************************************************

int RN4020_resetDefaultStep(UART_HandleTypeDef *huart) {
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
	int completeFlag = TRUE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
	if (RN4020_resetToFactoryDefault(huart) != HAL_OK) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f87f 	bl	80022c0 <RN4020_resetToFactoryDefault>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d007      	beq.n	80021d6 <RN4020_resetDefaultStep+0x28>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021c6:	23a0      	movs	r3, #160	; 0xa0
 80021c8:	05db      	lsls	r3, r3, #23
 80021ca:	2120      	movs	r1, #32
 80021cc:	0018      	movs	r0, r3
 80021ce:	f001 fd3a 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
	}
//	if (RN4020_killConnection(huart) != HAL_OK) {
//			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//			completeFlag = FALSE;
//		}
	if (RN4020_setBaudRate115200(huart) != HAL_OK) {
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f88b 	bl	80022f4 <RN4020_setBaudRate115200>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d007      	beq.n	80021f2 <RN4020_resetDefaultStep+0x44>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021e2:	23a0      	movs	r3, #160	; 0xa0
 80021e4:	05db      	lsls	r3, r3, #23
 80021e6:	2120      	movs	r1, #32
 80021e8:	0018      	movs	r0, r3
 80021ea:	f001 fd2c 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setService(huart) != HAL_OK) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f897 	bl	8002328 <RN4020_setService>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d007      	beq.n	800220e <RN4020_resetDefaultStep+0x60>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021fe:	23a0      	movs	r3, #160	; 0xa0
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	2120      	movs	r1, #32
 8002204:	0018      	movs	r0, r3
 8002206:	f001 fd1e 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_clearPrivateSettings(huart) != HAL_OK) {
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f8a3 	bl	800235c <RN4020_clearPrivateSettings>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d007      	beq.n	800222a <RN4020_resetDefaultStep+0x7c>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800221a:	23a0      	movs	r3, #160	; 0xa0
 800221c:	05db      	lsls	r3, r3, #23
 800221e:	2120      	movs	r1, #32
 8002220:	0018      	movs	r0, r3
 8002222:	f001 fd10 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setPrivateService(huart) != HAL_OK) {
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 f8af 	bl	8002390 <RN4020_setPrivateService>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d007      	beq.n	8002246 <RN4020_resetDefaultStep+0x98>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002236:	23a0      	movs	r3, #160	; 0xa0
 8002238:	05db      	lsls	r3, r3, #23
 800223a:	2120      	movs	r1, #32
 800223c:	0018      	movs	r0, r3
 800223e:	f001 fd02 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setPrivateChar(huart) != HAL_OK) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 f8bb 	bl	80023c4 <RN4020_setPrivateChar>
 800224e:	1e03      	subs	r3, r0, #0
 8002250:	d007      	beq.n	8002262 <RN4020_resetDefaultStep+0xb4>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002252:	23a0      	movs	r3, #160	; 0xa0
 8002254:	05db      	lsls	r3, r3, #23
 8002256:	2120      	movs	r1, #32
 8002258:	0018      	movs	r0, r3
 800225a:	f001 fcf4 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setDeviceType(huart) != HAL_OK) {
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f8c7 	bl	80023f8 <RN4020_setDeviceType>
 800226a:	1e03      	subs	r3, r0, #0
 800226c:	d007      	beq.n	800227e <RN4020_resetDefaultStep+0xd0>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800226e:	23a0      	movs	r3, #160	; 0xa0
 8002270:	05db      	lsls	r3, r3, #23
 8002272:	2120      	movs	r1, #32
 8002274:	0018      	movs	r0, r3
 8002276:	f001 fce6 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_rebootDevice(huart) != HAL_OK) {
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 f8d3 	bl	800242c <RN4020_rebootDevice>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d007      	beq.n	800229a <RN4020_resetDefaultStep+0xec>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800228a:	23a0      	movs	r3, #160	; 0xa0
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	2120      	movs	r1, #32
 8002290:	0018      	movs	r0, r3
 8002292:	f001 fcd8 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
	}
	if (RN4020_setNameDevice(huart) != HAL_OK) {
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	0018      	movs	r0, r3
 800229e:	f000 f8df 	bl	8002460 <RN4020_setNameDevice>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d007      	beq.n	80022b6 <RN4020_resetDefaultStep+0x108>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80022a6:	23a0      	movs	r3, #160	; 0xa0
 80022a8:	05db      	lsls	r3, r3, #23
 80022aa:	2120      	movs	r1, #32
 80022ac:	0018      	movs	r0, r3
 80022ae:	f001 fcca 	bl	8003c46 <HAL_GPIO_TogglePin>
		completeFlag = FALSE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
	}

	return completeFlag;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b004      	add	sp, #16
 80022be:	bd80      	pop	{r7, pc}

080022c0 <RN4020_resetToFactoryDefault>:


HAL_StatusTypeDef RN4020_resetToFactoryDefault(UART_HandleTypeDef *huart) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <RN4020_resetToFactoryDefault+0x2c>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 f9b9 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "SF,1\r\n");
 80022d2:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <RN4020_resetToFactoryDefault+0x30>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0011      	movs	r1, r2
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f9c3 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 80022de:	f000 f933 	bl	8002548 <RN4020_waitForReadyState>
 80022e2:	0003      	movs	r3, r0
	}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	200000ec 	.word	0x200000ec
 80022f0:	08008aa0 	.word	0x08008aa0

080022f4 <RN4020_setBaudRate115200>:
HAL_StatusTypeDef RN4020_killConnection(UART_HandleTypeDef *huart) {
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
	RN4020_sendData(huart, "K\r\n");
	return RN4020_waitForReadyState();
	}
HAL_StatusTypeDef RN4020_setBaudRate115200(UART_HandleTypeDef *huart) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <RN4020_setBaudRate115200+0x2c>)
 80022fe:	2101      	movs	r1, #1
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f99f 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "SB,4\r\n");
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <RN4020_setBaudRate115200+0x30>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f000 f9a9 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 8002312:	f000 f919 	bl	8002548 <RN4020_waitForReadyState>
 8002316:	0003      	movs	r3, r0
	}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200000ec 	.word	0x200000ec
 8002324:	08008aac 	.word	0x08008aac

08002328 <RN4020_setService>:

HAL_StatusTypeDef RN4020_setService(UART_HandleTypeDef *huart) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <RN4020_setService+0x2c>)
 8002332:	2101      	movs	r1, #1
 8002334:	0018      	movs	r0, r3
 8002336:	f000 f985 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "SS,C2000000\r\n");
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <RN4020_setService+0x30>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0011      	movs	r1, r2
 8002340:	0018      	movs	r0, r3
 8002342:	f000 f98f 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 8002346:	f000 f8ff 	bl	8002548 <RN4020_waitForReadyState>
 800234a:	0003      	movs	r3, r0
	}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200000ec 	.word	0x200000ec
 8002358:	08008ab4 	.word	0x08008ab4

0800235c <RN4020_clearPrivateSettings>:
HAL_StatusTypeDef RN4020_clearPrivateSettings(UART_HandleTypeDef *huart) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <RN4020_clearPrivateSettings+0x2c>)
 8002366:	2101      	movs	r1, #1
 8002368:	0018      	movs	r0, r3
 800236a:	f000 f96b 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "PZ\r\n");
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <RN4020_clearPrivateSettings+0x30>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f975 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 800237a:	f000 f8e5 	bl	8002548 <RN4020_waitForReadyState>
 800237e:	0003      	movs	r3, r0
	}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200000ec 	.word	0x200000ec
 800238c:	08008ac4 	.word	0x08008ac4

08002390 <RN4020_setPrivateService>:
HAL_StatusTypeDef RN4020_setPrivateService(UART_HandleTypeDef *huart) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <RN4020_setPrivateService+0x2c>)
 800239a:	2101      	movs	r1, #1
 800239c:	0018      	movs	r0, r3
 800239e:	f000 f951 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "PS,11223344556677889900AABBCCDDEEFF\r\n");
 80023a2:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <RN4020_setPrivateService+0x30>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	0011      	movs	r1, r2
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f95b 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 80023ae:	f000 f8cb 	bl	8002548 <RN4020_waitForReadyState>
 80023b2:	0003      	movs	r3, r0
	}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200000ec 	.word	0x200000ec
 80023c0:	08008acc 	.word	0x08008acc

080023c4 <RN4020_setPrivateChar>:
HAL_StatusTypeDef RN4020_setPrivateChar(UART_HandleTypeDef *huart) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <RN4020_setPrivateChar+0x2c>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 f937 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "PC,010203040506070809000A0B0C0D0E0F,08,02\r\n");
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <RN4020_setPrivateChar+0x30>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	0011      	movs	r1, r2
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 f941 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 80023e2:	f000 f8b1 	bl	8002548 <RN4020_waitForReadyState>
 80023e6:	0003      	movs	r3, r0
	}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200000ec 	.word	0x200000ec
 80023f4:	08008af4 	.word	0x08008af4

080023f8 <RN4020_setDeviceType>:
HAL_StatusTypeDef RN4020_setDeviceType(UART_HandleTypeDef *huart) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <RN4020_setDeviceType+0x2c>)
 8002402:	2101      	movs	r1, #1
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f91d 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "SR,20000000\r\n");
 800240a:	4a07      	ldr	r2, [pc, #28]	; (8002428 <RN4020_setDeviceType+0x30>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	0011      	movs	r1, r2
 8002410:	0018      	movs	r0, r3
 8002412:	f000 f927 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 8002416:	f000 f897 	bl	8002548 <RN4020_waitForReadyState>
 800241a:	0003      	movs	r3, r0
	}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200000ec 	.word	0x200000ec
 8002428:	08008b20 	.word	0x08008b20

0800242c <RN4020_rebootDevice>:
HAL_StatusTypeDef RN4020_rebootDevice(UART_HandleTypeDef *huart) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_REBOOT);
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <RN4020_rebootDevice+0x2c>)
 8002436:	2102      	movs	r1, #2
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f903 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "R,1\r\n");
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <RN4020_rebootDevice+0x30>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f90d 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 800244a:	f000 f87d 	bl	8002548 <RN4020_waitForReadyState>
 800244e:	0003      	movs	r3, r0
	}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200000ec 	.word	0x200000ec
 800245c:	08008b30 	.word	0x08008b30

08002460 <RN4020_setNameDevice>:

HAL_StatusTypeDef RN4020_setNameDevice(UART_HandleTypeDef *huart) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <RN4020_setNameDevice+0x38>)
 800246a:	2101      	movs	r1, #1
 800246c:	0018      	movs	r0, r3
 800246e:	f000 f8e9 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "SN,T17_NewlyWED");
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <RN4020_setNameDevice+0x3c>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0011      	movs	r1, r2
 8002478:	0018      	movs	r0, r3
 800247a:	f000 f8f3 	bl	8002664 <RN4020_sendData>
	RN4020_sendData(huart, "\r\n");
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <RN4020_setNameDevice+0x40>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f000 f8ed 	bl	8002664 <RN4020_sendData>
	return RN4020_waitForReadyState();
 800248a:	f000 f85d 	bl	8002548 <RN4020_waitForReadyState>
 800248e:	0003      	movs	r3, r0
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}
 8002498:	200000ec 	.word	0x200000ec
 800249c:	08008b38 	.word	0x08008b38
 80024a0:	08008b48 	.word	0x08008b48

080024a4 <RN4020_sendBatteryLife>:

HAL_StatusTypeDef RN4020_sendBatteryLife(UART_HandleTypeDef *huart, const char* batteryLevel) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <RN4020_sendBatteryLife+0x44>)
 80024b0:	2101      	movs	r1, #1
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 f8c6 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "SUW,2A19,");
 80024b8:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <RN4020_sendBatteryLife+0x48>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0011      	movs	r1, r2
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 f8d0 	bl	8002664 <RN4020_sendData>
	RN4020_sendData(huart, batteryLevel);
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0011      	movs	r1, r2
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 f8ca 	bl	8002664 <RN4020_sendData>
	RN4020_sendData(huart, "\r\n");
 80024d0:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <RN4020_sendBatteryLife+0x4c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0011      	movs	r1, r2
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f8c4 	bl	8002664 <RN4020_sendData>
//	return RN4020_waitForReadyState2();
	return HAL_OK;
 80024dc:	2300      	movs	r3, #0
	}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b002      	add	sp, #8
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	200000ec 	.word	0x200000ec
 80024ec:	08008b4c 	.word	0x08008b4c
 80024f0:	08008b48 	.word	0x08008b48

080024f4 <RN4020_sendCadence>:

HAL_StatusTypeDef RN4020_sendCadence(UART_HandleTypeDef *huart, const char* cadence) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_AOK);
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <RN4020_sendCadence+0x44>)
 8002500:	2101      	movs	r1, #1
 8002502:	0018      	movs	r0, r3
 8002504:	f000 f89e 	bl	8002644 <RN4020_setState>
	RN4020_sendData(huart, "SUW,2A54,");
 8002508:	4a0c      	ldr	r2, [pc, #48]	; (800253c <RN4020_sendCadence+0x48>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0011      	movs	r1, r2
 800250e:	0018      	movs	r0, r3
 8002510:	f000 f8a8 	bl	8002664 <RN4020_sendData>
//	RN4020_sendData(huart, cadence);
	RN4020_sendData(huart, "75");
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <RN4020_sendCadence+0x4c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0011      	movs	r1, r2
 800251a:	0018      	movs	r0, r3
 800251c:	f000 f8a2 	bl	8002664 <RN4020_sendData>
	RN4020_sendData(huart, "\r\n");
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <RN4020_sendCadence+0x50>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0011      	movs	r1, r2
 8002526:	0018      	movs	r0, r3
 8002528:	f000 f89c 	bl	8002664 <RN4020_sendData>
//	return RN4020_waitForReadyState2();
	return HAL_OK;
 800252c:	2300      	movs	r3, #0
	}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	200000ec 	.word	0x200000ec
 800253c:	08008b58 	.word	0x08008b58
 8002540:	08008b64 	.word	0x08008b64
 8002544:	08008b48 	.word	0x08008b48

08002548 <RN4020_waitForReadyState>:

//Uses global variable currState
HAL_StatusTypeDef RN4020_waitForReadyState() {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	if(currState == RN4020_STATE_READY) {
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <RN4020_waitForReadyState+0x58>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <RN4020_waitForReadyState+0x12>
		return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e01e      	b.n	8002598 <RN4020_waitForReadyState+0x50>
	}

	uint32_t startTime = HAL_GetTick();
 800255a:	f001 f84f 	bl	80035fc <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	607b      	str	r3, [r7, #4]
	while (1) {
		if(currState == RN4020_STATE_READY) {
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <RN4020_waitForReadyState+0x58>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <RN4020_waitForReadyState+0x2e>
			resetRxBuffer(rxBuffer);
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <RN4020_waitForReadyState+0x5c>)
 800256c:	0018      	movs	r0, r3
 800256e:	f7ff fe05 	bl	800217c <resetRxBuffer>
			return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e010      	b.n	8002598 <RN4020_waitForReadyState+0x50>
		}
		//if ((HAL_GetTick() - startTime) > RN4020_TIMEOUT) {
		if ((HAL_GetTick() - startTime) > 3000) {
 8002576:	f001 f841 	bl	80035fc <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <RN4020_waitForReadyState+0x60>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d905      	bls.n	8002592 <RN4020_waitForReadyState+0x4a>
			resetRxBuffer(rxBuffer);
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <RN4020_waitForReadyState+0x5c>)
 8002588:	0018      	movs	r0, r3
 800258a:	f7ff fdf7 	bl	800217c <resetRxBuffer>
			return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e002      	b.n	8002598 <RN4020_waitForReadyState+0x50>
		}
		RN4020_checkState();
 8002592:	f000 f80b 	bl	80025ac <RN4020_checkState>
		if(currState == RN4020_STATE_READY) {
 8002596:	e7e4      	b.n	8002562 <RN4020_waitForReadyState+0x1a>
	}


}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200000ec 	.word	0x200000ec
 80025a4:	200001e8 	.word	0x200001e8
 80025a8:	00000bb8 	.word	0x00000bb8

080025ac <RN4020_checkState>:


}

//Uses global variable currState
void RN4020_checkState() {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	switch(currState) {
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <RN4020_checkState+0x84>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d005      	beq.n	80025c4 <RN4020_checkState+0x18>
 80025b8:	dd31      	ble.n	800261e <RN4020_checkState+0x72>
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d011      	beq.n	80025e2 <RN4020_checkState+0x36>
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d01e      	beq.n	8002600 <RN4020_checkState+0x54>
 80025c2:	e033      	b.n	800262c <RN4020_checkState+0x80>
	case RN4020_STATE_WAITING_FOR_AOK:
		if (compStr(rxBuffer, compareAOK) == TRUE) {
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <RN4020_checkState+0x88>)
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <RN4020_checkState+0x8c>)
 80025c8:	0011      	movs	r1, r2
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff fdc4 	bl	8002158 <compStr>
 80025d0:	0003      	movs	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d125      	bne.n	8002622 <RN4020_checkState+0x76>
			RN4020_setState(&currState, RN4020_STATE_READY);
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <RN4020_checkState+0x84>)
 80025d8:	2100      	movs	r1, #0
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 f832 	bl	8002644 <RN4020_setState>
			return;
 80025e0:	e024      	b.n	800262c <RN4020_checkState+0x80>
		}
	break;
	case RN4020_STATE_WAITING_FOR_REBOOT:
		if (compStr(rxBuffer, compareREB) == TRUE) {
 80025e2:	4a16      	ldr	r2, [pc, #88]	; (800263c <RN4020_checkState+0x90>)
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <RN4020_checkState+0x8c>)
 80025e6:	0011      	movs	r1, r2
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7ff fdb5 	bl	8002158 <compStr>
 80025ee:	0003      	movs	r3, r0
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d118      	bne.n	8002626 <RN4020_checkState+0x7a>
			RN4020_setState(&currState, RN4020_STATE_WAITING_FOR_CMD);
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <RN4020_checkState+0x84>)
 80025f6:	2103      	movs	r1, #3
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f823 	bl	8002644 <RN4020_setState>
			return;
 80025fe:	e015      	b.n	800262c <RN4020_checkState+0x80>
		}
	break;
	case RN4020_STATE_WAITING_FOR_CMD:
		if (compStr(rxBuffer, compareCMD) == TRUE) {
 8002600:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <RN4020_checkState+0x94>)
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <RN4020_checkState+0x8c>)
 8002604:	0011      	movs	r1, r2
 8002606:	0018      	movs	r0, r3
 8002608:	f7ff fda6 	bl	8002158 <compStr>
 800260c:	0003      	movs	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10b      	bne.n	800262a <RN4020_checkState+0x7e>
			RN4020_setState(&currState, RN4020_STATE_READY);
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <RN4020_checkState+0x84>)
 8002614:	2100      	movs	r1, #0
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f814 	bl	8002644 <RN4020_setState>
		}
	break;
 800261c:	e005      	b.n	800262a <RN4020_checkState+0x7e>
	case RN4020_STATE_READY:
	break;
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	e004      	b.n	800262c <RN4020_checkState+0x80>
	break;
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	e002      	b.n	800262c <RN4020_checkState+0x80>
	break;
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	e000      	b.n	800262c <RN4020_checkState+0x80>
	break;
 800262a:	46c0      	nop			; (mov r8, r8)
	}
}
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200000ec 	.word	0x200000ec
 8002634:	20000020 	.word	0x20000020
 8002638:	200001e8 	.word	0x200001e8
 800263c:	20000028 	.word	0x20000028
 8002640:	20000024 	.word	0x20000024

08002644 <RN4020_setState>:

void RN4020_setState(RN4020_State *state, RN4020_State newState) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	000a      	movs	r2, r1
 800264e:	1cfb      	adds	r3, r7, #3
 8002650:	701a      	strb	r2, [r3, #0]
	*state = newState;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1cfa      	adds	r2, r7, #3
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	701a      	strb	r2, [r3, #0]
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <RN4020_sendData>:

void RN4020_sendData(UART_HandleTypeDef *huart, const char* line) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
//  char carriageLineCh = '\r';
//  char newLineCh = '\n';
  HAL_UART_Transmit(huart, (uint8_t*)line, strlen(line), RN4020_TIMEOUT);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	0018      	movs	r0, r3
 8002672:	f7fd fd49 	bl	8000108 <strlen>
 8002676:	0003      	movs	r3, r0
 8002678:	b29a      	uxth	r2, r3
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <RN4020_sendData+0x28>)
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f003 fc02 	bl	8005e88 <HAL_UART_Transmit>
  //HAL_UART_Transmit(huart, (uint8_t*)&carriageLineCh, 1, RN4020_TIMEOUT);
  //HAL_UART_Transmit(huart, (uint8_t*)&newLineCh, 1, RN4020_TIMEOUT);
  //HAL_Delay(300);
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}
 800268c:	00001388 	.word	0x00001388

08002690 <babysitter_SendData>:
//**********************************************************************
//  RN4020 Functions (END)
//**********************************************************************


void babysitter_SendData() {
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b08c      	sub	sp, #48	; 0x30
 8002694:	af04      	add	r7, sp, #16
	//Variables for babysitter interrupt
	HAL_StatusTypeDef babysitter_ret;
	HAL_StatusTypeDef babysitter_ret2;
	uint8_t BABY_data[2];
	uint8_t BABY_data2[2];
	int bigbattery = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
	char cadence[4] = {0,0,0,0};
 800269a:	2308      	movs	r3, #8
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
	if (rotation_counter < 10) {
 80026a2:	4b92      	ldr	r3, [pc, #584]	; (80028ec <babysitter_SendData+0x25c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	dc08      	bgt.n	80026bc <babysitter_SendData+0x2c>
		sprintf(cadence, "0%d", rotation_counter);
 80026aa:	4b90      	ldr	r3, [pc, #576]	; (80028ec <babysitter_SendData+0x25c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4990      	ldr	r1, [pc, #576]	; (80028f0 <babysitter_SendData+0x260>)
 80026b0:	2308      	movs	r3, #8
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	0018      	movs	r0, r3
 80026b6:	f004 fd3d 	bl	8007134 <siprintf>
 80026ba:	e007      	b.n	80026cc <babysitter_SendData+0x3c>
	}
	else {
		sprintf(cadence, "%02d", rotation_counter);
 80026bc:	4b8b      	ldr	r3, [pc, #556]	; (80028ec <babysitter_SendData+0x25c>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	498c      	ldr	r1, [pc, #560]	; (80028f4 <babysitter_SendData+0x264>)
 80026c2:	2308      	movs	r3, #8
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	0018      	movs	r0, r3
 80026c8:	f004 fd34 	bl	8007134 <siprintf>
	}
	RN4020_sendCadence(&huart1, cadence);
 80026cc:	2308      	movs	r3, #8
 80026ce:	18fa      	adds	r2, r7, r3
 80026d0:	4b89      	ldr	r3, [pc, #548]	; (80028f8 <babysitter_SendData+0x268>)
 80026d2:	0011      	movs	r1, r2
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7ff ff0d 	bl	80024f4 <RN4020_sendCadence>
	babysitter_ret = HAL_I2C_Mem_Read(&hi2c2, BABY_Main_ADDR, rem, I2C_MEMADD_SIZE_8BIT, BABY_data, 2, HAL_MAX_DELAY);
 80026da:	4b88      	ldr	r3, [pc, #544]	; (80028fc <babysitter_SendData+0x26c>)
 80026dc:	8819      	ldrh	r1, [r3, #0]
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <babysitter_SendData+0x270>)
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	251b      	movs	r5, #27
 80026e4:	197c      	adds	r4, r7, r5
 80026e6:	4887      	ldr	r0, [pc, #540]	; (8002904 <babysitter_SendData+0x274>)
 80026e8:	2301      	movs	r3, #1
 80026ea:	425b      	negs	r3, r3
 80026ec:	9302      	str	r3, [sp, #8]
 80026ee:	2302      	movs	r3, #2
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2310      	movs	r3, #16
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2301      	movs	r3, #1
 80026fa:	f001 fc83 	bl	8004004 <HAL_I2C_Mem_Read>
 80026fe:	0003      	movs	r3, r0
 8002700:	7023      	strb	r3, [r4, #0]
	babysitter_ret2 = HAL_I2C_Mem_Read(&hi2c2, BABY_Main_ADDR, full, I2C_MEMADD_SIZE_8BIT, BABY_data2, 2, HAL_MAX_DELAY);
 8002702:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <babysitter_SendData+0x26c>)
 8002704:	8819      	ldrh	r1, [r3, #0]
 8002706:	4b80      	ldr	r3, [pc, #512]	; (8002908 <babysitter_SendData+0x278>)
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	231a      	movs	r3, #26
 800270c:	18fc      	adds	r4, r7, r3
 800270e:	487d      	ldr	r0, [pc, #500]	; (8002904 <babysitter_SendData+0x274>)
 8002710:	2301      	movs	r3, #1
 8002712:	425b      	negs	r3, r3
 8002714:	9302      	str	r3, [sp, #8]
 8002716:	2302      	movs	r3, #2
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	230c      	movs	r3, #12
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	f001 fc6f 	bl	8004004 <HAL_I2C_Mem_Read>
 8002726:	0003      	movs	r3, r0
 8002728:	7023      	strb	r3, [r4, #0]

	if ( babysitter_ret != HAL_OK || babysitter_ret2 != HAL_OK ) {
 800272a:	197b      	adds	r3, r7, r5
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d105      	bne.n	800273e <babysitter_SendData+0xae>
 8002732:	231a      	movs	r3, #26
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d100      	bne.n	800273e <babysitter_SendData+0xae>
 800273c:	e081      	b.n	8002842 <babysitter_SendData+0x1b2>
		babysitter_ret = HAL_I2C_Mem_Read(&hi2c2, BABY_Main_ADDR, rem, I2C_MEMADD_SIZE_8BIT, BABY_data, 2, HAL_MAX_DELAY);
 800273e:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <babysitter_SendData+0x26c>)
 8002740:	8819      	ldrh	r1, [r3, #0]
 8002742:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <babysitter_SendData+0x270>)
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	251b      	movs	r5, #27
 8002748:	197c      	adds	r4, r7, r5
 800274a:	486e      	ldr	r0, [pc, #440]	; (8002904 <babysitter_SendData+0x274>)
 800274c:	2301      	movs	r3, #1
 800274e:	425b      	negs	r3, r3
 8002750:	9302      	str	r3, [sp, #8]
 8002752:	2302      	movs	r3, #2
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	2310      	movs	r3, #16
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2301      	movs	r3, #1
 800275e:	f001 fc51 	bl	8004004 <HAL_I2C_Mem_Read>
 8002762:	0003      	movs	r3, r0
 8002764:	7023      	strb	r3, [r4, #0]
		babysitter_ret2 = HAL_I2C_Mem_Read(&hi2c2, BABY_Main_ADDR, full, I2C_MEMADD_SIZE_8BIT, BABY_data2, 2, HAL_MAX_DELAY);
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <babysitter_SendData+0x26c>)
 8002768:	8819      	ldrh	r1, [r3, #0]
 800276a:	4b67      	ldr	r3, [pc, #412]	; (8002908 <babysitter_SendData+0x278>)
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	231a      	movs	r3, #26
 8002770:	18fc      	adds	r4, r7, r3
 8002772:	4864      	ldr	r0, [pc, #400]	; (8002904 <babysitter_SendData+0x274>)
 8002774:	2301      	movs	r3, #1
 8002776:	425b      	negs	r3, r3
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2302      	movs	r3, #2
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	230c      	movs	r3, #12
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2301      	movs	r3, #1
 8002786:	f001 fc3d 	bl	8004004 <HAL_I2C_Mem_Read>
 800278a:	0003      	movs	r3, r0
 800278c:	7023      	strb	r3, [r4, #0]
		if ( babysitter_ret != HAL_OK || babysitter_ret2 != HAL_OK ) {
 800278e:	197b      	adds	r3, r7, r5
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d000      	beq.n	8002798 <babysitter_SendData+0x108>
 8002796:	e0a3      	b.n	80028e0 <babysitter_SendData+0x250>
 8002798:	231a      	movs	r3, #26
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d000      	beq.n	80027a4 <babysitter_SendData+0x114>
 80027a2:	e09d      	b.n	80028e0 <babysitter_SendData+0x250>
			//HAL_UART_Transmit(&huart1, (uint8_t *) " RECEIVE ERROR\r\n", strlen(" RECEIVE ERROR\r\n"), 100);
		}
		else {
			char integer[4] = {0,0,0,0}; //create an empty string to store number
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
			uint16_t finalval = ((uint16_t) BABY_data[1] << 8) | BABY_data[0];
 80027aa:	2110      	movs	r1, #16
 80027ac:	187b      	adds	r3, r7, r1
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	b21a      	sxth	r2, r3
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b21b      	sxth	r3, r3
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b21a      	sxth	r2, r3
 80027be:	2114      	movs	r1, #20
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	801a      	strh	r2, [r3, #0]
			uint16_t finalval2 = ((uint16_t) BABY_data2[1] << 8) | BABY_data2[0];
 80027c4:	200c      	movs	r0, #12
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	183b      	adds	r3, r7, r0
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	2012      	movs	r0, #18
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	801a      	strh	r2, [r3, #0]
			bigbattery = 100000 * finalval / finalval2;
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	4a4a      	ldr	r2, [pc, #296]	; (800290c <babysitter_SendData+0x27c>)
 80027e4:	435a      	muls	r2, r3
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	0019      	movs	r1, r3
 80027ec:	0010      	movs	r0, r2
 80027ee:	f7fd fd1d 	bl	800022c <__divsi3>
 80027f2:	0003      	movs	r3, r0
 80027f4:	61fb      	str	r3, [r7, #28]

			if ((bigbattery / 1000) < 10) {
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4a45      	ldr	r2, [pc, #276]	; (8002910 <babysitter_SendData+0x280>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	dc0d      	bgt.n	800281a <babysitter_SendData+0x18a>
				sprintf(integer, "0%d", bigbattery / 1000);
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	23fa      	movs	r3, #250	; 0xfa
 8002802:	0099      	lsls	r1, r3, #2
 8002804:	0010      	movs	r0, r2
 8002806:	f7fd fd11 	bl	800022c <__divsi3>
 800280a:	0003      	movs	r3, r0
 800280c:	001a      	movs	r2, r3
 800280e:	4938      	ldr	r1, [pc, #224]	; (80028f0 <babysitter_SendData+0x260>)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	0018      	movs	r0, r3
 8002814:	f004 fc8e 	bl	8007134 <siprintf>
 8002818:	e00c      	b.n	8002834 <babysitter_SendData+0x1a4>
			}
			else {
				sprintf(integer, "%02d", bigbattery / 1000);
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	23fa      	movs	r3, #250	; 0xfa
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	0010      	movs	r0, r2
 8002822:	f7fd fd03 	bl	800022c <__divsi3>
 8002826:	0003      	movs	r3, r0
 8002828:	001a      	movs	r2, r3
 800282a:	4932      	ldr	r1, [pc, #200]	; (80028f4 <babysitter_SendData+0x264>)
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	0018      	movs	r0, r3
 8002830:	f004 fc80 	bl	8007134 <siprintf>
			}

			RN4020_sendBatteryLife(&huart1, integer);
 8002834:	1d3a      	adds	r2, r7, #4
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <babysitter_SendData+0x268>)
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f7ff fe32 	bl	80024a4 <RN4020_sendBatteryLife>
		if ( babysitter_ret != HAL_OK || babysitter_ret2 != HAL_OK ) {
 8002840:	e04e      	b.n	80028e0 <babysitter_SendData+0x250>
		}
	}
	else {
		char integer[4] = {0,0,0,0}; //create an empty string to store number
 8002842:	003b      	movs	r3, r7
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
//		char decimal[4] = {0,0,0,0}; //create an empty string to store number
		uint16_t finalval = ((uint16_t) BABY_data[1] << 8) | BABY_data[0];
 8002848:	2110      	movs	r1, #16
 800284a:	187b      	adds	r3, r7, r1
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	b21a      	sxth	r2, r3
 8002852:	187b      	adds	r3, r7, r1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	b21b      	sxth	r3, r3
 8002858:	4313      	orrs	r3, r2
 800285a:	b21a      	sxth	r2, r3
 800285c:	2118      	movs	r1, #24
 800285e:	187b      	adds	r3, r7, r1
 8002860:	801a      	strh	r2, [r3, #0]
		uint16_t finalval2 = ((uint16_t) BABY_data2[1] << 8) | BABY_data2[0];
 8002862:	200c      	movs	r0, #12
 8002864:	183b      	adds	r3, r7, r0
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	b21a      	sxth	r2, r3
 800286c:	183b      	adds	r3, r7, r0
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b21b      	sxth	r3, r3
 8002872:	4313      	orrs	r3, r2
 8002874:	b21a      	sxth	r2, r3
 8002876:	2016      	movs	r0, #22
 8002878:	183b      	adds	r3, r7, r0
 800287a:	801a      	strh	r2, [r3, #0]
		bigbattery = 100000 * finalval / finalval2;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <babysitter_SendData+0x27c>)
 8002882:	435a      	muls	r2, r3
 8002884:	183b      	adds	r3, r7, r0
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	0019      	movs	r1, r3
 800288a:	0010      	movs	r0, r2
 800288c:	f7fd fcce 	bl	800022c <__divsi3>
 8002890:	0003      	movs	r3, r0
 8002892:	61fb      	str	r3, [r7, #28]

		if ((bigbattery / 1000) < 10) {
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4a1e      	ldr	r2, [pc, #120]	; (8002910 <babysitter_SendData+0x280>)
 8002898:	4293      	cmp	r3, r2
 800289a:	dc0d      	bgt.n	80028b8 <babysitter_SendData+0x228>
			sprintf(integer, "0%d", bigbattery / 1000);
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	23fa      	movs	r3, #250	; 0xfa
 80028a0:	0099      	lsls	r1, r3, #2
 80028a2:	0010      	movs	r0, r2
 80028a4:	f7fd fcc2 	bl	800022c <__divsi3>
 80028a8:	0003      	movs	r3, r0
 80028aa:	001a      	movs	r2, r3
 80028ac:	4910      	ldr	r1, [pc, #64]	; (80028f0 <babysitter_SendData+0x260>)
 80028ae:	003b      	movs	r3, r7
 80028b0:	0018      	movs	r0, r3
 80028b2:	f004 fc3f 	bl	8007134 <siprintf>
 80028b6:	e00c      	b.n	80028d2 <babysitter_SendData+0x242>
		}
		else {
			sprintf(integer, "%02d", bigbattery / 1000);
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	23fa      	movs	r3, #250	; 0xfa
 80028bc:	0099      	lsls	r1, r3, #2
 80028be:	0010      	movs	r0, r2
 80028c0:	f7fd fcb4 	bl	800022c <__divsi3>
 80028c4:	0003      	movs	r3, r0
 80028c6:	001a      	movs	r2, r3
 80028c8:	490a      	ldr	r1, [pc, #40]	; (80028f4 <babysitter_SendData+0x264>)
 80028ca:	003b      	movs	r3, r7
 80028cc:	0018      	movs	r0, r3
 80028ce:	f004 fc31 	bl	8007134 <siprintf>
		}
//		sprintf(decimal, "%03d", bigbattery % 1000);

		RN4020_sendBatteryLife(&huart1, integer);
 80028d2:	003a      	movs	r2, r7
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <babysitter_SendData+0x268>)
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff fde3 	bl	80024a4 <RN4020_sendBatteryLife>
	  }
//	  if (ret == HAL_OK) {
//		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	  }

}
 80028de:	e000      	b.n	80028e2 <babysitter_SendData+0x252>
		if ( babysitter_ret != HAL_OK || babysitter_ret2 != HAL_OK ) {
 80028e0:	46c0      	nop			; (mov r8, r8)
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b008      	add	sp, #32
 80028e8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	200000d4 	.word	0x200000d4
 80028f0:	08008b68 	.word	0x08008b68
 80028f4:	08008b6c 	.word	0x08008b6c
 80028f8:	20000158 	.word	0x20000158
 80028fc:	2000002c 	.word	0x2000002c
 8002900:	2000002e 	.word	0x2000002e
 8002904:	200000f0 	.word	0x200000f0
 8002908:	20000030 	.word	0x20000030
 800290c:	000186a0 	.word	0x000186a0
 8002910:	0000270f 	.word	0x0000270f

08002914 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *)"Success\n\r", strlen("Success\n\r"), 100);
	HAL_UART_Receive_IT(&huart1, rxBuffer, sizeof(rxBuffer));
 800291c:	4904      	ldr	r1, [pc, #16]	; (8002930 <HAL_UART_RxCpltCallback+0x1c>)
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_UART_RxCpltCallback+0x20>)
 8002920:	2201      	movs	r2, #1
 8002922:	0018      	movs	r0, r3
 8002924:	f003 fb58 	bl	8005fd8 <HAL_UART_Receive_IT>
//		HAL_UART_Transmit(&huart1, (uint8_t *)"Fail\n\r", strlen("Fail\n\r"), 100);
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//	}
//    HAL_UART_Receive_IT(&huart1, rxBuffer, sizeof(rxBuffer));
// --------------------------------------------------------------------------------------------
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	b002      	add	sp, #8
 800292e:	bd80      	pop	{r7, pc}
 8002930:	200001e8 	.word	0x200001e8
 8002934:	20000158 	.word	0x20000158

08002938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	b093      	sub	sp, #76	; 0x4c
 800293c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int RN4020_config_ret;

	HAL_StatusTypeDef ICM_ret = HAL_OK;
 800293e:	231f      	movs	r3, #31
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret2 = HAL_OK;
 8002946:	231e      	movs	r3, #30
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret3 = HAL_OK;
 800294e:	231d      	movs	r3, #29
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret4 = HAL_OK;
 8002956:	231c      	movs	r3, #28
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret5 = HAL_OK;
 800295e:	231b      	movs	r3, #27
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ICM_ret6 = HAL_OK;
 8002966:	231a      	movs	r3, #26
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]

	uint8_t deviceID;
	uint8_t pwr1 = 0x80;
 800296e:	1dbb      	adds	r3, r7, #6
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	701a      	strb	r2, [r3, #0]
	uint8_t pwr1_2 = 0x01;
 8002974:	1d7b      	adds	r3, r7, #5
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
	uint8_t rtDiv = 0x00;
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
	uint8_t accelConfig = 0x18;
 8002980:	1cfb      	adds	r3, r7, #3
 8002982:	2218      	movs	r2, #24
 8002984:	701a      	strb	r2, [r3, #0]
	uint8_t accelConfig2 = 0x03;
 8002986:	1cbb      	adds	r3, r7, #2
 8002988:	2203      	movs	r2, #3
 800298a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800298c:	f000 fdd0 	bl	8003530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002990:	f000 fac0 	bl	8002f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002994:	f000 fbec 	bl	8003170 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002998:	f000 fbba 	bl	8003110 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800299c:	f000 fb62 	bl	8003064 <MX_TIM2_Init>
  MX_I2C2_Init();
 80029a0:	f000 fb20 	bl	8002fe4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  RCC -> IOPENR |= RCC_IOPENR_IOPBEN | RCC_IOPENR_IOPAEN;
 80029a4:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <main+0x22c>)
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	4b6e      	ldr	r3, [pc, #440]	; (8002b64 <main+0x22c>)
 80029aa:	2103      	movs	r1, #3
 80029ac:	430a      	orrs	r2, r1
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Set PA5 pin off
 80029b0:	23a0      	movs	r3, #160	; 0xa0
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	2200      	movs	r2, #0
 80029b6:	2120      	movs	r1, #32
 80029b8:	0018      	movs	r0, r3
 80029ba:	f001 f927 	bl	8003c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029be:	23a0      	movs	r3, #160	; 0xa0
 80029c0:	05db      	lsls	r3, r3, #23
 80029c2:	2201      	movs	r2, #1
 80029c4:	2110      	movs	r1, #16
 80029c6:	0018      	movs	r0, r3
 80029c8:	f001 f920 	bl	8003c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80029cc:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <main+0x230>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	2110      	movs	r1, #16
 80029d2:	0018      	movs	r0, r3
 80029d4:	f001 f91a 	bl	8003c0c <HAL_GPIO_WritePin>


//==================================================================================
//	Bluetooth LE Configuration Step
//==================================================================================
  HAL_UART_Receive_IT(&huart1, rxBuffer, sizeof(rxBuffer));
 80029d8:	4964      	ldr	r1, [pc, #400]	; (8002b6c <main+0x234>)
 80029da:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <main+0x238>)
 80029dc:	2201      	movs	r2, #1
 80029de:	0018      	movs	r0, r3
 80029e0:	f003 fafa 	bl	8005fd8 <HAL_UART_Receive_IT>
  RN4020_config_ret = RN4020_resetDefaultStep(&huart1);
 80029e4:	4b62      	ldr	r3, [pc, #392]	; (8002b70 <main+0x238>)
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff fbe1 	bl	80021ae <RN4020_resetDefaultStep>
 80029ec:	0003      	movs	r3, r0
 80029ee:	617b      	str	r3, [r7, #20]
  if (RN4020_config_ret == TRUE) {
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d106      	bne.n	8002a04 <main+0xcc>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80029f6:	23a0      	movs	r3, #160	; 0xa0
 80029f8:	05db      	lsls	r3, r3, #23
 80029fa:	2201      	movs	r2, #1
 80029fc:	2120      	movs	r1, #32
 80029fe:	0018      	movs	r0, r3
 8002a00:	f001 f904 	bl	8003c0c <HAL_GPIO_WritePin>
  }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002a04:	23a0      	movs	r3, #160	; 0xa0
 8002a06:	05db      	lsls	r3, r3, #23
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2120      	movs	r1, #32
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f001 f8fd 	bl	8003c0c <HAL_GPIO_WritePin>
//==================================================================================
//==================================================================================
//	ICM-20602 Configuration Step
//==================================================================================
  // read who_am_i
  ICM_ret = HAL_I2C_Mem_Read(&hi2c2, ICM_Main_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &deviceID, 1, HAL_MAX_DELAY);
 8002a12:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <main+0x23c>)
 8002a14:	8819      	ldrh	r1, [r3, #0]
 8002a16:	251f      	movs	r5, #31
 8002a18:	197c      	adds	r4, r7, r5
 8002a1a:	4857      	ldr	r0, [pc, #348]	; (8002b78 <main+0x240>)
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	425b      	negs	r3, r3
 8002a20:	9302      	str	r3, [sp, #8]
 8002a22:	2301      	movs	r3, #1
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	1dfb      	adds	r3, r7, #7
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	2275      	movs	r2, #117	; 0x75
 8002a2e:	f001 fae9 	bl	8004004 <HAL_I2C_Mem_Read>
 8002a32:	0003      	movs	r3, r0
 8002a34:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002a36:	2019      	movs	r0, #25
 8002a38:	f000 fdea 	bl	8003610 <HAL_Delay>

  // reset IMU
  ICM_ret2 = HAL_I2C_Mem_Write(&hi2c2, ICM_Main_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &pwr1, 1, HAL_MAX_DELAY);
 8002a3c:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <main+0x23c>)
 8002a3e:	8819      	ldrh	r1, [r3, #0]
 8002a40:	231e      	movs	r3, #30
 8002a42:	18fc      	adds	r4, r7, r3
 8002a44:	484c      	ldr	r0, [pc, #304]	; (8002b78 <main+0x240>)
 8002a46:	2301      	movs	r3, #1
 8002a48:	425b      	negs	r3, r3
 8002a4a:	9302      	str	r3, [sp, #8]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	1dbb      	adds	r3, r7, #6
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2301      	movs	r3, #1
 8002a56:	226b      	movs	r2, #107	; 0x6b
 8002a58:	f001 f9a6 	bl	8003da8 <HAL_I2C_Mem_Write>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002a60:	2019      	movs	r0, #25
 8002a62:	f000 fdd5 	bl	8003610 <HAL_Delay>

  // enable temperature sensor and SELECTS the clock source
  ICM_ret3 = HAL_I2C_Mem_Write(&hi2c2, ICM_Main_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &pwr1_2, 1, HAL_MAX_DELAY);
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <main+0x23c>)
 8002a68:	8819      	ldrh	r1, [r3, #0]
 8002a6a:	231d      	movs	r3, #29
 8002a6c:	18fc      	adds	r4, r7, r3
 8002a6e:	4842      	ldr	r0, [pc, #264]	; (8002b78 <main+0x240>)
 8002a70:	2301      	movs	r3, #1
 8002a72:	425b      	negs	r3, r3
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	2301      	movs	r3, #1
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	1d7b      	adds	r3, r7, #5
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2301      	movs	r3, #1
 8002a80:	226b      	movs	r2, #107	; 0x6b
 8002a82:	f001 f991 	bl	8003da8 <HAL_I2C_Mem_Write>
 8002a86:	0003      	movs	r3, r0
 8002a88:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002a8a:	2019      	movs	r0, #25
 8002a8c:	f000 fdc0 	bl	8003610 <HAL_Delay>
  temp_sens = 326.8;
 8002a90:	4a3a      	ldr	r2, [pc, #232]	; (8002b7c <main+0x244>)
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <main+0x248>)
 8002a94:	4c3b      	ldr	r4, [pc, #236]	; (8002b84 <main+0x24c>)
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	6054      	str	r4, [r2, #4]

  // set sample rate to 1kHz and apply
  ICM_ret4 = HAL_I2C_Mem_Write(&hi2c2, ICM_Main_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &rtDiv, 1, HAL_MAX_DELAY);
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <main+0x23c>)
 8002a9c:	8819      	ldrh	r1, [r3, #0]
 8002a9e:	231c      	movs	r3, #28
 8002aa0:	18fc      	adds	r4, r7, r3
 8002aa2:	4835      	ldr	r0, [pc, #212]	; (8002b78 <main+0x240>)
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	425b      	negs	r3, r3
 8002aa8:	9302      	str	r3, [sp, #8]
 8002aaa:	2301      	movs	r3, #1
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	2219      	movs	r2, #25
 8002ab6:	f001 f977 	bl	8003da8 <HAL_I2C_Mem_Write>
 8002aba:	0003      	movs	r3, r0
 8002abc:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002abe:	2019      	movs	r0, #25
 8002ac0:	f000 fda6 	bl	8003610 <HAL_Delay>

  // accel full-scale range = 16g(0b11) -- sensitivity scale factor = 2,048 LSB/(dps)
  ICM_ret5 = HAL_I2C_Mem_Write(&hi2c2, ICM_Main_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &accelConfig, 1, HAL_MAX_DELAY); // ACCEL full-scale range = 16g -- sensitivity scale facotr = 2,048 LSB/(dps)
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <main+0x23c>)
 8002ac6:	8819      	ldrh	r1, [r3, #0]
 8002ac8:	231b      	movs	r3, #27
 8002aca:	18fc      	adds	r4, r7, r3
 8002acc:	482a      	ldr	r0, [pc, #168]	; (8002b78 <main+0x240>)
 8002ace:	2301      	movs	r3, #1
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	9302      	str	r3, [sp, #8]
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	1cfb      	adds	r3, r7, #3
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2301      	movs	r3, #1
 8002ade:	221c      	movs	r2, #28
 8002ae0:	f001 f962 	bl	8003da8 <HAL_I2C_Mem_Write>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002ae8:	2019      	movs	r0, #25
 8002aea:	f000 fd91 	bl	8003610 <HAL_Delay>
  accel_sens = 2048.0;
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <main+0x250>)
 8002af0:	2300      	movs	r3, #0
 8002af2:	4c26      	ldr	r4, [pc, #152]	; (8002b8c <main+0x254>)
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	6054      	str	r4, [r2, #4]

  // set A_DLPF_CFG to 3 for accel configuration
  ICM_ret6 = HAL_I2C_Mem_Write(&hi2c2, ICM_Main_ADDR, ACCEL_CONFIG2, I2C_MEMADD_SIZE_8BIT, &accelConfig2, 1, HAL_MAX_DELAY); // ACCEL FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <main+0x23c>)
 8002afa:	8819      	ldrh	r1, [r3, #0]
 8002afc:	231a      	movs	r3, #26
 8002afe:	18fc      	adds	r4, r7, r3
 8002b00:	481d      	ldr	r0, [pc, #116]	; (8002b78 <main+0x240>)
 8002b02:	2301      	movs	r3, #1
 8002b04:	425b      	negs	r3, r3
 8002b06:	9302      	str	r3, [sp, #8]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	1cbb      	adds	r3, r7, #2
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2301      	movs	r3, #1
 8002b12:	221d      	movs	r2, #29
 8002b14:	f001 f948 	bl	8003da8 <HAL_I2C_Mem_Write>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	7023      	strb	r3, [r4, #0]
  HAL_Delay(25);
 8002b1c:	2019      	movs	r0, #25
 8002b1e:	f000 fd77 	bl	8003610 <HAL_Delay>
  if (ICM_ret == HAL_OK && ICM_ret2 == HAL_OK && ICM_ret3 != HAL_OK && ICM_ret4 != HAL_OK && ICM_ret5 != HAL_OK && ICM_ret6 != HAL_OK)
 8002b22:	197b      	adds	r3, r7, r5
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d132      	bne.n	8002b90 <main+0x258>
 8002b2a:	231e      	movs	r3, #30
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d12d      	bne.n	8002b90 <main+0x258>
 8002b34:	231d      	movs	r3, #29
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <main+0x258>
 8002b3e:	231c      	movs	r3, #28
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d023      	beq.n	8002b90 <main+0x258>
 8002b48:	231b      	movs	r3, #27
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01e      	beq.n	8002b90 <main+0x258>
 8002b52:	231a      	movs	r3, #26
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d019      	beq.n	8002b90 <main+0x258>
  {
	  return -1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	425b      	negs	r3, r3
 8002b60:	e1a9      	b.n	8002eb6 <main+0x57e>
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40021000 	.word	0x40021000
 8002b68:	50000400 	.word	0x50000400
 8002b6c:	200001e8 	.word	0x200001e8
 8002b70:	20000158 	.word	0x20000158
 8002b74:	20000000 	.word	0x20000000
 8002b78:	200000f0 	.word	0x200000f0
 8002b7c:	20000140 	.word	0x20000140
 8002b80:	cccccccd 	.word	0xcccccccd
 8002b84:	40746ccc 	.word	0x40746ccc
 8002b88:	20000150 	.word	0x20000150
 8002b8c:	40a00000 	.word	0x40a00000
  }
//==================================================================================
//	Start TIMER2 Step (function @ HAL_TIM_PeriodElapsedCallback)
//==================================================================================
  HAL_TIM_Base_Start_IT(&htim2);
 8002b90:	4bcb      	ldr	r3, [pc, #812]	; (8002ec0 <main+0x588>)
 8002b92:	0018      	movs	r0, r3
 8002b94:	f002 fdcc 	bl	8005730 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int IMU_avgCounter = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
	int IMU_postCounter = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
	double IMU_sum = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2400      	movs	r4, #0
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba6:	62fc      	str	r4, [r7, #44]	; 0x2c
	double curr_value = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2400      	movs	r4, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	60fc      	str	r4, [r7, #12]
	double prev_value = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2400      	movs	r4, #0
 8002bb4:	623b      	str	r3, [r7, #32]
 8002bb6:	627c      	str	r4, [r7, #36]	; 0x24
	while (1)
	{
		//Only UART Channel 1 works for Discovery board... PB6/PB7

		//Collect IMU acceleration data
		ICM_ret = HAL_I2C_Mem_Read(&hi2c2, ICM_Main_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, sizeof(data)/sizeof(uint8_t), HAL_MAX_DELAY);
 8002bb8:	4bc2      	ldr	r3, [pc, #776]	; (8002ec4 <main+0x58c>)
 8002bba:	8819      	ldrh	r1, [r3, #0]
 8002bbc:	231f      	movs	r3, #31
 8002bbe:	18fc      	adds	r4, r7, r3
 8002bc0:	48c1      	ldr	r0, [pc, #772]	; (8002ec8 <main+0x590>)
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	425b      	negs	r3, r3
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	2306      	movs	r3, #6
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	4bbf      	ldr	r3, [pc, #764]	; (8002ecc <main+0x594>)
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	223b      	movs	r2, #59	; 0x3b
 8002bd4:	f001 fa16 	bl	8004004 <HAL_I2C_Mem_Read>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	7023      	strb	r3, [r4, #0]
		//HAL_Delay(25);
		if ((data[0] & 0x80) != 0){
 8002bdc:	4bbb      	ldr	r3, [pc, #748]	; (8002ecc <main+0x594>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da0a      	bge.n	8002bfc <main+0x2c4>
			accX = -1;
 8002be6:	4aba      	ldr	r2, [pc, #744]	; (8002ed0 <main+0x598>)
 8002be8:	2300      	movs	r3, #0
 8002bea:	4cba      	ldr	r4, [pc, #744]	; (8002ed4 <main+0x59c>)
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	6054      	str	r4, [r2, #4]
			data[0] = (data[0] ^ 0xFF) + 1;
 8002bf0:	4bb6      	ldr	r3, [pc, #728]	; (8002ecc <main+0x594>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4bb4      	ldr	r3, [pc, #720]	; (8002ecc <main+0x594>)
 8002bfa:	701a      	strb	r2, [r3, #0]
		}
		if ((data[2] & 0x80) != 0){
 8002bfc:	4bb3      	ldr	r3, [pc, #716]	; (8002ecc <main+0x594>)
 8002bfe:	789b      	ldrb	r3, [r3, #2]
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	da0a      	bge.n	8002c1c <main+0x2e4>
			accY = -1;
 8002c06:	4ab4      	ldr	r2, [pc, #720]	; (8002ed8 <main+0x5a0>)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	4cb2      	ldr	r4, [pc, #712]	; (8002ed4 <main+0x59c>)
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	6054      	str	r4, [r2, #4]
			data[2] = (data[2] ^ 0xFF) + 1;
 8002c10:	4bae      	ldr	r3, [pc, #696]	; (8002ecc <main+0x594>)
 8002c12:	789b      	ldrb	r3, [r3, #2]
 8002c14:	425b      	negs	r3, r3
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	4bac      	ldr	r3, [pc, #688]	; (8002ecc <main+0x594>)
 8002c1a:	709a      	strb	r2, [r3, #2]
		}
		if ((data[4] & 0x80) != 0){
 8002c1c:	4bab      	ldr	r3, [pc, #684]	; (8002ecc <main+0x594>)
 8002c1e:	791b      	ldrb	r3, [r3, #4]
 8002c20:	b25b      	sxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da0a      	bge.n	8002c3c <main+0x304>
			accZ = -1;
 8002c26:	4aad      	ldr	r2, [pc, #692]	; (8002edc <main+0x5a4>)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	4caa      	ldr	r4, [pc, #680]	; (8002ed4 <main+0x59c>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	6054      	str	r4, [r2, #4]
			data[4] = (data[4] ^ 0xFF) + 1;
 8002c30:	4ba6      	ldr	r3, [pc, #664]	; (8002ecc <main+0x594>)
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	425b      	negs	r3, r3
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4ba4      	ldr	r3, [pc, #656]	; (8002ecc <main+0x594>)
 8002c3a:	711a      	strb	r2, [r3, #4]
		}
		accXraw = (uint16_t) (data[0] << 8 | data[1]);
 8002c3c:	4ba3      	ldr	r3, [pc, #652]	; (8002ecc <main+0x594>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	b21a      	sxth	r2, r3
 8002c44:	4ba1      	ldr	r3, [pc, #644]	; (8002ecc <main+0x594>)
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	b21b      	sxth	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b21b      	sxth	r3, r3
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	4ba3      	ldr	r3, [pc, #652]	; (8002ee0 <main+0x5a8>)
 8002c52:	801a      	strh	r2, [r3, #0]
		accYraw = (uint16_t) (data[2] << 8 | data[3]);
 8002c54:	4b9d      	ldr	r3, [pc, #628]	; (8002ecc <main+0x594>)
 8002c56:	789b      	ldrb	r3, [r3, #2]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	b21a      	sxth	r2, r3
 8002c5c:	4b9b      	ldr	r3, [pc, #620]	; (8002ecc <main+0x594>)
 8002c5e:	78db      	ldrb	r3, [r3, #3]
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	b21b      	sxth	r3, r3
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b9e      	ldr	r3, [pc, #632]	; (8002ee4 <main+0x5ac>)
 8002c6a:	801a      	strh	r2, [r3, #0]
		accZraw = (uint16_t) (data[4] << 8 | data[5]);
 8002c6c:	4b97      	ldr	r3, [pc, #604]	; (8002ecc <main+0x594>)
 8002c6e:	791b      	ldrb	r3, [r3, #4]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	4b95      	ldr	r3, [pc, #596]	; (8002ecc <main+0x594>)
 8002c76:	795b      	ldrb	r3, [r3, #5]
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	4b99      	ldr	r3, [pc, #612]	; (8002ee8 <main+0x5b0>)
 8002c82:	801a      	strh	r2, [r3, #0]
		accX *= accXraw / accel_sens;
 8002c84:	4b96      	ldr	r3, [pc, #600]	; (8002ee0 <main+0x5a8>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff fa01 	bl	8002090 <__aeabi_i2d>
 8002c8e:	4b97      	ldr	r3, [pc, #604]	; (8002eec <main+0x5b4>)
 8002c90:	685c      	ldr	r4, [r3, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	001a      	movs	r2, r3
 8002c96:	0023      	movs	r3, r4
 8002c98:	f7fe f81a 	bl	8000cd0 <__aeabi_ddiv>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	000c      	movs	r4, r1
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	0021      	movs	r1, r4
 8002ca4:	4b8a      	ldr	r3, [pc, #552]	; (8002ed0 <main+0x598>)
 8002ca6:	685c      	ldr	r4, [r3, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	001a      	movs	r2, r3
 8002cac:	0023      	movs	r3, r4
 8002cae:	f7fe fc19 	bl	80014e4 <__aeabi_dmul>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	000c      	movs	r4, r1
 8002cb6:	4a86      	ldr	r2, [pc, #536]	; (8002ed0 <main+0x598>)
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	6054      	str	r4, [r2, #4]
		accY *= accYraw / accel_sens;
 8002cbc:	4b89      	ldr	r3, [pc, #548]	; (8002ee4 <main+0x5ac>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff f9e5 	bl	8002090 <__aeabi_i2d>
 8002cc6:	4b89      	ldr	r3, [pc, #548]	; (8002eec <main+0x5b4>)
 8002cc8:	685c      	ldr	r4, [r3, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	001a      	movs	r2, r3
 8002cce:	0023      	movs	r3, r4
 8002cd0:	f7fd fffe 	bl	8000cd0 <__aeabi_ddiv>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	000c      	movs	r4, r1
 8002cd8:	0018      	movs	r0, r3
 8002cda:	0021      	movs	r1, r4
 8002cdc:	4b7e      	ldr	r3, [pc, #504]	; (8002ed8 <main+0x5a0>)
 8002cde:	685c      	ldr	r4, [r3, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	0023      	movs	r3, r4
 8002ce6:	f7fe fbfd 	bl	80014e4 <__aeabi_dmul>
 8002cea:	0003      	movs	r3, r0
 8002cec:	000c      	movs	r4, r1
 8002cee:	4a7a      	ldr	r2, [pc, #488]	; (8002ed8 <main+0x5a0>)
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	6054      	str	r4, [r2, #4]
		accZ *= accZraw / accel_sens;
 8002cf4:	4b7c      	ldr	r3, [pc, #496]	; (8002ee8 <main+0x5b0>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff f9c9 	bl	8002090 <__aeabi_i2d>
 8002cfe:	4b7b      	ldr	r3, [pc, #492]	; (8002eec <main+0x5b4>)
 8002d00:	685c      	ldr	r4, [r3, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	001a      	movs	r2, r3
 8002d06:	0023      	movs	r3, r4
 8002d08:	f7fd ffe2 	bl	8000cd0 <__aeabi_ddiv>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	000c      	movs	r4, r1
 8002d10:	0018      	movs	r0, r3
 8002d12:	0021      	movs	r1, r4
 8002d14:	4b71      	ldr	r3, [pc, #452]	; (8002edc <main+0x5a4>)
 8002d16:	685c      	ldr	r4, [r3, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	0023      	movs	r3, r4
 8002d1e:	f7fe fbe1 	bl	80014e4 <__aeabi_dmul>
 8002d22:	0003      	movs	r3, r0
 8002d24:	000c      	movs	r4, r1
 8002d26:	4a6d      	ldr	r2, [pc, #436]	; (8002edc <main+0x5a4>)
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	6054      	str	r4, [r2, #4]
		mag = sqrt((pow(accX, 2) + pow(accY, 2) + pow(accZ, 2)));
 8002d2c:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <main+0x598>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	2300      	movs	r3, #0
 8002d34:	2480      	movs	r4, #128	; 0x80
 8002d36:	05e4      	lsls	r4, r4, #23
 8002d38:	001a      	movs	r2, r3
 8002d3a:	0023      	movs	r3, r4
 8002d3c:	f004 fe02 	bl	8007944 <pow>
 8002d40:	0005      	movs	r5, r0
 8002d42:	000e      	movs	r6, r1
 8002d44:	4b64      	ldr	r3, [pc, #400]	; (8002ed8 <main+0x5a0>)
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2480      	movs	r4, #128	; 0x80
 8002d4e:	05e4      	lsls	r4, r4, #23
 8002d50:	001a      	movs	r2, r3
 8002d52:	0023      	movs	r3, r4
 8002d54:	f004 fdf6 	bl	8007944 <pow>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	000c      	movs	r4, r1
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	0023      	movs	r3, r4
 8002d60:	0028      	movs	r0, r5
 8002d62:	0031      	movs	r1, r6
 8002d64:	f7fd fc98 	bl	8000698 <__aeabi_dadd>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	000c      	movs	r4, r1
 8002d6c:	001d      	movs	r5, r3
 8002d6e:	0026      	movs	r6, r4
 8002d70:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <main+0x5a4>)
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	2300      	movs	r3, #0
 8002d78:	2480      	movs	r4, #128	; 0x80
 8002d7a:	05e4      	lsls	r4, r4, #23
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	0023      	movs	r3, r4
 8002d80:	f004 fde0 	bl	8007944 <pow>
 8002d84:	0003      	movs	r3, r0
 8002d86:	000c      	movs	r4, r1
 8002d88:	001a      	movs	r2, r3
 8002d8a:	0023      	movs	r3, r4
 8002d8c:	0028      	movs	r0, r5
 8002d8e:	0031      	movs	r1, r6
 8002d90:	f7fd fc82 	bl	8000698 <__aeabi_dadd>
 8002d94:	0003      	movs	r3, r0
 8002d96:	000c      	movs	r4, r1
 8002d98:	0018      	movs	r0, r3
 8002d9a:	0021      	movs	r1, r4
 8002d9c:	f004 ff68 	bl	8007c70 <sqrt>
 8002da0:	0003      	movs	r3, r0
 8002da2:	000c      	movs	r4, r1
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <main+0x5b8>)
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	6054      	str	r4, [r2, #4]

		accX = 1;
 8002daa:	4a49      	ldr	r2, [pc, #292]	; (8002ed0 <main+0x598>)
 8002dac:	2300      	movs	r3, #0
 8002dae:	4c51      	ldr	r4, [pc, #324]	; (8002ef4 <main+0x5bc>)
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	6054      	str	r4, [r2, #4]
		accY = 1;
 8002db4:	4a48      	ldr	r2, [pc, #288]	; (8002ed8 <main+0x5a0>)
 8002db6:	2300      	movs	r3, #0
 8002db8:	4c4e      	ldr	r4, [pc, #312]	; (8002ef4 <main+0x5bc>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	6054      	str	r4, [r2, #4]
		accZ = 1;
 8002dbe:	4a47      	ldr	r2, [pc, #284]	; (8002edc <main+0x5a4>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	4c4c      	ldr	r4, [pc, #304]	; (8002ef4 <main+0x5bc>)
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	6054      	str	r4, [r2, #4]

		IMU_sum = IMU_sum + mag;
 8002dc8:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <main+0x5b8>)
 8002dca:	685c      	ldr	r4, [r3, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	001a      	movs	r2, r3
 8002dd0:	0023      	movs	r3, r4
 8002dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dd6:	f7fd fc5f 	bl	8000698 <__aeabi_dadd>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	000c      	movs	r4, r1
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de0:	62fc      	str	r4, [r7, #44]	; 0x2c
		if(IMU_avgCounter == 99) {
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	2b63      	cmp	r3, #99	; 0x63
 8002de6:	d162      	bne.n	8002eae <main+0x576>
			curr_value = IMU_sum / 100;
 8002de8:	2200      	movs	r2, #0
 8002dea:	4b43      	ldr	r3, [pc, #268]	; (8002ef8 <main+0x5c0>)
 8002dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df0:	f7fd ff6e 	bl	8000cd0 <__aeabi_ddiv>
 8002df4:	0003      	movs	r3, r0
 8002df6:	000c      	movs	r4, r1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	60fc      	str	r4, [r7, #12]
			IMU_avgCounter = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
			IMU_sum = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	2400      	movs	r4, #0
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e06:	62fc      	str	r4, [r7, #44]	; 0x2c

			if(IMU_postCounter != 0) {
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d021      	beq.n	8002e52 <main+0x51a>
				prev_increasing = increasing;
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <main+0x5c4>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <main+0x5c8>)
 8002e14:	601a      	str	r2, [r3, #0]
				prev_decreasing = decreasing;
 8002e16:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <main+0x5cc>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <main+0x5d0>)
 8002e1c:	601a      	str	r2, [r3, #0]
				if(curr_value > prev_value) {
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	68b8      	ldr	r0, [r7, #8]
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	f7fd fb17 	bl	8000458 <__aeabi_dcmpgt>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d006      	beq.n	8002e3c <main+0x504>
					increasing = 1;
 8002e2e:	4b33      	ldr	r3, [pc, #204]	; (8002efc <main+0x5c4>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
					decreasing = 0;
 8002e34:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <main+0x5cc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e005      	b.n	8002e48 <main+0x510>
				}
				else {
					increasing = 0;
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <main+0x5c4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
					decreasing = 1;
 8002e42:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <main+0x5cc>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
				}
				prev_value = curr_value;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	68fc      	ldr	r4, [r7, #12]
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	627c      	str	r4, [r7, #36]	; 0x24
 8002e50:	e003      	b.n	8002e5a <main+0x522>
			}
			else {
				prev_value = curr_value;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	68fc      	ldr	r4, [r7, #12]
 8002e56:	623b      	str	r3, [r7, #32]
 8002e58:	627c      	str	r4, [r7, #36]	; 0x24
			}
			if(prev_decreasing && increasing) {
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <main+0x5d0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <main+0x53c>
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <main+0x5c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <main+0x53c>
				//rotation phase 1
				rotate++;
 8002e6a:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <main+0x5d4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <main+0x5d4>)
 8002e72:	601a      	str	r2, [r3, #0]
			}
			if(prev_increasing && decreasing) {
 8002e74:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <main+0x5c8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <main+0x556>
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <main+0x5cc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <main+0x556>
				//rotation phase 2
				rotate++;
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <main+0x5d4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <main+0x5d4>)
 8002e8c:	601a      	str	r2, [r3, #0]
			}
			if(rotate == 2) {
 8002e8e:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <main+0x5d4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d107      	bne.n	8002ea6 <main+0x56e>
				rotate = 0;
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <main+0x5d4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
				rotation_counter++;
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <main+0x5d8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <main+0x5d8>)
 8002ea4:	601a      	str	r2, [r3, #0]
			}
			IMU_postCounter++;
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8002eac:	e684      	b.n	8002bb8 <main+0x280>
		}
		else {
			IMU_avgCounter++;
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
		ICM_ret = HAL_I2C_Mem_Read(&hi2c2, ICM_Main_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, sizeof(data)/sizeof(uint8_t), HAL_MAX_DELAY);
 8002eb4:	e680      	b.n	8002bb8 <main+0x280>

    /* USER CODE BEGIN 3 */

	}
  /* USER CODE END 3 */
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b00f      	add	sp, #60	; 0x3c
 8002ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	200001ec 	.word	0x200001ec
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	200000f0 	.word	0x200000f0
 8002ecc:	200001e0 	.word	0x200001e0
 8002ed0:	20000008 	.word	0x20000008
 8002ed4:	bff00000 	.word	0xbff00000
 8002ed8:	20000010 	.word	0x20000010
 8002edc:	20000018 	.word	0x20000018
 8002ee0:	200000ea 	.word	0x200000ea
 8002ee4:	200001ea 	.word	0x200001ea
 8002ee8:	20000238 	.word	0x20000238
 8002eec:	20000150 	.word	0x20000150
 8002ef0:	20000230 	.word	0x20000230
 8002ef4:	3ff00000 	.word	0x3ff00000
 8002ef8:	40590000 	.word	0x40590000
 8002efc:	200000c4 	.word	0x200000c4
 8002f00:	200000cc 	.word	0x200000cc
 8002f04:	200000c8 	.word	0x200000c8
 8002f08:	200000d0 	.word	0x200000d0
 8002f0c:	200000d8 	.word	0x200000d8
 8002f10:	200000d4 	.word	0x200000d4

08002f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b09d      	sub	sp, #116	; 0x74
 8002f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f1a:	2438      	movs	r4, #56	; 0x38
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	0018      	movs	r0, r3
 8002f20:	2338      	movs	r3, #56	; 0x38
 8002f22:	001a      	movs	r2, r3
 8002f24:	2100      	movs	r1, #0
 8002f26:	f004 f8fd 	bl	8007124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f2a:	2324      	movs	r3, #36	; 0x24
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	0018      	movs	r0, r3
 8002f30:	2314      	movs	r3, #20
 8002f32:	001a      	movs	r2, r3
 8002f34:	2100      	movs	r1, #0
 8002f36:	f004 f8f5 	bl	8007124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f3a:	003b      	movs	r3, r7
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	2324      	movs	r3, #36	; 0x24
 8002f40:	001a      	movs	r2, r3
 8002f42:	2100      	movs	r1, #0
 8002f44:	f004 f8ee 	bl	8007124 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f48:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <SystemClock_Config+0xc8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <SystemClock_Config+0xcc>)
 8002f4e:	401a      	ands	r2, r3
 8002f50:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <SystemClock_Config+0xc8>)
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	0109      	lsls	r1, r1, #4
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f5a:	0021      	movs	r1, r4
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2202      	movs	r2, #2
 8002f60:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	2201      	movs	r2, #1
 8002f66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f68:	187b      	adds	r3, r7, r1
 8002f6a:	2210      	movs	r2, #16
 8002f6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	2200      	movs	r2, #0
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	0018      	movs	r0, r3
 8002f78:	f001 fc4e 	bl	8004818 <HAL_RCC_OscConfig>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002f80:	f000 f978 	bl	8003274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f84:	2124      	movs	r1, #36	; 0x24
 8002f86:	187b      	adds	r3, r7, r1
 8002f88:	220f      	movs	r2, #15
 8002f8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	2201      	movs	r2, #1
 8002f90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8002f92:	187b      	adds	r3, r7, r1
 8002f94:	22a0      	movs	r2, #160	; 0xa0
 8002f96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f001 fffd 	bl	8004fa8 <HAL_RCC_ClockConfig>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d001      	beq.n	8002fb6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002fb2:	f000 f95f 	bl	8003274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fb6:	003b      	movs	r3, r7
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fbc:	003b      	movs	r3, r7
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fc2:	003b      	movs	r3, r7
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f002 fa0f 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8002fca:	1e03      	subs	r3, r0, #0
 8002fcc:	d001      	beq.n	8002fd2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002fce:	f000 f951 	bl	8003274 <Error_Handler>
  }
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b01d      	add	sp, #116	; 0x74
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	ffffe7ff 	.word	0xffffe7ff

08002fe4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <MX_I2C2_Init+0x74>)
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <MX_I2C2_Init+0x78>)
 8002fec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000509;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <MX_I2C2_Init+0x74>)
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <MX_I2C2_Init+0x7c>)
 8002ff2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <MX_I2C2_Init+0x74>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <MX_I2C2_Init+0x74>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <MX_I2C2_Init+0x74>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_I2C2_Init+0x74>)
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <MX_I2C2_Init+0x74>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_I2C2_Init+0x74>)
 8003014:	2200      	movs	r2, #0
 8003016:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_I2C2_Init+0x74>)
 800301a:	2200      	movs	r2, #0
 800301c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_I2C2_Init+0x74>)
 8003020:	0018      	movs	r0, r3
 8003022:	f000 fe2b 	bl	8003c7c <HAL_I2C_Init>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d001      	beq.n	800302e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800302a:	f000 f923 	bl	8003274 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <MX_I2C2_Init+0x74>)
 8003030:	2100      	movs	r1, #0
 8003032:	0018      	movs	r0, r3
 8003034:	f001 fb58 	bl	80046e8 <HAL_I2CEx_ConfigAnalogFilter>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d001      	beq.n	8003040 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800303c:	f000 f91a 	bl	8003274 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <MX_I2C2_Init+0x74>)
 8003042:	2100      	movs	r1, #0
 8003044:	0018      	movs	r0, r3
 8003046:	f001 fb9b 	bl	8004780 <HAL_I2CEx_ConfigDigitalFilter>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d001      	beq.n	8003052 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800304e:	f000 f911 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200000f0 	.word	0x200000f0
 800305c:	40005800 	.word	0x40005800
 8003060:	00000509 	.word	0x00000509

08003064 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306a:	2308      	movs	r3, #8
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	0018      	movs	r0, r3
 8003070:	2310      	movs	r3, #16
 8003072:	001a      	movs	r2, r3
 8003074:	2100      	movs	r1, #0
 8003076:	f004 f855 	bl	8007124 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800307a:	003b      	movs	r3, r7
 800307c:	0018      	movs	r0, r3
 800307e:	2308      	movs	r3, #8
 8003080:	001a      	movs	r2, r3
 8003082:	2100      	movs	r1, #0
 8003084:	f004 f84e 	bl	8007124 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <MX_TIM2_Init+0xa0>)
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	05d2      	lsls	r2, r2, #23
 800308e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 8003090:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <MX_TIM2_Init+0xa0>)
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <MX_TIM2_Init+0xa4>)
 8003094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003096:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <MX_TIM2_Init+0xa0>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500-1;
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <MX_TIM2_Init+0xa0>)
 800309e:	4a1b      	ldr	r2, [pc, #108]	; (800310c <MX_TIM2_Init+0xa8>)
 80030a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <MX_TIM2_Init+0xa0>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <MX_TIM2_Init+0xa0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <MX_TIM2_Init+0xa0>)
 80030b0:	0018      	movs	r0, r3
 80030b2:	f002 fafd 	bl	80056b0 <HAL_TIM_Base_Init>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80030ba:	f000 f8db 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030be:	2108      	movs	r1, #8
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	0152      	lsls	r2, r2, #5
 80030c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030c8:	187a      	adds	r2, r7, r1
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <MX_TIM2_Init+0xa0>)
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f002 fc62 	bl	8005998 <HAL_TIM_ConfigClockSource>
 80030d4:	1e03      	subs	r3, r0, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80030d8:	f000 f8cc 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030dc:	003b      	movs	r3, r7
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e2:	003b      	movs	r3, r7
 80030e4:	2200      	movs	r2, #0
 80030e6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030e8:	003a      	movs	r2, r7
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <MX_TIM2_Init+0xa0>)
 80030ec:	0011      	movs	r1, r2
 80030ee:	0018      	movs	r0, r3
 80030f0:	f002 fe1e 	bl	8005d30 <HAL_TIMEx_MasterConfigSynchronization>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80030f8:	f000 f8bc 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b006      	add	sp, #24
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200001ec 	.word	0x200001ec
 8003108:	00009c3f 	.word	0x00009c3f
 800310c:	000005db 	.word	0x000005db

08003110 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <MX_USART1_UART_Init+0x5c>)
 8003118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <MX_USART1_UART_Init+0x58>)
 800311c:	22e1      	movs	r2, #225	; 0xe1
 800311e:	0252      	lsls	r2, r2, #9
 8003120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <MX_USART1_UART_Init+0x58>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003136:	220c      	movs	r2, #12
 8003138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <MX_USART1_UART_Init+0x58>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003142:	2200      	movs	r2, #0
 8003144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003148:	2200      	movs	r2, #0
 800314a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_USART1_UART_Init+0x58>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003154:	0018      	movs	r0, r3
 8003156:	f002 fe43 	bl	8005de0 <HAL_UART_Init>
 800315a:	1e03      	subs	r3, r0, #0
 800315c:	d001      	beq.n	8003162 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800315e:	f000 f889 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000158 	.word	0x20000158
 800316c:	40013800 	.word	0x40013800

08003170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003176:	240c      	movs	r4, #12
 8003178:	193b      	adds	r3, r7, r4
 800317a:	0018      	movs	r0, r3
 800317c:	2314      	movs	r3, #20
 800317e:	001a      	movs	r2, r3
 8003180:	2100      	movs	r1, #0
 8003182:	f003 ffcf 	bl	8007124 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	4b2e      	ldr	r3, [pc, #184]	; (8003240 <MX_GPIO_Init+0xd0>)
 8003188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318a:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <MX_GPIO_Init+0xd0>)
 800318c:	2102      	movs	r1, #2
 800318e:	430a      	orrs	r2, r1
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
 8003192:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <MX_GPIO_Init+0xd0>)
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	2202      	movs	r2, #2
 8003198:	4013      	ands	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800319e:	4b28      	ldr	r3, [pc, #160]	; (8003240 <MX_GPIO_Init+0xd0>)
 80031a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <MX_GPIO_Init+0xd0>)
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	430a      	orrs	r2, r1
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80031aa:	4b25      	ldr	r3, [pc, #148]	; (8003240 <MX_GPIO_Init+0xd0>)
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	4013      	ands	r3, r2
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <MX_GPIO_Init+0xd0>)
 80031b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <MX_GPIO_Init+0xd0>)
 80031bc:	2101      	movs	r1, #1
 80031be:	430a      	orrs	r2, r1
 80031c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <MX_GPIO_Init+0xd0>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	2201      	movs	r2, #1
 80031c8:	4013      	ands	r3, r2
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <MX_GPIO_Init+0xd4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	2110      	movs	r1, #16
 80031d4:	0018      	movs	r0, r3
 80031d6:	f000 fd19 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_4, GPIO_PIN_RESET);
 80031da:	23a0      	movs	r3, #160	; 0xa0
 80031dc:	05db      	lsls	r3, r3, #23
 80031de:	2200      	movs	r2, #0
 80031e0:	2130      	movs	r1, #48	; 0x30
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 fd12 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031e8:	0021      	movs	r1, r4
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	2210      	movs	r2, #16
 80031ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2201      	movs	r2, #1
 80031f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003202:	000c      	movs	r4, r1
 8003204:	187b      	adds	r3, r7, r1
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <MX_GPIO_Init+0xd4>)
 8003208:	0019      	movs	r1, r3
 800320a:	0010      	movs	r0, r2
 800320c:	f000 fb88 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8003210:	0021      	movs	r1, r4
 8003212:	187b      	adds	r3, r7, r1
 8003214:	2230      	movs	r2, #48	; 0x30
 8003216:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003218:	187b      	adds	r3, r7, r1
 800321a:	2201      	movs	r2, #1
 800321c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	187b      	adds	r3, r7, r1
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322a:	187a      	adds	r2, r7, r1
 800322c:	23a0      	movs	r3, #160	; 0xa0
 800322e:	05db      	lsls	r3, r3, #23
 8003230:	0011      	movs	r1, r2
 8003232:	0018      	movs	r0, r3
 8003234:	f000 fb74 	bl	8003920 <HAL_GPIO_Init>

}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b009      	add	sp, #36	; 0x24
 800323e:	bd90      	pop	{r4, r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	50000400 	.word	0x50000400

08003248 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8003250:	23a0      	movs	r3, #160	; 0xa0
 8003252:	05db      	lsls	r3, r3, #23
 8003254:	2110      	movs	r1, #16
 8003256:	0018      	movs	r0, r3
 8003258:	f000 fcf5 	bl	8003c46 <HAL_GPIO_TogglePin>

	babysitter_SendData();
 800325c:	f7ff fa18 	bl	8002690 <babysitter_SendData>
	rotation_counter = 0;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	46bd      	mov	sp, r7
 800326a:	b002      	add	sp, #8
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	200000d4 	.word	0x200000d4

08003274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003278:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800327a:	e7fe      	b.n	800327a <Error_Handler+0x6>

0800327c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <HAL_MspInit+0x24>)
 8003282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_MspInit+0x24>)
 8003286:	2101      	movs	r1, #1
 8003288:	430a      	orrs	r2, r1
 800328a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_MspInit+0x24>)
 800328e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_MspInit+0x24>)
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	0549      	lsls	r1, r1, #21
 8003296:	430a      	orrs	r2, r1
 8003298:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000

080032a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	230c      	movs	r3, #12
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	0018      	movs	r0, r3
 80032b2:	2314      	movs	r3, #20
 80032b4:	001a      	movs	r2, r3
 80032b6:	2100      	movs	r1, #0
 80032b8:	f003 ff34 	bl	8007124 <memset>
  if(hi2c->Instance==I2C2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_I2C_MspInit+0x80>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d129      	bne.n	800331a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_I2C_MspInit+0x84>)
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_I2C_MspInit+0x84>)
 80032cc:	2102      	movs	r1, #2
 80032ce:	430a      	orrs	r2, r1
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <HAL_I2C_MspInit+0x84>)
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	2202      	movs	r2, #2
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032de:	210c      	movs	r1, #12
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	22c0      	movs	r2, #192	; 0xc0
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2212      	movs	r2, #18
 80032ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	2201      	movs	r2, #1
 80032f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	2203      	movs	r2, #3
 80032f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	2206      	movs	r2, #6
 80032fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003300:	187b      	adds	r3, r7, r1
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_I2C_MspInit+0x88>)
 8003304:	0019      	movs	r1, r3
 8003306:	0010      	movs	r0, r2
 8003308:	f000 fb0a 	bl	8003920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_I2C_MspInit+0x84>)
 800330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_I2C_MspInit+0x84>)
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	03c9      	lsls	r1, r1, #15
 8003316:	430a      	orrs	r2, r1
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b008      	add	sp, #32
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	40005800 	.word	0x40005800
 8003328:	40021000 	.word	0x40021000
 800332c:	50000400 	.word	0x50000400

08003330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	05db      	lsls	r3, r3, #23
 8003340:	429a      	cmp	r2, r3
 8003342:	d10d      	bne.n	8003360 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_TIM_Base_MspInit+0x38>)
 8003346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_TIM_Base_MspInit+0x38>)
 800334a:	2101      	movs	r1, #1
 800334c:	430a      	orrs	r2, r1
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003350:	2200      	movs	r2, #0
 8003352:	2100      	movs	r1, #0
 8003354:	200f      	movs	r0, #15
 8003356:	f000 fa29 	bl	80037ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800335a:	200f      	movs	r0, #15
 800335c:	f000 fa3b 	bl	80037d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000

0800336c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	230c      	movs	r3, #12
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	0018      	movs	r0, r3
 800337a:	2314      	movs	r3, #20
 800337c:	001a      	movs	r2, r3
 800337e:	2100      	movs	r1, #0
 8003380:	f003 fed0 	bl	8007124 <memset>
  if(huart->Instance==USART1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_UART_MspInit+0x8c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d130      	bne.n	80033f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_UART_MspInit+0x90>)
 8003390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_UART_MspInit+0x90>)
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	01c9      	lsls	r1, r1, #7
 8003398:	430a      	orrs	r2, r1
 800339a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_UART_MspInit+0x90>)
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <HAL_UART_MspInit+0x90>)
 80033a2:	2102      	movs	r1, #2
 80033a4:	430a      	orrs	r2, r1
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_UART_MspInit+0x90>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	2202      	movs	r2, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80033b4:	210c      	movs	r1, #12
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	22c0      	movs	r2, #192	; 0xc0
 80033ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2202      	movs	r2, #2
 80033c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2203      	movs	r2, #3
 80033cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <HAL_UART_MspInit+0x94>)
 80033d8:	0019      	movs	r1, r3
 80033da:	0010      	movs	r0, r2
 80033dc:	f000 faa0 	bl	8003920 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	201b      	movs	r0, #27
 80033e6:	f000 f9e1 	bl	80037ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033ea:	201b      	movs	r0, #27
 80033ec:	f000 f9f3 	bl	80037d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b008      	add	sp, #32
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	50000400 	.word	0x50000400

08003404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <NMI_Handler+0x4>

0800340a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <HardFault_Handler+0x4>

08003410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003428:	f000 f8d6 	bl	80035d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <TIM2_IRQHandler+0x14>)
 800343a:	0018      	movs	r0, r3
 800343c:	f002 f9c4 	bl	80057c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	200001ec 	.word	0x200001ec

0800344c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <USART1_IRQHandler+0x14>)
 8003452:	0018      	movs	r0, r3
 8003454:	f002 fe18 	bl	8006088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	20000158 	.word	0x20000158

08003464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <_sbrk+0x5c>)
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <_sbrk+0x60>)
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <_sbrk+0x64>)
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <_sbrk+0x68>)
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <_sbrk+0x64>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	18d3      	adds	r3, r2, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d207      	bcs.n	80034a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003494:	f003 fe1c 	bl	80070d0 <__errno>
 8003498:	0003      	movs	r3, r0
 800349a:	220c      	movs	r2, #12
 800349c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800349e:	2301      	movs	r3, #1
 80034a0:	425b      	negs	r3, r3
 80034a2:	e009      	b.n	80034b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <_sbrk+0x64>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	18d2      	adds	r2, r2, r3
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <_sbrk+0x64>)
 80034b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b006      	add	sp, #24
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20002000 	.word	0x20002000
 80034c4:	00000400 	.word	0x00000400
 80034c8:	200000dc 	.word	0x200000dc
 80034cc:	20000248 	.word	0x20000248

080034d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80034dc:	480d      	ldr	r0, [pc, #52]	; (8003514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e0:	480d      	ldr	r0, [pc, #52]	; (8003518 <LoopForever+0x6>)
  ldr r1, =_edata
 80034e2:	490e      	ldr	r1, [pc, #56]	; (800351c <LoopForever+0xa>)
  ldr r2, =_sidata
 80034e4:	4a0e      	ldr	r2, [pc, #56]	; (8003520 <LoopForever+0xe>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e8:	e002      	b.n	80034f0 <LoopCopyDataInit>

080034ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ee:	3304      	adds	r3, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f4:	d3f9      	bcc.n	80034ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034f8:	4c0b      	ldr	r4, [pc, #44]	; (8003528 <LoopForever+0x16>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034fc:	e001      	b.n	8003502 <LoopFillZerobss>

080034fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003500:	3204      	adds	r2, #4

08003502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003504:	d3fb      	bcc.n	80034fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003506:	f7ff ffe3 	bl	80034d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800350a:	f003 fde7 	bl	80070dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800350e:	f7ff fa13 	bl	8002938 <main>

08003512 <LoopForever>:

LoopForever:
    b LoopForever
 8003512:	e7fe      	b.n	8003512 <LoopForever>
  ldr   r0, =_estack
 8003514:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800351c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003520:	08008cf0 	.word	0x08008cf0
  ldr r2, =_sbss
 8003524:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003528:	20000244 	.word	0x20000244

0800352c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800352c:	e7fe      	b.n	800352c <ADC1_COMP_IRQHandler>
	...

08003530 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_Init+0x3c>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_Init+0x3c>)
 8003542:	2140      	movs	r1, #64	; 0x40
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003548:	2000      	movs	r0, #0
 800354a:	f000 f811 	bl	8003570 <HAL_InitTick>
 800354e:	1e03      	subs	r3, r0, #0
 8003550:	d003      	beq.n	800355a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	e001      	b.n	800355e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800355a:	f7ff fe8f 	bl	800327c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	40022000 	.word	0x40022000

08003570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <HAL_InitTick+0x5c>)
 800357a:	681c      	ldr	r4, [r3, #0]
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_InitTick+0x60>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	0019      	movs	r1, r3
 8003582:	23fa      	movs	r3, #250	; 0xfa
 8003584:	0098      	lsls	r0, r3, #2
 8003586:	f7fc fdc7 	bl	8000118 <__udivsi3>
 800358a:	0003      	movs	r3, r0
 800358c:	0019      	movs	r1, r3
 800358e:	0020      	movs	r0, r4
 8003590:	f7fc fdc2 	bl	8000118 <__udivsi3>
 8003594:	0003      	movs	r3, r0
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f92d 	bl	80037f6 <HAL_SYSTICK_Config>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d001      	beq.n	80035a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e00f      	b.n	80035c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d80b      	bhi.n	80035c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	2301      	movs	r3, #1
 80035ae:	425b      	negs	r3, r3
 80035b0:	2200      	movs	r2, #0
 80035b2:	0018      	movs	r0, r3
 80035b4:	f000 f8fa 	bl	80037ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_InitTick+0x64>)
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
}
 80035c4:	0018      	movs	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b003      	add	sp, #12
 80035ca:	bd90      	pop	{r4, r7, pc}
 80035cc:	20000034 	.word	0x20000034
 80035d0:	2000003c 	.word	0x2000003c
 80035d4:	20000038 	.word	0x20000038

080035d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_IncTick+0x1c>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	001a      	movs	r2, r3
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_IncTick+0x20>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	18d2      	adds	r2, r2, r3
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_IncTick+0x20>)
 80035ea:	601a      	str	r2, [r3, #0]
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	2000003c 	.word	0x2000003c
 80035f8:	2000023c 	.word	0x2000023c

080035fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003600:	4b02      	ldr	r3, [pc, #8]	; (800360c <HAL_GetTick+0x10>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	2000023c 	.word	0x2000023c

08003610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff fff0 	bl	80035fc <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	d005      	beq.n	8003636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_Delay+0x40>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	001a      	movs	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	189b      	adds	r3, r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	f7ff ffe0 	bl	80035fc <HAL_GetTick>
 800363c:	0002      	movs	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d8f7      	bhi.n	8003638 <HAL_Delay+0x28>
  {
  }
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b004      	add	sp, #16
 800364e:	bd80      	pop	{r7, pc}
 8003650:	2000003c 	.word	0x2000003c

08003654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	0002      	movs	r2, r0
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003660:	1dfb      	adds	r3, r7, #7
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b7f      	cmp	r3, #127	; 0x7f
 8003666:	d809      	bhi.n	800367c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003668:	1dfb      	adds	r3, r7, #7
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	001a      	movs	r2, r3
 800366e:	231f      	movs	r3, #31
 8003670:	401a      	ands	r2, r3
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <__NVIC_EnableIRQ+0x30>)
 8003674:	2101      	movs	r1, #1
 8003676:	4091      	lsls	r1, r2
 8003678:	000a      	movs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
  }
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	b002      	add	sp, #8
 8003682:	bd80      	pop	{r7, pc}
 8003684:	e000e100 	.word	0xe000e100

08003688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	0002      	movs	r2, r0
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b7f      	cmp	r3, #127	; 0x7f
 800369c:	d828      	bhi.n	80036f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800369e:	4a2f      	ldr	r2, [pc, #188]	; (800375c <__NVIC_SetPriority+0xd4>)
 80036a0:	1dfb      	adds	r3, r7, #7
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	33c0      	adds	r3, #192	; 0xc0
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	589b      	ldr	r3, [r3, r2]
 80036ae:	1dfa      	adds	r2, r7, #7
 80036b0:	7812      	ldrb	r2, [r2, #0]
 80036b2:	0011      	movs	r1, r2
 80036b4:	2203      	movs	r2, #3
 80036b6:	400a      	ands	r2, r1
 80036b8:	00d2      	lsls	r2, r2, #3
 80036ba:	21ff      	movs	r1, #255	; 0xff
 80036bc:	4091      	lsls	r1, r2
 80036be:	000a      	movs	r2, r1
 80036c0:	43d2      	mvns	r2, r2
 80036c2:	401a      	ands	r2, r3
 80036c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	22ff      	movs	r2, #255	; 0xff
 80036cc:	401a      	ands	r2, r3
 80036ce:	1dfb      	adds	r3, r7, #7
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	0018      	movs	r0, r3
 80036d4:	2303      	movs	r3, #3
 80036d6:	4003      	ands	r3, r0
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036dc:	481f      	ldr	r0, [pc, #124]	; (800375c <__NVIC_SetPriority+0xd4>)
 80036de:	1dfb      	adds	r3, r7, #7
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	430a      	orrs	r2, r1
 80036e8:	33c0      	adds	r3, #192	; 0xc0
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80036ee:	e031      	b.n	8003754 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036f0:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <__NVIC_SetPriority+0xd8>)
 80036f2:	1dfb      	adds	r3, r7, #7
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	0019      	movs	r1, r3
 80036f8:	230f      	movs	r3, #15
 80036fa:	400b      	ands	r3, r1
 80036fc:	3b08      	subs	r3, #8
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	3306      	adds	r3, #6
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	18d3      	adds	r3, r2, r3
 8003706:	3304      	adds	r3, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	1dfa      	adds	r2, r7, #7
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	0011      	movs	r1, r2
 8003710:	2203      	movs	r2, #3
 8003712:	400a      	ands	r2, r1
 8003714:	00d2      	lsls	r2, r2, #3
 8003716:	21ff      	movs	r1, #255	; 0xff
 8003718:	4091      	lsls	r1, r2
 800371a:	000a      	movs	r2, r1
 800371c:	43d2      	mvns	r2, r2
 800371e:	401a      	ands	r2, r3
 8003720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	22ff      	movs	r2, #255	; 0xff
 8003728:	401a      	ands	r2, r3
 800372a:	1dfb      	adds	r3, r7, #7
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	0018      	movs	r0, r3
 8003730:	2303      	movs	r3, #3
 8003732:	4003      	ands	r3, r0
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003738:	4809      	ldr	r0, [pc, #36]	; (8003760 <__NVIC_SetPriority+0xd8>)
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	001c      	movs	r4, r3
 8003740:	230f      	movs	r3, #15
 8003742:	4023      	ands	r3, r4
 8003744:	3b08      	subs	r3, #8
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	430a      	orrs	r2, r1
 800374a:	3306      	adds	r3, #6
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	18c3      	adds	r3, r0, r3
 8003750:	3304      	adds	r3, #4
 8003752:	601a      	str	r2, [r3, #0]
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	b003      	add	sp, #12
 800375a:	bd90      	pop	{r4, r7, pc}
 800375c:	e000e100 	.word	0xe000e100
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	4a0c      	ldr	r2, [pc, #48]	; (80037a4 <SysTick_Config+0x40>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003776:	2301      	movs	r3, #1
 8003778:	e010      	b.n	800379c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <SysTick_Config+0x44>)
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	3a01      	subs	r2, #1
 8003780:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003782:	2301      	movs	r3, #1
 8003784:	425b      	negs	r3, r3
 8003786:	2103      	movs	r1, #3
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff ff7d 	bl	8003688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <SysTick_Config+0x44>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <SysTick_Config+0x44>)
 8003796:	2207      	movs	r2, #7
 8003798:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800379a:	2300      	movs	r3, #0
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	00ffffff 	.word	0x00ffffff
 80037a8:	e000e010 	.word	0xe000e010

080037ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	210f      	movs	r1, #15
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	1c02      	adds	r2, r0, #0
 80037bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	0011      	movs	r1, r2
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff ff5d 	bl	8003688 <__NVIC_SetPriority>
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b004      	add	sp, #16
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	0002      	movs	r2, r0
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff ff33 	bl	8003654 <__NVIC_EnableIRQ>
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0018      	movs	r0, r3
 8003802:	f7ff ffaf 	bl	8003764 <SysTick_Config>
 8003806:	0003      	movs	r3, r0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2225      	movs	r2, #37	; 0x25
 8003824:	5c9b      	ldrb	r3, [r3, r2]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d008      	beq.n	800383e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2204      	movs	r2, #4
 8003830:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2224      	movs	r2, #36	; 0x24
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e024      	b.n	8003888 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	210e      	movs	r1, #14
 800384a:	438a      	bics	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	438a      	bics	r2, r1
 800385c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	221c      	movs	r2, #28
 8003864:	401a      	ands	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2101      	movs	r1, #1
 800386c:	4091      	lsls	r1, r2
 800386e:	000a      	movs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2225      	movs	r2, #37	; 0x25
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2224      	movs	r2, #36	; 0x24
 800387e:	2100      	movs	r1, #0
 8003880:	5499      	strb	r1, [r3, r2]

    return status;
 8003882:	230f      	movs	r3, #15
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003888:	0018      	movs	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	b004      	add	sp, #16
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	230f      	movs	r3, #15
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2225      	movs	r2, #37	; 0x25
 80038a4:	5c9b      	ldrb	r3, [r3, r2]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d007      	beq.n	80038bc <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2204      	movs	r2, #4
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038b2:	230f      	movs	r3, #15
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e02a      	b.n	8003912 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	210e      	movs	r1, #14
 80038c8:	438a      	bics	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2101      	movs	r1, #1
 80038d8:	438a      	bics	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	221c      	movs	r2, #28
 80038e2:	401a      	ands	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	2101      	movs	r1, #1
 80038ea:	4091      	lsls	r1, r2
 80038ec:	000a      	movs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2225      	movs	r2, #37	; 0x25
 80038f4:	2101      	movs	r1, #1
 80038f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	0010      	movs	r0, r2
 8003910:	4798      	blx	r3
    }
  }
  return status;
 8003912:	230f      	movs	r3, #15
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	781b      	ldrb	r3, [r3, #0]
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b004      	add	sp, #16
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003936:	e14f      	b.n	8003bd8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4091      	lsls	r1, r2
 8003942:	000a      	movs	r2, r1
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d100      	bne.n	8003950 <HAL_GPIO_Init+0x30>
 800394e:	e140      	b.n	8003bd2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d00b      	beq.n	8003970 <HAL_GPIO_Init+0x50>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d007      	beq.n	8003970 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003964:	2b11      	cmp	r3, #17
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b12      	cmp	r3, #18
 800396e:	d130      	bne.n	80039d2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	409a      	lsls	r2, r3
 800397e:	0013      	movs	r3, r2
 8003980:	43da      	mvns	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	409a      	lsls	r2, r3
 8003992:	0013      	movs	r3, r2
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
 80039ac:	0013      	movs	r3, r2
 80039ae:	43da      	mvns	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	2201      	movs	r2, #1
 80039be:	401a      	ands	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	409a      	lsls	r2, r3
 80039c4:	0013      	movs	r3, r2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	409a      	lsls	r2, r3
 80039e0:	0013      	movs	r3, r2
 80039e2:	43da      	mvns	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	409a      	lsls	r2, r3
 80039f4:	0013      	movs	r3, r2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0xf2>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b12      	cmp	r3, #18
 8003a10:	d123      	bne.n	8003a5a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	08da      	lsrs	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	0092      	lsls	r2, r2, #2
 8003a1c:	58d3      	ldr	r3, [r2, r3]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2207      	movs	r2, #7
 8003a24:	4013      	ands	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2107      	movs	r1, #7
 8003a3e:	400b      	ands	r3, r1
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	409a      	lsls	r2, r3
 8003a44:	0013      	movs	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	08da      	lsrs	r2, r3, #3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3208      	adds	r2, #8
 8003a54:	0092      	lsls	r2, r2, #2
 8003a56:	6939      	ldr	r1, [r7, #16]
 8003a58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	2203      	movs	r2, #3
 8003a66:	409a      	lsls	r2, r3
 8003a68:	0013      	movs	r3, r2
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2203      	movs	r2, #3
 8003a78:	401a      	ands	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	0013      	movs	r3, r2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	055b      	lsls	r3, r3, #21
 8003a96:	4013      	ands	r3, r2
 8003a98:	d100      	bne.n	8003a9c <HAL_GPIO_Init+0x17c>
 8003a9a:	e09a      	b.n	8003bd2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9c:	4b54      	ldr	r3, [pc, #336]	; (8003bf0 <HAL_GPIO_Init+0x2d0>)
 8003a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_GPIO_Init+0x2d0>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa8:	4a52      	ldr	r2, [pc, #328]	; (8003bf4 <HAL_GPIO_Init+0x2d4>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	589b      	ldr	r3, [r3, r2]
 8003ab4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	4013      	ands	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	220f      	movs	r2, #15
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	0013      	movs	r3, r2
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	23a0      	movs	r3, #160	; 0xa0
 8003ad0:	05db      	lsls	r3, r3, #23
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d019      	beq.n	8003b0a <HAL_GPIO_Init+0x1ea>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a47      	ldr	r2, [pc, #284]	; (8003bf8 <HAL_GPIO_Init+0x2d8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_GPIO_Init+0x1e6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a46      	ldr	r2, [pc, #280]	; (8003bfc <HAL_GPIO_Init+0x2dc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00d      	beq.n	8003b02 <HAL_GPIO_Init+0x1e2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a45      	ldr	r2, [pc, #276]	; (8003c00 <HAL_GPIO_Init+0x2e0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <HAL_GPIO_Init+0x1de>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a44      	ldr	r2, [pc, #272]	; (8003c04 <HAL_GPIO_Init+0x2e4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_GPIO_Init+0x1da>
 8003af6:	2305      	movs	r3, #5
 8003af8:	e008      	b.n	8003b0c <HAL_GPIO_Init+0x1ec>
 8003afa:	2306      	movs	r3, #6
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x1ec>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e004      	b.n	8003b0c <HAL_GPIO_Init+0x1ec>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e002      	b.n	8003b0c <HAL_GPIO_Init+0x1ec>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_GPIO_Init+0x1ec>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	2103      	movs	r1, #3
 8003b10:	400a      	ands	r2, r1
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	4093      	lsls	r3, r2
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b1c:	4935      	ldr	r1, [pc, #212]	; (8003bf4 <HAL_GPIO_Init+0x2d4>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3302      	adds	r3, #2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_GPIO_Init+0x2e8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43da      	mvns	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	025b      	lsls	r3, r3, #9
 8003b42:	4013      	ands	r3, r2
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_GPIO_Init+0x2e8>)
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003b54:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <HAL_GPIO_Init+0x2e8>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	029b      	lsls	r3, r3, #10
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003b78:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <HAL_GPIO_Init+0x2e8>)
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7e:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_GPIO_Init+0x2e8>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43da      	mvns	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	035b      	lsls	r3, r3, #13
 8003b96:	4013      	ands	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ba2:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_GPIO_Init+0x2e8>)
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_GPIO_Init+0x2e8>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43da      	mvns	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	039b      	lsls	r3, r3, #14
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_GPIO_Init+0x2e8>)
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	40da      	lsrs	r2, r3
 8003be0:	1e13      	subs	r3, r2, #0
 8003be2:	d000      	beq.n	8003be6 <HAL_GPIO_Init+0x2c6>
 8003be4:	e6a8      	b.n	8003938 <HAL_GPIO_Init+0x18>
  }
}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b006      	add	sp, #24
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	50000400 	.word	0x50000400
 8003bfc:	50000800 	.word	0x50000800
 8003c00:	50000c00 	.word	0x50000c00
 8003c04:	50001c00 	.word	0x50001c00
 8003c08:	40010400 	.word	0x40010400

08003c0c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	0008      	movs	r0, r1
 8003c16:	0011      	movs	r1, r2
 8003c18:	1cbb      	adds	r3, r7, #2
 8003c1a:	1c02      	adds	r2, r0, #0
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	1c7b      	adds	r3, r7, #1
 8003c20:	1c0a      	adds	r2, r1, #0
 8003c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c24:	1c7b      	adds	r3, r7, #1
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c2c:	1cbb      	adds	r3, r7, #2
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003c34:	e003      	b.n	8003c3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003c36:	1cbb      	adds	r3, r7, #2
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b002      	add	sp, #8
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	000a      	movs	r2, r1
 8003c50:	1cbb      	adds	r3, r7, #2
 8003c52:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c5a:	1cbb      	adds	r3, r7, #2
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4013      	ands	r3, r2
 8003c62:	041a      	lsls	r2, r3, #16
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	1cb9      	adds	r1, r7, #2
 8003c6a:	8809      	ldrh	r1, [r1, #0]
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	619a      	str	r2, [r3, #24]
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b004      	add	sp, #16
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e082      	b.n	8003d94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2241      	movs	r2, #65	; 0x41
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2240      	movs	r2, #64	; 0x40
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7ff fafd 	bl	80032a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2241      	movs	r2, #65	; 0x41
 8003cae:	2124      	movs	r1, #36	; 0x24
 8003cb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	438a      	bics	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4934      	ldr	r1, [pc, #208]	; (8003d9c <HAL_I2C_Init+0x120>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4931      	ldr	r1, [pc, #196]	; (8003da0 <HAL_I2C_Init+0x124>)
 8003cdc:	400a      	ands	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d108      	bne.n	8003cfa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	0209      	lsls	r1, r1, #8
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	e007      	b.n	8003d0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2184      	movs	r1, #132	; 0x84
 8003d04:	0209      	lsls	r1, r1, #8
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d104      	bne.n	8003d1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	491f      	ldr	r1, [pc, #124]	; (8003da4 <HAL_I2C_Init+0x128>)
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	491a      	ldr	r1, [pc, #104]	; (8003da0 <HAL_I2C_Init+0x124>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	0011      	movs	r1, r2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	021a      	lsls	r2, r3, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69d9      	ldr	r1, [r3, #28]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2101      	movs	r1, #1
 8003d72:	430a      	orrs	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2241      	movs	r2, #65	; 0x41
 8003d80:	2120      	movs	r1, #32
 8003d82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2242      	movs	r2, #66	; 0x42
 8003d8e:	2100      	movs	r1, #0
 8003d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	f0ffffff 	.word	0xf0ffffff
 8003da0:	ffff7fff 	.word	0xffff7fff
 8003da4:	02008000 	.word	0x02008000

08003da8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	000c      	movs	r4, r1
 8003db2:	0010      	movs	r0, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	230a      	movs	r3, #10
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	1c22      	adds	r2, r4, #0
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	1c02      	adds	r2, r0, #0
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	1c0a      	adds	r2, r1, #0
 8003dca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2241      	movs	r2, #65	; 0x41
 8003dd0:	5c9b      	ldrb	r3, [r3, r2]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d000      	beq.n	8003dda <HAL_I2C_Mem_Write+0x32>
 8003dd8:	e10c      	b.n	8003ff4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <HAL_I2C_Mem_Write+0x42>
 8003de0:	232c      	movs	r3, #44	; 0x2c
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d105      	bne.n	8003df6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	0092      	lsls	r2, r2, #2
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0ff      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2240      	movs	r2, #64	; 0x40
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x5c>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e0f8      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x24e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	2101      	movs	r1, #1
 8003e0a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e0c:	f7ff fbf6 	bl	80035fc <HAL_GetTick>
 8003e10:	0003      	movs	r3, r0
 8003e12:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	0219      	lsls	r1, r3, #8
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2319      	movs	r3, #25
 8003e20:	2201      	movs	r2, #1
 8003e22:	f000 fb0b 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0e3      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2241      	movs	r2, #65	; 0x41
 8003e32:	2121      	movs	r1, #33	; 0x21
 8003e34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2242      	movs	r2, #66	; 0x42
 8003e3a:	2140      	movs	r1, #64	; 0x40
 8003e3c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	222c      	movs	r2, #44	; 0x2c
 8003e4e:	18ba      	adds	r2, r7, r2
 8003e50:	8812      	ldrh	r2, [r2, #0]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e5a:	1dbb      	adds	r3, r7, #6
 8003e5c:	881c      	ldrh	r4, [r3, #0]
 8003e5e:	2308      	movs	r3, #8
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	230a      	movs	r3, #10
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	8819      	ldrh	r1, [r3, #0]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	0023      	movs	r3, r4
 8003e76:	f000 f9f9 	bl	800426c <I2C_RequestMemoryWrite>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2240      	movs	r2, #64	; 0x40
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0b5      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2bff      	cmp	r3, #255	; 0xff
 8003e92:	d911      	bls.n	8003eb8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	045c      	lsls	r4, r3, #17
 8003ea4:	230a      	movs	r3, #10
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	8819      	ldrh	r1, [r3, #0]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	f000 fbe3 	bl	800467c <I2C_TransferConfig>
 8003eb6:	e012      	b.n	8003ede <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	049c      	lsls	r4, r3, #18
 8003ecc:	230a      	movs	r3, #10
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	8819      	ldrh	r1, [r3, #0]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	0023      	movs	r3, r4
 8003eda:	f000 fbcf 	bl	800467c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 fae8 	bl	80044ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e081      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d03a      	beq.n	8003fa2 <HAL_I2C_Mem_Write+0x1fa>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d136      	bne.n	8003fa2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	0013      	movs	r3, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2180      	movs	r1, #128	; 0x80
 8003f42:	f000 fa7b 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003f46:	1e03      	subs	r3, r0, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e053      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2bff      	cmp	r3, #255	; 0xff
 8003f56:	d911      	bls.n	8003f7c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	22ff      	movs	r2, #255	; 0xff
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	045c      	lsls	r4, r3, #17
 8003f68:	230a      	movs	r3, #10
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	8819      	ldrh	r1, [r3, #0]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	2300      	movs	r3, #0
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	0023      	movs	r3, r4
 8003f76:	f000 fb81 	bl	800467c <I2C_TransferConfig>
 8003f7a:	e012      	b.n	8003fa2 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	049c      	lsls	r4, r3, #18
 8003f90:	230a      	movs	r3, #10
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	8819      	ldrh	r1, [r3, #0]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	0023      	movs	r3, r4
 8003f9e:	f000 fb6d 	bl	800467c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d198      	bne.n	8003ede <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 fac0 	bl	8004538 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e01a      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	490b      	ldr	r1, [pc, #44]	; (8004000 <HAL_I2C_Mem_Write+0x258>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2241      	movs	r2, #65	; 0x41
 8003fdc:	2120      	movs	r1, #32
 8003fde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2242      	movs	r2, #66	; 0x42
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2240      	movs	r2, #64	; 0x40
 8003fec:	2100      	movs	r1, #0
 8003fee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b007      	add	sp, #28
 8003ffc:	bd90      	pop	{r4, r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	fe00e800 	.word	0xfe00e800

08004004 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	000c      	movs	r4, r1
 800400e:	0010      	movs	r0, r2
 8004010:	0019      	movs	r1, r3
 8004012:	230a      	movs	r3, #10
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	1c22      	adds	r2, r4, #0
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	2308      	movs	r3, #8
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	1c02      	adds	r2, r0, #0
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	1dbb      	adds	r3, r7, #6
 8004024:	1c0a      	adds	r2, r1, #0
 8004026:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2241      	movs	r2, #65	; 0x41
 800402c:	5c9b      	ldrb	r3, [r3, r2]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	d000      	beq.n	8004036 <HAL_I2C_Mem_Read+0x32>
 8004034:	e110      	b.n	8004258 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <HAL_I2C_Mem_Read+0x42>
 800403c:	232c      	movs	r3, #44	; 0x2c
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2280      	movs	r2, #128	; 0x80
 800404a:	0092      	lsls	r2, r2, #2
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e103      	b.n	800425a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2240      	movs	r2, #64	; 0x40
 8004056:	5c9b      	ldrb	r3, [r3, r2]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_I2C_Mem_Read+0x5c>
 800405c:	2302      	movs	r3, #2
 800405e:	e0fc      	b.n	800425a <HAL_I2C_Mem_Read+0x256>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2240      	movs	r2, #64	; 0x40
 8004064:	2101      	movs	r1, #1
 8004066:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004068:	f7ff fac8 	bl	80035fc <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	0219      	lsls	r1, r3, #8
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2319      	movs	r3, #25
 800407c:	2201      	movs	r2, #1
 800407e:	f000 f9dd 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8004082:	1e03      	subs	r3, r0, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0e7      	b.n	800425a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2241      	movs	r2, #65	; 0x41
 800408e:	2122      	movs	r1, #34	; 0x22
 8004090:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2242      	movs	r2, #66	; 0x42
 8004096:	2140      	movs	r1, #64	; 0x40
 8004098:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	222c      	movs	r2, #44	; 0x2c
 80040aa:	18ba      	adds	r2, r7, r2
 80040ac:	8812      	ldrh	r2, [r2, #0]
 80040ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040b6:	1dbb      	adds	r3, r7, #6
 80040b8:	881c      	ldrh	r4, [r3, #0]
 80040ba:	2308      	movs	r3, #8
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	881a      	ldrh	r2, [r3, #0]
 80040c0:	230a      	movs	r3, #10
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	8819      	ldrh	r1, [r3, #0]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	0023      	movs	r3, r4
 80040d2:	f000 f92f 	bl	8004334 <I2C_RequestMemoryRead>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2240      	movs	r2, #64	; 0x40
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0b9      	b.n	800425a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2bff      	cmp	r3, #255	; 0xff
 80040ee:	d911      	bls.n	8004114 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	045c      	lsls	r4, r3, #17
 8004100:	230a      	movs	r3, #10
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	8819      	ldrh	r1, [r3, #0]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	4b56      	ldr	r3, [pc, #344]	; (8004264 <HAL_I2C_Mem_Read+0x260>)
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	0023      	movs	r3, r4
 800410e:	f000 fab5 	bl	800467c <I2C_TransferConfig>
 8004112:	e012      	b.n	800413a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004122:	b2da      	uxtb	r2, r3
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	049c      	lsls	r4, r3, #18
 8004128:	230a      	movs	r3, #10
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	8819      	ldrh	r1, [r3, #0]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_I2C_Mem_Read+0x260>)
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	0023      	movs	r3, r4
 8004136:	f000 faa1 	bl	800467c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800413a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	0013      	movs	r3, r2
 8004144:	2200      	movs	r2, #0
 8004146:	2104      	movs	r1, #4
 8004148:	f000 f978 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d001      	beq.n	8004154 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e082      	b.n	800425a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d03a      	beq.n	8004206 <HAL_I2C_Mem_Read+0x202>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d136      	bne.n	8004206 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	0013      	movs	r3, r2
 80041a2:	2200      	movs	r2, #0
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	f000 f949 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e053      	b.n	800425a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2bff      	cmp	r3, #255	; 0xff
 80041ba:	d911      	bls.n	80041e0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	22ff      	movs	r2, #255	; 0xff
 80041c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	045c      	lsls	r4, r3, #17
 80041cc:	230a      	movs	r3, #10
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	8819      	ldrh	r1, [r3, #0]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	2300      	movs	r3, #0
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	0023      	movs	r3, r4
 80041da:	f000 fa4f 	bl	800467c <I2C_TransferConfig>
 80041de:	e012      	b.n	8004206 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	049c      	lsls	r4, r3, #18
 80041f4:	230a      	movs	r3, #10
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	8819      	ldrh	r1, [r3, #0]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	0023      	movs	r3, r4
 8004202:	f000 fa3b 	bl	800467c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d194      	bne.n	800413a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	0018      	movs	r0, r3
 8004218:	f000 f98e 	bl	8004538 <I2C_WaitOnSTOPFlagUntilTimeout>
 800421c:	1e03      	subs	r3, r0, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e01a      	b.n	800425a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2220      	movs	r2, #32
 800422a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	490c      	ldr	r1, [pc, #48]	; (8004268 <HAL_I2C_Mem_Read+0x264>)
 8004238:	400a      	ands	r2, r1
 800423a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2241      	movs	r2, #65	; 0x41
 8004240:	2120      	movs	r1, #32
 8004242:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2242      	movs	r2, #66	; 0x42
 8004248:	2100      	movs	r1, #0
 800424a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2240      	movs	r2, #64	; 0x40
 8004250:	2100      	movs	r1, #0
 8004252:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b007      	add	sp, #28
 8004260:	bd90      	pop	{r4, r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	80002400 	.word	0x80002400
 8004268:	fe00e800 	.word	0xfe00e800

0800426c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b5b0      	push	{r4, r5, r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	000c      	movs	r4, r1
 8004276:	0010      	movs	r0, r2
 8004278:	0019      	movs	r1, r3
 800427a:	250a      	movs	r5, #10
 800427c:	197b      	adds	r3, r7, r5
 800427e:	1c22      	adds	r2, r4, #0
 8004280:	801a      	strh	r2, [r3, #0]
 8004282:	2308      	movs	r3, #8
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	1c02      	adds	r2, r0, #0
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	1dbb      	adds	r3, r7, #6
 800428c:	1c0a      	adds	r2, r1, #0
 800428e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004290:	1dbb      	adds	r3, r7, #6
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	045c      	lsls	r4, r3, #17
 800429a:	197b      	adds	r3, r7, r5
 800429c:	8819      	ldrh	r1, [r3, #0]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	4b23      	ldr	r3, [pc, #140]	; (8004330 <I2C_RequestMemoryWrite+0xc4>)
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	0023      	movs	r3, r4
 80042a6:	f000 f9e9 	bl	800467c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	6a39      	ldr	r1, [r7, #32]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 f902 	bl	80044ba <I2C_WaitOnTXISFlagUntilTimeout>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d001      	beq.n	80042be <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e033      	b.n	8004326 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042be:	1dbb      	adds	r3, r7, #6
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042c6:	2308      	movs	r3, #8
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
 80042d4:	e019      	b.n	800430a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042d6:	2308      	movs	r3, #8
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	b29b      	uxth	r3, r3
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 f8e3 	bl	80044ba <I2C_WaitOnTXISFlagUntilTimeout>
 80042f4:	1e03      	subs	r3, r0, #0
 80042f6:	d001      	beq.n	80042fc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e014      	b.n	8004326 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042fc:	2308      	movs	r3, #8
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800430a:	6a3a      	ldr	r2, [r7, #32]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	0013      	movs	r3, r2
 8004314:	2200      	movs	r2, #0
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	f000 f890 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d001      	beq.n	8004324 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bdb0      	pop	{r4, r5, r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	80002000 	.word	0x80002000

08004334 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b5b0      	push	{r4, r5, r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	000c      	movs	r4, r1
 800433e:	0010      	movs	r0, r2
 8004340:	0019      	movs	r1, r3
 8004342:	250a      	movs	r5, #10
 8004344:	197b      	adds	r3, r7, r5
 8004346:	1c22      	adds	r2, r4, #0
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	2308      	movs	r3, #8
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	1c02      	adds	r2, r0, #0
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	1dbb      	adds	r3, r7, #6
 8004354:	1c0a      	adds	r2, r1, #0
 8004356:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004358:	1dbb      	adds	r3, r7, #6
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	197b      	adds	r3, r7, r5
 8004360:	8819      	ldrh	r1, [r3, #0]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <I2C_RequestMemoryRead+0xc0>)
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	f000 f987 	bl	800467c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	6a39      	ldr	r1, [r7, #32]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 f8a0 	bl	80044ba <I2C_WaitOnTXISFlagUntilTimeout>
 800437a:	1e03      	subs	r3, r0, #0
 800437c:	d001      	beq.n	8004382 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e033      	b.n	80043ea <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004382:	1dbb      	adds	r3, r7, #6
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800438a:	2308      	movs	r3, #8
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28
 8004398:	e019      	b.n	80043ce <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800439a:	2308      	movs	r3, #8
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	6a39      	ldr	r1, [r7, #32]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 f881 	bl	80044ba <I2C_WaitOnTXISFlagUntilTimeout>
 80043b8:	1e03      	subs	r3, r0, #0
 80043ba:	d001      	beq.n	80043c0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e014      	b.n	80043ea <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c0:	2308      	movs	r3, #8
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a3a      	ldr	r2, [r7, #32]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	0013      	movs	r3, r2
 80043d8:	2200      	movs	r2, #0
 80043da:	2140      	movs	r1, #64	; 0x40
 80043dc:	f000 f82e 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 80043e0:	1e03      	subs	r3, r0, #0
 80043e2:	d001      	beq.n	80043e8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b004      	add	sp, #16
 80043f0:	bdb0      	pop	{r4, r5, r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	80002000 	.word	0x80002000

080043f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2202      	movs	r2, #2
 8004408:	4013      	ands	r3, r2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d103      	bne.n	8004416 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2200      	movs	r2, #0
 8004414:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2201      	movs	r2, #1
 800441e:	4013      	ands	r3, r2
 8004420:	2b01      	cmp	r3, #1
 8004422:	d007      	beq.n	8004434 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2101      	movs	r1, #1
 8004430:	430a      	orrs	r2, r1
 8004432:	619a      	str	r2, [r3, #24]
  }
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444c:	e021      	b.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	d01e      	beq.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004454:	f7ff f8d2 	bl	80035fc <HAL_GetTick>
 8004458:	0002      	movs	r2, r0
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d113      	bne.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	2220      	movs	r2, #32
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2241      	movs	r2, #65	; 0x41
 800447a:	2120      	movs	r1, #32
 800447c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2242      	movs	r2, #66	; 0x42
 8004482:	2100      	movs	r1, #0
 8004484:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2240      	movs	r2, #64	; 0x40
 800448a:	2100      	movs	r1, #0
 800448c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e00f      	b.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	425a      	negs	r2, r3
 80044a2:	4153      	adcs	r3, r2
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	001a      	movs	r2, r3
 80044a8:	1dfb      	adds	r3, r7, #7
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d0ce      	beq.n	800444e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b004      	add	sp, #16
 80044b8:	bd80      	pop	{r7, pc}

080044ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044c6:	e02b      	b.n	8004520 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68b9      	ldr	r1, [r7, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 f86e 	bl	80045b0 <I2C_IsAcknowledgeFailed>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d001      	beq.n	80044dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e029      	b.n	8004530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3301      	adds	r3, #1
 80044e0:	d01e      	beq.n	8004520 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7ff f88b 	bl	80035fc <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d113      	bne.n	8004520 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fc:	2220      	movs	r2, #32
 80044fe:	431a      	orrs	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2241      	movs	r2, #65	; 0x41
 8004508:	2120      	movs	r1, #32
 800450a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2242      	movs	r2, #66	; 0x42
 8004510:	2100      	movs	r1, #0
 8004512:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2240      	movs	r2, #64	; 0x40
 8004518:	2100      	movs	r1, #0
 800451a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e007      	b.n	8004530 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2202      	movs	r2, #2
 8004528:	4013      	ands	r3, r2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d1cc      	bne.n	80044c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b004      	add	sp, #16
 8004536:	bd80      	pop	{r7, pc}

08004538 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004544:	e028      	b.n	8004598 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	0018      	movs	r0, r3
 800454e:	f000 f82f 	bl	80045b0 <I2C_IsAcknowledgeFailed>
 8004552:	1e03      	subs	r3, r0, #0
 8004554:	d001      	beq.n	800455a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e026      	b.n	80045a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7ff f84f 	bl	80035fc <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d113      	bne.n	8004598 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	2220      	movs	r2, #32
 8004576:	431a      	orrs	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2241      	movs	r2, #65	; 0x41
 8004580:	2120      	movs	r1, #32
 8004582:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2242      	movs	r2, #66	; 0x42
 8004588:	2100      	movs	r1, #0
 800458a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2240      	movs	r2, #64	; 0x40
 8004590:	2100      	movs	r1, #0
 8004592:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e007      	b.n	80045a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2220      	movs	r2, #32
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d1cf      	bne.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b004      	add	sp, #16
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2210      	movs	r2, #16
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d151      	bne.n	800466e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ca:	e021      	b.n	8004610 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	3301      	adds	r3, #1
 80045d0:	d01e      	beq.n	8004610 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7ff f813 	bl	80035fc <HAL_GetTick>
 80045d6:	0002      	movs	r2, r0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <I2C_IsAcknowledgeFailed+0x38>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d113      	bne.n	8004610 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	2220      	movs	r2, #32
 80045ee:	431a      	orrs	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2241      	movs	r2, #65	; 0x41
 80045f8:	2120      	movs	r1, #32
 80045fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2242      	movs	r2, #66	; 0x42
 8004600:	2100      	movs	r1, #0
 8004602:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2240      	movs	r2, #64	; 0x40
 8004608:	2100      	movs	r1, #0
 800460a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e02f      	b.n	8004670 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2220      	movs	r2, #32
 8004618:	4013      	ands	r3, r2
 800461a:	2b20      	cmp	r3, #32
 800461c:	d1d6      	bne.n	80045cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2210      	movs	r2, #16
 8004624:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2220      	movs	r2, #32
 800462c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	0018      	movs	r0, r3
 8004632:	f7ff fee1 	bl	80043f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	490d      	ldr	r1, [pc, #52]	; (8004678 <I2C_IsAcknowledgeFailed+0xc8>)
 8004642:	400a      	ands	r2, r1
 8004644:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	2204      	movs	r2, #4
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2241      	movs	r2, #65	; 0x41
 8004656:	2120      	movs	r1, #32
 8004658:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2242      	movs	r2, #66	; 0x42
 800465e:	2100      	movs	r1, #0
 8004660:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2240      	movs	r2, #64	; 0x40
 8004666:	2100      	movs	r1, #0
 8004668:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b004      	add	sp, #16
 8004676:	bd80      	pop	{r7, pc}
 8004678:	fe00e800 	.word	0xfe00e800

0800467c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	0008      	movs	r0, r1
 8004686:	0011      	movs	r1, r2
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	240a      	movs	r4, #10
 800468c:	193b      	adds	r3, r7, r4
 800468e:	1c02      	adds	r2, r0, #0
 8004690:	801a      	strh	r2, [r3, #0]
 8004692:	2009      	movs	r0, #9
 8004694:	183b      	adds	r3, r7, r0
 8004696:	1c0a      	adds	r2, r1, #0
 8004698:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	6a3a      	ldr	r2, [r7, #32]
 80046a2:	0d51      	lsrs	r1, r2, #21
 80046a4:	2280      	movs	r2, #128	; 0x80
 80046a6:	00d2      	lsls	r2, r2, #3
 80046a8:	400a      	ands	r2, r1
 80046aa:	490e      	ldr	r1, [pc, #56]	; (80046e4 <I2C_TransferConfig+0x68>)
 80046ac:	430a      	orrs	r2, r1
 80046ae:	43d2      	mvns	r2, r2
 80046b0:	401a      	ands	r2, r3
 80046b2:	0011      	movs	r1, r2
 80046b4:	193b      	adds	r3, r7, r4
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	059b      	lsls	r3, r3, #22
 80046ba:	0d9a      	lsrs	r2, r3, #22
 80046bc:	183b      	adds	r3, r7, r0
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	0418      	lsls	r0, r3, #16
 80046c2:	23ff      	movs	r3, #255	; 0xff
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	4003      	ands	r3, r0
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b005      	add	sp, #20
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	03ff63ff 	.word	0x03ff63ff

080046e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2241      	movs	r2, #65	; 0x41
 80046f6:	5c9b      	ldrb	r3, [r3, r2]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d138      	bne.n	8004770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2240      	movs	r2, #64	; 0x40
 8004702:	5c9b      	ldrb	r3, [r3, r2]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004708:	2302      	movs	r3, #2
 800470a:	e032      	b.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2240      	movs	r2, #64	; 0x40
 8004710:	2101      	movs	r1, #1
 8004712:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2241      	movs	r2, #65	; 0x41
 8004718:	2124      	movs	r1, #36	; 0x24
 800471a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2101      	movs	r1, #1
 8004728:	438a      	bics	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4911      	ldr	r1, [pc, #68]	; (800477c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004738:	400a      	ands	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2101      	movs	r1, #1
 8004758:	430a      	orrs	r2, r1
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2241      	movs	r2, #65	; 0x41
 8004760:	2120      	movs	r1, #32
 8004762:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	2100      	movs	r1, #0
 800476a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	b002      	add	sp, #8
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	ffffefff 	.word	0xffffefff

08004780 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2241      	movs	r2, #65	; 0x41
 800478e:	5c9b      	ldrb	r3, [r3, r2]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b20      	cmp	r3, #32
 8004794:	d139      	bne.n	800480a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2240      	movs	r2, #64	; 0x40
 800479a:	5c9b      	ldrb	r3, [r3, r2]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e033      	b.n	800480c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2240      	movs	r2, #64	; 0x40
 80047a8:	2101      	movs	r1, #1
 80047aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2241      	movs	r2, #65	; 0x41
 80047b0:	2124      	movs	r1, #36	; 0x24
 80047b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2101      	movs	r1, #1
 80047c0:	438a      	bics	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a11      	ldr	r2, [pc, #68]	; (8004814 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2101      	movs	r1, #1
 80047f2:	430a      	orrs	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2241      	movs	r2, #65	; 0x41
 80047fa:	2120      	movs	r1, #32
 80047fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2240      	movs	r2, #64	; 0x40
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e000      	b.n	800480c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800480a:	2302      	movs	r3, #2
  }
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b004      	add	sp, #16
 8004812:	bd80      	pop	{r7, pc}
 8004814:	fffff0ff 	.word	0xfffff0ff

08004818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	f000 fbb4 	bl	8004f94 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482c:	4bc3      	ldr	r3, [pc, #780]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	220c      	movs	r2, #12
 8004832:	4013      	ands	r3, r2
 8004834:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004836:	4bc1      	ldr	r3, [pc, #772]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	025b      	lsls	r3, r3, #9
 800483e:	4013      	ands	r3, r2
 8004840:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2201      	movs	r2, #1
 8004848:	4013      	ands	r3, r2
 800484a:	d100      	bne.n	800484e <HAL_RCC_OscConfig+0x36>
 800484c:	e07e      	b.n	800494c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d007      	beq.n	8004864 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d112      	bne.n	8004880 <HAL_RCC_OscConfig+0x68>
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	025b      	lsls	r3, r3, #9
 8004860:	429a      	cmp	r2, r3
 8004862:	d10d      	bne.n	8004880 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004864:	4bb5      	ldr	r3, [pc, #724]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	029b      	lsls	r3, r3, #10
 800486c:	4013      	ands	r3, r2
 800486e:	d100      	bne.n	8004872 <HAL_RCC_OscConfig+0x5a>
 8004870:	e06b      	b.n	800494a <HAL_RCC_OscConfig+0x132>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d167      	bne.n	800494a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f000 fb8a 	bl	8004f94 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	2380      	movs	r3, #128	; 0x80
 8004886:	025b      	lsls	r3, r3, #9
 8004888:	429a      	cmp	r2, r3
 800488a:	d107      	bne.n	800489c <HAL_RCC_OscConfig+0x84>
 800488c:	4bab      	ldr	r3, [pc, #684]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4baa      	ldr	r3, [pc, #680]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	0249      	lsls	r1, r1, #9
 8004896:	430a      	orrs	r2, r1
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e027      	b.n	80048ec <HAL_RCC_OscConfig+0xd4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	23a0      	movs	r3, #160	; 0xa0
 80048a2:	02db      	lsls	r3, r3, #11
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d10e      	bne.n	80048c6 <HAL_RCC_OscConfig+0xae>
 80048a8:	4ba4      	ldr	r3, [pc, #656]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4ba3      	ldr	r3, [pc, #652]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048ae:	2180      	movs	r1, #128	; 0x80
 80048b0:	02c9      	lsls	r1, r1, #11
 80048b2:	430a      	orrs	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	4ba1      	ldr	r3, [pc, #644]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4ba0      	ldr	r3, [pc, #640]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	0249      	lsls	r1, r1, #9
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e012      	b.n	80048ec <HAL_RCC_OscConfig+0xd4>
 80048c6:	4b9d      	ldr	r3, [pc, #628]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b9c      	ldr	r3, [pc, #624]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048cc:	499c      	ldr	r1, [pc, #624]	; (8004b40 <HAL_RCC_OscConfig+0x328>)
 80048ce:	400a      	ands	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	4b9a      	ldr	r3, [pc, #616]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	025b      	lsls	r3, r3, #9
 80048da:	4013      	ands	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4b96      	ldr	r3, [pc, #600]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b95      	ldr	r3, [pc, #596]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80048e6:	4997      	ldr	r1, [pc, #604]	; (8004b44 <HAL_RCC_OscConfig+0x32c>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d015      	beq.n	8004920 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fe fe82 	bl	80035fc <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048fc:	e009      	b.n	8004912 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fe:	f7fe fe7d 	bl	80035fc <HAL_GetTick>
 8004902:	0002      	movs	r2, r0
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	; 0x64
 800490a:	d902      	bls.n	8004912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	f000 fb41 	bl	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004912:	4b8a      	ldr	r3, [pc, #552]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	029b      	lsls	r3, r3, #10
 800491a:	4013      	ands	r3, r2
 800491c:	d0ef      	beq.n	80048fe <HAL_RCC_OscConfig+0xe6>
 800491e:	e015      	b.n	800494c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fe fe6c 	bl	80035fc <HAL_GetTick>
 8004924:	0003      	movs	r3, r0
 8004926:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800492a:	f7fe fe67 	bl	80035fc <HAL_GetTick>
 800492e:	0002      	movs	r2, r0
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b64      	cmp	r3, #100	; 0x64
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e32b      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800493c:	4b7f      	ldr	r3, [pc, #508]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	029b      	lsls	r3, r3, #10
 8004944:	4013      	ands	r3, r2
 8004946:	d1f0      	bne.n	800492a <HAL_RCC_OscConfig+0x112>
 8004948:	e000      	b.n	800494c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2202      	movs	r2, #2
 8004952:	4013      	ands	r3, r2
 8004954:	d100      	bne.n	8004958 <HAL_RCC_OscConfig+0x140>
 8004956:	e08c      	b.n	8004a72 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d005      	beq.n	8004970 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d13f      	bne.n	80049ea <HAL_RCC_OscConfig+0x1d2>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d13c      	bne.n	80049ea <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004970:	4b72      	ldr	r3, [pc, #456]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2204      	movs	r2, #4
 8004976:	4013      	ands	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_RCC_OscConfig+0x16c>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e307      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004984:	4b6d      	ldr	r3, [pc, #436]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a6f      	ldr	r2, [pc, #444]	; (8004b48 <HAL_RCC_OscConfig+0x330>)
 800498a:	4013      	ands	r3, r2
 800498c:	0019      	movs	r1, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	4b69      	ldr	r3, [pc, #420]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800499a:	4b68      	ldr	r3, [pc, #416]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2209      	movs	r2, #9
 80049a0:	4393      	bics	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	4b65      	ldr	r3, [pc, #404]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ac:	f000 fc44 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80049b0:	0001      	movs	r1, r0
 80049b2:	4b62      	ldr	r3, [pc, #392]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	091b      	lsrs	r3, r3, #4
 80049b8:	220f      	movs	r2, #15
 80049ba:	4013      	ands	r3, r2
 80049bc:	4a63      	ldr	r2, [pc, #396]	; (8004b4c <HAL_RCC_OscConfig+0x334>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	000a      	movs	r2, r1
 80049c2:	40da      	lsrs	r2, r3
 80049c4:	4b62      	ldr	r3, [pc, #392]	; (8004b50 <HAL_RCC_OscConfig+0x338>)
 80049c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80049c8:	4b62      	ldr	r3, [pc, #392]	; (8004b54 <HAL_RCC_OscConfig+0x33c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2513      	movs	r5, #19
 80049ce:	197c      	adds	r4, r7, r5
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7fe fdcd 	bl	8003570 <HAL_InitTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80049da:	197b      	adds	r3, r7, r5
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d047      	beq.n	8004a72 <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 80049e2:	2313      	movs	r3, #19
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	e2d4      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d027      	beq.n	8004a40 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80049f0:	4b52      	ldr	r3, [pc, #328]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2209      	movs	r2, #9
 80049f6:	4393      	bics	r3, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	4b50      	ldr	r3, [pc, #320]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fe fdfb 	bl	80035fc <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0c:	f7fe fdf6 	bl	80035fc <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e2ba      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a1e:	4b47      	ldr	r3, [pc, #284]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2204      	movs	r2, #4
 8004a24:	4013      	ands	r3, r2
 8004a26:	d0f1      	beq.n	8004a0c <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b44      	ldr	r3, [pc, #272]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a46      	ldr	r2, [pc, #280]	; (8004b48 <HAL_RCC_OscConfig+0x330>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	021a      	lsls	r2, r3, #8
 8004a38:	4b40      	ldr	r3, [pc, #256]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	e018      	b.n	8004a72 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a40:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b3d      	ldr	r3, [pc, #244]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004a46:	2101      	movs	r1, #1
 8004a48:	438a      	bics	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fe fdd6 	bl	80035fc <HAL_GetTick>
 8004a50:	0003      	movs	r3, r0
 8004a52:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a56:	f7fe fdd1 	bl	80035fc <HAL_GetTick>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e295      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a68:	4b34      	ldr	r3, [pc, #208]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d1f1      	bne.n	8004a56 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2210      	movs	r2, #16
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d100      	bne.n	8004a7e <HAL_RCC_OscConfig+0x266>
 8004a7c:	e0a3      	b.n	8004bc6 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d141      	bne.n	8004b08 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a84:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_OscConfig+0x284>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e27b      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a9c:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	; (8004b58 <HAL_RCC_OscConfig+0x340>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aaa:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ab0:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	0a19      	lsrs	r1, r3, #8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	061a      	lsls	r2, r3, #24
 8004abe:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	0b5b      	lsrs	r3, r3, #13
 8004aca:	3301      	adds	r3, #1
 8004acc:	2280      	movs	r2, #128	; 0x80
 8004ace:	0212      	lsls	r2, r2, #8
 8004ad0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	210f      	movs	r1, #15
 8004ada:	400b      	ands	r3, r1
 8004adc:	491b      	ldr	r1, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x334>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <HAL_RCC_OscConfig+0x338>)
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <HAL_RCC_OscConfig+0x33c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2513      	movs	r5, #19
 8004aec:	197c      	adds	r4, r7, r5
 8004aee:	0018      	movs	r0, r3
 8004af0:	f7fe fd3e 	bl	8003570 <HAL_InitTick>
 8004af4:	0003      	movs	r3, r0
 8004af6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004af8:	197b      	adds	r3, r7, r5
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d062      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8004b00:	2313      	movs	r3, #19
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	e245      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d040      	beq.n	8004b92 <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_OscConfig+0x324>)
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	0049      	lsls	r1, r1, #1
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1e:	f7fe fd6d 	bl	80035fc <HAL_GetTick>
 8004b22:	0003      	movs	r3, r0
 8004b24:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b26:	e019      	b.n	8004b5c <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b28:	f7fe fd68 	bl	80035fc <HAL_GetTick>
 8004b2c:	0002      	movs	r2, r0
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d912      	bls.n	8004b5c <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e22c      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	fffeffff 	.word	0xfffeffff
 8004b44:	fffbffff 	.word	0xfffbffff
 8004b48:	ffffe0ff 	.word	0xffffe0ff
 8004b4c:	08008bf4 	.word	0x08008bf4
 8004b50:	20000034 	.word	0x20000034
 8004b54:	20000038 	.word	0x20000038
 8004b58:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b5c:	4bc6      	ldr	r3, [pc, #792]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4013      	ands	r3, r2
 8004b66:	d0df      	beq.n	8004b28 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b68:	4bc3      	ldr	r3, [pc, #780]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4ac3      	ldr	r2, [pc, #780]	; (8004e7c <HAL_RCC_OscConfig+0x664>)
 8004b6e:	4013      	ands	r3, r2
 8004b70:	0019      	movs	r1, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b76:	4bc0      	ldr	r3, [pc, #768]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b7c:	4bbe      	ldr	r3, [pc, #760]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	0a19      	lsrs	r1, r3, #8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	061a      	lsls	r2, r3, #24
 8004b8a:	4bbb      	ldr	r3, [pc, #748]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
 8004b90:	e019      	b.n	8004bc6 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b92:	4bb9      	ldr	r3, [pc, #740]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4bb8      	ldr	r3, [pc, #736]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004b98:	49b9      	ldr	r1, [pc, #740]	; (8004e80 <HAL_RCC_OscConfig+0x668>)
 8004b9a:	400a      	ands	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fe fd2d 	bl	80035fc <HAL_GetTick>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ba8:	f7fe fd28 	bl	80035fc <HAL_GetTick>
 8004bac:	0002      	movs	r2, r0
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e1ec      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004bba:	4baf      	ldr	r3, [pc, #700]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2208      	movs	r2, #8
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d036      	beq.n	8004c3e <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d019      	beq.n	8004c0c <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd8:	4ba7      	ldr	r3, [pc, #668]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bdc:	4ba6      	ldr	r3, [pc, #664]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004bde:	2101      	movs	r1, #1
 8004be0:	430a      	orrs	r2, r1
 8004be2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be4:	f7fe fd0a 	bl	80035fc <HAL_GetTick>
 8004be8:	0003      	movs	r3, r0
 8004bea:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bee:	f7fe fd05 	bl	80035fc <HAL_GetTick>
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e1c9      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c00:	4b9d      	ldr	r3, [pc, #628]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	2202      	movs	r2, #2
 8004c06:	4013      	ands	r3, r2
 8004c08:	d0f1      	beq.n	8004bee <HAL_RCC_OscConfig+0x3d6>
 8004c0a:	e018      	b.n	8004c3e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0c:	4b9a      	ldr	r3, [pc, #616]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c10:	4b99      	ldr	r3, [pc, #612]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004c12:	2101      	movs	r1, #1
 8004c14:	438a      	bics	r2, r1
 8004c16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c18:	f7fe fcf0 	bl	80035fc <HAL_GetTick>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c22:	f7fe fceb 	bl	80035fc <HAL_GetTick>
 8004c26:	0002      	movs	r2, r0
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e1af      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c34:	4b90      	ldr	r3, [pc, #576]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	2202      	movs	r2, #2
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d1f1      	bne.n	8004c22 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2204      	movs	r2, #4
 8004c44:	4013      	ands	r3, r2
 8004c46:	d100      	bne.n	8004c4a <HAL_RCC_OscConfig+0x432>
 8004c48:	e0af      	b.n	8004daa <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4a:	2327      	movs	r3, #39	; 0x27
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c52:	4b89      	ldr	r3, [pc, #548]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	055b      	lsls	r3, r3, #21
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d10a      	bne.n	8004c74 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	4b86      	ldr	r3, [pc, #536]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c62:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	0549      	lsls	r1, r1, #21
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c6c:	2327      	movs	r3, #39	; 0x27
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c74:	4b83      	ldr	r3, [pc, #524]	; (8004e84 <HAL_RCC_OscConfig+0x66c>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d11a      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c80:	4b80      	ldr	r3, [pc, #512]	; (8004e84 <HAL_RCC_OscConfig+0x66c>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b7f      	ldr	r3, [pc, #508]	; (8004e84 <HAL_RCC_OscConfig+0x66c>)
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	0049      	lsls	r1, r1, #1
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8e:	f7fe fcb5 	bl	80035fc <HAL_GetTick>
 8004c92:	0003      	movs	r3, r0
 8004c94:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c98:	f7fe fcb0 	bl	80035fc <HAL_GetTick>
 8004c9c:	0002      	movs	r2, r0
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e174      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	4b76      	ldr	r3, [pc, #472]	; (8004e84 <HAL_RCC_OscConfig+0x66c>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	2380      	movs	r3, #128	; 0x80
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x4ba>
 8004cc2:	4b6d      	ldr	r3, [pc, #436]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc6:	4b6c      	ldr	r3, [pc, #432]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004cc8:	2180      	movs	r1, #128	; 0x80
 8004cca:	0049      	lsls	r1, r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50
 8004cd0:	e031      	b.n	8004d36 <HAL_RCC_OscConfig+0x51e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x4dc>
 8004cda:	4b67      	ldr	r3, [pc, #412]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cde:	4b66      	ldr	r3, [pc, #408]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004ce0:	4967      	ldr	r1, [pc, #412]	; (8004e80 <HAL_RCC_OscConfig+0x668>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ce6:	4b64      	ldr	r3, [pc, #400]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cea:	4b63      	ldr	r3, [pc, #396]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004cec:	4966      	ldr	r1, [pc, #408]	; (8004e88 <HAL_RCC_OscConfig+0x670>)
 8004cee:	400a      	ands	r2, r1
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8004cf2:	e020      	b.n	8004d36 <HAL_RCC_OscConfig+0x51e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	23a0      	movs	r3, #160	; 0xa0
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCC_OscConfig+0x506>
 8004d00:	4b5d      	ldr	r3, [pc, #372]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d04:	4b5c      	ldr	r3, [pc, #368]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	00c9      	lsls	r1, r1, #3
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
 8004d0e:	4b5a      	ldr	r3, [pc, #360]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d12:	4b59      	ldr	r3, [pc, #356]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d14:	2180      	movs	r1, #128	; 0x80
 8004d16:	0049      	lsls	r1, r1, #1
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d1c:	e00b      	b.n	8004d36 <HAL_RCC_OscConfig+0x51e>
 8004d1e:	4b56      	ldr	r3, [pc, #344]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d22:	4b55      	ldr	r3, [pc, #340]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d24:	4956      	ldr	r1, [pc, #344]	; (8004e80 <HAL_RCC_OscConfig+0x668>)
 8004d26:	400a      	ands	r2, r1
 8004d28:	651a      	str	r2, [r3, #80]	; 0x50
 8004d2a:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d2e:	4b52      	ldr	r3, [pc, #328]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d30:	4955      	ldr	r1, [pc, #340]	; (8004e88 <HAL_RCC_OscConfig+0x670>)
 8004d32:	400a      	ands	r2, r1
 8004d34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d015      	beq.n	8004d6a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fe fc5d 	bl	80035fc <HAL_GetTick>
 8004d42:	0003      	movs	r3, r0
 8004d44:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d46:	e009      	b.n	8004d5c <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fe fc58 	bl	80035fc <HAL_GetTick>
 8004d4c:	0002      	movs	r2, r0
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a4e      	ldr	r2, [pc, #312]	; (8004e8c <HAL_RCC_OscConfig+0x674>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e11b      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d5c:	4b46      	ldr	r3, [pc, #280]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4013      	ands	r3, r2
 8004d66:	d0ef      	beq.n	8004d48 <HAL_RCC_OscConfig+0x530>
 8004d68:	e014      	b.n	8004d94 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6a:	f7fe fc47 	bl	80035fc <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d72:	e009      	b.n	8004d88 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fe fc42 	bl	80035fc <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	4a43      	ldr	r2, [pc, #268]	; (8004e8c <HAL_RCC_OscConfig+0x674>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e105      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d88:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4013      	ands	r3, r2
 8004d92:	d1ef      	bne.n	8004d74 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d94:	2327      	movs	r3, #39	; 0x27
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d105      	bne.n	8004daa <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da2:	4b35      	ldr	r3, [pc, #212]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004da4:	493a      	ldr	r1, [pc, #232]	; (8004e90 <HAL_RCC_OscConfig+0x678>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2220      	movs	r2, #32
 8004db0:	4013      	ands	r3, r2
 8004db2:	d049      	beq.n	8004e48 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d026      	beq.n	8004e0a <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004dbc:	4b2e      	ldr	r3, [pc, #184]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004dce:	2101      	movs	r1, #1
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34
 8004dd4:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_RCC_OscConfig+0x67c>)
 8004dd6:	6a1a      	ldr	r2, [r3, #32]
 8004dd8:	4b2e      	ldr	r3, [pc, #184]	; (8004e94 <HAL_RCC_OscConfig+0x67c>)
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	0189      	lsls	r1, r1, #6
 8004dde:	430a      	orrs	r2, r1
 8004de0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de2:	f7fe fc0b 	bl	80035fc <HAL_GetTick>
 8004de6:	0003      	movs	r3, r0
 8004de8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dec:	f7fe fc06 	bl	80035fc <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0ca      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dfe:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2202      	movs	r2, #2
 8004e04:	4013      	ands	r3, r2
 8004e06:	d0f1      	beq.n	8004dec <HAL_RCC_OscConfig+0x5d4>
 8004e08:	e01e      	b.n	8004e48 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004e10:	2101      	movs	r1, #1
 8004e12:	438a      	bics	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <HAL_RCC_OscConfig+0x67c>)
 8004e18:	6a1a      	ldr	r2, [r3, #32]
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <HAL_RCC_OscConfig+0x67c>)
 8004e1c:	491e      	ldr	r1, [pc, #120]	; (8004e98 <HAL_RCC_OscConfig+0x680>)
 8004e1e:	400a      	ands	r2, r1
 8004e20:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fe fbeb 	bl	80035fc <HAL_GetTick>
 8004e26:	0003      	movs	r3, r0
 8004e28:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e2c:	f7fe fbe6 	bl	80035fc <HAL_GetTick>
 8004e30:	0002      	movs	r2, r0
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0aa      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2202      	movs	r2, #2
 8004e44:	4013      	ands	r3, r2
 8004e46:	d1f1      	bne.n	8004e2c <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d100      	bne.n	8004e52 <HAL_RCC_OscConfig+0x63a>
 8004e50:	e09f      	b.n	8004f92 <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2b0c      	cmp	r3, #12
 8004e56:	d100      	bne.n	8004e5a <HAL_RCC_OscConfig+0x642>
 8004e58:	e078      	b.n	8004f4c <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d159      	bne.n	8004f16 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <HAL_RCC_OscConfig+0x660>)
 8004e68:	490c      	ldr	r1, [pc, #48]	; (8004e9c <HAL_RCC_OscConfig+0x684>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6e:	f7fe fbc5 	bl	80035fc <HAL_GetTick>
 8004e72:	0003      	movs	r3, r0
 8004e74:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004e76:	e01c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x69a>
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	ffff1fff 	.word	0xffff1fff
 8004e80:	fffffeff 	.word	0xfffffeff
 8004e84:	40007000 	.word	0x40007000
 8004e88:	fffffbff 	.word	0xfffffbff
 8004e8c:	00001388 	.word	0x00001388
 8004e90:	efffffff 	.word	0xefffffff
 8004e94:	40010000 	.word	0x40010000
 8004e98:	ffffdfff 	.word	0xffffdfff
 8004e9c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fe fbac 	bl	80035fc <HAL_GetTick>
 8004ea4:	0002      	movs	r2, r0
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e070      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004eb2:	4b3a      	ldr	r3, [pc, #232]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	049b      	lsls	r3, r3, #18
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebe:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	4a37      	ldr	r2, [pc, #220]	; (8004fa0 <HAL_RCC_OscConfig+0x788>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004eda:	430a      	orrs	r2, r1
 8004edc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ede:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b2e      	ldr	r3, [pc, #184]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	0449      	lsls	r1, r1, #17
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fe fb86 	bl	80035fc <HAL_GetTick>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fe fb81 	bl	80035fc <HAL_GetTick>
 8004efa:	0002      	movs	r2, r0
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e045      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f08:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	049b      	lsls	r3, r3, #18
 8004f10:	4013      	ands	r3, r2
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x6de>
 8004f14:	e03d      	b.n	8004f92 <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004f1c:	4921      	ldr	r1, [pc, #132]	; (8004fa4 <HAL_RCC_OscConfig+0x78c>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fe fb6b 	bl	80035fc <HAL_GetTick>
 8004f26:	0003      	movs	r3, r0
 8004f28:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fe fb66 	bl	80035fc <HAL_GetTick>
 8004f30:	0002      	movs	r2, r0
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e02a      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f3e:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	049b      	lsls	r3, r3, #18
 8004f46:	4013      	ands	r3, r2
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x714>
 8004f4a:	e022      	b.n	8004f92 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e01d      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f58:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <HAL_RCC_OscConfig+0x784>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	025b      	lsls	r3, r3, #9
 8004f64:	401a      	ands	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d10f      	bne.n	8004f8e <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	23f0      	movs	r3, #240	; 0xf0
 8004f72:	039b      	lsls	r3, r3, #14
 8004f74:	401a      	ands	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	23c0      	movs	r3, #192	; 0xc0
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	401a      	ands	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	0018      	movs	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	b00a      	add	sp, #40	; 0x28
 8004f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	ff02ffff 	.word	0xff02ffff
 8004fa4:	feffffff 	.word	0xfeffffff

08004fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa8:	b5b0      	push	{r4, r5, r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e129      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fbc:	4b96      	ldr	r3, [pc, #600]	; (8005218 <HAL_RCC_ClockConfig+0x270>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d91e      	bls.n	8005008 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fca:	4b93      	ldr	r3, [pc, #588]	; (8005218 <HAL_RCC_ClockConfig+0x270>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4393      	bics	r3, r2
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	4b90      	ldr	r3, [pc, #576]	; (8005218 <HAL_RCC_ClockConfig+0x270>)
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fdc:	f7fe fb0e 	bl	80035fc <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe4:	e009      	b.n	8004ffa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe6:	f7fe fb09 	bl	80035fc <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	4a8a      	ldr	r2, [pc, #552]	; (800521c <HAL_RCC_ClockConfig+0x274>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e10a      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b87      	ldr	r3, [pc, #540]	; (8005218 <HAL_RCC_ClockConfig+0x270>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2201      	movs	r2, #1
 8005000:	4013      	ands	r3, r2
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d1ee      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2202      	movs	r2, #2
 800500e:	4013      	ands	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005012:	4b83      	ldr	r3, [pc, #524]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	22f0      	movs	r2, #240	; 0xf0
 8005018:	4393      	bics	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	4b7f      	ldr	r3, [pc, #508]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 8005022:	430a      	orrs	r2, r1
 8005024:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2201      	movs	r2, #1
 800502c:	4013      	ands	r3, r2
 800502e:	d100      	bne.n	8005032 <HAL_RCC_ClockConfig+0x8a>
 8005030:	e089      	b.n	8005146 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800503a:	4b79      	ldr	r3, [pc, #484]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	029b      	lsls	r3, r3, #10
 8005042:	4013      	ands	r3, r2
 8005044:	d120      	bne.n	8005088 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e0e2      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b03      	cmp	r3, #3
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005052:	4b73      	ldr	r3, [pc, #460]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	049b      	lsls	r3, r3, #18
 800505a:	4013      	ands	r3, r2
 800505c:	d114      	bne.n	8005088 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0d6      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d106      	bne.n	8005078 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800506a:	4b6d      	ldr	r3, [pc, #436]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2204      	movs	r2, #4
 8005070:	4013      	ands	r3, r2
 8005072:	d109      	bne.n	8005088 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0cb      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005078:	4b69      	ldr	r3, [pc, #420]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4013      	ands	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0c3      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005088:	4b65      	ldr	r3, [pc, #404]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2203      	movs	r2, #3
 800508e:	4393      	bics	r3, r2
 8005090:	0019      	movs	r1, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b62      	ldr	r3, [pc, #392]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 8005098:	430a      	orrs	r2, r1
 800509a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800509c:	f7fe faae 	bl	80035fc <HAL_GetTick>
 80050a0:	0003      	movs	r3, r0
 80050a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d111      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ac:	e009      	b.n	80050c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ae:	f7fe faa5 	bl	80035fc <HAL_GetTick>
 80050b2:	0002      	movs	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	4a58      	ldr	r2, [pc, #352]	; (800521c <HAL_RCC_ClockConfig+0x274>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0a6      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050c2:	4b57      	ldr	r3, [pc, #348]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	220c      	movs	r2, #12
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d1ef      	bne.n	80050ae <HAL_RCC_ClockConfig+0x106>
 80050ce:	e03a      	b.n	8005146 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d111      	bne.n	80050fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050d8:	e009      	b.n	80050ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050da:	f7fe fa8f 	bl	80035fc <HAL_GetTick>
 80050de:	0002      	movs	r2, r0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	4a4d      	ldr	r2, [pc, #308]	; (800521c <HAL_RCC_ClockConfig+0x274>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e090      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ee:	4b4c      	ldr	r3, [pc, #304]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	220c      	movs	r2, #12
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d1ef      	bne.n	80050da <HAL_RCC_ClockConfig+0x132>
 80050fa:	e024      	b.n	8005146 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d11b      	bne.n	800513c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005104:	e009      	b.n	800511a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005106:	f7fe fa79 	bl	80035fc <HAL_GetTick>
 800510a:	0002      	movs	r2, r0
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	4a42      	ldr	r2, [pc, #264]	; (800521c <HAL_RCC_ClockConfig+0x274>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e07a      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800511a:	4b41      	ldr	r3, [pc, #260]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	220c      	movs	r2, #12
 8005120:	4013      	ands	r3, r2
 8005122:	2b04      	cmp	r3, #4
 8005124:	d1ef      	bne.n	8005106 <HAL_RCC_ClockConfig+0x15e>
 8005126:	e00e      	b.n	8005146 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005128:	f7fe fa68 	bl	80035fc <HAL_GetTick>
 800512c:	0002      	movs	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	4a3a      	ldr	r2, [pc, #232]	; (800521c <HAL_RCC_ClockConfig+0x274>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e069      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800513c:	4b38      	ldr	r3, [pc, #224]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	220c      	movs	r2, #12
 8005142:	4013      	ands	r3, r2
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005146:	4b34      	ldr	r3, [pc, #208]	; (8005218 <HAL_RCC_ClockConfig+0x270>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2201      	movs	r2, #1
 800514c:	4013      	ands	r3, r2
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d21e      	bcs.n	8005192 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005154:	4b30      	ldr	r3, [pc, #192]	; (8005218 <HAL_RCC_ClockConfig+0x270>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2201      	movs	r2, #1
 800515a:	4393      	bics	r3, r2
 800515c:	0019      	movs	r1, r3
 800515e:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <HAL_RCC_ClockConfig+0x270>)
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005166:	f7fe fa49 	bl	80035fc <HAL_GetTick>
 800516a:	0003      	movs	r3, r0
 800516c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	e009      	b.n	8005184 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005170:	f7fe fa44 	bl	80035fc <HAL_GetTick>
 8005174:	0002      	movs	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	4a28      	ldr	r2, [pc, #160]	; (800521c <HAL_RCC_ClockConfig+0x274>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e045      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005184:	4b24      	ldr	r3, [pc, #144]	; (8005218 <HAL_RCC_ClockConfig+0x270>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	4013      	ands	r3, r2
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d1ee      	bne.n	8005170 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2204      	movs	r2, #4
 8005198:	4013      	ands	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800519c:	4b20      	ldr	r3, [pc, #128]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a20      	ldr	r2, [pc, #128]	; (8005224 <HAL_RCC_ClockConfig+0x27c>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	0019      	movs	r1, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 80051ac:	430a      	orrs	r2, r1
 80051ae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	4013      	ands	r3, r2
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ba:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_RCC_ClockConfig+0x280>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	0019      	movs	r1, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	00da      	lsls	r2, r3, #3
 80051ca:	4b15      	ldr	r3, [pc, #84]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 80051cc:	430a      	orrs	r2, r1
 80051ce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051d0:	f000 f832 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80051d4:	0001      	movs	r1, r0
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_RCC_ClockConfig+0x278>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	220f      	movs	r2, #15
 80051de:	4013      	ands	r3, r2
 80051e0:	4a12      	ldr	r2, [pc, #72]	; (800522c <HAL_RCC_ClockConfig+0x284>)
 80051e2:	5cd3      	ldrb	r3, [r2, r3]
 80051e4:	000a      	movs	r2, r1
 80051e6:	40da      	lsrs	r2, r3
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <HAL_RCC_ClockConfig+0x288>)
 80051ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051ec:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_RCC_ClockConfig+0x28c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	250b      	movs	r5, #11
 80051f2:	197c      	adds	r4, r7, r5
 80051f4:	0018      	movs	r0, r3
 80051f6:	f7fe f9bb 	bl	8003570 <HAL_InitTick>
 80051fa:	0003      	movs	r3, r0
 80051fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80051fe:	197b      	adds	r3, r7, r5
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8005206:	230b      	movs	r3, #11
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	e000      	b.n	8005210 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b004      	add	sp, #16
 8005216:	bdb0      	pop	{r4, r5, r7, pc}
 8005218:	40022000 	.word	0x40022000
 800521c:	00001388 	.word	0x00001388
 8005220:	40021000 	.word	0x40021000
 8005224:	fffff8ff 	.word	0xfffff8ff
 8005228:	ffffc7ff 	.word	0xffffc7ff
 800522c:	08008bf4 	.word	0x08008bf4
 8005230:	20000034 	.word	0x20000034
 8005234:	20000038 	.word	0x20000038

08005238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523a:	b08f      	sub	sp, #60	; 0x3c
 800523c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800523e:	4b4a      	ldr	r3, [pc, #296]	; (8005368 <HAL_RCC_GetSysClockFreq+0x130>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005246:	230c      	movs	r3, #12
 8005248:	4013      	ands	r3, r2
 800524a:	2b08      	cmp	r3, #8
 800524c:	d00f      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0x36>
 800524e:	2b0c      	cmp	r3, #12
 8005250:	d010      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x3c>
 8005252:	2b04      	cmp	r3, #4
 8005254:	d000      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0x20>
 8005256:	e073      	b.n	8005340 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005258:	4b43      	ldr	r3, [pc, #268]	; (8005368 <HAL_RCC_GetSysClockFreq+0x130>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2210      	movs	r2, #16
 800525e:	4013      	ands	r3, r2
 8005260:	d002      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005262:	4b42      	ldr	r3, [pc, #264]	; (800536c <HAL_RCC_GetSysClockFreq+0x134>)
 8005264:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005266:	e079      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8005268:	4b41      	ldr	r3, [pc, #260]	; (8005370 <HAL_RCC_GetSysClockFreq+0x138>)
 800526a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800526c:	e076      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005270:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005272:	e073      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	0c9a      	lsrs	r2, r3, #18
 8005278:	230f      	movs	r3, #15
 800527a:	401a      	ands	r2, r3
 800527c:	4b3e      	ldr	r3, [pc, #248]	; (8005378 <HAL_RCC_GetSysClockFreq+0x140>)
 800527e:	5c9b      	ldrb	r3, [r3, r2]
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	0d9a      	lsrs	r2, r3, #22
 8005286:	2303      	movs	r3, #3
 8005288:	4013      	ands	r3, r2
 800528a:	3301      	adds	r3, #1
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528e:	4b36      	ldr	r3, [pc, #216]	; (8005368 <HAL_RCC_GetSysClockFreq+0x130>)
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	025b      	lsls	r3, r3, #9
 8005296:	4013      	ands	r3, r2
 8005298:	d019      	beq.n	80052ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	4a34      	ldr	r2, [pc, #208]	; (8005374 <HAL_RCC_GetSysClockFreq+0x13c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	69b8      	ldr	r0, [r7, #24]
 80052a8:	69f9      	ldr	r1, [r7, #28]
 80052aa:	f7fb f909 	bl	80004c0 <__aeabi_lmul>
 80052ae:	0003      	movs	r3, r0
 80052b0:	000c      	movs	r4, r1
 80052b2:	0018      	movs	r0, r3
 80052b4:	0021      	movs	r1, r4
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f7fb f8dd 	bl	8000480 <__aeabi_uldivmod>
 80052c6:	0003      	movs	r3, r0
 80052c8:	000c      	movs	r4, r1
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
 80052cc:	e035      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <HAL_RCC_GetSysClockFreq+0x130>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2210      	movs	r2, #16
 80052d4:	4013      	ands	r3, r2
 80052d6:	d019      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	4a22      	ldr	r2, [pc, #136]	; (800536c <HAL_RCC_GetSysClockFreq+0x134>)
 80052e2:	2300      	movs	r3, #0
 80052e4:	68b8      	ldr	r0, [r7, #8]
 80052e6:	68f9      	ldr	r1, [r7, #12]
 80052e8:	f7fb f8ea 	bl	80004c0 <__aeabi_lmul>
 80052ec:	0003      	movs	r3, r0
 80052ee:	000c      	movs	r4, r1
 80052f0:	0018      	movs	r0, r3
 80052f2:	0021      	movs	r1, r4
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f7fb f8be 	bl	8000480 <__aeabi_uldivmod>
 8005304:	0003      	movs	r3, r0
 8005306:	000c      	movs	r4, r1
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
 800530a:	e016      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	0018      	movs	r0, r3
 8005310:	2300      	movs	r3, #0
 8005312:	0019      	movs	r1, r3
 8005314:	4a16      	ldr	r2, [pc, #88]	; (8005370 <HAL_RCC_GetSysClockFreq+0x138>)
 8005316:	2300      	movs	r3, #0
 8005318:	f7fb f8d2 	bl	80004c0 <__aeabi_lmul>
 800531c:	0003      	movs	r3, r0
 800531e:	000c      	movs	r4, r1
 8005320:	0018      	movs	r0, r3
 8005322:	0021      	movs	r1, r4
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	001d      	movs	r5, r3
 8005328:	2300      	movs	r3, #0
 800532a:	001e      	movs	r6, r3
 800532c:	002a      	movs	r2, r5
 800532e:	0033      	movs	r3, r6
 8005330:	f7fb f8a6 	bl	8000480 <__aeabi_uldivmod>
 8005334:	0003      	movs	r3, r0
 8005336:	000c      	movs	r4, r1
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800533e:	e00d      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <HAL_RCC_GetSysClockFreq+0x130>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	0b5b      	lsrs	r3, r3, #13
 8005346:	2207      	movs	r2, #7
 8005348:	4013      	ands	r3, r2
 800534a:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	3301      	adds	r3, #1
 8005350:	2280      	movs	r2, #128	; 0x80
 8005352:	0212      	lsls	r2, r2, #8
 8005354:	409a      	lsls	r2, r3
 8005356:	0013      	movs	r3, r2
 8005358:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800535a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800535e:	0018      	movs	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	b00f      	add	sp, #60	; 0x3c
 8005364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	40021000 	.word	0x40021000
 800536c:	003d0900 	.word	0x003d0900
 8005370:	00f42400 	.word	0x00f42400
 8005374:	007a1200 	.word	0x007a1200
 8005378:	08008c0c 	.word	0x08008c0c

0800537c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005380:	4b02      	ldr	r3, [pc, #8]	; (800538c <HAL_RCC_GetHCLKFreq+0x10>)
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	20000034 	.word	0x20000034

08005390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005394:	f7ff fff2 	bl	800537c <HAL_RCC_GetHCLKFreq>
 8005398:	0001      	movs	r1, r0
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	2207      	movs	r2, #7
 80053a2:	4013      	ands	r3, r2
 80053a4:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a6:	5cd3      	ldrb	r3, [r2, r3]
 80053a8:	40d9      	lsrs	r1, r3
 80053aa:	000b      	movs	r3, r1
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	40021000 	.word	0x40021000
 80053b8:	08008c04 	.word	0x08008c04

080053bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053c0:	f7ff ffdc 	bl	800537c <HAL_RCC_GetHCLKFreq>
 80053c4:	0001      	movs	r1, r0
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	0adb      	lsrs	r3, r3, #11
 80053cc:	2207      	movs	r2, #7
 80053ce:	4013      	ands	r3, r2
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	40d9      	lsrs	r1, r3
 80053d6:	000b      	movs	r3, r1
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	40021000 	.word	0x40021000
 80053e4:	08008c04 	.word	0x08008c04

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80053f0:	2317      	movs	r3, #23
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2220      	movs	r2, #32
 80053fe:	4013      	ands	r3, r2
 8005400:	d106      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4013      	ands	r3, r2
 800540c:	d100      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800540e:	e0d9      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005410:	4b9c      	ldr	r3, [pc, #624]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	055b      	lsls	r3, r3, #21
 8005418:	4013      	ands	r3, r2
 800541a:	d10a      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541c:	4b99      	ldr	r3, [pc, #612]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800541e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005420:	4b98      	ldr	r3, [pc, #608]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	0549      	lsls	r1, r1, #21
 8005426:	430a      	orrs	r2, r1
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800542a:	2317      	movs	r3, #23
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005432:	4b95      	ldr	r3, [pc, #596]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	4013      	ands	r3, r2
 800543c:	d11a      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800543e:	4b92      	ldr	r3, [pc, #584]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b91      	ldr	r3, [pc, #580]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	0049      	lsls	r1, r1, #1
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800544c:	f7fe f8d6 	bl	80035fc <HAL_GetTick>
 8005450:	0003      	movs	r3, r0
 8005452:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005454:	e008      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005456:	f7fe f8d1 	bl	80035fc <HAL_GetTick>
 800545a:	0002      	movs	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b64      	cmp	r3, #100	; 0x64
 8005462:	d901      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e108      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005468:	4b87      	ldr	r3, [pc, #540]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4013      	ands	r3, r2
 8005472:	d0f0      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005474:	4b83      	ldr	r3, [pc, #524]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	23c0      	movs	r3, #192	; 0xc0
 800547a:	039b      	lsls	r3, r3, #14
 800547c:	4013      	ands	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	23c0      	movs	r3, #192	; 0xc0
 8005486:	039b      	lsls	r3, r3, #14
 8005488:	4013      	ands	r3, r2
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	429a      	cmp	r2, r3
 800548e:	d107      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	23c0      	movs	r3, #192	; 0xc0
 8005496:	039b      	lsls	r3, r3, #14
 8005498:	4013      	ands	r3, r2
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	429a      	cmp	r2, r3
 800549e:	d013      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	23c0      	movs	r3, #192	; 0xc0
 80054a6:	029b      	lsls	r3, r3, #10
 80054a8:	401a      	ands	r2, r3
 80054aa:	23c0      	movs	r3, #192	; 0xc0
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d10a      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054b2:	4b74      	ldr	r3, [pc, #464]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	029b      	lsls	r3, r3, #10
 80054ba:	401a      	ands	r2, r3
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	029b      	lsls	r3, r3, #10
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d101      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0d8      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80054c8:	4b6e      	ldr	r3, [pc, #440]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80054ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054cc:	23c0      	movs	r3, #192	; 0xc0
 80054ce:	029b      	lsls	r3, r3, #10
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d049      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	23c0      	movs	r3, #192	; 0xc0
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	4013      	ands	r3, r2
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d004      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2220      	movs	r2, #32
 80054f0:	4013      	ands	r3, r2
 80054f2:	d10d      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	23c0      	movs	r3, #192	; 0xc0
 80054fa:	029b      	lsls	r3, r3, #10
 80054fc:	4013      	ands	r3, r2
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	429a      	cmp	r2, r3
 8005502:	d034      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	4013      	ands	r3, r2
 800550e:	d02e      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005510:	4b5c      	ldr	r3, [pc, #368]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005514:	4a5d      	ldr	r2, [pc, #372]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005516:	4013      	ands	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800551a:	4b5a      	ldr	r3, [pc, #360]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800551c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800551e:	4b59      	ldr	r3, [pc, #356]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	0309      	lsls	r1, r1, #12
 8005524:	430a      	orrs	r2, r1
 8005526:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005528:	4b56      	ldr	r3, [pc, #344]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800552a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800552c:	4b55      	ldr	r3, [pc, #340]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800552e:	4958      	ldr	r1, [pc, #352]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005530:	400a      	ands	r2, r1
 8005532:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005534:	4b53      	ldr	r3, [pc, #332]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4013      	ands	r3, r2
 8005542:	d014      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fe f85a 	bl	80035fc <HAL_GetTick>
 8005548:	0003      	movs	r3, r0
 800554a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800554c:	e009      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800554e:	f7fe f855 	bl	80035fc <HAL_GetTick>
 8005552:	0002      	movs	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	4a4e      	ldr	r2, [pc, #312]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e08b      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005562:	4b48      	ldr	r3, [pc, #288]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005564:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4013      	ands	r3, r2
 800556c:	d0ef      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	23c0      	movs	r3, #192	; 0xc0
 8005574:	029b      	lsls	r3, r3, #10
 8005576:	401a      	ands	r2, r3
 8005578:	23c0      	movs	r3, #192	; 0xc0
 800557a:	029b      	lsls	r3, r3, #10
 800557c:	429a      	cmp	r2, r3
 800557e:	d10c      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005580:	4b40      	ldr	r3, [pc, #256]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a44      	ldr	r2, [pc, #272]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005586:	4013      	ands	r3, r2
 8005588:	0019      	movs	r1, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	23c0      	movs	r3, #192	; 0xc0
 8005590:	039b      	lsls	r3, r3, #14
 8005592:	401a      	ands	r2, r3
 8005594:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	4b3a      	ldr	r3, [pc, #232]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800559c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	23c0      	movs	r3, #192	; 0xc0
 80055a4:	029b      	lsls	r3, r3, #10
 80055a6:	401a      	ands	r2, r3
 80055a8:	4b36      	ldr	r3, [pc, #216]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055ae:	2317      	movs	r3, #23
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b8:	4b32      	ldr	r3, [pc, #200]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055bc:	4b31      	ldr	r3, [pc, #196]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055be:	4937      	ldr	r1, [pc, #220]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2201      	movs	r2, #1
 80055ca:	4013      	ands	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ce:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d2:	2203      	movs	r2, #3
 80055d4:	4393      	bics	r3, r2
 80055d6:	0019      	movs	r1, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	4b29      	ldr	r3, [pc, #164]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055de:	430a      	orrs	r2, r1
 80055e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2202      	movs	r2, #2
 80055e8:	4013      	ands	r3, r2
 80055ea:	d009      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ec:	4b25      	ldr	r3, [pc, #148]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f0:	220c      	movs	r2, #12
 80055f2:	4393      	bics	r3, r2
 80055f4:	0019      	movs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	4b22      	ldr	r3, [pc, #136]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80055fc:	430a      	orrs	r2, r1
 80055fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2204      	movs	r2, #4
 8005606:	4013      	ands	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800560a:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800560c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560e:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005610:	4013      	ands	r3, r2
 8005612:	0019      	movs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800561a:	430a      	orrs	r2, r1
 800561c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2208      	movs	r2, #8
 8005624:	4013      	ands	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005628:	4b16      	ldr	r3, [pc, #88]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562c:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800562e:	4013      	ands	r3, r2
 8005630:	0019      	movs	r1, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005638:	430a      	orrs	r2, r1
 800563a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2240      	movs	r2, #64	; 0x40
 8005642:	4013      	ands	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005646:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800564c:	4013      	ands	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1a      	ldr	r2, [r3, #32]
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005656:	430a      	orrs	r2, r1
 8005658:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2280      	movs	r2, #128	; 0x80
 8005660:	4013      	ands	r3, r2
 8005662:	d009      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005664:	4b07      	ldr	r3, [pc, #28]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	4a10      	ldr	r2, [pc, #64]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800566a:	4013      	ands	r3, r2
 800566c:	0019      	movs	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	4b04      	ldr	r3, [pc, #16]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005674:	430a      	orrs	r2, r1
 8005676:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	0018      	movs	r0, r3
 800567c:	46bd      	mov	sp, r7
 800567e:	b006      	add	sp, #24
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	40021000 	.word	0x40021000
 8005688:	40007000 	.word	0x40007000
 800568c:	fffcffff 	.word	0xfffcffff
 8005690:	fff7ffff 	.word	0xfff7ffff
 8005694:	00001388 	.word	0x00001388
 8005698:	ffcfffff 	.word	0xffcfffff
 800569c:	efffffff 	.word	0xefffffff
 80056a0:	fffff3ff 	.word	0xfffff3ff
 80056a4:	ffffcfff 	.word	0xffffcfff
 80056a8:	fbffffff 	.word	0xfbffffff
 80056ac:	fff3ffff 	.word	0xfff3ffff

080056b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e032      	b.n	8005728 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2239      	movs	r2, #57	; 0x39
 80056c6:	5c9b      	ldrb	r3, [r3, r2]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d107      	bne.n	80056de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2238      	movs	r2, #56	; 0x38
 80056d2:	2100      	movs	r1, #0
 80056d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0018      	movs	r0, r3
 80056da:	f7fd fe29 	bl	8003330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2239      	movs	r2, #57	; 0x39
 80056e2:	2102      	movs	r1, #2
 80056e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3304      	adds	r3, #4
 80056ee:	0019      	movs	r1, r3
 80056f0:	0010      	movs	r0, r2
 80056f2:	f000 fa2f 	bl	8005b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	223e      	movs	r2, #62	; 0x3e
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	223a      	movs	r2, #58	; 0x3a
 8005702:	2101      	movs	r1, #1
 8005704:	5499      	strb	r1, [r3, r2]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	223b      	movs	r2, #59	; 0x3b
 800570a:	2101      	movs	r1, #1
 800570c:	5499      	strb	r1, [r3, r2]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	223c      	movs	r2, #60	; 0x3c
 8005712:	2101      	movs	r1, #1
 8005714:	5499      	strb	r1, [r3, r2]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	223d      	movs	r2, #61	; 0x3d
 800571a:	2101      	movs	r1, #1
 800571c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2239      	movs	r2, #57	; 0x39
 8005722:	2101      	movs	r1, #1
 8005724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2239      	movs	r2, #57	; 0x39
 800573c:	5c9b      	ldrb	r3, [r3, r2]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d001      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e036      	b.n	80057b6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2239      	movs	r2, #57	; 0x39
 800574c:	2102      	movs	r1, #2
 800574e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2101      	movs	r1, #1
 800575c:	430a      	orrs	r2, r1
 800575e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	05db      	lsls	r3, r3, #23
 8005768:	429a      	cmp	r2, r3
 800576a:	d009      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x50>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a13      	ldr	r2, [pc, #76]	; (80057c0 <HAL_TIM_Base_Start_IT+0x90>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x50>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <HAL_TIM_Base_Start_IT+0x94>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d111      	bne.n	80057a4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2207      	movs	r2, #7
 8005788:	4013      	ands	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b06      	cmp	r3, #6
 8005790:	d010      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2101      	movs	r1, #1
 800579e:	430a      	orrs	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a2:	e007      	b.n	80057b4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2101      	movs	r1, #1
 80057b0:	430a      	orrs	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	0018      	movs	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	b004      	add	sp, #16
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	40010800 	.word	0x40010800
 80057c4:	40011400 	.word	0x40011400

080057c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2202      	movs	r2, #2
 80057d8:	4013      	ands	r3, r2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d124      	bne.n	8005828 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2202      	movs	r2, #2
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d11d      	bne.n	8005828 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2203      	movs	r2, #3
 80057f2:	4252      	negs	r2, r2
 80057f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	2203      	movs	r2, #3
 8005804:	4013      	ands	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 f98a 	bl	8005b24 <HAL_TIM_IC_CaptureCallback>
 8005810:	e007      	b.n	8005822 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	0018      	movs	r0, r3
 8005816:	f000 f97d 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	0018      	movs	r0, r3
 800581e:	f000 f989 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2204      	movs	r2, #4
 8005830:	4013      	ands	r3, r2
 8005832:	2b04      	cmp	r3, #4
 8005834:	d125      	bne.n	8005882 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2204      	movs	r2, #4
 800583e:	4013      	ands	r3, r2
 8005840:	2b04      	cmp	r3, #4
 8005842:	d11e      	bne.n	8005882 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2205      	movs	r2, #5
 800584a:	4252      	negs	r2, r2
 800584c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	23c0      	movs	r3, #192	; 0xc0
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4013      	ands	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0018      	movs	r0, r3
 8005866:	f000 f95d 	bl	8005b24 <HAL_TIM_IC_CaptureCallback>
 800586a:	e007      	b.n	800587c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 f950 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	0018      	movs	r0, r3
 8005878:	f000 f95c 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2208      	movs	r2, #8
 800588a:	4013      	ands	r3, r2
 800588c:	2b08      	cmp	r3, #8
 800588e:	d124      	bne.n	80058da <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2208      	movs	r2, #8
 8005898:	4013      	ands	r3, r2
 800589a:	2b08      	cmp	r3, #8
 800589c:	d11d      	bne.n	80058da <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2209      	movs	r2, #9
 80058a4:	4252      	negs	r2, r2
 80058a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2204      	movs	r2, #4
 80058ac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2203      	movs	r2, #3
 80058b6:	4013      	ands	r3, r2
 80058b8:	d004      	beq.n	80058c4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0018      	movs	r0, r3
 80058be:	f000 f931 	bl	8005b24 <HAL_TIM_IC_CaptureCallback>
 80058c2:	e007      	b.n	80058d4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 f924 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f000 f930 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	2210      	movs	r2, #16
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d125      	bne.n	8005934 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	2210      	movs	r2, #16
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d11e      	bne.n	8005934 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2211      	movs	r2, #17
 80058fc:	4252      	negs	r2, r2
 80058fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2208      	movs	r2, #8
 8005904:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	23c0      	movs	r3, #192	; 0xc0
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4013      	ands	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0018      	movs	r0, r3
 8005918:	f000 f904 	bl	8005b24 <HAL_TIM_IC_CaptureCallback>
 800591c:	e007      	b.n	800592e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0018      	movs	r0, r3
 8005922:	f000 f8f7 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	0018      	movs	r0, r3
 800592a:	f000 f903 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2201      	movs	r2, #1
 800593c:	4013      	ands	r3, r2
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10f      	bne.n	8005962 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	4013      	ands	r3, r2
 800594c:	2b01      	cmp	r3, #1
 800594e:	d108      	bne.n	8005962 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2202      	movs	r2, #2
 8005956:	4252      	negs	r2, r2
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	0018      	movs	r0, r3
 800595e:	f7fd fc73 	bl	8003248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2240      	movs	r2, #64	; 0x40
 800596a:	4013      	ands	r3, r2
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d10f      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	4013      	ands	r3, r2
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d108      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2241      	movs	r2, #65	; 0x41
 8005984:	4252      	negs	r2, r2
 8005986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	0018      	movs	r0, r3
 800598c:	f000 f8da 	bl	8005b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	b002      	add	sp, #8
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2238      	movs	r2, #56	; 0x38
 80059a6:	5c9b      	ldrb	r3, [r3, r2]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIM_ConfigClockSource+0x18>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e0ab      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x170>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2238      	movs	r2, #56	; 0x38
 80059b4:	2101      	movs	r1, #1
 80059b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2239      	movs	r2, #57	; 0x39
 80059bc:	2102      	movs	r1, #2
 80059be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2277      	movs	r2, #119	; 0x77
 80059cc:	4393      	bics	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a4f      	ldr	r2, [pc, #316]	; (8005b10 <HAL_TIM_ConfigClockSource+0x178>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d100      	bne.n	80059ea <HAL_TIM_ConfigClockSource+0x52>
 80059e8:	e06b      	b.n	8005ac2 <HAL_TIM_ConfigClockSource+0x12a>
 80059ea:	d80e      	bhi.n	8005a0a <HAL_TIM_ConfigClockSource+0x72>
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d100      	bne.n	80059f2 <HAL_TIM_ConfigClockSource+0x5a>
 80059f0:	e077      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x14a>
 80059f2:	d803      	bhi.n	80059fc <HAL_TIM_ConfigClockSource+0x64>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d100      	bne.n	80059fa <HAL_TIM_ConfigClockSource+0x62>
 80059f8:	e073      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x14a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80059fa:	e07c      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d100      	bne.n	8005a02 <HAL_TIM_ConfigClockSource+0x6a>
 8005a00:	e06f      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x14a>
 8005a02:	2b30      	cmp	r3, #48	; 0x30
 8005a04:	d100      	bne.n	8005a08 <HAL_TIM_ConfigClockSource+0x70>
 8005a06:	e06c      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005a08:	e075      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005a0a:	2b70      	cmp	r3, #112	; 0x70
 8005a0c:	d00e      	beq.n	8005a2c <HAL_TIM_ConfigClockSource+0x94>
 8005a0e:	d804      	bhi.n	8005a1a <HAL_TIM_ConfigClockSource+0x82>
 8005a10:	2b50      	cmp	r3, #80	; 0x50
 8005a12:	d036      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0xea>
 8005a14:	2b60      	cmp	r3, #96	; 0x60
 8005a16:	d044      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005a18:	e06d      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005a1a:	2280      	movs	r2, #128	; 0x80
 8005a1c:	0152      	lsls	r2, r2, #5
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d068      	beq.n	8005af4 <HAL_TIM_ConfigClockSource+0x15c>
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	0192      	lsls	r2, r2, #6
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d017      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8005a2a:	e064      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6899      	ldr	r1, [r3, #8]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f000 f958 	bl	8005cf0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2277      	movs	r2, #119	; 0x77
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	609a      	str	r2, [r3, #8]
      break;
 8005a58:	e04d      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6899      	ldr	r1, [r3, #8]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f000 f941 	bl	8005cf0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2180      	movs	r1, #128	; 0x80
 8005a7a:	01c9      	lsls	r1, r1, #7
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]
      break;
 8005a80:	e039      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6859      	ldr	r1, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	001a      	movs	r2, r3
 8005a90:	f000 f8b4 	bl	8005bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2150      	movs	r1, #80	; 0x50
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f000 f90e 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 8005aa0:	e029      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6859      	ldr	r1, [r3, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	001a      	movs	r2, r3
 8005ab0:	f000 f8d2 	bl	8005c58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2160      	movs	r1, #96	; 0x60
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 f8fe 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 8005ac0:	e019      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6859      	ldr	r1, [r3, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	001a      	movs	r2, r3
 8005ad0:	f000 f894 	bl	8005bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2140      	movs	r1, #64	; 0x40
 8005ada:	0018      	movs	r0, r3
 8005adc:	f000 f8ee 	bl	8005cbc <TIM_ITRx_SetConfig>
      break;
 8005ae0:	e009      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	0019      	movs	r1, r3
 8005aec:	0010      	movs	r0, r2
 8005aee:	f000 f8e5 	bl	8005cbc <TIM_ITRx_SetConfig>
        break;
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005af4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2239      	movs	r2, #57	; 0x39
 8005afa:	2101      	movs	r1, #1
 8005afc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2238      	movs	r2, #56	; 0x38
 8005b02:	2100      	movs	r1, #0
 8005b04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	ffff00ff 	.word	0xffff00ff

08005b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b1c:	46c0      	nop			; (mov r8, r8)
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b002      	add	sp, #8
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b2c:	46c0      	nop			; (mov r8, r8)
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b002      	add	sp, #8
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b002      	add	sp, #8
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b4c:	46c0      	nop			; (mov r8, r8)
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b002      	add	sp, #8
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	05db      	lsls	r3, r3, #23
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d007      	beq.n	8005b7e <TIM_Base_SetConfig+0x2a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <TIM_Base_SetConfig+0x9c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_Base_SetConfig+0x2a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <TIM_Base_SetConfig+0xa0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d108      	bne.n	8005b90 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2270      	movs	r2, #112	; 0x70
 8005b82:	4393      	bics	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	05db      	lsls	r3, r3, #23
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d007      	beq.n	8005baa <TIM_Base_SetConfig+0x56>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <TIM_Base_SetConfig+0x9c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_Base_SetConfig+0x56>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <TIM_Base_SetConfig+0xa0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a12      	ldr	r2, [pc, #72]	; (8005bf8 <TIM_Base_SetConfig+0xa4>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2280      	movs	r2, #128	; 0x80
 8005bc0:	4393      	bics	r3, r2
 8005bc2:	001a      	movs	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	615a      	str	r2, [r3, #20]
}
 8005be8:	46c0      	nop			; (mov r8, r8)
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b004      	add	sp, #16
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	40010800 	.word	0x40010800
 8005bf4:	40011400 	.word	0x40011400
 8005bf8:	fffffcff 	.word	0xfffffcff

08005bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	2201      	movs	r2, #1
 8005c14:	4393      	bics	r3, r2
 8005c16:	001a      	movs	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	22f0      	movs	r2, #240	; 0xf0
 8005c26:	4393      	bics	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	220a      	movs	r2, #10
 8005c38:	4393      	bics	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	46c0      	nop			; (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b006      	add	sp, #24
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	4393      	bics	r3, r2
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <TIM_TI2_ConfigInputStage+0x60>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	22a0      	movs	r2, #160	; 0xa0
 8005c94:	4393      	bics	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b006      	add	sp, #24
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	ffff0fff 	.word	0xffff0fff

08005cbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2270      	movs	r2, #112	; 0x70
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	2207      	movs	r2, #7
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	609a      	str	r2, [r3, #8]
}
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b004      	add	sp, #16
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <TIM_ETR_SetConfig+0x3c>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	021a      	lsls	r2, r3, #8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b006      	add	sp, #24
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	ffff00ff 	.word	0xffff00ff

08005d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2238      	movs	r2, #56	; 0x38
 8005d3e:	5c9b      	ldrb	r3, [r3, r2]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e042      	b.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2238      	movs	r2, #56	; 0x38
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2239      	movs	r2, #57	; 0x39
 8005d54:	2102      	movs	r1, #2
 8005d56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2270      	movs	r2, #112	; 0x70
 8005d6c:	4393      	bics	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	05db      	lsls	r3, r3, #23
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d009      	beq.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0f      	ldr	r2, [pc, #60]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10c      	bne.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2280      	movs	r2, #128	; 0x80
 8005da6:	4393      	bics	r3, r2
 8005da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2239      	movs	r2, #57	; 0x39
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2238      	movs	r2, #56	; 0x38
 8005dc8:	2100      	movs	r1, #0
 8005dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b004      	add	sp, #16
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	40010800 	.word	0x40010800
 8005ddc:	40011400 	.word	0x40011400

08005de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e044      	b.n	8005e7c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d107      	bne.n	8005e0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2274      	movs	r2, #116	; 0x74
 8005dfe:	2100      	movs	r1, #0
 8005e00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fd fab1 	bl	800336c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2224      	movs	r2, #36	; 0x24
 8005e0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	438a      	bics	r2, r1
 8005e1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 fb56 	bl	80064d4 <UART_SetConfig>
 8005e28:	0003      	movs	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e024      	b.n	8005e7c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 fde7 	bl	8006a10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	490d      	ldr	r1, [pc, #52]	; (8005e84 <HAL_UART_Init+0xa4>)
 8005e4e:	400a      	ands	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	212a      	movs	r1, #42	; 0x2a
 8005e5e:	438a      	bics	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0018      	movs	r0, r3
 8005e76:	f000 fe7f 	bl	8006b78 <UART_CheckIdleState>
 8005e7a:	0003      	movs	r3, r0
}
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	b002      	add	sp, #8
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	ffffb7ff 	.word	0xffffb7ff

08005e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	; 0x28
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	1dbb      	adds	r3, r7, #6
 8005e96:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d000      	beq.n	8005ea2 <HAL_UART_Transmit+0x1a>
 8005ea0:	e095      	b.n	8005fce <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_UART_Transmit+0x28>
 8005ea8:	1dbb      	adds	r3, r7, #6
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e08d      	b.n	8005fd0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	015b      	lsls	r3, r3, #5
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d109      	bne.n	8005ed4 <HAL_UART_Transmit+0x4c>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d105      	bne.n	8005ed4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d001      	beq.n	8005ed4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e07d      	b.n	8005fd0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2274      	movs	r2, #116	; 0x74
 8005ed8:	5c9b      	ldrb	r3, [r3, r2]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d101      	bne.n	8005ee2 <HAL_UART_Transmit+0x5a>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e076      	b.n	8005fd0 <HAL_UART_Transmit+0x148>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2274      	movs	r2, #116	; 0x74
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	2100      	movs	r1, #0
 8005ef0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2221      	movs	r2, #33	; 0x21
 8005ef6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ef8:	f7fd fb80 	bl	80035fc <HAL_GetTick>
 8005efc:	0003      	movs	r3, r0
 8005efe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1dba      	adds	r2, r7, #6
 8005f04:	2150      	movs	r1, #80	; 0x50
 8005f06:	8812      	ldrh	r2, [r2, #0]
 8005f08:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1dba      	adds	r2, r7, #6
 8005f0e:	2152      	movs	r1, #82	; 0x52
 8005f10:	8812      	ldrh	r2, [r2, #0]
 8005f12:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	015b      	lsls	r3, r3, #5
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d108      	bne.n	8005f32 <HAL_UART_Transmit+0xaa>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	e003      	b.n	8005f3a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2274      	movs	r2, #116	; 0x74
 8005f3e:	2100      	movs	r1, #0
 8005f40:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005f42:	e02c      	b.n	8005f9e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	0013      	movs	r3, r2
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	f000 fe5b 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8005f56:	1e03      	subs	r3, r0, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e038      	b.n	8005fd0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	001a      	movs	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	05d2      	lsls	r2, r2, #23
 8005f70:	0dd2      	lsrs	r2, r2, #23
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	3302      	adds	r3, #2
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e007      	b.n	8005f8c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2252      	movs	r2, #82	; 0x52
 8005f90:	5a9b      	ldrh	r3, [r3, r2]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b299      	uxth	r1, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2252      	movs	r2, #82	; 0x52
 8005f9c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2252      	movs	r2, #82	; 0x52
 8005fa2:	5a9b      	ldrh	r3, [r3, r2]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1cc      	bne.n	8005f44 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	0013      	movs	r3, r2
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2140      	movs	r1, #64	; 0x40
 8005fb8:	f000 fe28 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8005fbc:	1e03      	subs	r3, r0, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e005      	b.n	8005fd0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b008      	add	sp, #32
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	1dbb      	adds	r3, r7, #6
 8005fe4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d144      	bne.n	8006078 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_UART_Receive_IT+0x24>
 8005ff4:	1dbb      	adds	r3, r7, #6
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e03c      	b.n	800607a <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	2380      	movs	r3, #128	; 0x80
 8006006:	015b      	lsls	r3, r3, #5
 8006008:	429a      	cmp	r2, r3
 800600a:	d109      	bne.n	8006020 <HAL_UART_Receive_IT+0x48>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2201      	movs	r2, #1
 8006018:	4013      	ands	r3, r2
 800601a:	d001      	beq.n	8006020 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e02c      	b.n	800607a <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2274      	movs	r2, #116	; 0x74
 8006024:	5c9b      	ldrb	r3, [r3, r2]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_UART_Receive_IT+0x56>
 800602a:	2302      	movs	r3, #2
 800602c:	e025      	b.n	800607a <HAL_UART_Receive_IT+0xa2>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2274      	movs	r2, #116	; 0x74
 8006032:	2101      	movs	r1, #1
 8006034:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a10      	ldr	r2, [pc, #64]	; (8006084 <HAL_UART_Receive_IT+0xac>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00f      	beq.n	8006066 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	2380      	movs	r3, #128	; 0x80
 800604e:	041b      	lsls	r3, r3, #16
 8006050:	4013      	ands	r3, r2
 8006052:	d008      	beq.n	8006066 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2180      	movs	r1, #128	; 0x80
 8006060:	04c9      	lsls	r1, r1, #19
 8006062:	430a      	orrs	r2, r1
 8006064:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006066:	1dbb      	adds	r3, r7, #6
 8006068:	881a      	ldrh	r2, [r3, #0]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	0018      	movs	r0, r3
 8006070:	f000 fe4a 	bl	8006d08 <UART_Start_Receive_IT>
 8006074:	0003      	movs	r3, r0
 8006076:	e000      	b.n	800607a <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8006078:	2302      	movs	r3, #2
  }
}
 800607a:	0018      	movs	r0, r3
 800607c:	46bd      	mov	sp, r7
 800607e:	b004      	add	sp, #16
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	40004800 	.word	0x40004800

08006088 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4ab6      	ldr	r2, [pc, #728]	; (8006384 <HAL_UART_IRQHandler+0x2fc>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d112      	bne.n	80060dc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2220      	movs	r2, #32
 80060ba:	4013      	ands	r3, r2
 80060bc:	d00e      	beq.n	80060dc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2220      	movs	r2, #32
 80060c2:	4013      	ands	r3, r2
 80060c4:	d00a      	beq.n	80060dc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d100      	bne.n	80060d0 <HAL_UART_IRQHandler+0x48>
 80060ce:	e1d6      	b.n	800647e <HAL_UART_IRQHandler+0x3f6>
      {
        huart->RxISR(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	0010      	movs	r0, r2
 80060d8:	4798      	blx	r3
      }
      return;
 80060da:	e1d0      	b.n	800647e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d100      	bne.n	80060e4 <HAL_UART_IRQHandler+0x5c>
 80060e2:	e0d9      	b.n	8006298 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2201      	movs	r2, #1
 80060e8:	4013      	ands	r3, r2
 80060ea:	d104      	bne.n	80060f6 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	4aa6      	ldr	r2, [pc, #664]	; (8006388 <HAL_UART_IRQHandler+0x300>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	d100      	bne.n	80060f6 <HAL_UART_IRQHandler+0x6e>
 80060f4:	e0d0      	b.n	8006298 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	2201      	movs	r2, #1
 80060fa:	4013      	ands	r3, r2
 80060fc:	d010      	beq.n	8006120 <HAL_UART_IRQHandler+0x98>
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4013      	ands	r3, r2
 8006106:	d00b      	beq.n	8006120 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2201      	movs	r2, #1
 800610e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	589b      	ldr	r3, [r3, r2]
 8006116:	2201      	movs	r2, #1
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2180      	movs	r1, #128	; 0x80
 800611e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2202      	movs	r2, #2
 8006124:	4013      	ands	r3, r2
 8006126:	d00f      	beq.n	8006148 <HAL_UART_IRQHandler+0xc0>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2201      	movs	r2, #1
 800612c:	4013      	ands	r3, r2
 800612e:	d00b      	beq.n	8006148 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2202      	movs	r2, #2
 8006136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2280      	movs	r2, #128	; 0x80
 800613c:	589b      	ldr	r3, [r3, r2]
 800613e:	2204      	movs	r2, #4
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2204      	movs	r2, #4
 800614c:	4013      	ands	r3, r2
 800614e:	d00f      	beq.n	8006170 <HAL_UART_IRQHandler+0xe8>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2201      	movs	r2, #1
 8006154:	4013      	ands	r3, r2
 8006156:	d00b      	beq.n	8006170 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2204      	movs	r2, #4
 800615e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2280      	movs	r2, #128	; 0x80
 8006164:	589b      	ldr	r3, [r3, r2]
 8006166:	2202      	movs	r2, #2
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2180      	movs	r1, #128	; 0x80
 800616e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2208      	movs	r2, #8
 8006174:	4013      	ands	r3, r2
 8006176:	d013      	beq.n	80061a0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2220      	movs	r2, #32
 800617c:	4013      	ands	r3, r2
 800617e:	d103      	bne.n	8006188 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2201      	movs	r2, #1
 8006184:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006186:	d00b      	beq.n	80061a0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2208      	movs	r2, #8
 800618e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2280      	movs	r2, #128	; 0x80
 8006194:	589b      	ldr	r3, [r3, r2]
 8006196:	2208      	movs	r2, #8
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2180      	movs	r1, #128	; 0x80
 800619e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	4013      	ands	r3, r2
 80061a8:	d011      	beq.n	80061ce <HAL_UART_IRQHandler+0x146>
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	04db      	lsls	r3, r3, #19
 80061b0:	4013      	ands	r3, r2
 80061b2:	d00c      	beq.n	80061ce <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2280      	movs	r2, #128	; 0x80
 80061ba:	0112      	lsls	r2, r2, #4
 80061bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2280      	movs	r2, #128	; 0x80
 80061c2:	589b      	ldr	r3, [r3, r2]
 80061c4:	2220      	movs	r2, #32
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2280      	movs	r2, #128	; 0x80
 80061d2:	589b      	ldr	r3, [r3, r2]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d100      	bne.n	80061da <HAL_UART_IRQHandler+0x152>
 80061d8:	e153      	b.n	8006482 <HAL_UART_IRQHandler+0x3fa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2220      	movs	r2, #32
 80061de:	4013      	ands	r3, r2
 80061e0:	d00c      	beq.n	80061fc <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2220      	movs	r2, #32
 80061e6:	4013      	ands	r3, r2
 80061e8:	d008      	beq.n	80061fc <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	0010      	movs	r0, r2
 80061fa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2280      	movs	r2, #128	; 0x80
 8006200:	589b      	ldr	r3, [r3, r2]
 8006202:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2240      	movs	r2, #64	; 0x40
 800620c:	4013      	ands	r3, r2
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d003      	beq.n	800621a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2228      	movs	r2, #40	; 0x28
 8006216:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006218:	d033      	beq.n	8006282 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	0018      	movs	r0, r3
 800621e:	f000 fe01 	bl	8006e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2240      	movs	r2, #64	; 0x40
 800622a:	4013      	ands	r3, r2
 800622c:	2b40      	cmp	r3, #64	; 0x40
 800622e:	d123      	bne.n	8006278 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2140      	movs	r1, #64	; 0x40
 800623c:	438a      	bics	r2, r1
 800623e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006244:	2b00      	cmp	r3, #0
 8006246:	d012      	beq.n	800626e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624c:	4a4f      	ldr	r2, [pc, #316]	; (800638c <HAL_UART_IRQHandler+0x304>)
 800624e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	0018      	movs	r0, r3
 8006256:	f7fd fb1b 	bl	8003890 <HAL_DMA_Abort_IT>
 800625a:	1e03      	subs	r3, r0, #0
 800625c:	d01a      	beq.n	8006294 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	0018      	movs	r0, r3
 800626a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626c:	e012      	b.n	8006294 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f000 f91b 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006276:	e00d      	b.n	8006294 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0018      	movs	r0, r3
 800627c:	f000 f916 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e008      	b.n	8006294 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0018      	movs	r0, r3
 8006286:	f000 f911 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2280      	movs	r2, #128	; 0x80
 800628e:	2100      	movs	r1, #0
 8006290:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006292:	e0f6      	b.n	8006482 <HAL_UART_IRQHandler+0x3fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	46c0      	nop			; (mov r8, r8)
    return;
 8006296:	e0f4      	b.n	8006482 <HAL_UART_IRQHandler+0x3fa>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629c:	2b01      	cmp	r3, #1
 800629e:	d000      	beq.n	80062a2 <HAL_UART_IRQHandler+0x21a>
 80062a0:	e0b9      	b.n	8006416 <HAL_UART_IRQHandler+0x38e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	2210      	movs	r2, #16
 80062a6:	4013      	ands	r3, r2
 80062a8:	d100      	bne.n	80062ac <HAL_UART_IRQHandler+0x224>
 80062aa:	e0b4      	b.n	8006416 <HAL_UART_IRQHandler+0x38e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2210      	movs	r2, #16
 80062b0:	4013      	ands	r3, r2
 80062b2:	d100      	bne.n	80062b6 <HAL_UART_IRQHandler+0x22e>
 80062b4:	e0af      	b.n	8006416 <HAL_UART_IRQHandler+0x38e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2210      	movs	r2, #16
 80062bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2240      	movs	r2, #64	; 0x40
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d163      	bne.n	8006394 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	2108      	movs	r1, #8
 80062d6:	187b      	adds	r3, r7, r1
 80062d8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80062da:	187b      	adds	r3, r7, r1
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d100      	bne.n	80062e4 <HAL_UART_IRQHandler+0x25c>
 80062e2:	e0d0      	b.n	8006486 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2258      	movs	r2, #88	; 0x58
 80062e8:	5a9b      	ldrh	r3, [r3, r2]
 80062ea:	2208      	movs	r2, #8
 80062ec:	18ba      	adds	r2, r7, r2
 80062ee:	8812      	ldrh	r2, [r2, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d300      	bcc.n	80062f6 <HAL_UART_IRQHandler+0x26e>
 80062f4:	e0c7      	b.n	8006486 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2208      	movs	r2, #8
 80062fa:	18ba      	adds	r2, r7, r2
 80062fc:	215a      	movs	r1, #90	; 0x5a
 80062fe:	8812      	ldrh	r2, [r2, #0]
 8006300:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2220      	movs	r2, #32
 800630c:	4013      	ands	r3, r2
 800630e:	d12a      	bne.n	8006366 <HAL_UART_IRQHandler+0x2de>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	491d      	ldr	r1, [pc, #116]	; (8006390 <HAL_UART_IRQHandler+0x308>)
 800631c:	400a      	ands	r2, r1
 800631e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2101      	movs	r1, #1
 800632c:	438a      	bics	r2, r1
 800632e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2140      	movs	r1, #64	; 0x40
 800633c:	438a      	bics	r2, r1
 800633e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2110      	movs	r1, #16
 8006358:	438a      	bics	r2, r1
 800635a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006360:	0018      	movs	r0, r3
 8006362:	f7fd fa55 	bl	8003810 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2258      	movs	r2, #88	; 0x58
 800636a:	5a9a      	ldrh	r2, [r3, r2]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	215a      	movs	r1, #90	; 0x5a
 8006370:	5a5b      	ldrh	r3, [r3, r1]
 8006372:	b29b      	uxth	r3, r3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	0011      	movs	r1, r2
 800637c:	0018      	movs	r0, r3
 800637e:	f000 f89d 	bl	80064bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006382:	e080      	b.n	8006486 <HAL_UART_IRQHandler+0x3fe>
 8006384:	0000080f 	.word	0x0000080f
 8006388:	04000120 	.word	0x04000120
 800638c:	08006e85 	.word	0x08006e85
 8006390:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2258      	movs	r2, #88	; 0x58
 8006398:	5a99      	ldrh	r1, [r3, r2]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	225a      	movs	r2, #90	; 0x5a
 800639e:	5a9b      	ldrh	r3, [r3, r2]
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	230a      	movs	r3, #10
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	1a8a      	subs	r2, r1, r2
 80063a8:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	225a      	movs	r2, #90	; 0x5a
 80063ae:	5a9b      	ldrh	r3, [r3, r2]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d100      	bne.n	80063b8 <HAL_UART_IRQHandler+0x330>
 80063b6:	e068      	b.n	800648a <HAL_UART_IRQHandler+0x402>
          &&(nb_rx_data > 0U) )
 80063b8:	230a      	movs	r3, #10
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d063      	beq.n	800648a <HAL_UART_IRQHandler+0x402>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4932      	ldr	r1, [pc, #200]	; (8006498 <HAL_UART_IRQHandler+0x410>)
 80063ce:	400a      	ands	r2, r1
 80063d0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2101      	movs	r1, #1
 80063de:	438a      	bics	r2, r1
 80063e0:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2110      	movs	r1, #16
 8006400:	438a      	bics	r2, r1
 8006402:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006404:	230a      	movs	r3, #10
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	881a      	ldrh	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	0011      	movs	r1, r2
 800640e:	0018      	movs	r0, r3
 8006410:	f000 f854 	bl	80064bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006414:	e039      	b.n	800648a <HAL_UART_IRQHandler+0x402>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	035b      	lsls	r3, r3, #13
 800641c:	4013      	ands	r3, r2
 800641e:	d00e      	beq.n	800643e <HAL_UART_IRQHandler+0x3b6>
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	2380      	movs	r3, #128	; 0x80
 8006424:	03db      	lsls	r3, r3, #15
 8006426:	4013      	ands	r3, r2
 8006428:	d009      	beq.n	800643e <HAL_UART_IRQHandler+0x3b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2280      	movs	r2, #128	; 0x80
 8006430:	0352      	lsls	r2, r2, #13
 8006432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0018      	movs	r0, r3
 8006438:	f000 fe42 	bl	80070c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800643c:	e028      	b.n	8006490 <HAL_UART_IRQHandler+0x408>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2280      	movs	r2, #128	; 0x80
 8006442:	4013      	ands	r3, r2
 8006444:	d00d      	beq.n	8006462 <HAL_UART_IRQHandler+0x3da>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2280      	movs	r2, #128	; 0x80
 800644a:	4013      	ands	r3, r2
 800644c:	d009      	beq.n	8006462 <HAL_UART_IRQHandler+0x3da>
  {
    if (huart->TxISR != NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01b      	beq.n	800648e <HAL_UART_IRQHandler+0x406>
    {
      huart->TxISR(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	0010      	movs	r0, r2
 800645e:	4798      	blx	r3
    }
    return;
 8006460:	e015      	b.n	800648e <HAL_UART_IRQHandler+0x406>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2240      	movs	r2, #64	; 0x40
 8006466:	4013      	ands	r3, r2
 8006468:	d012      	beq.n	8006490 <HAL_UART_IRQHandler+0x408>
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2240      	movs	r2, #64	; 0x40
 800646e:	4013      	ands	r3, r2
 8006470:	d00e      	beq.n	8006490 <HAL_UART_IRQHandler+0x408>
  {
    UART_EndTransmit_IT(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	0018      	movs	r0, r3
 8006476:	f000 fd1c 	bl	8006eb2 <UART_EndTransmit_IT>
    return;
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	e008      	b.n	8006490 <HAL_UART_IRQHandler+0x408>
      return;
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	e006      	b.n	8006490 <HAL_UART_IRQHandler+0x408>
    return;
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	e004      	b.n	8006490 <HAL_UART_IRQHandler+0x408>
      return;
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	e002      	b.n	8006490 <HAL_UART_IRQHandler+0x408>
      return;
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	e000      	b.n	8006490 <HAL_UART_IRQHandler+0x408>
    return;
 800648e:	46c0      	nop			; (mov r8, r8)
  }

}
 8006490:	46bd      	mov	sp, r7
 8006492:	b008      	add	sp, #32
 8006494:	bd80      	pop	{r7, pc}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	fffffedf 	.word	0xfffffedf

0800649c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064a4:	46c0      	nop			; (mov r8, r8)
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b002      	add	sp, #8
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064b4:	46c0      	nop			; (mov r8, r8)
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b002      	add	sp, #8
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	000a      	movs	r2, r1
 80064c6:	1cbb      	adds	r3, r7, #2
 80064c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b002      	add	sp, #8
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	b5b0      	push	{r4, r5, r7, lr}
 80064d6:	b08e      	sub	sp, #56	; 0x38
 80064d8:	af00      	add	r7, sp, #0
 80064da:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064dc:	231a      	movs	r3, #26
 80064de:	2218      	movs	r2, #24
 80064e0:	4694      	mov	ip, r2
 80064e2:	44bc      	add	ip, r7
 80064e4:	4463      	add	r3, ip
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	431a      	orrs	r2, r3
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	4313      	orrs	r3, r2
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4aca      	ldr	r2, [pc, #808]	; (8006834 <UART_SetConfig+0x360>)
 800650a:	4013      	ands	r3, r2
 800650c:	0019      	movs	r1, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	4ac6      	ldr	r2, [pc, #792]	; (8006838 <UART_SetConfig+0x364>)
 8006520:	4013      	ands	r3, r2
 8006522:	0019      	movs	r1, r3
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4ac0      	ldr	r2, [pc, #768]	; (800683c <UART_SetConfig+0x368>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006546:	4313      	orrs	r3, r2
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4abb      	ldr	r2, [pc, #748]	; (8006840 <UART_SetConfig+0x36c>)
 8006552:	4013      	ands	r3, r2
 8006554:	0019      	movs	r1, r3
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800655c:	430a      	orrs	r2, r1
 800655e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4ab7      	ldr	r2, [pc, #732]	; (8006844 <UART_SetConfig+0x370>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d134      	bne.n	80065d4 <UART_SetConfig+0x100>
 800656a:	4bb7      	ldr	r3, [pc, #732]	; (8006848 <UART_SetConfig+0x374>)
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	2203      	movs	r2, #3
 8006570:	4013      	ands	r3, r2
 8006572:	2b01      	cmp	r3, #1
 8006574:	d015      	beq.n	80065a2 <UART_SetConfig+0xce>
 8006576:	d304      	bcc.n	8006582 <UART_SetConfig+0xae>
 8006578:	2b02      	cmp	r3, #2
 800657a:	d00a      	beq.n	8006592 <UART_SetConfig+0xbe>
 800657c:	2b03      	cmp	r3, #3
 800657e:	d018      	beq.n	80065b2 <UART_SetConfig+0xde>
 8006580:	e01f      	b.n	80065c2 <UART_SetConfig+0xee>
 8006582:	231b      	movs	r3, #27
 8006584:	2218      	movs	r2, #24
 8006586:	4694      	mov	ip, r2
 8006588:	44bc      	add	ip, r7
 800658a:	4463      	add	r3, ip
 800658c:	2201      	movs	r2, #1
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	e0ab      	b.n	80066ea <UART_SetConfig+0x216>
 8006592:	231b      	movs	r3, #27
 8006594:	2218      	movs	r2, #24
 8006596:	4694      	mov	ip, r2
 8006598:	44bc      	add	ip, r7
 800659a:	4463      	add	r3, ip
 800659c:	2202      	movs	r2, #2
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	e0a3      	b.n	80066ea <UART_SetConfig+0x216>
 80065a2:	231b      	movs	r3, #27
 80065a4:	2218      	movs	r2, #24
 80065a6:	4694      	mov	ip, r2
 80065a8:	44bc      	add	ip, r7
 80065aa:	4463      	add	r3, ip
 80065ac:	2204      	movs	r2, #4
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	e09b      	b.n	80066ea <UART_SetConfig+0x216>
 80065b2:	231b      	movs	r3, #27
 80065b4:	2218      	movs	r2, #24
 80065b6:	4694      	mov	ip, r2
 80065b8:	44bc      	add	ip, r7
 80065ba:	4463      	add	r3, ip
 80065bc:	2208      	movs	r2, #8
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	e093      	b.n	80066ea <UART_SetConfig+0x216>
 80065c2:	231b      	movs	r3, #27
 80065c4:	2218      	movs	r2, #24
 80065c6:	4694      	mov	ip, r2
 80065c8:	44bc      	add	ip, r7
 80065ca:	4463      	add	r3, ip
 80065cc:	2210      	movs	r2, #16
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	e08a      	b.n	80066ea <UART_SetConfig+0x216>
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a9c      	ldr	r2, [pc, #624]	; (800684c <UART_SetConfig+0x378>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d137      	bne.n	800664e <UART_SetConfig+0x17a>
 80065de:	4b9a      	ldr	r3, [pc, #616]	; (8006848 <UART_SetConfig+0x374>)
 80065e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e2:	220c      	movs	r2, #12
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d018      	beq.n	800661c <UART_SetConfig+0x148>
 80065ea:	d802      	bhi.n	80065f2 <UART_SetConfig+0x11e>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <UART_SetConfig+0x128>
 80065f0:	e024      	b.n	800663c <UART_SetConfig+0x168>
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d00a      	beq.n	800660c <UART_SetConfig+0x138>
 80065f6:	2b0c      	cmp	r3, #12
 80065f8:	d018      	beq.n	800662c <UART_SetConfig+0x158>
 80065fa:	e01f      	b.n	800663c <UART_SetConfig+0x168>
 80065fc:	231b      	movs	r3, #27
 80065fe:	2218      	movs	r2, #24
 8006600:	4694      	mov	ip, r2
 8006602:	44bc      	add	ip, r7
 8006604:	4463      	add	r3, ip
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	e06e      	b.n	80066ea <UART_SetConfig+0x216>
 800660c:	231b      	movs	r3, #27
 800660e:	2218      	movs	r2, #24
 8006610:	4694      	mov	ip, r2
 8006612:	44bc      	add	ip, r7
 8006614:	4463      	add	r3, ip
 8006616:	2202      	movs	r2, #2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e066      	b.n	80066ea <UART_SetConfig+0x216>
 800661c:	231b      	movs	r3, #27
 800661e:	2218      	movs	r2, #24
 8006620:	4694      	mov	ip, r2
 8006622:	44bc      	add	ip, r7
 8006624:	4463      	add	r3, ip
 8006626:	2204      	movs	r2, #4
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e05e      	b.n	80066ea <UART_SetConfig+0x216>
 800662c:	231b      	movs	r3, #27
 800662e:	2218      	movs	r2, #24
 8006630:	4694      	mov	ip, r2
 8006632:	44bc      	add	ip, r7
 8006634:	4463      	add	r3, ip
 8006636:	2208      	movs	r2, #8
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	e056      	b.n	80066ea <UART_SetConfig+0x216>
 800663c:	231b      	movs	r3, #27
 800663e:	2218      	movs	r2, #24
 8006640:	4694      	mov	ip, r2
 8006642:	44bc      	add	ip, r7
 8006644:	4463      	add	r3, ip
 8006646:	2210      	movs	r2, #16
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	e04d      	b.n	80066ea <UART_SetConfig+0x216>
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a7a      	ldr	r2, [pc, #488]	; (800683c <UART_SetConfig+0x368>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d141      	bne.n	80066dc <UART_SetConfig+0x208>
 8006658:	4b7b      	ldr	r3, [pc, #492]	; (8006848 <UART_SetConfig+0x374>)
 800665a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800665c:	23c0      	movs	r3, #192	; 0xc0
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	4013      	ands	r3, r2
 8006662:	2280      	movs	r2, #128	; 0x80
 8006664:	00d2      	lsls	r2, r2, #3
 8006666:	4293      	cmp	r3, r2
 8006668:	d01f      	beq.n	80066aa <UART_SetConfig+0x1d6>
 800666a:	2280      	movs	r2, #128	; 0x80
 800666c:	00d2      	lsls	r2, r2, #3
 800666e:	4293      	cmp	r3, r2
 8006670:	d802      	bhi.n	8006678 <UART_SetConfig+0x1a4>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <UART_SetConfig+0x1b6>
 8006676:	e028      	b.n	80066ca <UART_SetConfig+0x1f6>
 8006678:	2280      	movs	r2, #128	; 0x80
 800667a:	0112      	lsls	r2, r2, #4
 800667c:	4293      	cmp	r3, r2
 800667e:	d00c      	beq.n	800669a <UART_SetConfig+0x1c6>
 8006680:	22c0      	movs	r2, #192	; 0xc0
 8006682:	0112      	lsls	r2, r2, #4
 8006684:	4293      	cmp	r3, r2
 8006686:	d018      	beq.n	80066ba <UART_SetConfig+0x1e6>
 8006688:	e01f      	b.n	80066ca <UART_SetConfig+0x1f6>
 800668a:	231b      	movs	r3, #27
 800668c:	2218      	movs	r2, #24
 800668e:	4694      	mov	ip, r2
 8006690:	44bc      	add	ip, r7
 8006692:	4463      	add	r3, ip
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e027      	b.n	80066ea <UART_SetConfig+0x216>
 800669a:	231b      	movs	r3, #27
 800669c:	2218      	movs	r2, #24
 800669e:	4694      	mov	ip, r2
 80066a0:	44bc      	add	ip, r7
 80066a2:	4463      	add	r3, ip
 80066a4:	2202      	movs	r2, #2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	e01f      	b.n	80066ea <UART_SetConfig+0x216>
 80066aa:	231b      	movs	r3, #27
 80066ac:	2218      	movs	r2, #24
 80066ae:	4694      	mov	ip, r2
 80066b0:	44bc      	add	ip, r7
 80066b2:	4463      	add	r3, ip
 80066b4:	2204      	movs	r2, #4
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e017      	b.n	80066ea <UART_SetConfig+0x216>
 80066ba:	231b      	movs	r3, #27
 80066bc:	2218      	movs	r2, #24
 80066be:	4694      	mov	ip, r2
 80066c0:	44bc      	add	ip, r7
 80066c2:	4463      	add	r3, ip
 80066c4:	2208      	movs	r2, #8
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	e00f      	b.n	80066ea <UART_SetConfig+0x216>
 80066ca:	231b      	movs	r3, #27
 80066cc:	2218      	movs	r2, #24
 80066ce:	4694      	mov	ip, r2
 80066d0:	44bc      	add	ip, r7
 80066d2:	4463      	add	r3, ip
 80066d4:	2210      	movs	r2, #16
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	46c0      	nop			; (mov r8, r8)
 80066da:	e006      	b.n	80066ea <UART_SetConfig+0x216>
 80066dc:	231b      	movs	r3, #27
 80066de:	2218      	movs	r2, #24
 80066e0:	4694      	mov	ip, r2
 80066e2:	44bc      	add	ip, r7
 80066e4:	4463      	add	r3, ip
 80066e6:	2210      	movs	r2, #16
 80066e8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a53      	ldr	r2, [pc, #332]	; (800683c <UART_SetConfig+0x368>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d000      	beq.n	80066f6 <UART_SetConfig+0x222>
 80066f4:	e085      	b.n	8006802 <UART_SetConfig+0x32e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066f6:	231b      	movs	r3, #27
 80066f8:	2218      	movs	r2, #24
 80066fa:	4694      	mov	ip, r2
 80066fc:	44bc      	add	ip, r7
 80066fe:	4463      	add	r3, ip
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d00d      	beq.n	8006722 <UART_SetConfig+0x24e>
 8006706:	dc02      	bgt.n	800670e <UART_SetConfig+0x23a>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <UART_SetConfig+0x244>
 800670c:	e01d      	b.n	800674a <UART_SetConfig+0x276>
 800670e:	2b04      	cmp	r3, #4
 8006710:	d012      	beq.n	8006738 <UART_SetConfig+0x264>
 8006712:	2b08      	cmp	r3, #8
 8006714:	d015      	beq.n	8006742 <UART_SetConfig+0x26e>
 8006716:	e018      	b.n	800674a <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006718:	f7fe fe3a 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 800671c:	0003      	movs	r3, r0
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006720:	e01d      	b.n	800675e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006722:	4b49      	ldr	r3, [pc, #292]	; (8006848 <UART_SetConfig+0x374>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2210      	movs	r2, #16
 8006728:	4013      	ands	r3, r2
 800672a:	d002      	beq.n	8006732 <UART_SetConfig+0x25e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800672c:	4b48      	ldr	r3, [pc, #288]	; (8006850 <UART_SetConfig+0x37c>)
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006730:	e015      	b.n	800675e <UART_SetConfig+0x28a>
          pclk = (uint32_t) HSI_VALUE;
 8006732:	4b48      	ldr	r3, [pc, #288]	; (8006854 <UART_SetConfig+0x380>)
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006736:	e012      	b.n	800675e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006738:	f7fe fd7e 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 800673c:	0003      	movs	r3, r0
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006740:	e00d      	b.n	800675e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006742:	2380      	movs	r3, #128	; 0x80
 8006744:	021b      	lsls	r3, r3, #8
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006748:	e009      	b.n	800675e <UART_SetConfig+0x28a>
      default:
        pclk = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800674e:	231a      	movs	r3, #26
 8006750:	2218      	movs	r2, #24
 8006752:	4694      	mov	ip, r2
 8006754:	44bc      	add	ip, r7
 8006756:	4463      	add	r3, ip
 8006758:	2201      	movs	r2, #1
 800675a:	701a      	strb	r2, [r3, #0]
        break;
 800675c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d100      	bne.n	8006766 <UART_SetConfig+0x292>
 8006764:	e139      	b.n	80069da <UART_SetConfig+0x506>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	0013      	movs	r3, r2
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	189b      	adds	r3, r3, r2
 8006770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006772:	429a      	cmp	r2, r3
 8006774:	d305      	bcc.n	8006782 <UART_SetConfig+0x2ae>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800677c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800677e:	429a      	cmp	r2, r3
 8006780:	d907      	bls.n	8006792 <UART_SetConfig+0x2be>
      {
        ret = HAL_ERROR;
 8006782:	231a      	movs	r3, #26
 8006784:	2218      	movs	r2, #24
 8006786:	4694      	mov	ip, r2
 8006788:	44bc      	add	ip, r7
 800678a:	4463      	add	r3, ip
 800678c:	2201      	movs	r2, #1
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e123      	b.n	80069da <UART_SetConfig+0x506>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	6939      	ldr	r1, [r7, #16]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	000b      	movs	r3, r1
 80067a0:	0e1b      	lsrs	r3, r3, #24
 80067a2:	0010      	movs	r0, r2
 80067a4:	0205      	lsls	r5, r0, #8
 80067a6:	431d      	orrs	r5, r3
 80067a8:	000b      	movs	r3, r1
 80067aa:	021c      	lsls	r4, r3, #8
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	60bb      	str	r3, [r7, #8]
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68b8      	ldr	r0, [r7, #8]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	1900      	adds	r0, r0, r4
 80067be:	4169      	adcs	r1, r5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	603b      	str	r3, [r7, #0]
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f7f9 fe57 	bl	8000480 <__aeabi_uldivmod>
 80067d2:	0003      	movs	r3, r0
 80067d4:	000c      	movs	r4, r1
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	4a1f      	ldr	r2, [pc, #124]	; (8006858 <UART_SetConfig+0x384>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d908      	bls.n	80067f2 <UART_SetConfig+0x31e>
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	4a1e      	ldr	r2, [pc, #120]	; (800685c <UART_SetConfig+0x388>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d804      	bhi.n	80067f2 <UART_SetConfig+0x31e>
        {
          huart->Instance->BRR = usartdiv;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ee:	60da      	str	r2, [r3, #12]
 80067f0:	e0f3      	b.n	80069da <UART_SetConfig+0x506>
        }
        else
        {
          ret = HAL_ERROR;
 80067f2:	231a      	movs	r3, #26
 80067f4:	2218      	movs	r2, #24
 80067f6:	4694      	mov	ip, r2
 80067f8:	44bc      	add	ip, r7
 80067fa:	4463      	add	r3, ip
 80067fc:	2201      	movs	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e0eb      	b.n	80069da <UART_SetConfig+0x506>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	69da      	ldr	r2, [r3, #28]
 8006806:	2380      	movs	r3, #128	; 0x80
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	429a      	cmp	r2, r3
 800680c:	d000      	beq.n	8006810 <UART_SetConfig+0x33c>
 800680e:	e08b      	b.n	8006928 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8006810:	231b      	movs	r3, #27
 8006812:	2218      	movs	r2, #24
 8006814:	4694      	mov	ip, r2
 8006816:	44bc      	add	ip, r7
 8006818:	4463      	add	r3, ip
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b08      	cmp	r3, #8
 800681e:	d83a      	bhi.n	8006896 <UART_SetConfig+0x3c2>
 8006820:	009a      	lsls	r2, r3, #2
 8006822:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <UART_SetConfig+0x38c>)
 8006824:	18d3      	adds	r3, r2, r3
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682a:	f7fe fdb1 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 800682e:	0003      	movs	r3, r0
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006832:	e03a      	b.n	80068aa <UART_SetConfig+0x3d6>
 8006834:	efff69f3 	.word	0xefff69f3
 8006838:	ffffcfff 	.word	0xffffcfff
 800683c:	40004800 	.word	0x40004800
 8006840:	fffff4ff 	.word	0xfffff4ff
 8006844:	40013800 	.word	0x40013800
 8006848:	40021000 	.word	0x40021000
 800684c:	40004400 	.word	0x40004400
 8006850:	003d0900 	.word	0x003d0900
 8006854:	00f42400 	.word	0x00f42400
 8006858:	000002ff 	.word	0x000002ff
 800685c:	000fffff 	.word	0x000fffff
 8006860:	08008c18 	.word	0x08008c18
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006864:	f7fe fdaa 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8006868:	0003      	movs	r3, r0
 800686a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800686c:	e01d      	b.n	80068aa <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800686e:	4b63      	ldr	r3, [pc, #396]	; (80069fc <UART_SetConfig+0x528>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2210      	movs	r2, #16
 8006874:	4013      	ands	r3, r2
 8006876:	d002      	beq.n	800687e <UART_SetConfig+0x3aa>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006878:	4b61      	ldr	r3, [pc, #388]	; (8006a00 <UART_SetConfig+0x52c>)
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800687c:	e015      	b.n	80068aa <UART_SetConfig+0x3d6>
          pclk = (uint32_t) HSI_VALUE;
 800687e:	4b61      	ldr	r3, [pc, #388]	; (8006a04 <UART_SetConfig+0x530>)
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006882:	e012      	b.n	80068aa <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006884:	f7fe fcd8 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8006888:	0003      	movs	r3, r0
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800688c:	e00d      	b.n	80068aa <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006894:	e009      	b.n	80068aa <UART_SetConfig+0x3d6>
      default:
        pclk = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800689a:	231a      	movs	r3, #26
 800689c:	2218      	movs	r2, #24
 800689e:	4694      	mov	ip, r2
 80068a0:	44bc      	add	ip, r7
 80068a2:	4463      	add	r3, ip
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
        break;
 80068a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d100      	bne.n	80068b2 <UART_SetConfig+0x3de>
 80068b0:	e093      	b.n	80069da <UART_SetConfig+0x506>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	005a      	lsls	r2, r3, #1
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	18d2      	adds	r2, r2, r3
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	0019      	movs	r1, r3
 80068c4:	0010      	movs	r0, r2
 80068c6:	f7f9 fc27 	bl	8000118 <__udivsi3>
 80068ca:	0003      	movs	r3, r0
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	2b0f      	cmp	r3, #15
 80068d4:	d920      	bls.n	8006918 <UART_SetConfig+0x444>
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	4a4b      	ldr	r2, [pc, #300]	; (8006a08 <UART_SetConfig+0x534>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d81c      	bhi.n	8006918 <UART_SetConfig+0x444>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	200e      	movs	r0, #14
 80068e4:	2418      	movs	r4, #24
 80068e6:	193b      	adds	r3, r7, r4
 80068e8:	181b      	adds	r3, r3, r0
 80068ea:	210f      	movs	r1, #15
 80068ec:	438a      	bics	r2, r1
 80068ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2207      	movs	r2, #7
 80068f8:	4013      	ands	r3, r2
 80068fa:	b299      	uxth	r1, r3
 80068fc:	193b      	adds	r3, r7, r4
 80068fe:	181b      	adds	r3, r3, r0
 8006900:	193a      	adds	r2, r7, r4
 8006902:	1812      	adds	r2, r2, r0
 8006904:	8812      	ldrh	r2, [r2, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	193a      	adds	r2, r7, r4
 8006910:	1812      	adds	r2, r2, r0
 8006912:	8812      	ldrh	r2, [r2, #0]
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	e060      	b.n	80069da <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8006918:	231a      	movs	r3, #26
 800691a:	2218      	movs	r2, #24
 800691c:	4694      	mov	ip, r2
 800691e:	44bc      	add	ip, r7
 8006920:	4463      	add	r3, ip
 8006922:	2201      	movs	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	e058      	b.n	80069da <UART_SetConfig+0x506>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006928:	231b      	movs	r3, #27
 800692a:	2218      	movs	r2, #24
 800692c:	4694      	mov	ip, r2
 800692e:	44bc      	add	ip, r7
 8006930:	4463      	add	r3, ip
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d822      	bhi.n	800697e <UART_SetConfig+0x4aa>
 8006938:	009a      	lsls	r2, r3, #2
 800693a:	4b34      	ldr	r3, [pc, #208]	; (8006a0c <UART_SetConfig+0x538>)
 800693c:	18d3      	adds	r3, r2, r3
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006942:	f7fe fd25 	bl	8005390 <HAL_RCC_GetPCLK1Freq>
 8006946:	0003      	movs	r3, r0
 8006948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800694a:	e022      	b.n	8006992 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800694c:	f7fe fd36 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8006950:	0003      	movs	r3, r0
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006954:	e01d      	b.n	8006992 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006956:	4b29      	ldr	r3, [pc, #164]	; (80069fc <UART_SetConfig+0x528>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2210      	movs	r2, #16
 800695c:	4013      	ands	r3, r2
 800695e:	d002      	beq.n	8006966 <UART_SetConfig+0x492>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006960:	4b27      	ldr	r3, [pc, #156]	; (8006a00 <UART_SetConfig+0x52c>)
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006964:	e015      	b.n	8006992 <UART_SetConfig+0x4be>
          pclk = (uint32_t) HSI_VALUE;
 8006966:	4b27      	ldr	r3, [pc, #156]	; (8006a04 <UART_SetConfig+0x530>)
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800696a:	e012      	b.n	8006992 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696c:	f7fe fc64 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8006970:	0003      	movs	r3, r0
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006974:	e00d      	b.n	8006992 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006976:	2380      	movs	r3, #128	; 0x80
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800697c:	e009      	b.n	8006992 <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006982:	231a      	movs	r3, #26
 8006984:	2218      	movs	r2, #24
 8006986:	4694      	mov	ip, r2
 8006988:	44bc      	add	ip, r7
 800698a:	4463      	add	r3, ip
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
        break;
 8006990:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d020      	beq.n	80069da <UART_SetConfig+0x506>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	085a      	lsrs	r2, r3, #1
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	18d2      	adds	r2, r2, r3
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	0019      	movs	r1, r3
 80069a8:	0010      	movs	r0, r2
 80069aa:	f7f9 fbb5 	bl	8000118 <__udivsi3>
 80069ae:	0003      	movs	r3, r0
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	d908      	bls.n	80069cc <UART_SetConfig+0x4f8>
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	4a12      	ldr	r2, [pc, #72]	; (8006a08 <UART_SetConfig+0x534>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d804      	bhi.n	80069cc <UART_SetConfig+0x4f8>
      {
        huart->Instance->BRR = usartdiv;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c8:	60da      	str	r2, [r3, #12]
 80069ca:	e006      	b.n	80069da <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 80069cc:	231a      	movs	r3, #26
 80069ce:	2218      	movs	r2, #24
 80069d0:	4694      	mov	ip, r2
 80069d2:	44bc      	add	ip, r7
 80069d4:	4463      	add	r3, ip
 80069d6:	2201      	movs	r2, #1
 80069d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	2200      	movs	r2, #0
 80069de:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2200      	movs	r2, #0
 80069e4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069e6:	231a      	movs	r3, #26
 80069e8:	2218      	movs	r2, #24
 80069ea:	4694      	mov	ip, r2
 80069ec:	44bc      	add	ip, r7
 80069ee:	4463      	add	r3, ip
 80069f0:	781b      	ldrb	r3, [r3, #0]
}
 80069f2:	0018      	movs	r0, r3
 80069f4:	46bd      	mov	sp, r7
 80069f6:	b00e      	add	sp, #56	; 0x38
 80069f8:	bdb0      	pop	{r4, r5, r7, pc}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	40021000 	.word	0x40021000
 8006a00:	003d0900 	.word	0x003d0900
 8006a04:	00f42400 	.word	0x00f42400
 8006a08:	0000ffff 	.word	0x0000ffff
 8006a0c:	08008c3c 	.word	0x08008c3c

08006a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4a4a      	ldr	r2, [pc, #296]	; (8006b54 <UART_AdvFeatureConfig+0x144>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	2202      	movs	r2, #2
 8006a40:	4013      	ands	r3, r2
 8006a42:	d00b      	beq.n	8006a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	4a43      	ldr	r2, [pc, #268]	; (8006b58 <UART_AdvFeatureConfig+0x148>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	0019      	movs	r1, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	2204      	movs	r2, #4
 8006a62:	4013      	ands	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a3b      	ldr	r2, [pc, #236]	; (8006b5c <UART_AdvFeatureConfig+0x14c>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	0019      	movs	r1, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	2208      	movs	r2, #8
 8006a84:	4013      	ands	r3, r2
 8006a86:	d00b      	beq.n	8006aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	4a34      	ldr	r2, [pc, #208]	; (8006b60 <UART_AdvFeatureConfig+0x150>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	0019      	movs	r1, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	2210      	movs	r2, #16
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d00b      	beq.n	8006ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <UART_AdvFeatureConfig+0x154>)
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	0019      	movs	r1, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d00b      	beq.n	8006ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	4a25      	ldr	r2, [pc, #148]	; (8006b68 <UART_AdvFeatureConfig+0x158>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	0019      	movs	r1, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	2240      	movs	r2, #64	; 0x40
 8006aea:	4013      	ands	r3, r2
 8006aec:	d01d      	beq.n	8006b2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <UART_AdvFeatureConfig+0x15c>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	0019      	movs	r1, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b0a:	2380      	movs	r3, #128	; 0x80
 8006b0c:	035b      	lsls	r3, r3, #13
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d10b      	bne.n	8006b2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <UART_AdvFeatureConfig+0x160>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	2280      	movs	r2, #128	; 0x80
 8006b30:	4013      	ands	r3, r2
 8006b32:	d00b      	beq.n	8006b4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	4a0e      	ldr	r2, [pc, #56]	; (8006b74 <UART_AdvFeatureConfig+0x164>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	0019      	movs	r1, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]
  }
}
 8006b4c:	46c0      	nop			; (mov r8, r8)
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	b002      	add	sp, #8
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	fffdffff 	.word	0xfffdffff
 8006b58:	fffeffff 	.word	0xfffeffff
 8006b5c:	fffbffff 	.word	0xfffbffff
 8006b60:	ffff7fff 	.word	0xffff7fff
 8006b64:	ffffefff 	.word	0xffffefff
 8006b68:	ffffdfff 	.word	0xffffdfff
 8006b6c:	ffefffff 	.word	0xffefffff
 8006b70:	ff9fffff 	.word	0xff9fffff
 8006b74:	fff7ffff 	.word	0xfff7ffff

08006b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2280      	movs	r2, #128	; 0x80
 8006b84:	2100      	movs	r1, #0
 8006b86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b88:	f7fc fd38 	bl	80035fc <HAL_GetTick>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2208      	movs	r2, #8
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d10d      	bne.n	8006bba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	0399      	lsls	r1, r3, #14
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <UART_CheckIdleState+0x90>)
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	0013      	movs	r3, r2
 8006bac:	2200      	movs	r2, #0
 8006bae:	f000 f82d 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006bb2:	1e03      	subs	r3, r0, #0
 8006bb4:	d001      	beq.n	8006bba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e022      	b.n	8006c00 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d10d      	bne.n	8006be4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	2380      	movs	r3, #128	; 0x80
 8006bcc:	03d9      	lsls	r1, r3, #15
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <UART_CheckIdleState+0x90>)
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	0013      	movs	r3, r2
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f000 f818 	bl	8006c0c <UART_WaitOnFlagUntilTimeout>
 8006bdc:	1e03      	subs	r3, r0, #0
 8006bde:	d001      	beq.n	8006be4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e00d      	b.n	8006c00 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2274      	movs	r2, #116	; 0x74
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b004      	add	sp, #16
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	01ffffff 	.word	0x01ffffff

08006c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	1dfb      	adds	r3, r7, #7
 8006c1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1c:	e05e      	b.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	3301      	adds	r3, #1
 8006c22:	d05b      	beq.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c24:	f7fc fcea 	bl	80035fc <HAL_GetTick>
 8006c28:	0002      	movs	r2, r0
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d302      	bcc.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d11b      	bne.n	8006c72 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	492f      	ldr	r1, [pc, #188]	; (8006d04 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006c46:	400a      	ands	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2101      	movs	r1, #1
 8006c56:	438a      	bics	r2, r1
 8006c58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2274      	movs	r2, #116	; 0x74
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e044      	b.n	8006cfc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d02e      	beq.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	401a      	ands	r2, r3
 8006c8a:	2380      	movs	r3, #128	; 0x80
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d124      	bne.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2280      	movs	r2, #128	; 0x80
 8006c98:	0112      	lsls	r2, r2, #4
 8006c9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4917      	ldr	r1, [pc, #92]	; (8006d04 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006ca8:	400a      	ands	r2, r1
 8006caa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	438a      	bics	r2, r1
 8006cba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2280      	movs	r2, #128	; 0x80
 8006ccc:	2120      	movs	r1, #32
 8006cce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2274      	movs	r2, #116	; 0x74
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e00f      	b.n	8006cfc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	425a      	negs	r2, r3
 8006cec:	4153      	adcs	r3, r2
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	1dfb      	adds	r3, r7, #7
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d091      	beq.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	b004      	add	sp, #16
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	fffffe5f 	.word	0xfffffe5f

08006d08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	1dbb      	adds	r3, r7, #6
 8006d14:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	1dba      	adds	r2, r7, #6
 8006d20:	2158      	movs	r1, #88	; 0x58
 8006d22:	8812      	ldrh	r2, [r2, #0]
 8006d24:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1dba      	adds	r2, r7, #6
 8006d2a:	215a      	movs	r1, #90	; 0x5a
 8006d2c:	8812      	ldrh	r2, [r2, #0]
 8006d2e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	015b      	lsls	r3, r3, #5
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d10d      	bne.n	8006d5e <UART_Start_Receive_IT+0x56>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d104      	bne.n	8006d54 <UART_Start_Receive_IT+0x4c>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	225c      	movs	r2, #92	; 0x5c
 8006d4e:	4932      	ldr	r1, [pc, #200]	; (8006e18 <UART_Start_Receive_IT+0x110>)
 8006d50:	5299      	strh	r1, [r3, r2]
 8006d52:	e02e      	b.n	8006db2 <UART_Start_Receive_IT+0xaa>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	225c      	movs	r2, #92	; 0x5c
 8006d58:	21ff      	movs	r1, #255	; 0xff
 8006d5a:	5299      	strh	r1, [r3, r2]
 8006d5c:	e029      	b.n	8006db2 <UART_Start_Receive_IT+0xaa>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <UART_Start_Receive_IT+0x7a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <UART_Start_Receive_IT+0x70>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	225c      	movs	r2, #92	; 0x5c
 8006d72:	21ff      	movs	r1, #255	; 0xff
 8006d74:	5299      	strh	r1, [r3, r2]
 8006d76:	e01c      	b.n	8006db2 <UART_Start_Receive_IT+0xaa>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	225c      	movs	r2, #92	; 0x5c
 8006d7c:	217f      	movs	r1, #127	; 0x7f
 8006d7e:	5299      	strh	r1, [r3, r2]
 8006d80:	e017      	b.n	8006db2 <UART_Start_Receive_IT+0xaa>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	2380      	movs	r3, #128	; 0x80
 8006d88:	055b      	lsls	r3, r3, #21
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d10d      	bne.n	8006daa <UART_Start_Receive_IT+0xa2>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <UART_Start_Receive_IT+0x98>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	225c      	movs	r2, #92	; 0x5c
 8006d9a:	217f      	movs	r1, #127	; 0x7f
 8006d9c:	5299      	strh	r1, [r3, r2]
 8006d9e:	e008      	b.n	8006db2 <UART_Start_Receive_IT+0xaa>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	225c      	movs	r2, #92	; 0x5c
 8006da4:	213f      	movs	r1, #63	; 0x3f
 8006da6:	5299      	strh	r1, [r3, r2]
 8006da8:	e003      	b.n	8006db2 <UART_Start_Receive_IT+0xaa>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	225c      	movs	r2, #92	; 0x5c
 8006dae:	2100      	movs	r1, #0
 8006db0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2280      	movs	r2, #128	; 0x80
 8006db6:	2100      	movs	r1, #0
 8006db8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2222      	movs	r2, #34	; 0x22
 8006dbe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2101      	movs	r1, #1
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	015b      	lsls	r3, r3, #5
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d107      	bne.n	8006dec <UART_Start_Receive_IT+0xe4>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a0d      	ldr	r2, [pc, #52]	; (8006e1c <UART_Start_Receive_IT+0x114>)
 8006de8:	665a      	str	r2, [r3, #100]	; 0x64
 8006dea:	e002      	b.n	8006df2 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <UART_Start_Receive_IT+0x118>)
 8006df0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2274      	movs	r2, #116	; 0x74
 8006df6:	2100      	movs	r1, #0
 8006df8:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2190      	movs	r1, #144	; 0x90
 8006e06:	0049      	lsls	r1, r1, #1
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	0018      	movs	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b004      	add	sp, #16
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	000001ff 	.word	0x000001ff
 8006e1c:	08006fd5 	.word	0x08006fd5
 8006e20:	08006ee9 	.word	0x08006ee9

08006e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4912      	ldr	r1, [pc, #72]	; (8006e80 <UART_EndRxTransfer+0x5c>)
 8006e38:	400a      	ands	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2101      	movs	r1, #1
 8006e48:	438a      	bics	r2, r1
 8006e4a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d107      	bne.n	8006e64 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2110      	movs	r1, #16
 8006e60:	438a      	bics	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b002      	add	sp, #8
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	fffffedf 	.word	0xfffffedf

08006e84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	225a      	movs	r2, #90	; 0x5a
 8006e96:	2100      	movs	r1, #0
 8006e98:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2252      	movs	r2, #82	; 0x52
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f7ff fb01 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	46bd      	mov	sp, r7
 8006eae:	b004      	add	sp, #16
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2140      	movs	r1, #64	; 0x40
 8006ec6:	438a      	bics	r2, r1
 8006ec8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f7ff fadf 	bl	800649c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	b002      	add	sp, #8
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ef0:	230e      	movs	r3, #14
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	215c      	movs	r1, #92	; 0x5c
 8006ef8:	5a52      	ldrh	r2, [r2, r1]
 8006efa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f00:	2b22      	cmp	r3, #34	; 0x22
 8006f02:	d158      	bne.n	8006fb6 <UART_RxISR_8BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f0a:	210c      	movs	r1, #12
 8006f0c:	187b      	adds	r3, r7, r1
 8006f0e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f10:	187b      	adds	r3, r7, r1
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	230e      	movs	r3, #14
 8006f18:	18fb      	adds	r3, r7, r3
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	b2d9      	uxtb	r1, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f22:	400a      	ands	r2, r1
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	225a      	movs	r2, #90	; 0x5a
 8006f36:	5a9b      	ldrh	r3, [r3, r2]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b299      	uxth	r1, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	225a      	movs	r2, #90	; 0x5a
 8006f42:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	225a      	movs	r2, #90	; 0x5a
 8006f48:	5a9b      	ldrh	r3, [r3, r2]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d13a      	bne.n	8006fc6 <UART_RxISR_8BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	491d      	ldr	r1, [pc, #116]	; (8006fd0 <UART_RxISR_8BIT+0xe8>)
 8006f5c:	400a      	ands	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	438a      	bics	r2, r1
 8006f6e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d110      	bne.n	8006fa6 <UART_RxISR_8BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2110      	movs	r1, #16
 8006f90:	438a      	bics	r2, r1
 8006f92:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2258      	movs	r2, #88	; 0x58
 8006f98:	5a9a      	ldrh	r2, [r3, r2]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	0011      	movs	r1, r2
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f7ff fa8c 	bl	80064bc <HAL_UARTEx_RxEventCallback>
 8006fa4:	e003      	b.n	8006fae <UART_RxISR_8BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f7fb fcb3 	bl	8002914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fb4:	e007      	b.n	8006fc6 <UART_RxISR_8BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2108      	movs	r1, #8
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	619a      	str	r2, [r3, #24]
}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b004      	add	sp, #16
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	fffffedf 	.word	0xfffffedf

08006fd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fdc:	230e      	movs	r3, #14
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	215c      	movs	r1, #92	; 0x5c
 8006fe4:	5a52      	ldrh	r2, [r2, r1]
 8006fe6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fec:	2b22      	cmp	r3, #34	; 0x22
 8006fee:	d158      	bne.n	80070a2 <UART_RxISR_16BIT+0xce>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff6:	210c      	movs	r1, #12
 8006ff8:	187b      	adds	r3, r7, r1
 8006ffa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007002:	187b      	adds	r3, r7, r1
 8007004:	220e      	movs	r2, #14
 8007006:	18ba      	adds	r2, r7, r2
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	8812      	ldrh	r2, [r2, #0]
 800700c:	4013      	ands	r3, r2
 800700e:	b29a      	uxth	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007018:	1c9a      	adds	r2, r3, #2
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	225a      	movs	r2, #90	; 0x5a
 8007022:	5a9b      	ldrh	r3, [r3, r2]
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b299      	uxth	r1, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	225a      	movs	r2, #90	; 0x5a
 800702e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	225a      	movs	r2, #90	; 0x5a
 8007034:	5a9b      	ldrh	r3, [r3, r2]
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d13a      	bne.n	80070b2 <UART_RxISR_16BIT+0xde>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	491d      	ldr	r1, [pc, #116]	; (80070bc <UART_RxISR_16BIT+0xe8>)
 8007048:	400a      	ands	r2, r1
 800704a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2101      	movs	r1, #1
 8007058:	438a      	bics	r2, r1
 800705a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2220      	movs	r2, #32
 8007060:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800706c:	2b01      	cmp	r3, #1
 800706e:	d110      	bne.n	8007092 <UART_RxISR_16BIT+0xbe>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2110      	movs	r1, #16
 800707c:	438a      	bics	r2, r1
 800707e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2258      	movs	r2, #88	; 0x58
 8007084:	5a9a      	ldrh	r2, [r3, r2]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	0011      	movs	r1, r2
 800708a:	0018      	movs	r0, r3
 800708c:	f7ff fa16 	bl	80064bc <HAL_UARTEx_RxEventCallback>
 8007090:	e003      	b.n	800709a <UART_RxISR_16BIT+0xc6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	0018      	movs	r0, r3
 8007096:	f7fb fc3d 	bl	8002914 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070a0:	e007      	b.n	80070b2 <UART_RxISR_16BIT+0xde>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699a      	ldr	r2, [r3, #24]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2108      	movs	r1, #8
 80070ae:	430a      	orrs	r2, r1
 80070b0:	619a      	str	r2, [r3, #24]
}
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b004      	add	sp, #16
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	fffffedf 	.word	0xfffffedf

080070c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070c8:	46c0      	nop			; (mov r8, r8)
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b002      	add	sp, #8
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <__errno>:
 80070d0:	4b01      	ldr	r3, [pc, #4]	; (80070d8 <__errno+0x8>)
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	4770      	bx	lr
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	20000040 	.word	0x20000040

080070dc <__libc_init_array>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	2600      	movs	r6, #0
 80070e0:	4d0c      	ldr	r5, [pc, #48]	; (8007114 <__libc_init_array+0x38>)
 80070e2:	4c0d      	ldr	r4, [pc, #52]	; (8007118 <__libc_init_array+0x3c>)
 80070e4:	1b64      	subs	r4, r4, r5
 80070e6:	10a4      	asrs	r4, r4, #2
 80070e8:	42a6      	cmp	r6, r4
 80070ea:	d109      	bne.n	8007100 <__libc_init_array+0x24>
 80070ec:	2600      	movs	r6, #0
 80070ee:	f001 fcc9 	bl	8008a84 <_init>
 80070f2:	4d0a      	ldr	r5, [pc, #40]	; (800711c <__libc_init_array+0x40>)
 80070f4:	4c0a      	ldr	r4, [pc, #40]	; (8007120 <__libc_init_array+0x44>)
 80070f6:	1b64      	subs	r4, r4, r5
 80070f8:	10a4      	asrs	r4, r4, #2
 80070fa:	42a6      	cmp	r6, r4
 80070fc:	d105      	bne.n	800710a <__libc_init_array+0x2e>
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	00b3      	lsls	r3, r6, #2
 8007102:	58eb      	ldr	r3, [r5, r3]
 8007104:	4798      	blx	r3
 8007106:	3601      	adds	r6, #1
 8007108:	e7ee      	b.n	80070e8 <__libc_init_array+0xc>
 800710a:	00b3      	lsls	r3, r6, #2
 800710c:	58eb      	ldr	r3, [r5, r3]
 800710e:	4798      	blx	r3
 8007110:	3601      	adds	r6, #1
 8007112:	e7f2      	b.n	80070fa <__libc_init_array+0x1e>
 8007114:	08008ce8 	.word	0x08008ce8
 8007118:	08008ce8 	.word	0x08008ce8
 800711c:	08008ce8 	.word	0x08008ce8
 8007120:	08008cec 	.word	0x08008cec

08007124 <memset>:
 8007124:	0003      	movs	r3, r0
 8007126:	1812      	adds	r2, r2, r0
 8007128:	4293      	cmp	r3, r2
 800712a:	d100      	bne.n	800712e <memset+0xa>
 800712c:	4770      	bx	lr
 800712e:	7019      	strb	r1, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	e7f9      	b.n	8007128 <memset+0x4>

08007134 <siprintf>:
 8007134:	b40e      	push	{r1, r2, r3}
 8007136:	b500      	push	{lr}
 8007138:	490b      	ldr	r1, [pc, #44]	; (8007168 <siprintf+0x34>)
 800713a:	b09c      	sub	sp, #112	; 0x70
 800713c:	ab1d      	add	r3, sp, #116	; 0x74
 800713e:	9002      	str	r0, [sp, #8]
 8007140:	9006      	str	r0, [sp, #24]
 8007142:	9107      	str	r1, [sp, #28]
 8007144:	9104      	str	r1, [sp, #16]
 8007146:	4809      	ldr	r0, [pc, #36]	; (800716c <siprintf+0x38>)
 8007148:	4909      	ldr	r1, [pc, #36]	; (8007170 <siprintf+0x3c>)
 800714a:	cb04      	ldmia	r3!, {r2}
 800714c:	9105      	str	r1, [sp, #20]
 800714e:	6800      	ldr	r0, [r0, #0]
 8007150:	a902      	add	r1, sp, #8
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	f000 f870 	bl	8007238 <_svfiprintf_r>
 8007158:	2300      	movs	r3, #0
 800715a:	9a02      	ldr	r2, [sp, #8]
 800715c:	7013      	strb	r3, [r2, #0]
 800715e:	b01c      	add	sp, #112	; 0x70
 8007160:	bc08      	pop	{r3}
 8007162:	b003      	add	sp, #12
 8007164:	4718      	bx	r3
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	7fffffff 	.word	0x7fffffff
 800716c:	20000040 	.word	0x20000040
 8007170:	ffff0208 	.word	0xffff0208

08007174 <__ssputs_r>:
 8007174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007176:	688e      	ldr	r6, [r1, #8]
 8007178:	b085      	sub	sp, #20
 800717a:	0007      	movs	r7, r0
 800717c:	000c      	movs	r4, r1
 800717e:	9203      	str	r2, [sp, #12]
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	429e      	cmp	r6, r3
 8007184:	d83c      	bhi.n	8007200 <__ssputs_r+0x8c>
 8007186:	2390      	movs	r3, #144	; 0x90
 8007188:	898a      	ldrh	r2, [r1, #12]
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	421a      	tst	r2, r3
 800718e:	d034      	beq.n	80071fa <__ssputs_r+0x86>
 8007190:	2503      	movs	r5, #3
 8007192:	6909      	ldr	r1, [r1, #16]
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	1a5b      	subs	r3, r3, r1
 8007198:	9302      	str	r3, [sp, #8]
 800719a:	6963      	ldr	r3, [r4, #20]
 800719c:	9802      	ldr	r0, [sp, #8]
 800719e:	435d      	muls	r5, r3
 80071a0:	0feb      	lsrs	r3, r5, #31
 80071a2:	195d      	adds	r5, r3, r5
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	106d      	asrs	r5, r5, #1
 80071a8:	3301      	adds	r3, #1
 80071aa:	181b      	adds	r3, r3, r0
 80071ac:	42ab      	cmp	r3, r5
 80071ae:	d900      	bls.n	80071b2 <__ssputs_r+0x3e>
 80071b0:	001d      	movs	r5, r3
 80071b2:	0553      	lsls	r3, r2, #21
 80071b4:	d532      	bpl.n	800721c <__ssputs_r+0xa8>
 80071b6:	0029      	movs	r1, r5
 80071b8:	0038      	movs	r0, r7
 80071ba:	f000 fb23 	bl	8007804 <_malloc_r>
 80071be:	1e06      	subs	r6, r0, #0
 80071c0:	d109      	bne.n	80071d6 <__ssputs_r+0x62>
 80071c2:	230c      	movs	r3, #12
 80071c4:	603b      	str	r3, [r7, #0]
 80071c6:	2340      	movs	r3, #64	; 0x40
 80071c8:	2001      	movs	r0, #1
 80071ca:	89a2      	ldrh	r2, [r4, #12]
 80071cc:	4240      	negs	r0, r0
 80071ce:	4313      	orrs	r3, r2
 80071d0:	81a3      	strh	r3, [r4, #12]
 80071d2:	b005      	add	sp, #20
 80071d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d6:	9a02      	ldr	r2, [sp, #8]
 80071d8:	6921      	ldr	r1, [r4, #16]
 80071da:	f000 faac 	bl	8007736 <memcpy>
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	4a14      	ldr	r2, [pc, #80]	; (8007234 <__ssputs_r+0xc0>)
 80071e2:	401a      	ands	r2, r3
 80071e4:	2380      	movs	r3, #128	; 0x80
 80071e6:	4313      	orrs	r3, r2
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	6126      	str	r6, [r4, #16]
 80071ee:	18f6      	adds	r6, r6, r3
 80071f0:	6026      	str	r6, [r4, #0]
 80071f2:	6165      	str	r5, [r4, #20]
 80071f4:	9e01      	ldr	r6, [sp, #4]
 80071f6:	1aed      	subs	r5, r5, r3
 80071f8:	60a5      	str	r5, [r4, #8]
 80071fa:	9b01      	ldr	r3, [sp, #4]
 80071fc:	429e      	cmp	r6, r3
 80071fe:	d900      	bls.n	8007202 <__ssputs_r+0x8e>
 8007200:	9e01      	ldr	r6, [sp, #4]
 8007202:	0032      	movs	r2, r6
 8007204:	9903      	ldr	r1, [sp, #12]
 8007206:	6820      	ldr	r0, [r4, #0]
 8007208:	f000 fa9e 	bl	8007748 <memmove>
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	2000      	movs	r0, #0
 8007210:	1b9b      	subs	r3, r3, r6
 8007212:	60a3      	str	r3, [r4, #8]
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	199e      	adds	r6, r3, r6
 8007218:	6026      	str	r6, [r4, #0]
 800721a:	e7da      	b.n	80071d2 <__ssputs_r+0x5e>
 800721c:	002a      	movs	r2, r5
 800721e:	0038      	movs	r0, r7
 8007220:	f000 fb4e 	bl	80078c0 <_realloc_r>
 8007224:	1e06      	subs	r6, r0, #0
 8007226:	d1e0      	bne.n	80071ea <__ssputs_r+0x76>
 8007228:	6921      	ldr	r1, [r4, #16]
 800722a:	0038      	movs	r0, r7
 800722c:	f000 faa0 	bl	8007770 <_free_r>
 8007230:	e7c7      	b.n	80071c2 <__ssputs_r+0x4e>
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	fffffb7f 	.word	0xfffffb7f

08007238 <_svfiprintf_r>:
 8007238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723a:	b0a1      	sub	sp, #132	; 0x84
 800723c:	9003      	str	r0, [sp, #12]
 800723e:	001d      	movs	r5, r3
 8007240:	898b      	ldrh	r3, [r1, #12]
 8007242:	000f      	movs	r7, r1
 8007244:	0016      	movs	r6, r2
 8007246:	061b      	lsls	r3, r3, #24
 8007248:	d511      	bpl.n	800726e <_svfiprintf_r+0x36>
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10e      	bne.n	800726e <_svfiprintf_r+0x36>
 8007250:	2140      	movs	r1, #64	; 0x40
 8007252:	f000 fad7 	bl	8007804 <_malloc_r>
 8007256:	6038      	str	r0, [r7, #0]
 8007258:	6138      	str	r0, [r7, #16]
 800725a:	2800      	cmp	r0, #0
 800725c:	d105      	bne.n	800726a <_svfiprintf_r+0x32>
 800725e:	230c      	movs	r3, #12
 8007260:	9a03      	ldr	r2, [sp, #12]
 8007262:	3801      	subs	r0, #1
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	b021      	add	sp, #132	; 0x84
 8007268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726a:	2340      	movs	r3, #64	; 0x40
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	2300      	movs	r3, #0
 8007270:	ac08      	add	r4, sp, #32
 8007272:	6163      	str	r3, [r4, #20]
 8007274:	3320      	adds	r3, #32
 8007276:	7663      	strb	r3, [r4, #25]
 8007278:	3310      	adds	r3, #16
 800727a:	76a3      	strb	r3, [r4, #26]
 800727c:	9507      	str	r5, [sp, #28]
 800727e:	0035      	movs	r5, r6
 8007280:	782b      	ldrb	r3, [r5, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <_svfiprintf_r+0x52>
 8007286:	2b25      	cmp	r3, #37	; 0x25
 8007288:	d146      	bne.n	8007318 <_svfiprintf_r+0xe0>
 800728a:	1bab      	subs	r3, r5, r6
 800728c:	9305      	str	r3, [sp, #20]
 800728e:	d00c      	beq.n	80072aa <_svfiprintf_r+0x72>
 8007290:	0032      	movs	r2, r6
 8007292:	0039      	movs	r1, r7
 8007294:	9803      	ldr	r0, [sp, #12]
 8007296:	f7ff ff6d 	bl	8007174 <__ssputs_r>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d100      	bne.n	80072a0 <_svfiprintf_r+0x68>
 800729e:	e0ae      	b.n	80073fe <_svfiprintf_r+0x1c6>
 80072a0:	6962      	ldr	r2, [r4, #20]
 80072a2:	9b05      	ldr	r3, [sp, #20]
 80072a4:	4694      	mov	ip, r2
 80072a6:	4463      	add	r3, ip
 80072a8:	6163      	str	r3, [r4, #20]
 80072aa:	782b      	ldrb	r3, [r5, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d100      	bne.n	80072b2 <_svfiprintf_r+0x7a>
 80072b0:	e0a5      	b.n	80073fe <_svfiprintf_r+0x1c6>
 80072b2:	2201      	movs	r2, #1
 80072b4:	2300      	movs	r3, #0
 80072b6:	4252      	negs	r2, r2
 80072b8:	6062      	str	r2, [r4, #4]
 80072ba:	a904      	add	r1, sp, #16
 80072bc:	3254      	adds	r2, #84	; 0x54
 80072be:	1852      	adds	r2, r2, r1
 80072c0:	1c6e      	adds	r6, r5, #1
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	60e3      	str	r3, [r4, #12]
 80072c6:	60a3      	str	r3, [r4, #8]
 80072c8:	7013      	strb	r3, [r2, #0]
 80072ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80072cc:	7831      	ldrb	r1, [r6, #0]
 80072ce:	2205      	movs	r2, #5
 80072d0:	4853      	ldr	r0, [pc, #332]	; (8007420 <_svfiprintf_r+0x1e8>)
 80072d2:	f000 fa25 	bl	8007720 <memchr>
 80072d6:	1c75      	adds	r5, r6, #1
 80072d8:	2800      	cmp	r0, #0
 80072da:	d11f      	bne.n	800731c <_svfiprintf_r+0xe4>
 80072dc:	6822      	ldr	r2, [r4, #0]
 80072de:	06d3      	lsls	r3, r2, #27
 80072e0:	d504      	bpl.n	80072ec <_svfiprintf_r+0xb4>
 80072e2:	2353      	movs	r3, #83	; 0x53
 80072e4:	a904      	add	r1, sp, #16
 80072e6:	185b      	adds	r3, r3, r1
 80072e8:	2120      	movs	r1, #32
 80072ea:	7019      	strb	r1, [r3, #0]
 80072ec:	0713      	lsls	r3, r2, #28
 80072ee:	d504      	bpl.n	80072fa <_svfiprintf_r+0xc2>
 80072f0:	2353      	movs	r3, #83	; 0x53
 80072f2:	a904      	add	r1, sp, #16
 80072f4:	185b      	adds	r3, r3, r1
 80072f6:	212b      	movs	r1, #43	; 0x2b
 80072f8:	7019      	strb	r1, [r3, #0]
 80072fa:	7833      	ldrb	r3, [r6, #0]
 80072fc:	2b2a      	cmp	r3, #42	; 0x2a
 80072fe:	d016      	beq.n	800732e <_svfiprintf_r+0xf6>
 8007300:	0035      	movs	r5, r6
 8007302:	2100      	movs	r1, #0
 8007304:	200a      	movs	r0, #10
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	782a      	ldrb	r2, [r5, #0]
 800730a:	1c6e      	adds	r6, r5, #1
 800730c:	3a30      	subs	r2, #48	; 0x30
 800730e:	2a09      	cmp	r2, #9
 8007310:	d94e      	bls.n	80073b0 <_svfiprintf_r+0x178>
 8007312:	2900      	cmp	r1, #0
 8007314:	d018      	beq.n	8007348 <_svfiprintf_r+0x110>
 8007316:	e010      	b.n	800733a <_svfiprintf_r+0x102>
 8007318:	3501      	adds	r5, #1
 800731a:	e7b1      	b.n	8007280 <_svfiprintf_r+0x48>
 800731c:	4b40      	ldr	r3, [pc, #256]	; (8007420 <_svfiprintf_r+0x1e8>)
 800731e:	6822      	ldr	r2, [r4, #0]
 8007320:	1ac0      	subs	r0, r0, r3
 8007322:	2301      	movs	r3, #1
 8007324:	4083      	lsls	r3, r0
 8007326:	4313      	orrs	r3, r2
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	002e      	movs	r6, r5
 800732c:	e7ce      	b.n	80072cc <_svfiprintf_r+0x94>
 800732e:	9b07      	ldr	r3, [sp, #28]
 8007330:	1d19      	adds	r1, r3, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	9107      	str	r1, [sp, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	db01      	blt.n	800733e <_svfiprintf_r+0x106>
 800733a:	930b      	str	r3, [sp, #44]	; 0x2c
 800733c:	e004      	b.n	8007348 <_svfiprintf_r+0x110>
 800733e:	425b      	negs	r3, r3
 8007340:	60e3      	str	r3, [r4, #12]
 8007342:	2302      	movs	r3, #2
 8007344:	4313      	orrs	r3, r2
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	782b      	ldrb	r3, [r5, #0]
 800734a:	2b2e      	cmp	r3, #46	; 0x2e
 800734c:	d10a      	bne.n	8007364 <_svfiprintf_r+0x12c>
 800734e:	786b      	ldrb	r3, [r5, #1]
 8007350:	2b2a      	cmp	r3, #42	; 0x2a
 8007352:	d135      	bne.n	80073c0 <_svfiprintf_r+0x188>
 8007354:	9b07      	ldr	r3, [sp, #28]
 8007356:	3502      	adds	r5, #2
 8007358:	1d1a      	adds	r2, r3, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	9207      	str	r2, [sp, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	db2b      	blt.n	80073ba <_svfiprintf_r+0x182>
 8007362:	9309      	str	r3, [sp, #36]	; 0x24
 8007364:	4e2f      	ldr	r6, [pc, #188]	; (8007424 <_svfiprintf_r+0x1ec>)
 8007366:	7829      	ldrb	r1, [r5, #0]
 8007368:	2203      	movs	r2, #3
 800736a:	0030      	movs	r0, r6
 800736c:	f000 f9d8 	bl	8007720 <memchr>
 8007370:	2800      	cmp	r0, #0
 8007372:	d006      	beq.n	8007382 <_svfiprintf_r+0x14a>
 8007374:	2340      	movs	r3, #64	; 0x40
 8007376:	1b80      	subs	r0, r0, r6
 8007378:	4083      	lsls	r3, r0
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	3501      	adds	r5, #1
 800737e:	4313      	orrs	r3, r2
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	7829      	ldrb	r1, [r5, #0]
 8007384:	2206      	movs	r2, #6
 8007386:	4828      	ldr	r0, [pc, #160]	; (8007428 <_svfiprintf_r+0x1f0>)
 8007388:	1c6e      	adds	r6, r5, #1
 800738a:	7621      	strb	r1, [r4, #24]
 800738c:	f000 f9c8 	bl	8007720 <memchr>
 8007390:	2800      	cmp	r0, #0
 8007392:	d03c      	beq.n	800740e <_svfiprintf_r+0x1d6>
 8007394:	4b25      	ldr	r3, [pc, #148]	; (800742c <_svfiprintf_r+0x1f4>)
 8007396:	2b00      	cmp	r3, #0
 8007398:	d125      	bne.n	80073e6 <_svfiprintf_r+0x1ae>
 800739a:	2207      	movs	r2, #7
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	3307      	adds	r3, #7
 80073a0:	4393      	bics	r3, r2
 80073a2:	3308      	adds	r3, #8
 80073a4:	9307      	str	r3, [sp, #28]
 80073a6:	6963      	ldr	r3, [r4, #20]
 80073a8:	9a04      	ldr	r2, [sp, #16]
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	6163      	str	r3, [r4, #20]
 80073ae:	e766      	b.n	800727e <_svfiprintf_r+0x46>
 80073b0:	4343      	muls	r3, r0
 80073b2:	2101      	movs	r1, #1
 80073b4:	189b      	adds	r3, r3, r2
 80073b6:	0035      	movs	r5, r6
 80073b8:	e7a6      	b.n	8007308 <_svfiprintf_r+0xd0>
 80073ba:	2301      	movs	r3, #1
 80073bc:	425b      	negs	r3, r3
 80073be:	e7d0      	b.n	8007362 <_svfiprintf_r+0x12a>
 80073c0:	2300      	movs	r3, #0
 80073c2:	200a      	movs	r0, #10
 80073c4:	001a      	movs	r2, r3
 80073c6:	3501      	adds	r5, #1
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	7829      	ldrb	r1, [r5, #0]
 80073cc:	1c6e      	adds	r6, r5, #1
 80073ce:	3930      	subs	r1, #48	; 0x30
 80073d0:	2909      	cmp	r1, #9
 80073d2:	d903      	bls.n	80073dc <_svfiprintf_r+0x1a4>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0c5      	beq.n	8007364 <_svfiprintf_r+0x12c>
 80073d8:	9209      	str	r2, [sp, #36]	; 0x24
 80073da:	e7c3      	b.n	8007364 <_svfiprintf_r+0x12c>
 80073dc:	4342      	muls	r2, r0
 80073de:	2301      	movs	r3, #1
 80073e0:	1852      	adds	r2, r2, r1
 80073e2:	0035      	movs	r5, r6
 80073e4:	e7f1      	b.n	80073ca <_svfiprintf_r+0x192>
 80073e6:	ab07      	add	r3, sp, #28
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	003a      	movs	r2, r7
 80073ec:	4b10      	ldr	r3, [pc, #64]	; (8007430 <_svfiprintf_r+0x1f8>)
 80073ee:	0021      	movs	r1, r4
 80073f0:	9803      	ldr	r0, [sp, #12]
 80073f2:	e000      	b.n	80073f6 <_svfiprintf_r+0x1be>
 80073f4:	bf00      	nop
 80073f6:	9004      	str	r0, [sp, #16]
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	3301      	adds	r3, #1
 80073fc:	d1d3      	bne.n	80073a6 <_svfiprintf_r+0x16e>
 80073fe:	89bb      	ldrh	r3, [r7, #12]
 8007400:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007402:	065b      	lsls	r3, r3, #25
 8007404:	d400      	bmi.n	8007408 <_svfiprintf_r+0x1d0>
 8007406:	e72e      	b.n	8007266 <_svfiprintf_r+0x2e>
 8007408:	2001      	movs	r0, #1
 800740a:	4240      	negs	r0, r0
 800740c:	e72b      	b.n	8007266 <_svfiprintf_r+0x2e>
 800740e:	ab07      	add	r3, sp, #28
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	003a      	movs	r2, r7
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <_svfiprintf_r+0x1f8>)
 8007416:	0021      	movs	r1, r4
 8007418:	9803      	ldr	r0, [sp, #12]
 800741a:	f000 f879 	bl	8007510 <_printf_i>
 800741e:	e7ea      	b.n	80073f6 <_svfiprintf_r+0x1be>
 8007420:	08008c60 	.word	0x08008c60
 8007424:	08008c66 	.word	0x08008c66
 8007428:	08008c6a 	.word	0x08008c6a
 800742c:	00000000 	.word	0x00000000
 8007430:	08007175 	.word	0x08007175

08007434 <_printf_common>:
 8007434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007436:	0015      	movs	r5, r2
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	688a      	ldr	r2, [r1, #8]
 800743c:	690b      	ldr	r3, [r1, #16]
 800743e:	9000      	str	r0, [sp, #0]
 8007440:	000c      	movs	r4, r1
 8007442:	4293      	cmp	r3, r2
 8007444:	da00      	bge.n	8007448 <_printf_common+0x14>
 8007446:	0013      	movs	r3, r2
 8007448:	0022      	movs	r2, r4
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	3243      	adds	r2, #67	; 0x43
 800744e:	7812      	ldrb	r2, [r2, #0]
 8007450:	2a00      	cmp	r2, #0
 8007452:	d001      	beq.n	8007458 <_printf_common+0x24>
 8007454:	3301      	adds	r3, #1
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	069b      	lsls	r3, r3, #26
 800745c:	d502      	bpl.n	8007464 <_printf_common+0x30>
 800745e:	682b      	ldr	r3, [r5, #0]
 8007460:	3302      	adds	r3, #2
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	2706      	movs	r7, #6
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	401f      	ands	r7, r3
 800746a:	d027      	beq.n	80074bc <_printf_common+0x88>
 800746c:	0023      	movs	r3, r4
 800746e:	3343      	adds	r3, #67	; 0x43
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	1e5a      	subs	r2, r3, #1
 8007474:	4193      	sbcs	r3, r2
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	0692      	lsls	r2, r2, #26
 800747a:	d430      	bmi.n	80074de <_printf_common+0xaa>
 800747c:	0022      	movs	r2, r4
 800747e:	9901      	ldr	r1, [sp, #4]
 8007480:	3243      	adds	r2, #67	; 0x43
 8007482:	9800      	ldr	r0, [sp, #0]
 8007484:	9e08      	ldr	r6, [sp, #32]
 8007486:	47b0      	blx	r6
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d025      	beq.n	80074d8 <_printf_common+0xa4>
 800748c:	2306      	movs	r3, #6
 800748e:	6820      	ldr	r0, [r4, #0]
 8007490:	682a      	ldr	r2, [r5, #0]
 8007492:	68e1      	ldr	r1, [r4, #12]
 8007494:	4003      	ands	r3, r0
 8007496:	2500      	movs	r5, #0
 8007498:	2b04      	cmp	r3, #4
 800749a:	d103      	bne.n	80074a4 <_printf_common+0x70>
 800749c:	1a8d      	subs	r5, r1, r2
 800749e:	43eb      	mvns	r3, r5
 80074a0:	17db      	asrs	r3, r3, #31
 80074a2:	401d      	ands	r5, r3
 80074a4:	68a3      	ldr	r3, [r4, #8]
 80074a6:	6922      	ldr	r2, [r4, #16]
 80074a8:	4293      	cmp	r3, r2
 80074aa:	dd01      	ble.n	80074b0 <_printf_common+0x7c>
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	18ed      	adds	r5, r5, r3
 80074b0:	2700      	movs	r7, #0
 80074b2:	42bd      	cmp	r5, r7
 80074b4:	d120      	bne.n	80074f8 <_printf_common+0xc4>
 80074b6:	2000      	movs	r0, #0
 80074b8:	e010      	b.n	80074dc <_printf_common+0xa8>
 80074ba:	3701      	adds	r7, #1
 80074bc:	68e3      	ldr	r3, [r4, #12]
 80074be:	682a      	ldr	r2, [r5, #0]
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	42bb      	cmp	r3, r7
 80074c4:	ddd2      	ble.n	800746c <_printf_common+0x38>
 80074c6:	0022      	movs	r2, r4
 80074c8:	2301      	movs	r3, #1
 80074ca:	3219      	adds	r2, #25
 80074cc:	9901      	ldr	r1, [sp, #4]
 80074ce:	9800      	ldr	r0, [sp, #0]
 80074d0:	9e08      	ldr	r6, [sp, #32]
 80074d2:	47b0      	blx	r6
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d1f0      	bne.n	80074ba <_printf_common+0x86>
 80074d8:	2001      	movs	r0, #1
 80074da:	4240      	negs	r0, r0
 80074dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074de:	2030      	movs	r0, #48	; 0x30
 80074e0:	18e1      	adds	r1, r4, r3
 80074e2:	3143      	adds	r1, #67	; 0x43
 80074e4:	7008      	strb	r0, [r1, #0]
 80074e6:	0021      	movs	r1, r4
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	3145      	adds	r1, #69	; 0x45
 80074ec:	7809      	ldrb	r1, [r1, #0]
 80074ee:	18a2      	adds	r2, r4, r2
 80074f0:	3243      	adds	r2, #67	; 0x43
 80074f2:	3302      	adds	r3, #2
 80074f4:	7011      	strb	r1, [r2, #0]
 80074f6:	e7c1      	b.n	800747c <_printf_common+0x48>
 80074f8:	0022      	movs	r2, r4
 80074fa:	2301      	movs	r3, #1
 80074fc:	321a      	adds	r2, #26
 80074fe:	9901      	ldr	r1, [sp, #4]
 8007500:	9800      	ldr	r0, [sp, #0]
 8007502:	9e08      	ldr	r6, [sp, #32]
 8007504:	47b0      	blx	r6
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d0e6      	beq.n	80074d8 <_printf_common+0xa4>
 800750a:	3701      	adds	r7, #1
 800750c:	e7d1      	b.n	80074b2 <_printf_common+0x7e>
	...

08007510 <_printf_i>:
 8007510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007512:	b089      	sub	sp, #36	; 0x24
 8007514:	9204      	str	r2, [sp, #16]
 8007516:	000a      	movs	r2, r1
 8007518:	3243      	adds	r2, #67	; 0x43
 800751a:	9305      	str	r3, [sp, #20]
 800751c:	9003      	str	r0, [sp, #12]
 800751e:	9202      	str	r2, [sp, #8]
 8007520:	7e0a      	ldrb	r2, [r1, #24]
 8007522:	000c      	movs	r4, r1
 8007524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007526:	2a6e      	cmp	r2, #110	; 0x6e
 8007528:	d100      	bne.n	800752c <_printf_i+0x1c>
 800752a:	e086      	b.n	800763a <_printf_i+0x12a>
 800752c:	d81f      	bhi.n	800756e <_printf_i+0x5e>
 800752e:	2a63      	cmp	r2, #99	; 0x63
 8007530:	d033      	beq.n	800759a <_printf_i+0x8a>
 8007532:	d808      	bhi.n	8007546 <_printf_i+0x36>
 8007534:	2a00      	cmp	r2, #0
 8007536:	d100      	bne.n	800753a <_printf_i+0x2a>
 8007538:	e08c      	b.n	8007654 <_printf_i+0x144>
 800753a:	2a58      	cmp	r2, #88	; 0x58
 800753c:	d04d      	beq.n	80075da <_printf_i+0xca>
 800753e:	0025      	movs	r5, r4
 8007540:	3542      	adds	r5, #66	; 0x42
 8007542:	702a      	strb	r2, [r5, #0]
 8007544:	e030      	b.n	80075a8 <_printf_i+0x98>
 8007546:	2a64      	cmp	r2, #100	; 0x64
 8007548:	d001      	beq.n	800754e <_printf_i+0x3e>
 800754a:	2a69      	cmp	r2, #105	; 0x69
 800754c:	d1f7      	bne.n	800753e <_printf_i+0x2e>
 800754e:	6819      	ldr	r1, [r3, #0]
 8007550:	6825      	ldr	r5, [r4, #0]
 8007552:	1d0a      	adds	r2, r1, #4
 8007554:	0628      	lsls	r0, r5, #24
 8007556:	d529      	bpl.n	80075ac <_printf_i+0x9c>
 8007558:	6808      	ldr	r0, [r1, #0]
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	2800      	cmp	r0, #0
 800755e:	da03      	bge.n	8007568 <_printf_i+0x58>
 8007560:	232d      	movs	r3, #45	; 0x2d
 8007562:	9a02      	ldr	r2, [sp, #8]
 8007564:	4240      	negs	r0, r0
 8007566:	7013      	strb	r3, [r2, #0]
 8007568:	4e6b      	ldr	r6, [pc, #428]	; (8007718 <_printf_i+0x208>)
 800756a:	270a      	movs	r7, #10
 800756c:	e04f      	b.n	800760e <_printf_i+0xfe>
 800756e:	2a73      	cmp	r2, #115	; 0x73
 8007570:	d074      	beq.n	800765c <_printf_i+0x14c>
 8007572:	d808      	bhi.n	8007586 <_printf_i+0x76>
 8007574:	2a6f      	cmp	r2, #111	; 0x6f
 8007576:	d01f      	beq.n	80075b8 <_printf_i+0xa8>
 8007578:	2a70      	cmp	r2, #112	; 0x70
 800757a:	d1e0      	bne.n	800753e <_printf_i+0x2e>
 800757c:	2220      	movs	r2, #32
 800757e:	6809      	ldr	r1, [r1, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	6022      	str	r2, [r4, #0]
 8007584:	e003      	b.n	800758e <_printf_i+0x7e>
 8007586:	2a75      	cmp	r2, #117	; 0x75
 8007588:	d016      	beq.n	80075b8 <_printf_i+0xa8>
 800758a:	2a78      	cmp	r2, #120	; 0x78
 800758c:	d1d7      	bne.n	800753e <_printf_i+0x2e>
 800758e:	0022      	movs	r2, r4
 8007590:	2178      	movs	r1, #120	; 0x78
 8007592:	3245      	adds	r2, #69	; 0x45
 8007594:	7011      	strb	r1, [r2, #0]
 8007596:	4e61      	ldr	r6, [pc, #388]	; (800771c <_printf_i+0x20c>)
 8007598:	e022      	b.n	80075e0 <_printf_i+0xd0>
 800759a:	0025      	movs	r5, r4
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	3542      	adds	r5, #66	; 0x42
 80075a0:	1d11      	adds	r1, r2, #4
 80075a2:	6019      	str	r1, [r3, #0]
 80075a4:	6813      	ldr	r3, [r2, #0]
 80075a6:	702b      	strb	r3, [r5, #0]
 80075a8:	2301      	movs	r3, #1
 80075aa:	e065      	b.n	8007678 <_printf_i+0x168>
 80075ac:	6808      	ldr	r0, [r1, #0]
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	0669      	lsls	r1, r5, #25
 80075b2:	d5d3      	bpl.n	800755c <_printf_i+0x4c>
 80075b4:	b200      	sxth	r0, r0
 80075b6:	e7d1      	b.n	800755c <_printf_i+0x4c>
 80075b8:	6819      	ldr	r1, [r3, #0]
 80075ba:	6825      	ldr	r5, [r4, #0]
 80075bc:	1d08      	adds	r0, r1, #4
 80075be:	6018      	str	r0, [r3, #0]
 80075c0:	6808      	ldr	r0, [r1, #0]
 80075c2:	062e      	lsls	r6, r5, #24
 80075c4:	d505      	bpl.n	80075d2 <_printf_i+0xc2>
 80075c6:	4e54      	ldr	r6, [pc, #336]	; (8007718 <_printf_i+0x208>)
 80075c8:	2708      	movs	r7, #8
 80075ca:	2a6f      	cmp	r2, #111	; 0x6f
 80075cc:	d01b      	beq.n	8007606 <_printf_i+0xf6>
 80075ce:	270a      	movs	r7, #10
 80075d0:	e019      	b.n	8007606 <_printf_i+0xf6>
 80075d2:	066d      	lsls	r5, r5, #25
 80075d4:	d5f7      	bpl.n	80075c6 <_printf_i+0xb6>
 80075d6:	b280      	uxth	r0, r0
 80075d8:	e7f5      	b.n	80075c6 <_printf_i+0xb6>
 80075da:	3145      	adds	r1, #69	; 0x45
 80075dc:	4e4e      	ldr	r6, [pc, #312]	; (8007718 <_printf_i+0x208>)
 80075de:	700a      	strb	r2, [r1, #0]
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	1d01      	adds	r1, r0, #4
 80075e6:	6800      	ldr	r0, [r0, #0]
 80075e8:	6019      	str	r1, [r3, #0]
 80075ea:	0615      	lsls	r5, r2, #24
 80075ec:	d521      	bpl.n	8007632 <_printf_i+0x122>
 80075ee:	07d3      	lsls	r3, r2, #31
 80075f0:	d502      	bpl.n	80075f8 <_printf_i+0xe8>
 80075f2:	2320      	movs	r3, #32
 80075f4:	431a      	orrs	r2, r3
 80075f6:	6022      	str	r2, [r4, #0]
 80075f8:	2710      	movs	r7, #16
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d103      	bne.n	8007606 <_printf_i+0xf6>
 80075fe:	2320      	movs	r3, #32
 8007600:	6822      	ldr	r2, [r4, #0]
 8007602:	439a      	bics	r2, r3
 8007604:	6022      	str	r2, [r4, #0]
 8007606:	0023      	movs	r3, r4
 8007608:	2200      	movs	r2, #0
 800760a:	3343      	adds	r3, #67	; 0x43
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	6863      	ldr	r3, [r4, #4]
 8007610:	60a3      	str	r3, [r4, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	db58      	blt.n	80076c8 <_printf_i+0x1b8>
 8007616:	2204      	movs	r2, #4
 8007618:	6821      	ldr	r1, [r4, #0]
 800761a:	4391      	bics	r1, r2
 800761c:	6021      	str	r1, [r4, #0]
 800761e:	2800      	cmp	r0, #0
 8007620:	d154      	bne.n	80076cc <_printf_i+0x1bc>
 8007622:	9d02      	ldr	r5, [sp, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d05a      	beq.n	80076de <_printf_i+0x1ce>
 8007628:	0025      	movs	r5, r4
 800762a:	7833      	ldrb	r3, [r6, #0]
 800762c:	3542      	adds	r5, #66	; 0x42
 800762e:	702b      	strb	r3, [r5, #0]
 8007630:	e055      	b.n	80076de <_printf_i+0x1ce>
 8007632:	0655      	lsls	r5, r2, #25
 8007634:	d5db      	bpl.n	80075ee <_printf_i+0xde>
 8007636:	b280      	uxth	r0, r0
 8007638:	e7d9      	b.n	80075ee <_printf_i+0xde>
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	680d      	ldr	r5, [r1, #0]
 800763e:	1d10      	adds	r0, r2, #4
 8007640:	6949      	ldr	r1, [r1, #20]
 8007642:	6018      	str	r0, [r3, #0]
 8007644:	6813      	ldr	r3, [r2, #0]
 8007646:	062e      	lsls	r6, r5, #24
 8007648:	d501      	bpl.n	800764e <_printf_i+0x13e>
 800764a:	6019      	str	r1, [r3, #0]
 800764c:	e002      	b.n	8007654 <_printf_i+0x144>
 800764e:	066d      	lsls	r5, r5, #25
 8007650:	d5fb      	bpl.n	800764a <_printf_i+0x13a>
 8007652:	8019      	strh	r1, [r3, #0]
 8007654:	2300      	movs	r3, #0
 8007656:	9d02      	ldr	r5, [sp, #8]
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	e04f      	b.n	80076fc <_printf_i+0x1ec>
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	1d11      	adds	r1, r2, #4
 8007660:	6019      	str	r1, [r3, #0]
 8007662:	6815      	ldr	r5, [r2, #0]
 8007664:	2100      	movs	r1, #0
 8007666:	6862      	ldr	r2, [r4, #4]
 8007668:	0028      	movs	r0, r5
 800766a:	f000 f859 	bl	8007720 <memchr>
 800766e:	2800      	cmp	r0, #0
 8007670:	d001      	beq.n	8007676 <_printf_i+0x166>
 8007672:	1b40      	subs	r0, r0, r5
 8007674:	6060      	str	r0, [r4, #4]
 8007676:	6863      	ldr	r3, [r4, #4]
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	2300      	movs	r3, #0
 800767c:	9a02      	ldr	r2, [sp, #8]
 800767e:	7013      	strb	r3, [r2, #0]
 8007680:	e03c      	b.n	80076fc <_printf_i+0x1ec>
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	002a      	movs	r2, r5
 8007686:	9904      	ldr	r1, [sp, #16]
 8007688:	9803      	ldr	r0, [sp, #12]
 800768a:	9d05      	ldr	r5, [sp, #20]
 800768c:	47a8      	blx	r5
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d03e      	beq.n	8007710 <_printf_i+0x200>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	079b      	lsls	r3, r3, #30
 8007696:	d415      	bmi.n	80076c4 <_printf_i+0x1b4>
 8007698:	9b07      	ldr	r3, [sp, #28]
 800769a:	68e0      	ldr	r0, [r4, #12]
 800769c:	4298      	cmp	r0, r3
 800769e:	da39      	bge.n	8007714 <_printf_i+0x204>
 80076a0:	0018      	movs	r0, r3
 80076a2:	e037      	b.n	8007714 <_printf_i+0x204>
 80076a4:	0022      	movs	r2, r4
 80076a6:	2301      	movs	r3, #1
 80076a8:	3219      	adds	r2, #25
 80076aa:	9904      	ldr	r1, [sp, #16]
 80076ac:	9803      	ldr	r0, [sp, #12]
 80076ae:	9e05      	ldr	r6, [sp, #20]
 80076b0:	47b0      	blx	r6
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	d02c      	beq.n	8007710 <_printf_i+0x200>
 80076b6:	3501      	adds	r5, #1
 80076b8:	68e3      	ldr	r3, [r4, #12]
 80076ba:	9a07      	ldr	r2, [sp, #28]
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	42ab      	cmp	r3, r5
 80076c0:	dcf0      	bgt.n	80076a4 <_printf_i+0x194>
 80076c2:	e7e9      	b.n	8007698 <_printf_i+0x188>
 80076c4:	2500      	movs	r5, #0
 80076c6:	e7f7      	b.n	80076b8 <_printf_i+0x1a8>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d0ad      	beq.n	8007628 <_printf_i+0x118>
 80076cc:	9d02      	ldr	r5, [sp, #8]
 80076ce:	0039      	movs	r1, r7
 80076d0:	f7f8 fda8 	bl	8000224 <__aeabi_uidivmod>
 80076d4:	5c73      	ldrb	r3, [r6, r1]
 80076d6:	3d01      	subs	r5, #1
 80076d8:	702b      	strb	r3, [r5, #0]
 80076da:	2800      	cmp	r0, #0
 80076dc:	d1f7      	bne.n	80076ce <_printf_i+0x1be>
 80076de:	2f08      	cmp	r7, #8
 80076e0:	d109      	bne.n	80076f6 <_printf_i+0x1e6>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	07db      	lsls	r3, r3, #31
 80076e6:	d506      	bpl.n	80076f6 <_printf_i+0x1e6>
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	6922      	ldr	r2, [r4, #16]
 80076ec:	4293      	cmp	r3, r2
 80076ee:	dc02      	bgt.n	80076f6 <_printf_i+0x1e6>
 80076f0:	2330      	movs	r3, #48	; 0x30
 80076f2:	3d01      	subs	r5, #1
 80076f4:	702b      	strb	r3, [r5, #0]
 80076f6:	9b02      	ldr	r3, [sp, #8]
 80076f8:	1b5b      	subs	r3, r3, r5
 80076fa:	6123      	str	r3, [r4, #16]
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	aa07      	add	r2, sp, #28
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	0021      	movs	r1, r4
 8007704:	9b04      	ldr	r3, [sp, #16]
 8007706:	9803      	ldr	r0, [sp, #12]
 8007708:	f7ff fe94 	bl	8007434 <_printf_common>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d1b8      	bne.n	8007682 <_printf_i+0x172>
 8007710:	2001      	movs	r0, #1
 8007712:	4240      	negs	r0, r0
 8007714:	b009      	add	sp, #36	; 0x24
 8007716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007718:	08008c71 	.word	0x08008c71
 800771c:	08008c82 	.word	0x08008c82

08007720 <memchr>:
 8007720:	b2c9      	uxtb	r1, r1
 8007722:	1882      	adds	r2, r0, r2
 8007724:	4290      	cmp	r0, r2
 8007726:	d101      	bne.n	800772c <memchr+0xc>
 8007728:	2000      	movs	r0, #0
 800772a:	4770      	bx	lr
 800772c:	7803      	ldrb	r3, [r0, #0]
 800772e:	428b      	cmp	r3, r1
 8007730:	d0fb      	beq.n	800772a <memchr+0xa>
 8007732:	3001      	adds	r0, #1
 8007734:	e7f6      	b.n	8007724 <memchr+0x4>

08007736 <memcpy>:
 8007736:	2300      	movs	r3, #0
 8007738:	b510      	push	{r4, lr}
 800773a:	429a      	cmp	r2, r3
 800773c:	d100      	bne.n	8007740 <memcpy+0xa>
 800773e:	bd10      	pop	{r4, pc}
 8007740:	5ccc      	ldrb	r4, [r1, r3]
 8007742:	54c4      	strb	r4, [r0, r3]
 8007744:	3301      	adds	r3, #1
 8007746:	e7f8      	b.n	800773a <memcpy+0x4>

08007748 <memmove>:
 8007748:	b510      	push	{r4, lr}
 800774a:	4288      	cmp	r0, r1
 800774c:	d902      	bls.n	8007754 <memmove+0xc>
 800774e:	188b      	adds	r3, r1, r2
 8007750:	4298      	cmp	r0, r3
 8007752:	d303      	bcc.n	800775c <memmove+0x14>
 8007754:	2300      	movs	r3, #0
 8007756:	e007      	b.n	8007768 <memmove+0x20>
 8007758:	5c8b      	ldrb	r3, [r1, r2]
 800775a:	5483      	strb	r3, [r0, r2]
 800775c:	3a01      	subs	r2, #1
 800775e:	d2fb      	bcs.n	8007758 <memmove+0x10>
 8007760:	bd10      	pop	{r4, pc}
 8007762:	5ccc      	ldrb	r4, [r1, r3]
 8007764:	54c4      	strb	r4, [r0, r3]
 8007766:	3301      	adds	r3, #1
 8007768:	429a      	cmp	r2, r3
 800776a:	d1fa      	bne.n	8007762 <memmove+0x1a>
 800776c:	e7f8      	b.n	8007760 <memmove+0x18>
	...

08007770 <_free_r>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	0005      	movs	r5, r0
 8007774:	2900      	cmp	r1, #0
 8007776:	d010      	beq.n	800779a <_free_r+0x2a>
 8007778:	1f0c      	subs	r4, r1, #4
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	da00      	bge.n	8007782 <_free_r+0x12>
 8007780:	18e4      	adds	r4, r4, r3
 8007782:	0028      	movs	r0, r5
 8007784:	f000 f8d4 	bl	8007930 <__malloc_lock>
 8007788:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <_free_r+0x90>)
 800778a:	6813      	ldr	r3, [r2, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <_free_r+0x2c>
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	6014      	str	r4, [r2, #0]
 8007794:	0028      	movs	r0, r5
 8007796:	f000 f8cc 	bl	8007932 <__malloc_unlock>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	42a3      	cmp	r3, r4
 800779e:	d909      	bls.n	80077b4 <_free_r+0x44>
 80077a0:	6821      	ldr	r1, [r4, #0]
 80077a2:	1860      	adds	r0, r4, r1
 80077a4:	4283      	cmp	r3, r0
 80077a6:	d1f3      	bne.n	8007790 <_free_r+0x20>
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	1841      	adds	r1, r0, r1
 80077ae:	6021      	str	r1, [r4, #0]
 80077b0:	e7ee      	b.n	8007790 <_free_r+0x20>
 80077b2:	0013      	movs	r3, r2
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	d001      	beq.n	80077be <_free_r+0x4e>
 80077ba:	42a2      	cmp	r2, r4
 80077bc:	d9f9      	bls.n	80077b2 <_free_r+0x42>
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	1858      	adds	r0, r3, r1
 80077c2:	42a0      	cmp	r0, r4
 80077c4:	d10b      	bne.n	80077de <_free_r+0x6e>
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	1809      	adds	r1, r1, r0
 80077ca:	1858      	adds	r0, r3, r1
 80077cc:	6019      	str	r1, [r3, #0]
 80077ce:	4282      	cmp	r2, r0
 80077d0:	d1e0      	bne.n	8007794 <_free_r+0x24>
 80077d2:	6810      	ldr	r0, [r2, #0]
 80077d4:	6852      	ldr	r2, [r2, #4]
 80077d6:	1841      	adds	r1, r0, r1
 80077d8:	6019      	str	r1, [r3, #0]
 80077da:	605a      	str	r2, [r3, #4]
 80077dc:	e7da      	b.n	8007794 <_free_r+0x24>
 80077de:	42a0      	cmp	r0, r4
 80077e0:	d902      	bls.n	80077e8 <_free_r+0x78>
 80077e2:	230c      	movs	r3, #12
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	e7d5      	b.n	8007794 <_free_r+0x24>
 80077e8:	6821      	ldr	r1, [r4, #0]
 80077ea:	1860      	adds	r0, r4, r1
 80077ec:	4282      	cmp	r2, r0
 80077ee:	d103      	bne.n	80077f8 <_free_r+0x88>
 80077f0:	6810      	ldr	r0, [r2, #0]
 80077f2:	6852      	ldr	r2, [r2, #4]
 80077f4:	1841      	adds	r1, r0, r1
 80077f6:	6021      	str	r1, [r4, #0]
 80077f8:	6062      	str	r2, [r4, #4]
 80077fa:	605c      	str	r4, [r3, #4]
 80077fc:	e7ca      	b.n	8007794 <_free_r+0x24>
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	200000e0 	.word	0x200000e0

08007804 <_malloc_r>:
 8007804:	2303      	movs	r3, #3
 8007806:	b570      	push	{r4, r5, r6, lr}
 8007808:	1ccd      	adds	r5, r1, #3
 800780a:	439d      	bics	r5, r3
 800780c:	3508      	adds	r5, #8
 800780e:	0006      	movs	r6, r0
 8007810:	2d0c      	cmp	r5, #12
 8007812:	d21e      	bcs.n	8007852 <_malloc_r+0x4e>
 8007814:	250c      	movs	r5, #12
 8007816:	42a9      	cmp	r1, r5
 8007818:	d81d      	bhi.n	8007856 <_malloc_r+0x52>
 800781a:	0030      	movs	r0, r6
 800781c:	f000 f888 	bl	8007930 <__malloc_lock>
 8007820:	4a25      	ldr	r2, [pc, #148]	; (80078b8 <_malloc_r+0xb4>)
 8007822:	6814      	ldr	r4, [r2, #0]
 8007824:	0021      	movs	r1, r4
 8007826:	2900      	cmp	r1, #0
 8007828:	d119      	bne.n	800785e <_malloc_r+0x5a>
 800782a:	4c24      	ldr	r4, [pc, #144]	; (80078bc <_malloc_r+0xb8>)
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <_malloc_r+0x36>
 8007832:	0030      	movs	r0, r6
 8007834:	f000 f86a 	bl	800790c <_sbrk_r>
 8007838:	6020      	str	r0, [r4, #0]
 800783a:	0029      	movs	r1, r5
 800783c:	0030      	movs	r0, r6
 800783e:	f000 f865 	bl	800790c <_sbrk_r>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d12b      	bne.n	800789e <_malloc_r+0x9a>
 8007846:	230c      	movs	r3, #12
 8007848:	0030      	movs	r0, r6
 800784a:	6033      	str	r3, [r6, #0]
 800784c:	f000 f871 	bl	8007932 <__malloc_unlock>
 8007850:	e003      	b.n	800785a <_malloc_r+0x56>
 8007852:	2d00      	cmp	r5, #0
 8007854:	dadf      	bge.n	8007816 <_malloc_r+0x12>
 8007856:	230c      	movs	r3, #12
 8007858:	6033      	str	r3, [r6, #0]
 800785a:	2000      	movs	r0, #0
 800785c:	bd70      	pop	{r4, r5, r6, pc}
 800785e:	680b      	ldr	r3, [r1, #0]
 8007860:	1b5b      	subs	r3, r3, r5
 8007862:	d419      	bmi.n	8007898 <_malloc_r+0x94>
 8007864:	2b0b      	cmp	r3, #11
 8007866:	d903      	bls.n	8007870 <_malloc_r+0x6c>
 8007868:	600b      	str	r3, [r1, #0]
 800786a:	18cc      	adds	r4, r1, r3
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	e003      	b.n	8007878 <_malloc_r+0x74>
 8007870:	684b      	ldr	r3, [r1, #4]
 8007872:	428c      	cmp	r4, r1
 8007874:	d10d      	bne.n	8007892 <_malloc_r+0x8e>
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	0030      	movs	r0, r6
 800787a:	f000 f85a 	bl	8007932 <__malloc_unlock>
 800787e:	0020      	movs	r0, r4
 8007880:	2207      	movs	r2, #7
 8007882:	300b      	adds	r0, #11
 8007884:	1d23      	adds	r3, r4, #4
 8007886:	4390      	bics	r0, r2
 8007888:	1ac3      	subs	r3, r0, r3
 800788a:	d0e7      	beq.n	800785c <_malloc_r+0x58>
 800788c:	425a      	negs	r2, r3
 800788e:	50e2      	str	r2, [r4, r3]
 8007890:	e7e4      	b.n	800785c <_malloc_r+0x58>
 8007892:	6063      	str	r3, [r4, #4]
 8007894:	000c      	movs	r4, r1
 8007896:	e7ef      	b.n	8007878 <_malloc_r+0x74>
 8007898:	000c      	movs	r4, r1
 800789a:	6849      	ldr	r1, [r1, #4]
 800789c:	e7c3      	b.n	8007826 <_malloc_r+0x22>
 800789e:	2303      	movs	r3, #3
 80078a0:	1cc4      	adds	r4, r0, #3
 80078a2:	439c      	bics	r4, r3
 80078a4:	42a0      	cmp	r0, r4
 80078a6:	d0e1      	beq.n	800786c <_malloc_r+0x68>
 80078a8:	1a21      	subs	r1, r4, r0
 80078aa:	0030      	movs	r0, r6
 80078ac:	f000 f82e 	bl	800790c <_sbrk_r>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d1db      	bne.n	800786c <_malloc_r+0x68>
 80078b4:	e7c7      	b.n	8007846 <_malloc_r+0x42>
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	200000e0 	.word	0x200000e0
 80078bc:	200000e4 	.word	0x200000e4

080078c0 <_realloc_r>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	0007      	movs	r7, r0
 80078c4:	000d      	movs	r5, r1
 80078c6:	0016      	movs	r6, r2
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d105      	bne.n	80078d8 <_realloc_r+0x18>
 80078cc:	0011      	movs	r1, r2
 80078ce:	f7ff ff99 	bl	8007804 <_malloc_r>
 80078d2:	0004      	movs	r4, r0
 80078d4:	0020      	movs	r0, r4
 80078d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d8:	2a00      	cmp	r2, #0
 80078da:	d103      	bne.n	80078e4 <_realloc_r+0x24>
 80078dc:	f7ff ff48 	bl	8007770 <_free_r>
 80078e0:	0034      	movs	r4, r6
 80078e2:	e7f7      	b.n	80078d4 <_realloc_r+0x14>
 80078e4:	f000 f826 	bl	8007934 <_malloc_usable_size_r>
 80078e8:	002c      	movs	r4, r5
 80078ea:	42b0      	cmp	r0, r6
 80078ec:	d2f2      	bcs.n	80078d4 <_realloc_r+0x14>
 80078ee:	0031      	movs	r1, r6
 80078f0:	0038      	movs	r0, r7
 80078f2:	f7ff ff87 	bl	8007804 <_malloc_r>
 80078f6:	1e04      	subs	r4, r0, #0
 80078f8:	d0ec      	beq.n	80078d4 <_realloc_r+0x14>
 80078fa:	0029      	movs	r1, r5
 80078fc:	0032      	movs	r2, r6
 80078fe:	f7ff ff1a 	bl	8007736 <memcpy>
 8007902:	0029      	movs	r1, r5
 8007904:	0038      	movs	r0, r7
 8007906:	f7ff ff33 	bl	8007770 <_free_r>
 800790a:	e7e3      	b.n	80078d4 <_realloc_r+0x14>

0800790c <_sbrk_r>:
 800790c:	2300      	movs	r3, #0
 800790e:	b570      	push	{r4, r5, r6, lr}
 8007910:	4c06      	ldr	r4, [pc, #24]	; (800792c <_sbrk_r+0x20>)
 8007912:	0005      	movs	r5, r0
 8007914:	0008      	movs	r0, r1
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	f7fb fda4 	bl	8003464 <_sbrk>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d103      	bne.n	8007928 <_sbrk_r+0x1c>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d000      	beq.n	8007928 <_sbrk_r+0x1c>
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	20000240 	.word	0x20000240

08007930 <__malloc_lock>:
 8007930:	4770      	bx	lr

08007932 <__malloc_unlock>:
 8007932:	4770      	bx	lr

08007934 <_malloc_usable_size_r>:
 8007934:	1f0b      	subs	r3, r1, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	1f18      	subs	r0, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	da01      	bge.n	8007942 <_malloc_usable_size_r+0xe>
 800793e:	580b      	ldr	r3, [r1, r0]
 8007940:	18c0      	adds	r0, r0, r3
 8007942:	4770      	bx	lr

08007944 <pow>:
 8007944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007946:	2400      	movs	r4, #0
 8007948:	b091      	sub	sp, #68	; 0x44
 800794a:	001f      	movs	r7, r3
 800794c:	9000      	str	r0, [sp, #0]
 800794e:	9101      	str	r1, [sp, #4]
 8007950:	0016      	movs	r6, r2
 8007952:	f000 f9e7 	bl	8007d24 <__ieee754_pow>
 8007956:	4bbe      	ldr	r3, [pc, #760]	; (8007c50 <pow+0x30c>)
 8007958:	9002      	str	r0, [sp, #8]
 800795a:	9103      	str	r1, [sp, #12]
 800795c:	571c      	ldrsb	r4, [r3, r4]
 800795e:	1c63      	adds	r3, r4, #1
 8007960:	d100      	bne.n	8007964 <pow+0x20>
 8007962:	e0d4      	b.n	8007b0e <pow+0x1ca>
 8007964:	0032      	movs	r2, r6
 8007966:	003b      	movs	r3, r7
 8007968:	0030      	movs	r0, r6
 800796a:	0039      	movs	r1, r7
 800796c:	f7fa fb74 	bl	8002058 <__aeabi_dcmpun>
 8007970:	1e05      	subs	r5, r0, #0
 8007972:	d000      	beq.n	8007976 <pow+0x32>
 8007974:	e0cb      	b.n	8007b0e <pow+0x1ca>
 8007976:	9a00      	ldr	r2, [sp, #0]
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	0010      	movs	r0, r2
 800797c:	0019      	movs	r1, r3
 800797e:	f7fa fb6b 	bl	8002058 <__aeabi_dcmpun>
 8007982:	2200      	movs	r2, #0
 8007984:	9005      	str	r0, [sp, #20]
 8007986:	2800      	cmp	r0, #0
 8007988:	d01e      	beq.n	80079c8 <pow+0x84>
 800798a:	2300      	movs	r3, #0
 800798c:	0030      	movs	r0, r6
 800798e:	0039      	movs	r1, r7
 8007990:	f7f8 fd48 	bl	8000424 <__aeabi_dcmpeq>
 8007994:	2800      	cmp	r0, #0
 8007996:	d100      	bne.n	800799a <pow+0x56>
 8007998:	e0b9      	b.n	8007b0e <pow+0x1ca>
 800799a:	2301      	movs	r3, #1
 800799c:	9306      	str	r3, [sp, #24]
 800799e:	4bad      	ldr	r3, [pc, #692]	; (8007c54 <pow+0x310>)
 80079a0:	950e      	str	r5, [sp, #56]	; 0x38
 80079a2:	9307      	str	r3, [sp, #28]
 80079a4:	9a00      	ldr	r2, [sp, #0]
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	9208      	str	r2, [sp, #32]
 80079aa:	9309      	str	r3, [sp, #36]	; 0x24
 80079ac:	2200      	movs	r2, #0
 80079ae:	4baa      	ldr	r3, [pc, #680]	; (8007c58 <pow+0x314>)
 80079b0:	960a      	str	r6, [sp, #40]	; 0x28
 80079b2:	970b      	str	r7, [sp, #44]	; 0x2c
 80079b4:	920c      	str	r2, [sp, #48]	; 0x30
 80079b6:	930d      	str	r3, [sp, #52]	; 0x34
 80079b8:	2c02      	cmp	r4, #2
 80079ba:	d033      	beq.n	8007a24 <pow+0xe0>
 80079bc:	a806      	add	r0, sp, #24
 80079be:	f000 ff65 	bl	800888c <matherr>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d125      	bne.n	8007a12 <pow+0xce>
 80079c6:	e059      	b.n	8007a7c <pow+0x138>
 80079c8:	2300      	movs	r3, #0
 80079ca:	9800      	ldr	r0, [sp, #0]
 80079cc:	9901      	ldr	r1, [sp, #4]
 80079ce:	f7f8 fd29 	bl	8000424 <__aeabi_dcmpeq>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d057      	beq.n	8007a86 <pow+0x142>
 80079d6:	2200      	movs	r2, #0
 80079d8:	2300      	movs	r3, #0
 80079da:	0030      	movs	r0, r6
 80079dc:	0039      	movs	r1, r7
 80079de:	f7f8 fd21 	bl	8000424 <__aeabi_dcmpeq>
 80079e2:	1e05      	subs	r5, r0, #0
 80079e4:	d021      	beq.n	8007a2a <pow+0xe6>
 80079e6:	2301      	movs	r3, #1
 80079e8:	9306      	str	r3, [sp, #24]
 80079ea:	4b9a      	ldr	r3, [pc, #616]	; (8007c54 <pow+0x310>)
 80079ec:	960a      	str	r6, [sp, #40]	; 0x28
 80079ee:	970b      	str	r7, [sp, #44]	; 0x2c
 80079f0:	9307      	str	r3, [sp, #28]
 80079f2:	9b05      	ldr	r3, [sp, #20]
 80079f4:	930e      	str	r3, [sp, #56]	; 0x38
 80079f6:	9a00      	ldr	r2, [sp, #0]
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	9208      	str	r2, [sp, #32]
 80079fc:	9309      	str	r3, [sp, #36]	; 0x24
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	920c      	str	r2, [sp, #48]	; 0x30
 8007a04:	930d      	str	r3, [sp, #52]	; 0x34
 8007a06:	2c00      	cmp	r4, #0
 8007a08:	d0d8      	beq.n	80079bc <pow+0x78>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4b92      	ldr	r3, [pc, #584]	; (8007c58 <pow+0x314>)
 8007a0e:	920c      	str	r2, [sp, #48]	; 0x30
 8007a10:	930d      	str	r3, [sp, #52]	; 0x34
 8007a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d004      	beq.n	8007a24 <pow+0xe0>
 8007a1a:	f7ff fb59 	bl	80070d0 <__errno>
 8007a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	6003      	str	r3, [r0, #0]
 8007a24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a26:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007a28:	e06f      	b.n	8007b0a <pow+0x1c6>
 8007a2a:	0030      	movs	r0, r6
 8007a2c:	0039      	movs	r1, r7
 8007a2e:	f000 ff25 	bl	800887c <finite>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d06b      	beq.n	8007b0e <pow+0x1ca>
 8007a36:	2200      	movs	r2, #0
 8007a38:	2300      	movs	r3, #0
 8007a3a:	0030      	movs	r0, r6
 8007a3c:	0039      	movs	r1, r7
 8007a3e:	f7f8 fcf7 	bl	8000430 <__aeabi_dcmplt>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d063      	beq.n	8007b0e <pow+0x1ca>
 8007a46:	2301      	movs	r3, #1
 8007a48:	9306      	str	r3, [sp, #24]
 8007a4a:	4b82      	ldr	r3, [pc, #520]	; (8007c54 <pow+0x310>)
 8007a4c:	950e      	str	r5, [sp, #56]	; 0x38
 8007a4e:	9307      	str	r3, [sp, #28]
 8007a50:	9b00      	ldr	r3, [sp, #0]
 8007a52:	9c01      	ldr	r4, [sp, #4]
 8007a54:	9308      	str	r3, [sp, #32]
 8007a56:	9409      	str	r4, [sp, #36]	; 0x24
 8007a58:	4b7d      	ldr	r3, [pc, #500]	; (8007c50 <pow+0x30c>)
 8007a5a:	960a      	str	r6, [sp, #40]	; 0x28
 8007a5c:	970b      	str	r7, [sp, #44]	; 0x2c
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	b25b      	sxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <pow+0x12c>
 8007a66:	2300      	movs	r3, #0
 8007a68:	2400      	movs	r4, #0
 8007a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007a6c:	940d      	str	r4, [sp, #52]	; 0x34
 8007a6e:	e7a5      	b.n	80079bc <pow+0x78>
 8007a70:	2000      	movs	r0, #0
 8007a72:	497a      	ldr	r1, [pc, #488]	; (8007c5c <pow+0x318>)
 8007a74:	900c      	str	r0, [sp, #48]	; 0x30
 8007a76:	910d      	str	r1, [sp, #52]	; 0x34
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d19f      	bne.n	80079bc <pow+0x78>
 8007a7c:	f7ff fb28 	bl	80070d0 <__errno>
 8007a80:	2321      	movs	r3, #33	; 0x21
 8007a82:	6003      	str	r3, [r0, #0]
 8007a84:	e7c5      	b.n	8007a12 <pow+0xce>
 8007a86:	9802      	ldr	r0, [sp, #8]
 8007a88:	9903      	ldr	r1, [sp, #12]
 8007a8a:	f000 fef7 	bl	800887c <finite>
 8007a8e:	9005      	str	r0, [sp, #20]
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d000      	beq.n	8007a96 <pow+0x152>
 8007a94:	e0a5      	b.n	8007be2 <pow+0x29e>
 8007a96:	9800      	ldr	r0, [sp, #0]
 8007a98:	9901      	ldr	r1, [sp, #4]
 8007a9a:	f000 feef 	bl	800887c <finite>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d100      	bne.n	8007aa4 <pow+0x160>
 8007aa2:	e09e      	b.n	8007be2 <pow+0x29e>
 8007aa4:	0030      	movs	r0, r6
 8007aa6:	0039      	movs	r1, r7
 8007aa8:	f000 fee8 	bl	800887c <finite>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d100      	bne.n	8007ab2 <pow+0x16e>
 8007ab0:	e097      	b.n	8007be2 <pow+0x29e>
 8007ab2:	2500      	movs	r5, #0
 8007ab4:	4b66      	ldr	r3, [pc, #408]	; (8007c50 <pow+0x30c>)
 8007ab6:	ac06      	add	r4, sp, #24
 8007ab8:	575d      	ldrsb	r5, [r3, r5]
 8007aba:	9a02      	ldr	r2, [sp, #8]
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	0019      	movs	r1, r3
 8007ac0:	0010      	movs	r0, r2
 8007ac2:	f7fa fac9 	bl	8002058 <__aeabi_dcmpun>
 8007ac6:	4b63      	ldr	r3, [pc, #396]	; (8007c54 <pow+0x310>)
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d031      	beq.n	8007b30 <pow+0x1ec>
 8007acc:	2201      	movs	r2, #1
 8007ace:	6063      	str	r3, [r4, #4]
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	9206      	str	r2, [sp, #24]
 8007ad4:	6223      	str	r3, [r4, #32]
 8007ad6:	6126      	str	r6, [r4, #16]
 8007ad8:	6167      	str	r7, [r4, #20]
 8007ada:	9a00      	ldr	r2, [sp, #0]
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	60a2      	str	r2, [r4, #8]
 8007ae0:	60e3      	str	r3, [r4, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	d115      	bne.n	8007b16 <pow+0x1d2>
 8007aea:	61a2      	str	r2, [r4, #24]
 8007aec:	61e3      	str	r3, [r4, #28]
 8007aee:	0020      	movs	r0, r4
 8007af0:	f000 fecc 	bl	800888c <matherr>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d016      	beq.n	8007b26 <pow+0x1e2>
 8007af8:	6a23      	ldr	r3, [r4, #32]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <pow+0x1c2>
 8007afe:	f7ff fae7 	bl	80070d0 <__errno>
 8007b02:	6a23      	ldr	r3, [r4, #32]
 8007b04:	6003      	str	r3, [r0, #0]
 8007b06:	69a3      	ldr	r3, [r4, #24]
 8007b08:	69e4      	ldr	r4, [r4, #28]
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	9403      	str	r4, [sp, #12]
 8007b0e:	9802      	ldr	r0, [sp, #8]
 8007b10:	9903      	ldr	r1, [sp, #12]
 8007b12:	b011      	add	sp, #68	; 0x44
 8007b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b16:	0010      	movs	r0, r2
 8007b18:	0019      	movs	r1, r3
 8007b1a:	f7f9 f8d9 	bl	8000cd0 <__aeabi_ddiv>
 8007b1e:	61a0      	str	r0, [r4, #24]
 8007b20:	61e1      	str	r1, [r4, #28]
 8007b22:	2d02      	cmp	r5, #2
 8007b24:	d1e3      	bne.n	8007aee <pow+0x1aa>
 8007b26:	f7ff fad3 	bl	80070d0 <__errno>
 8007b2a:	2321      	movs	r3, #33	; 0x21
 8007b2c:	6003      	str	r3, [r0, #0]
 8007b2e:	e7e3      	b.n	8007af8 <pow+0x1b4>
 8007b30:	2203      	movs	r2, #3
 8007b32:	6126      	str	r6, [r4, #16]
 8007b34:	6167      	str	r7, [r4, #20]
 8007b36:	9206      	str	r2, [sp, #24]
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	6220      	str	r0, [r4, #32]
 8007b3c:	9a00      	ldr	r2, [sp, #0]
 8007b3e:	9b01      	ldr	r3, [sp, #4]
 8007b40:	0030      	movs	r0, r6
 8007b42:	60a2      	str	r2, [r4, #8]
 8007b44:	60e3      	str	r3, [r4, #12]
 8007b46:	0039      	movs	r1, r7
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4b45      	ldr	r3, [pc, #276]	; (8007c60 <pow+0x31c>)
 8007b4c:	f7f9 fcca 	bl	80014e4 <__aeabi_dmul>
 8007b50:	0006      	movs	r6, r0
 8007b52:	000f      	movs	r7, r1
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	d124      	bne.n	8007ba2 <pow+0x25e>
 8007b58:	9800      	ldr	r0, [sp, #0]
 8007b5a:	9901      	ldr	r1, [sp, #4]
 8007b5c:	22e0      	movs	r2, #224	; 0xe0
 8007b5e:	4b41      	ldr	r3, [pc, #260]	; (8007c64 <pow+0x320>)
 8007b60:	0612      	lsls	r2, r2, #24
 8007b62:	61a2      	str	r2, [r4, #24]
 8007b64:	61e3      	str	r3, [r4, #28]
 8007b66:	2200      	movs	r2, #0
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f7f8 fc61 	bl	8000430 <__aeabi_dcmplt>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d030      	beq.n	8007bd4 <pow+0x290>
 8007b72:	0030      	movs	r0, r6
 8007b74:	0039      	movs	r1, r7
 8007b76:	f000 fe91 	bl	800889c <rint>
 8007b7a:	0032      	movs	r2, r6
 8007b7c:	003b      	movs	r3, r7
 8007b7e:	f7f8 fc51 	bl	8000424 <__aeabi_dcmpeq>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d104      	bne.n	8007b90 <pow+0x24c>
 8007b86:	22e0      	movs	r2, #224	; 0xe0
 8007b88:	4b37      	ldr	r3, [pc, #220]	; (8007c68 <pow+0x324>)
 8007b8a:	0612      	lsls	r2, r2, #24
 8007b8c:	61a2      	str	r2, [r4, #24]
 8007b8e:	61e3      	str	r3, [r4, #28]
 8007b90:	4b2f      	ldr	r3, [pc, #188]	; (8007c50 <pow+0x30c>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	b25b      	sxtb	r3, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d11c      	bne.n	8007bd4 <pow+0x290>
 8007b9a:	f7ff fa99 	bl	80070d0 <__errno>
 8007b9e:	2322      	movs	r3, #34	; 0x22
 8007ba0:	e7c4      	b.n	8007b2c <pow+0x1e8>
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	9800      	ldr	r0, [sp, #0]
 8007ba6:	9901      	ldr	r1, [sp, #4]
 8007ba8:	4b30      	ldr	r3, [pc, #192]	; (8007c6c <pow+0x328>)
 8007baa:	61a2      	str	r2, [r4, #24]
 8007bac:	61e3      	str	r3, [r4, #28]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f7f8 fc3d 	bl	8000430 <__aeabi_dcmplt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d0ea      	beq.n	8007b90 <pow+0x24c>
 8007bba:	0030      	movs	r0, r6
 8007bbc:	0039      	movs	r1, r7
 8007bbe:	f000 fe6d 	bl	800889c <rint>
 8007bc2:	0032      	movs	r2, r6
 8007bc4:	003b      	movs	r3, r7
 8007bc6:	f7f8 fc2d 	bl	8000424 <__aeabi_dcmpeq>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1e0      	bne.n	8007b90 <pow+0x24c>
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4b22      	ldr	r3, [pc, #136]	; (8007c5c <pow+0x318>)
 8007bd2:	e7db      	b.n	8007b8c <pow+0x248>
 8007bd4:	0020      	movs	r0, r4
 8007bd6:	f000 fe59 	bl	800888c <matherr>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d000      	beq.n	8007be0 <pow+0x29c>
 8007bde:	e78b      	b.n	8007af8 <pow+0x1b4>
 8007be0:	e7db      	b.n	8007b9a <pow+0x256>
 8007be2:	2200      	movs	r2, #0
 8007be4:	9802      	ldr	r0, [sp, #8]
 8007be6:	9903      	ldr	r1, [sp, #12]
 8007be8:	2300      	movs	r3, #0
 8007bea:	f7f8 fc1b 	bl	8000424 <__aeabi_dcmpeq>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d100      	bne.n	8007bf4 <pow+0x2b0>
 8007bf2:	e78c      	b.n	8007b0e <pow+0x1ca>
 8007bf4:	9800      	ldr	r0, [sp, #0]
 8007bf6:	9901      	ldr	r1, [sp, #4]
 8007bf8:	f000 fe40 	bl	800887c <finite>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d100      	bne.n	8007c02 <pow+0x2be>
 8007c00:	e785      	b.n	8007b0e <pow+0x1ca>
 8007c02:	0030      	movs	r0, r6
 8007c04:	0039      	movs	r1, r7
 8007c06:	f000 fe39 	bl	800887c <finite>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d100      	bne.n	8007c10 <pow+0x2cc>
 8007c0e:	e77e      	b.n	8007b0e <pow+0x1ca>
 8007c10:	2304      	movs	r3, #4
 8007c12:	9306      	str	r3, [sp, #24]
 8007c14:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <pow+0x310>)
 8007c16:	960a      	str	r6, [sp, #40]	; 0x28
 8007c18:	970b      	str	r7, [sp, #44]	; 0x2c
 8007c1a:	9307      	str	r3, [sp, #28]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	930e      	str	r3, [sp, #56]	; 0x38
 8007c20:	9b00      	ldr	r3, [sp, #0]
 8007c22:	9c01      	ldr	r4, [sp, #4]
 8007c24:	9308      	str	r3, [sp, #32]
 8007c26:	9409      	str	r4, [sp, #36]	; 0x24
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2400      	movs	r4, #0
 8007c2c:	930c      	str	r3, [sp, #48]	; 0x30
 8007c2e:	940d      	str	r4, [sp, #52]	; 0x34
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <pow+0x30c>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b25b      	sxtb	r3, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d103      	bne.n	8007c42 <pow+0x2fe>
 8007c3a:	f7ff fa49 	bl	80070d0 <__errno>
 8007c3e:	2322      	movs	r3, #34	; 0x22
 8007c40:	e71f      	b.n	8007a82 <pow+0x13e>
 8007c42:	a806      	add	r0, sp, #24
 8007c44:	f000 fe22 	bl	800888c <matherr>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d000      	beq.n	8007c4e <pow+0x30a>
 8007c4c:	e6e1      	b.n	8007a12 <pow+0xce>
 8007c4e:	e7f4      	b.n	8007c3a <pow+0x2f6>
 8007c50:	200000a4 	.word	0x200000a4
 8007c54:	08008c93 	.word	0x08008c93
 8007c58:	3ff00000 	.word	0x3ff00000
 8007c5c:	fff00000 	.word	0xfff00000
 8007c60:	3fe00000 	.word	0x3fe00000
 8007c64:	47efffff 	.word	0x47efffff
 8007c68:	c7efffff 	.word	0xc7efffff
 8007c6c:	7ff00000 	.word	0x7ff00000

08007c70 <sqrt>:
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	b08f      	sub	sp, #60	; 0x3c
 8007c74:	0004      	movs	r4, r0
 8007c76:	000d      	movs	r5, r1
 8007c78:	f000 fd4a 	bl	8008710 <__ieee754_sqrt>
 8007c7c:	4b27      	ldr	r3, [pc, #156]	; (8007d1c <sqrt+0xac>)
 8007c7e:	9000      	str	r0, [sp, #0]
 8007c80:	9101      	str	r1, [sp, #4]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b25b      	sxtb	r3, r3
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	d033      	beq.n	8007cf4 <sqrt+0x84>
 8007c8c:	0022      	movs	r2, r4
 8007c8e:	002b      	movs	r3, r5
 8007c90:	0020      	movs	r0, r4
 8007c92:	0029      	movs	r1, r5
 8007c94:	f7fa f9e0 	bl	8002058 <__aeabi_dcmpun>
 8007c98:	9003      	str	r0, [sp, #12]
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d12a      	bne.n	8007cf4 <sqrt+0x84>
 8007c9e:	2600      	movs	r6, #0
 8007ca0:	2700      	movs	r7, #0
 8007ca2:	0032      	movs	r2, r6
 8007ca4:	003b      	movs	r3, r7
 8007ca6:	0020      	movs	r0, r4
 8007ca8:	0029      	movs	r1, r5
 8007caa:	f7f8 fbc1 	bl	8000430 <__aeabi_dcmplt>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d020      	beq.n	8007cf4 <sqrt+0x84>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	9304      	str	r3, [sp, #16]
 8007cb6:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <sqrt+0xb0>)
 8007cb8:	9408      	str	r4, [sp, #32]
 8007cba:	9509      	str	r5, [sp, #36]	; 0x24
 8007cbc:	9305      	str	r3, [sp, #20]
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	9406      	str	r4, [sp, #24]
 8007cc2:	9507      	str	r5, [sp, #28]
 8007cc4:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc6:	9b02      	ldr	r3, [sp, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d117      	bne.n	8007cfc <sqrt+0x8c>
 8007ccc:	960a      	str	r6, [sp, #40]	; 0x28
 8007cce:	970b      	str	r7, [sp, #44]	; 0x2c
 8007cd0:	a804      	add	r0, sp, #16
 8007cd2:	f000 fddb 	bl	800888c <matherr>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d01b      	beq.n	8007d12 <sqrt+0xa2>
 8007cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <sqrt+0x7c>
 8007ce2:	f7ff f9f5 	bl	80070d0 <__errno>
 8007ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ce8:	9302      	str	r3, [sp, #8]
 8007cea:	6003      	str	r3, [r0, #0]
 8007cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	9401      	str	r4, [sp, #4]
 8007cf4:	9800      	ldr	r0, [sp, #0]
 8007cf6:	9901      	ldr	r1, [sp, #4]
 8007cf8:	b00f      	add	sp, #60	; 0x3c
 8007cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfc:	003b      	movs	r3, r7
 8007cfe:	0032      	movs	r2, r6
 8007d00:	0030      	movs	r0, r6
 8007d02:	0039      	movs	r1, r7
 8007d04:	f7f8 ffe4 	bl	8000cd0 <__aeabi_ddiv>
 8007d08:	9b02      	ldr	r3, [sp, #8]
 8007d0a:	900a      	str	r0, [sp, #40]	; 0x28
 8007d0c:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d1de      	bne.n	8007cd0 <sqrt+0x60>
 8007d12:	f7ff f9dd 	bl	80070d0 <__errno>
 8007d16:	2321      	movs	r3, #33	; 0x21
 8007d18:	6003      	str	r3, [r0, #0]
 8007d1a:	e7de      	b.n	8007cda <sqrt+0x6a>
 8007d1c:	200000a4 	.word	0x200000a4
 8007d20:	08008c97 	.word	0x08008c97

08007d24 <__ieee754_pow>:
 8007d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d26:	b095      	sub	sp, #84	; 0x54
 8007d28:	9202      	str	r2, [sp, #8]
 8007d2a:	9303      	str	r3, [sp, #12]
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	000e      	movs	r6, r1
 8007d30:	9902      	ldr	r1, [sp, #8]
 8007d32:	005d      	lsls	r5, r3, #1
 8007d34:	9304      	str	r3, [sp, #16]
 8007d36:	000b      	movs	r3, r1
 8007d38:	086d      	lsrs	r5, r5, #1
 8007d3a:	0007      	movs	r7, r0
 8007d3c:	432b      	orrs	r3, r5
 8007d3e:	d101      	bne.n	8007d44 <__ieee754_pow+0x20>
 8007d40:	f000 fcad 	bl	800869e <__ieee754_pow+0x97a>
 8007d44:	4b7e      	ldr	r3, [pc, #504]	; (8007f40 <__ieee754_pow+0x21c>)
 8007d46:	0074      	lsls	r4, r6, #1
 8007d48:	9608      	str	r6, [sp, #32]
 8007d4a:	9000      	str	r0, [sp, #0]
 8007d4c:	0864      	lsrs	r4, r4, #1
 8007d4e:	469c      	mov	ip, r3
 8007d50:	429c      	cmp	r4, r3
 8007d52:	dc0b      	bgt.n	8007d6c <__ieee754_pow+0x48>
 8007d54:	d104      	bne.n	8007d60 <__ieee754_pow+0x3c>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d108      	bne.n	8007d6c <__ieee754_pow+0x48>
 8007d5a:	42a5      	cmp	r5, r4
 8007d5c:	dc0c      	bgt.n	8007d78 <__ieee754_pow+0x54>
 8007d5e:	e001      	b.n	8007d64 <__ieee754_pow+0x40>
 8007d60:	429d      	cmp	r5, r3
 8007d62:	dc03      	bgt.n	8007d6c <__ieee754_pow+0x48>
 8007d64:	4565      	cmp	r5, ip
 8007d66:	d10d      	bne.n	8007d84 <__ieee754_pow+0x60>
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	d00b      	beq.n	8007d84 <__ieee754_pow+0x60>
 8007d6c:	4b75      	ldr	r3, [pc, #468]	; (8007f44 <__ieee754_pow+0x220>)
 8007d6e:	18e4      	adds	r4, r4, r3
 8007d70:	4327      	orrs	r7, r4
 8007d72:	d101      	bne.n	8007d78 <__ieee754_pow+0x54>
 8007d74:	f000 fc93 	bl	800869e <__ieee754_pow+0x97a>
 8007d78:	4873      	ldr	r0, [pc, #460]	; (8007f48 <__ieee754_pow+0x224>)
 8007d7a:	f000 fd89 	bl	8008890 <nan>
 8007d7e:	9000      	str	r0, [sp, #0]
 8007d80:	9101      	str	r1, [sp, #4]
 8007d82:	e061      	b.n	8007e48 <__ieee754_pow+0x124>
 8007d84:	2300      	movs	r3, #0
 8007d86:	9306      	str	r3, [sp, #24]
 8007d88:	2e00      	cmp	r6, #0
 8007d8a:	da17      	bge.n	8007dbc <__ieee754_pow+0x98>
 8007d8c:	4a6f      	ldr	r2, [pc, #444]	; (8007f4c <__ieee754_pow+0x228>)
 8007d8e:	4295      	cmp	r5, r2
 8007d90:	dc4d      	bgt.n	8007e2e <__ieee754_pow+0x10a>
 8007d92:	4a6f      	ldr	r2, [pc, #444]	; (8007f50 <__ieee754_pow+0x22c>)
 8007d94:	4295      	cmp	r5, r2
 8007d96:	dd11      	ble.n	8007dbc <__ieee754_pow+0x98>
 8007d98:	4b6e      	ldr	r3, [pc, #440]	; (8007f54 <__ieee754_pow+0x230>)
 8007d9a:	152a      	asrs	r2, r5, #20
 8007d9c:	18d2      	adds	r2, r2, r3
 8007d9e:	2a14      	cmp	r2, #20
 8007da0:	dd25      	ble.n	8007dee <__ieee754_pow+0xca>
 8007da2:	2034      	movs	r0, #52	; 0x34
 8007da4:	1a82      	subs	r2, r0, r2
 8007da6:	9802      	ldr	r0, [sp, #8]
 8007da8:	40d0      	lsrs	r0, r2
 8007daa:	0003      	movs	r3, r0
 8007dac:	4093      	lsls	r3, r2
 8007dae:	428b      	cmp	r3, r1
 8007db0:	d104      	bne.n	8007dbc <__ieee754_pow+0x98>
 8007db2:	2201      	movs	r2, #1
 8007db4:	4010      	ands	r0, r2
 8007db6:	1892      	adds	r2, r2, r2
 8007db8:	1a13      	subs	r3, r2, r0
 8007dba:	9306      	str	r3, [sp, #24]
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	d15e      	bne.n	8007e7e <__ieee754_pow+0x15a>
 8007dc0:	4565      	cmp	r5, ip
 8007dc2:	d123      	bne.n	8007e0c <__ieee754_pow+0xe8>
 8007dc4:	4b5f      	ldr	r3, [pc, #380]	; (8007f44 <__ieee754_pow+0x220>)
 8007dc6:	18e3      	adds	r3, r4, r3
 8007dc8:	431f      	orrs	r7, r3
 8007dca:	d101      	bne.n	8007dd0 <__ieee754_pow+0xac>
 8007dcc:	f000 fc67 	bl	800869e <__ieee754_pow+0x97a>
 8007dd0:	4b5f      	ldr	r3, [pc, #380]	; (8007f50 <__ieee754_pow+0x22c>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	dd2d      	ble.n	8007e32 <__ieee754_pow+0x10e>
 8007dd6:	9b02      	ldr	r3, [sp, #8]
 8007dd8:	9c03      	ldr	r4, [sp, #12]
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	9401      	str	r4, [sp, #4]
 8007dde:	9b04      	ldr	r3, [sp, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	da31      	bge.n	8007e48 <__ieee754_pow+0x124>
 8007de4:	2300      	movs	r3, #0
 8007de6:	2400      	movs	r4, #0
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	9401      	str	r4, [sp, #4]
 8007dec:	e02c      	b.n	8007e48 <__ieee754_pow+0x124>
 8007dee:	2900      	cmp	r1, #0
 8007df0:	d145      	bne.n	8007e7e <__ieee754_pow+0x15a>
 8007df2:	2314      	movs	r3, #20
 8007df4:	1a9a      	subs	r2, r3, r2
 8007df6:	002b      	movs	r3, r5
 8007df8:	4113      	asrs	r3, r2
 8007dfa:	0019      	movs	r1, r3
 8007dfc:	4091      	lsls	r1, r2
 8007dfe:	42a9      	cmp	r1, r5
 8007e00:	d104      	bne.n	8007e0c <__ieee754_pow+0xe8>
 8007e02:	2201      	movs	r2, #1
 8007e04:	4013      	ands	r3, r2
 8007e06:	1892      	adds	r2, r2, r2
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	9306      	str	r3, [sp, #24]
 8007e0c:	4b52      	ldr	r3, [pc, #328]	; (8007f58 <__ieee754_pow+0x234>)
 8007e0e:	429d      	cmp	r5, r3
 8007e10:	d11e      	bne.n	8007e50 <__ieee754_pow+0x12c>
 8007e12:	0038      	movs	r0, r7
 8007e14:	0031      	movs	r1, r6
 8007e16:	9b04      	ldr	r3, [sp, #16]
 8007e18:	9000      	str	r0, [sp, #0]
 8007e1a:	9101      	str	r1, [sp, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	da13      	bge.n	8007e48 <__ieee754_pow+0x124>
 8007e20:	003a      	movs	r2, r7
 8007e22:	0033      	movs	r3, r6
 8007e24:	2000      	movs	r0, #0
 8007e26:	494c      	ldr	r1, [pc, #304]	; (8007f58 <__ieee754_pow+0x234>)
 8007e28:	f7f8 ff52 	bl	8000cd0 <__aeabi_ddiv>
 8007e2c:	e7a7      	b.n	8007d7e <__ieee754_pow+0x5a>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e7c3      	b.n	8007dba <__ieee754_pow+0x96>
 8007e32:	9b04      	ldr	r3, [sp, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dad5      	bge.n	8007de4 <__ieee754_pow+0xc0>
 8007e38:	2280      	movs	r2, #128	; 0x80
 8007e3a:	0612      	lsls	r2, r2, #24
 8007e3c:	4694      	mov	ip, r2
 8007e3e:	9b02      	ldr	r3, [sp, #8]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	9b03      	ldr	r3, [sp, #12]
 8007e44:	4463      	add	r3, ip
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	9800      	ldr	r0, [sp, #0]
 8007e4a:	9901      	ldr	r1, [sp, #4]
 8007e4c:	b015      	add	sp, #84	; 0x54
 8007e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e50:	2380      	movs	r3, #128	; 0x80
 8007e52:	9a04      	ldr	r2, [sp, #16]
 8007e54:	05db      	lsls	r3, r3, #23
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d106      	bne.n	8007e68 <__ieee754_pow+0x144>
 8007e5a:	003a      	movs	r2, r7
 8007e5c:	0033      	movs	r3, r6
 8007e5e:	0038      	movs	r0, r7
 8007e60:	0031      	movs	r1, r6
 8007e62:	f7f9 fb3f 	bl	80014e4 <__aeabi_dmul>
 8007e66:	e78a      	b.n	8007d7e <__ieee754_pow+0x5a>
 8007e68:	4b3c      	ldr	r3, [pc, #240]	; (8007f5c <__ieee754_pow+0x238>)
 8007e6a:	9a04      	ldr	r2, [sp, #16]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d106      	bne.n	8007e7e <__ieee754_pow+0x15a>
 8007e70:	2e00      	cmp	r6, #0
 8007e72:	db04      	blt.n	8007e7e <__ieee754_pow+0x15a>
 8007e74:	0038      	movs	r0, r7
 8007e76:	0031      	movs	r1, r6
 8007e78:	f000 fc4a 	bl	8008710 <__ieee754_sqrt>
 8007e7c:	e77f      	b.n	8007d7e <__ieee754_pow+0x5a>
 8007e7e:	0038      	movs	r0, r7
 8007e80:	0031      	movs	r1, r6
 8007e82:	f000 fcf7 	bl	8008874 <fabs>
 8007e86:	9000      	str	r0, [sp, #0]
 8007e88:	9101      	str	r1, [sp, #4]
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	d12e      	bne.n	8007eec <__ieee754_pow+0x1c8>
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	d004      	beq.n	8007e9c <__ieee754_pow+0x178>
 8007e92:	4a31      	ldr	r2, [pc, #196]	; (8007f58 <__ieee754_pow+0x234>)
 8007e94:	00b3      	lsls	r3, r6, #2
 8007e96:	089b      	lsrs	r3, r3, #2
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d127      	bne.n	8007eec <__ieee754_pow+0x1c8>
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	da07      	bge.n	8007eb2 <__ieee754_pow+0x18e>
 8007ea2:	9a00      	ldr	r2, [sp, #0]
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	492b      	ldr	r1, [pc, #172]	; (8007f58 <__ieee754_pow+0x234>)
 8007eaa:	f7f8 ff11 	bl	8000cd0 <__aeabi_ddiv>
 8007eae:	9000      	str	r0, [sp, #0]
 8007eb0:	9101      	str	r1, [sp, #4]
 8007eb2:	9b08      	ldr	r3, [sp, #32]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dac7      	bge.n	8007e48 <__ieee754_pow+0x124>
 8007eb8:	4b22      	ldr	r3, [pc, #136]	; (8007f44 <__ieee754_pow+0x220>)
 8007eba:	18e4      	adds	r4, r4, r3
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	431c      	orrs	r4, r3
 8007ec0:	d108      	bne.n	8007ed4 <__ieee754_pow+0x1b0>
 8007ec2:	9a00      	ldr	r2, [sp, #0]
 8007ec4:	9b01      	ldr	r3, [sp, #4]
 8007ec6:	0010      	movs	r0, r2
 8007ec8:	0019      	movs	r1, r3
 8007eca:	f7f9 fd7d 	bl	80019c8 <__aeabi_dsub>
 8007ece:	0002      	movs	r2, r0
 8007ed0:	000b      	movs	r3, r1
 8007ed2:	e7a9      	b.n	8007e28 <__ieee754_pow+0x104>
 8007ed4:	9b06      	ldr	r3, [sp, #24]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d1b6      	bne.n	8007e48 <__ieee754_pow+0x124>
 8007eda:	9800      	ldr	r0, [sp, #0]
 8007edc:	2180      	movs	r1, #128	; 0x80
 8007ede:	0002      	movs	r2, r0
 8007ee0:	9801      	ldr	r0, [sp, #4]
 8007ee2:	0609      	lsls	r1, r1, #24
 8007ee4:	1843      	adds	r3, r0, r1
 8007ee6:	9200      	str	r2, [sp, #0]
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	e7ad      	b.n	8007e48 <__ieee754_pow+0x124>
 8007eec:	0ff3      	lsrs	r3, r6, #31
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	9310      	str	r3, [sp, #64]	; 0x40
 8007ef2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ef4:	9b06      	ldr	r3, [sp, #24]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	d104      	bne.n	8007f04 <__ieee754_pow+0x1e0>
 8007efa:	003a      	movs	r2, r7
 8007efc:	0033      	movs	r3, r6
 8007efe:	0038      	movs	r0, r7
 8007f00:	0031      	movs	r1, r6
 8007f02:	e7e2      	b.n	8007eca <__ieee754_pow+0x1a6>
 8007f04:	4b16      	ldr	r3, [pc, #88]	; (8007f60 <__ieee754_pow+0x23c>)
 8007f06:	429d      	cmp	r5, r3
 8007f08:	dc00      	bgt.n	8007f0c <__ieee754_pow+0x1e8>
 8007f0a:	e0f7      	b.n	80080fc <__ieee754_pow+0x3d8>
 8007f0c:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <__ieee754_pow+0x240>)
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	dd0b      	ble.n	8007f2a <__ieee754_pow+0x206>
 8007f12:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <__ieee754_pow+0x22c>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	dc0e      	bgt.n	8007f36 <__ieee754_pow+0x212>
 8007f18:	9b04      	ldr	r3, [sp, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	db00      	blt.n	8007f20 <__ieee754_pow+0x1fc>
 8007f1e:	e761      	b.n	8007de4 <__ieee754_pow+0xc0>
 8007f20:	4a11      	ldr	r2, [pc, #68]	; (8007f68 <__ieee754_pow+0x244>)
 8007f22:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <__ieee754_pow+0x248>)
 8007f24:	0010      	movs	r0, r2
 8007f26:	0019      	movs	r1, r3
 8007f28:	e79b      	b.n	8007e62 <__ieee754_pow+0x13e>
 8007f2a:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <__ieee754_pow+0x24c>)
 8007f2c:	429c      	cmp	r4, r3
 8007f2e:	ddf3      	ble.n	8007f18 <__ieee754_pow+0x1f4>
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <__ieee754_pow+0x234>)
 8007f32:	429c      	cmp	r4, r3
 8007f34:	dd1e      	ble.n	8007f74 <__ieee754_pow+0x250>
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dcf1      	bgt.n	8007f20 <__ieee754_pow+0x1fc>
 8007f3c:	e752      	b.n	8007de4 <__ieee754_pow+0xc0>
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	7ff00000 	.word	0x7ff00000
 8007f44:	c0100000 	.word	0xc0100000
 8007f48:	08008c65 	.word	0x08008c65
 8007f4c:	433fffff 	.word	0x433fffff
 8007f50:	3fefffff 	.word	0x3fefffff
 8007f54:	fffffc01 	.word	0xfffffc01
 8007f58:	3ff00000 	.word	0x3ff00000
 8007f5c:	3fe00000 	.word	0x3fe00000
 8007f60:	41e00000 	.word	0x41e00000
 8007f64:	43f00000 	.word	0x43f00000
 8007f68:	8800759c 	.word	0x8800759c
 8007f6c:	7e37e43c 	.word	0x7e37e43c
 8007f70:	3feffffe 	.word	0x3feffffe
 8007f74:	2200      	movs	r2, #0
 8007f76:	9800      	ldr	r0, [sp, #0]
 8007f78:	9901      	ldr	r1, [sp, #4]
 8007f7a:	4b52      	ldr	r3, [pc, #328]	; (80080c4 <__ieee754_pow+0x3a0>)
 8007f7c:	f7f9 fd24 	bl	80019c8 <__aeabi_dsub>
 8007f80:	22c0      	movs	r2, #192	; 0xc0
 8007f82:	4b51      	ldr	r3, [pc, #324]	; (80080c8 <__ieee754_pow+0x3a4>)
 8007f84:	05d2      	lsls	r2, r2, #23
 8007f86:	0006      	movs	r6, r0
 8007f88:	000f      	movs	r7, r1
 8007f8a:	f7f9 faab 	bl	80014e4 <__aeabi_dmul>
 8007f8e:	4a4f      	ldr	r2, [pc, #316]	; (80080cc <__ieee754_pow+0x3a8>)
 8007f90:	9000      	str	r0, [sp, #0]
 8007f92:	9101      	str	r1, [sp, #4]
 8007f94:	4b4e      	ldr	r3, [pc, #312]	; (80080d0 <__ieee754_pow+0x3ac>)
 8007f96:	0030      	movs	r0, r6
 8007f98:	0039      	movs	r1, r7
 8007f9a:	f7f9 faa3 	bl	80014e4 <__aeabi_dmul>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	9004      	str	r0, [sp, #16]
 8007fa2:	9105      	str	r1, [sp, #20]
 8007fa4:	4b4b      	ldr	r3, [pc, #300]	; (80080d4 <__ieee754_pow+0x3b0>)
 8007fa6:	0030      	movs	r0, r6
 8007fa8:	0039      	movs	r1, r7
 8007faa:	f7f9 fa9b 	bl	80014e4 <__aeabi_dmul>
 8007fae:	0002      	movs	r2, r0
 8007fb0:	000b      	movs	r3, r1
 8007fb2:	4849      	ldr	r0, [pc, #292]	; (80080d8 <__ieee754_pow+0x3b4>)
 8007fb4:	4949      	ldr	r1, [pc, #292]	; (80080dc <__ieee754_pow+0x3b8>)
 8007fb6:	f7f9 fd07 	bl	80019c8 <__aeabi_dsub>
 8007fba:	0032      	movs	r2, r6
 8007fbc:	003b      	movs	r3, r7
 8007fbe:	f7f9 fa91 	bl	80014e4 <__aeabi_dmul>
 8007fc2:	0002      	movs	r2, r0
 8007fc4:	000b      	movs	r3, r1
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	4945      	ldr	r1, [pc, #276]	; (80080e0 <__ieee754_pow+0x3bc>)
 8007fca:	f7f9 fcfd 	bl	80019c8 <__aeabi_dsub>
 8007fce:	0032      	movs	r2, r6
 8007fd0:	0004      	movs	r4, r0
 8007fd2:	000d      	movs	r5, r1
 8007fd4:	003b      	movs	r3, r7
 8007fd6:	0030      	movs	r0, r6
 8007fd8:	0039      	movs	r1, r7
 8007fda:	f7f9 fa83 	bl	80014e4 <__aeabi_dmul>
 8007fde:	0002      	movs	r2, r0
 8007fe0:	000b      	movs	r3, r1
 8007fe2:	0020      	movs	r0, r4
 8007fe4:	0029      	movs	r1, r5
 8007fe6:	f7f9 fa7d 	bl	80014e4 <__aeabi_dmul>
 8007fea:	4a3e      	ldr	r2, [pc, #248]	; (80080e4 <__ieee754_pow+0x3c0>)
 8007fec:	4b36      	ldr	r3, [pc, #216]	; (80080c8 <__ieee754_pow+0x3a4>)
 8007fee:	f7f9 fa79 	bl	80014e4 <__aeabi_dmul>
 8007ff2:	0002      	movs	r2, r0
 8007ff4:	000b      	movs	r3, r1
 8007ff6:	9804      	ldr	r0, [sp, #16]
 8007ff8:	9905      	ldr	r1, [sp, #20]
 8007ffa:	f7f9 fce5 	bl	80019c8 <__aeabi_dsub>
 8007ffe:	0002      	movs	r2, r0
 8008000:	000b      	movs	r3, r1
 8008002:	0004      	movs	r4, r0
 8008004:	000d      	movs	r5, r1
 8008006:	9800      	ldr	r0, [sp, #0]
 8008008:	9901      	ldr	r1, [sp, #4]
 800800a:	f7f8 fb45 	bl	8000698 <__aeabi_dadd>
 800800e:	9a00      	ldr	r2, [sp, #0]
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	2000      	movs	r0, #0
 8008014:	9004      	str	r0, [sp, #16]
 8008016:	9105      	str	r1, [sp, #20]
 8008018:	f7f9 fcd6 	bl	80019c8 <__aeabi_dsub>
 800801c:	0002      	movs	r2, r0
 800801e:	000b      	movs	r3, r1
 8008020:	0020      	movs	r0, r4
 8008022:	0029      	movs	r1, r5
 8008024:	f7f9 fcd0 	bl	80019c8 <__aeabi_dsub>
 8008028:	9b06      	ldr	r3, [sp, #24]
 800802a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800802c:	3b01      	subs	r3, #1
 800802e:	0006      	movs	r6, r0
 8008030:	000f      	movs	r7, r1
 8008032:	4313      	orrs	r3, r2
 8008034:	d000      	beq.n	8008038 <__ieee754_pow+0x314>
 8008036:	e1de      	b.n	80083f6 <__ieee754_pow+0x6d2>
 8008038:	2300      	movs	r3, #0
 800803a:	4c2b      	ldr	r4, [pc, #172]	; (80080e8 <__ieee754_pow+0x3c4>)
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	9401      	str	r4, [sp, #4]
 8008040:	9c02      	ldr	r4, [sp, #8]
 8008042:	9d03      	ldr	r5, [sp, #12]
 8008044:	9802      	ldr	r0, [sp, #8]
 8008046:	9903      	ldr	r1, [sp, #12]
 8008048:	2400      	movs	r4, #0
 800804a:	002b      	movs	r3, r5
 800804c:	0022      	movs	r2, r4
 800804e:	f7f9 fcbb 	bl	80019c8 <__aeabi_dsub>
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	9b05      	ldr	r3, [sp, #20]
 8008056:	f7f9 fa45 	bl	80014e4 <__aeabi_dmul>
 800805a:	9a02      	ldr	r2, [sp, #8]
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	9006      	str	r0, [sp, #24]
 8008060:	9107      	str	r1, [sp, #28]
 8008062:	0030      	movs	r0, r6
 8008064:	0039      	movs	r1, r7
 8008066:	f7f9 fa3d 	bl	80014e4 <__aeabi_dmul>
 800806a:	0002      	movs	r2, r0
 800806c:	000b      	movs	r3, r1
 800806e:	9806      	ldr	r0, [sp, #24]
 8008070:	9907      	ldr	r1, [sp, #28]
 8008072:	f7f8 fb11 	bl	8000698 <__aeabi_dadd>
 8008076:	0022      	movs	r2, r4
 8008078:	002b      	movs	r3, r5
 800807a:	9006      	str	r0, [sp, #24]
 800807c:	9107      	str	r1, [sp, #28]
 800807e:	9804      	ldr	r0, [sp, #16]
 8008080:	9905      	ldr	r1, [sp, #20]
 8008082:	f7f9 fa2f 	bl	80014e4 <__aeabi_dmul>
 8008086:	0006      	movs	r6, r0
 8008088:	000f      	movs	r7, r1
 800808a:	000b      	movs	r3, r1
 800808c:	0002      	movs	r2, r0
 800808e:	9806      	ldr	r0, [sp, #24]
 8008090:	9907      	ldr	r1, [sp, #28]
 8008092:	9604      	str	r6, [sp, #16]
 8008094:	9705      	str	r7, [sp, #20]
 8008096:	f7f8 faff 	bl	8000698 <__aeabi_dadd>
 800809a:	4b14      	ldr	r3, [pc, #80]	; (80080ec <__ieee754_pow+0x3c8>)
 800809c:	0005      	movs	r5, r0
 800809e:	000c      	movs	r4, r1
 80080a0:	9108      	str	r1, [sp, #32]
 80080a2:	4299      	cmp	r1, r3
 80080a4:	dc00      	bgt.n	80080a8 <__ieee754_pow+0x384>
 80080a6:	e2d8      	b.n	800865a <__ieee754_pow+0x936>
 80080a8:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <__ieee754_pow+0x3cc>)
 80080aa:	18cb      	adds	r3, r1, r3
 80080ac:	4303      	orrs	r3, r0
 80080ae:	d100      	bne.n	80080b2 <__ieee754_pow+0x38e>
 80080b0:	e1da      	b.n	8008468 <__ieee754_pow+0x744>
 80080b2:	9800      	ldr	r0, [sp, #0]
 80080b4:	9901      	ldr	r1, [sp, #4]
 80080b6:	4a0f      	ldr	r2, [pc, #60]	; (80080f4 <__ieee754_pow+0x3d0>)
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <__ieee754_pow+0x3d4>)
 80080ba:	f7f9 fa13 	bl	80014e4 <__aeabi_dmul>
 80080be:	4a0d      	ldr	r2, [pc, #52]	; (80080f4 <__ieee754_pow+0x3d0>)
 80080c0:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <__ieee754_pow+0x3d4>)
 80080c2:	e6ce      	b.n	8007e62 <__ieee754_pow+0x13e>
 80080c4:	3ff00000 	.word	0x3ff00000
 80080c8:	3ff71547 	.word	0x3ff71547
 80080cc:	f85ddf44 	.word	0xf85ddf44
 80080d0:	3e54ae0b 	.word	0x3e54ae0b
 80080d4:	3fd00000 	.word	0x3fd00000
 80080d8:	55555555 	.word	0x55555555
 80080dc:	3fd55555 	.word	0x3fd55555
 80080e0:	3fe00000 	.word	0x3fe00000
 80080e4:	652b82fe 	.word	0x652b82fe
 80080e8:	bff00000 	.word	0xbff00000
 80080ec:	408fffff 	.word	0x408fffff
 80080f0:	bf700000 	.word	0xbf700000
 80080f4:	8800759c 	.word	0x8800759c
 80080f8:	7e37e43c 	.word	0x7e37e43c
 80080fc:	4bbf      	ldr	r3, [pc, #764]	; (80083fc <__ieee754_pow+0x6d8>)
 80080fe:	2200      	movs	r2, #0
 8008100:	429c      	cmp	r4, r3
 8008102:	dc0a      	bgt.n	800811a <__ieee754_pow+0x3f6>
 8008104:	9800      	ldr	r0, [sp, #0]
 8008106:	9901      	ldr	r1, [sp, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	4bbd      	ldr	r3, [pc, #756]	; (8008400 <__ieee754_pow+0x6dc>)
 800810c:	f7f9 f9ea 	bl	80014e4 <__aeabi_dmul>
 8008110:	2235      	movs	r2, #53	; 0x35
 8008112:	9000      	str	r0, [sp, #0]
 8008114:	9101      	str	r1, [sp, #4]
 8008116:	9c01      	ldr	r4, [sp, #4]
 8008118:	4252      	negs	r2, r2
 800811a:	49ba      	ldr	r1, [pc, #744]	; (8008404 <__ieee754_pow+0x6e0>)
 800811c:	1523      	asrs	r3, r4, #20
 800811e:	185b      	adds	r3, r3, r1
 8008120:	189b      	adds	r3, r3, r2
 8008122:	0324      	lsls	r4, r4, #12
 8008124:	4db8      	ldr	r5, [pc, #736]	; (8008408 <__ieee754_pow+0x6e4>)
 8008126:	4ab9      	ldr	r2, [pc, #740]	; (800840c <__ieee754_pow+0x6e8>)
 8008128:	930d      	str	r3, [sp, #52]	; 0x34
 800812a:	0b23      	lsrs	r3, r4, #12
 800812c:	431d      	orrs	r5, r3
 800812e:	2400      	movs	r4, #0
 8008130:	4293      	cmp	r3, r2
 8008132:	dd09      	ble.n	8008148 <__ieee754_pow+0x424>
 8008134:	4ab6      	ldr	r2, [pc, #728]	; (8008410 <__ieee754_pow+0x6ec>)
 8008136:	3401      	adds	r4, #1
 8008138:	4293      	cmp	r3, r2
 800813a:	dd05      	ble.n	8008148 <__ieee754_pow+0x424>
 800813c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800813e:	191b      	adds	r3, r3, r4
 8008140:	2400      	movs	r4, #0
 8008142:	930d      	str	r3, [sp, #52]	; 0x34
 8008144:	4bb3      	ldr	r3, [pc, #716]	; (8008414 <__ieee754_pow+0x6f0>)
 8008146:	18ed      	adds	r5, r5, r3
 8008148:	9800      	ldr	r0, [sp, #0]
 800814a:	9901      	ldr	r1, [sp, #4]
 800814c:	0029      	movs	r1, r5
 800814e:	00e3      	lsls	r3, r4, #3
 8008150:	9311      	str	r3, [sp, #68]	; 0x44
 8008152:	4bb1      	ldr	r3, [pc, #708]	; (8008418 <__ieee754_pow+0x6f4>)
 8008154:	00e2      	lsls	r2, r4, #3
 8008156:	189b      	adds	r3, r3, r2
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	900e      	str	r0, [sp, #56]	; 0x38
 800815e:	910f      	str	r1, [sp, #60]	; 0x3c
 8008160:	920a      	str	r2, [sp, #40]	; 0x28
 8008162:	930b      	str	r3, [sp, #44]	; 0x2c
 8008164:	f7f9 fc30 	bl	80019c8 <__aeabi_dsub>
 8008168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800816a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800816c:	0006      	movs	r6, r0
 800816e:	000f      	movs	r7, r1
 8008170:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008174:	f7f8 fa90 	bl	8000698 <__aeabi_dadd>
 8008178:	0002      	movs	r2, r0
 800817a:	000b      	movs	r3, r1
 800817c:	2000      	movs	r0, #0
 800817e:	49a2      	ldr	r1, [pc, #648]	; (8008408 <__ieee754_pow+0x6e4>)
 8008180:	f7f8 fda6 	bl	8000cd0 <__aeabi_ddiv>
 8008184:	9012      	str	r0, [sp, #72]	; 0x48
 8008186:	9113      	str	r1, [sp, #76]	; 0x4c
 8008188:	0002      	movs	r2, r0
 800818a:	000b      	movs	r3, r1
 800818c:	0030      	movs	r0, r6
 800818e:	0039      	movs	r1, r7
 8008190:	f7f9 f9a8 	bl	80014e4 <__aeabi_dmul>
 8008194:	9008      	str	r0, [sp, #32]
 8008196:	9109      	str	r1, [sp, #36]	; 0x24
 8008198:	9a08      	ldr	r2, [sp, #32]
 800819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	9204      	str	r2, [sp, #16]
 80081a0:	9305      	str	r3, [sp, #20]
 80081a2:	2300      	movs	r3, #0
 80081a4:	0589      	lsls	r1, r1, #22
 80081a6:	106d      	asrs	r5, r5, #1
 80081a8:	430d      	orrs	r5, r1
 80081aa:	2180      	movs	r1, #128	; 0x80
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	9a04      	ldr	r2, [sp, #16]
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	9200      	str	r2, [sp, #0]
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	0309      	lsls	r1, r1, #12
 80081ba:	186d      	adds	r5, r5, r1
 80081bc:	04a4      	lsls	r4, r4, #18
 80081be:	192b      	adds	r3, r5, r4
 80081c0:	9800      	ldr	r0, [sp, #0]
 80081c2:	9901      	ldr	r1, [sp, #4]
 80081c4:	0014      	movs	r4, r2
 80081c6:	001d      	movs	r5, r3
 80081c8:	f7f9 f98c 	bl	80014e4 <__aeabi_dmul>
 80081cc:	0002      	movs	r2, r0
 80081ce:	000b      	movs	r3, r1
 80081d0:	0030      	movs	r0, r6
 80081d2:	0039      	movs	r1, r7
 80081d4:	f7f9 fbf8 	bl	80019c8 <__aeabi_dsub>
 80081d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081dc:	0006      	movs	r6, r0
 80081de:	000f      	movs	r7, r1
 80081e0:	0020      	movs	r0, r4
 80081e2:	0029      	movs	r1, r5
 80081e4:	f7f9 fbf0 	bl	80019c8 <__aeabi_dsub>
 80081e8:	0002      	movs	r2, r0
 80081ea:	000b      	movs	r3, r1
 80081ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80081ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081f0:	f7f9 fbea 	bl	80019c8 <__aeabi_dsub>
 80081f4:	9a00      	ldr	r2, [sp, #0]
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	f7f9 f974 	bl	80014e4 <__aeabi_dmul>
 80081fc:	0002      	movs	r2, r0
 80081fe:	000b      	movs	r3, r1
 8008200:	0030      	movs	r0, r6
 8008202:	0039      	movs	r1, r7
 8008204:	f7f9 fbe0 	bl	80019c8 <__aeabi_dsub>
 8008208:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800820a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800820c:	f7f9 f96a 	bl	80014e4 <__aeabi_dmul>
 8008210:	9a08      	ldr	r2, [sp, #32]
 8008212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008214:	900a      	str	r0, [sp, #40]	; 0x28
 8008216:	910b      	str	r1, [sp, #44]	; 0x2c
 8008218:	0010      	movs	r0, r2
 800821a:	0019      	movs	r1, r3
 800821c:	f7f9 f962 	bl	80014e4 <__aeabi_dmul>
 8008220:	0006      	movs	r6, r0
 8008222:	000f      	movs	r7, r1
 8008224:	4a7d      	ldr	r2, [pc, #500]	; (800841c <__ieee754_pow+0x6f8>)
 8008226:	4b7e      	ldr	r3, [pc, #504]	; (8008420 <__ieee754_pow+0x6fc>)
 8008228:	f7f9 f95c 	bl	80014e4 <__aeabi_dmul>
 800822c:	4a7d      	ldr	r2, [pc, #500]	; (8008424 <__ieee754_pow+0x700>)
 800822e:	4b7e      	ldr	r3, [pc, #504]	; (8008428 <__ieee754_pow+0x704>)
 8008230:	f7f8 fa32 	bl	8000698 <__aeabi_dadd>
 8008234:	0032      	movs	r2, r6
 8008236:	003b      	movs	r3, r7
 8008238:	f7f9 f954 	bl	80014e4 <__aeabi_dmul>
 800823c:	4a7b      	ldr	r2, [pc, #492]	; (800842c <__ieee754_pow+0x708>)
 800823e:	4b7c      	ldr	r3, [pc, #496]	; (8008430 <__ieee754_pow+0x70c>)
 8008240:	f7f8 fa2a 	bl	8000698 <__aeabi_dadd>
 8008244:	0032      	movs	r2, r6
 8008246:	003b      	movs	r3, r7
 8008248:	f7f9 f94c 	bl	80014e4 <__aeabi_dmul>
 800824c:	4a79      	ldr	r2, [pc, #484]	; (8008434 <__ieee754_pow+0x710>)
 800824e:	4b7a      	ldr	r3, [pc, #488]	; (8008438 <__ieee754_pow+0x714>)
 8008250:	f7f8 fa22 	bl	8000698 <__aeabi_dadd>
 8008254:	0032      	movs	r2, r6
 8008256:	003b      	movs	r3, r7
 8008258:	f7f9 f944 	bl	80014e4 <__aeabi_dmul>
 800825c:	4a77      	ldr	r2, [pc, #476]	; (800843c <__ieee754_pow+0x718>)
 800825e:	4b78      	ldr	r3, [pc, #480]	; (8008440 <__ieee754_pow+0x71c>)
 8008260:	f7f8 fa1a 	bl	8000698 <__aeabi_dadd>
 8008264:	0032      	movs	r2, r6
 8008266:	003b      	movs	r3, r7
 8008268:	f7f9 f93c 	bl	80014e4 <__aeabi_dmul>
 800826c:	4a75      	ldr	r2, [pc, #468]	; (8008444 <__ieee754_pow+0x720>)
 800826e:	4b76      	ldr	r3, [pc, #472]	; (8008448 <__ieee754_pow+0x724>)
 8008270:	f7f8 fa12 	bl	8000698 <__aeabi_dadd>
 8008274:	0032      	movs	r2, r6
 8008276:	0004      	movs	r4, r0
 8008278:	000d      	movs	r5, r1
 800827a:	003b      	movs	r3, r7
 800827c:	0030      	movs	r0, r6
 800827e:	0039      	movs	r1, r7
 8008280:	f7f9 f930 	bl	80014e4 <__aeabi_dmul>
 8008284:	0002      	movs	r2, r0
 8008286:	000b      	movs	r3, r1
 8008288:	0020      	movs	r0, r4
 800828a:	0029      	movs	r1, r5
 800828c:	f7f9 f92a 	bl	80014e4 <__aeabi_dmul>
 8008290:	9a00      	ldr	r2, [sp, #0]
 8008292:	9b01      	ldr	r3, [sp, #4]
 8008294:	0004      	movs	r4, r0
 8008296:	000d      	movs	r5, r1
 8008298:	9808      	ldr	r0, [sp, #32]
 800829a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800829c:	f7f8 f9fc 	bl	8000698 <__aeabi_dadd>
 80082a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082a4:	f7f9 f91e 	bl	80014e4 <__aeabi_dmul>
 80082a8:	0022      	movs	r2, r4
 80082aa:	002b      	movs	r3, r5
 80082ac:	f7f8 f9f4 	bl	8000698 <__aeabi_dadd>
 80082b0:	9a00      	ldr	r2, [sp, #0]
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	900e      	str	r0, [sp, #56]	; 0x38
 80082b6:	910f      	str	r1, [sp, #60]	; 0x3c
 80082b8:	0010      	movs	r0, r2
 80082ba:	0019      	movs	r1, r3
 80082bc:	f7f9 f912 	bl	80014e4 <__aeabi_dmul>
 80082c0:	2200      	movs	r2, #0
 80082c2:	4b62      	ldr	r3, [pc, #392]	; (800844c <__ieee754_pow+0x728>)
 80082c4:	0004      	movs	r4, r0
 80082c6:	000d      	movs	r5, r1
 80082c8:	f7f8 f9e6 	bl	8000698 <__aeabi_dadd>
 80082cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082d0:	f7f8 f9e2 	bl	8000698 <__aeabi_dadd>
 80082d4:	9e04      	ldr	r6, [sp, #16]
 80082d6:	000f      	movs	r7, r1
 80082d8:	0032      	movs	r2, r6
 80082da:	000b      	movs	r3, r1
 80082dc:	9800      	ldr	r0, [sp, #0]
 80082de:	9901      	ldr	r1, [sp, #4]
 80082e0:	f7f9 f900 	bl	80014e4 <__aeabi_dmul>
 80082e4:	2200      	movs	r2, #0
 80082e6:	9000      	str	r0, [sp, #0]
 80082e8:	9101      	str	r1, [sp, #4]
 80082ea:	4b58      	ldr	r3, [pc, #352]	; (800844c <__ieee754_pow+0x728>)
 80082ec:	0030      	movs	r0, r6
 80082ee:	0039      	movs	r1, r7
 80082f0:	f7f9 fb6a 	bl	80019c8 <__aeabi_dsub>
 80082f4:	0022      	movs	r2, r4
 80082f6:	002b      	movs	r3, r5
 80082f8:	f7f9 fb66 	bl	80019c8 <__aeabi_dsub>
 80082fc:	0002      	movs	r2, r0
 80082fe:	000b      	movs	r3, r1
 8008300:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008302:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008304:	f7f9 fb60 	bl	80019c8 <__aeabi_dsub>
 8008308:	9a08      	ldr	r2, [sp, #32]
 800830a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830c:	f7f9 f8ea 	bl	80014e4 <__aeabi_dmul>
 8008310:	0032      	movs	r2, r6
 8008312:	0004      	movs	r4, r0
 8008314:	000d      	movs	r5, r1
 8008316:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800831a:	003b      	movs	r3, r7
 800831c:	f7f9 f8e2 	bl	80014e4 <__aeabi_dmul>
 8008320:	0002      	movs	r2, r0
 8008322:	000b      	movs	r3, r1
 8008324:	0020      	movs	r0, r4
 8008326:	0029      	movs	r1, r5
 8008328:	f7f8 f9b6 	bl	8000698 <__aeabi_dadd>
 800832c:	0004      	movs	r4, r0
 800832e:	000d      	movs	r5, r1
 8008330:	0002      	movs	r2, r0
 8008332:	000b      	movs	r3, r1
 8008334:	9800      	ldr	r0, [sp, #0]
 8008336:	9901      	ldr	r1, [sp, #4]
 8008338:	f7f8 f9ae 	bl	8000698 <__aeabi_dadd>
 800833c:	22e0      	movs	r2, #224	; 0xe0
 800833e:	9e04      	ldr	r6, [sp, #16]
 8008340:	0612      	lsls	r2, r2, #24
 8008342:	4b43      	ldr	r3, [pc, #268]	; (8008450 <__ieee754_pow+0x72c>)
 8008344:	0030      	movs	r0, r6
 8008346:	000f      	movs	r7, r1
 8008348:	f7f9 f8cc 	bl	80014e4 <__aeabi_dmul>
 800834c:	9008      	str	r0, [sp, #32]
 800834e:	9109      	str	r1, [sp, #36]	; 0x24
 8008350:	9a00      	ldr	r2, [sp, #0]
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	0030      	movs	r0, r6
 8008356:	0039      	movs	r1, r7
 8008358:	f7f9 fb36 	bl	80019c8 <__aeabi_dsub>
 800835c:	0002      	movs	r2, r0
 800835e:	000b      	movs	r3, r1
 8008360:	0020      	movs	r0, r4
 8008362:	0029      	movs	r1, r5
 8008364:	f7f9 fb30 	bl	80019c8 <__aeabi_dsub>
 8008368:	4a3a      	ldr	r2, [pc, #232]	; (8008454 <__ieee754_pow+0x730>)
 800836a:	4b39      	ldr	r3, [pc, #228]	; (8008450 <__ieee754_pow+0x72c>)
 800836c:	f7f9 f8ba 	bl	80014e4 <__aeabi_dmul>
 8008370:	4a39      	ldr	r2, [pc, #228]	; (8008458 <__ieee754_pow+0x734>)
 8008372:	0004      	movs	r4, r0
 8008374:	000d      	movs	r5, r1
 8008376:	4b39      	ldr	r3, [pc, #228]	; (800845c <__ieee754_pow+0x738>)
 8008378:	0030      	movs	r0, r6
 800837a:	0039      	movs	r1, r7
 800837c:	f7f9 f8b2 	bl	80014e4 <__aeabi_dmul>
 8008380:	0002      	movs	r2, r0
 8008382:	000b      	movs	r3, r1
 8008384:	0020      	movs	r0, r4
 8008386:	0029      	movs	r1, r5
 8008388:	f7f8 f986 	bl	8000698 <__aeabi_dadd>
 800838c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800838e:	4b34      	ldr	r3, [pc, #208]	; (8008460 <__ieee754_pow+0x73c>)
 8008390:	189b      	adds	r3, r3, r2
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f7f8 f97f 	bl	8000698 <__aeabi_dadd>
 800839a:	9000      	str	r0, [sp, #0]
 800839c:	9101      	str	r1, [sp, #4]
 800839e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80083a0:	f7f9 fe76 	bl	8002090 <__aeabi_i2d>
 80083a4:	0004      	movs	r4, r0
 80083a6:	000d      	movs	r5, r1
 80083a8:	9808      	ldr	r0, [sp, #32]
 80083aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083ae:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <__ieee754_pow+0x740>)
 80083b0:	189b      	adds	r3, r3, r2
 80083b2:	681e      	ldr	r6, [r3, #0]
 80083b4:	685f      	ldr	r7, [r3, #4]
 80083b6:	9a00      	ldr	r2, [sp, #0]
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	f7f8 f96d 	bl	8000698 <__aeabi_dadd>
 80083be:	0032      	movs	r2, r6
 80083c0:	003b      	movs	r3, r7
 80083c2:	f7f8 f969 	bl	8000698 <__aeabi_dadd>
 80083c6:	0022      	movs	r2, r4
 80083c8:	002b      	movs	r3, r5
 80083ca:	f7f8 f965 	bl	8000698 <__aeabi_dadd>
 80083ce:	9804      	ldr	r0, [sp, #16]
 80083d0:	0022      	movs	r2, r4
 80083d2:	002b      	movs	r3, r5
 80083d4:	9004      	str	r0, [sp, #16]
 80083d6:	9105      	str	r1, [sp, #20]
 80083d8:	f7f9 faf6 	bl	80019c8 <__aeabi_dsub>
 80083dc:	0032      	movs	r2, r6
 80083de:	003b      	movs	r3, r7
 80083e0:	f7f9 faf2 	bl	80019c8 <__aeabi_dsub>
 80083e4:	9a08      	ldr	r2, [sp, #32]
 80083e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e8:	f7f9 faee 	bl	80019c8 <__aeabi_dsub>
 80083ec:	0002      	movs	r2, r0
 80083ee:	000b      	movs	r3, r1
 80083f0:	9800      	ldr	r0, [sp, #0]
 80083f2:	9901      	ldr	r1, [sp, #4]
 80083f4:	e616      	b.n	8008024 <__ieee754_pow+0x300>
 80083f6:	2300      	movs	r3, #0
 80083f8:	4c03      	ldr	r4, [pc, #12]	; (8008408 <__ieee754_pow+0x6e4>)
 80083fa:	e61f      	b.n	800803c <__ieee754_pow+0x318>
 80083fc:	000fffff 	.word	0x000fffff
 8008400:	43400000 	.word	0x43400000
 8008404:	fffffc01 	.word	0xfffffc01
 8008408:	3ff00000 	.word	0x3ff00000
 800840c:	0003988e 	.word	0x0003988e
 8008410:	000bb679 	.word	0x000bb679
 8008414:	fff00000 	.word	0xfff00000
 8008418:	08008ca0 	.word	0x08008ca0
 800841c:	4a454eef 	.word	0x4a454eef
 8008420:	3fca7e28 	.word	0x3fca7e28
 8008424:	93c9db65 	.word	0x93c9db65
 8008428:	3fcd864a 	.word	0x3fcd864a
 800842c:	a91d4101 	.word	0xa91d4101
 8008430:	3fd17460 	.word	0x3fd17460
 8008434:	518f264d 	.word	0x518f264d
 8008438:	3fd55555 	.word	0x3fd55555
 800843c:	db6fabff 	.word	0xdb6fabff
 8008440:	3fdb6db6 	.word	0x3fdb6db6
 8008444:	33333303 	.word	0x33333303
 8008448:	3fe33333 	.word	0x3fe33333
 800844c:	40080000 	.word	0x40080000
 8008450:	3feec709 	.word	0x3feec709
 8008454:	dc3a03fd 	.word	0xdc3a03fd
 8008458:	145b01f5 	.word	0x145b01f5
 800845c:	be3e2fe0 	.word	0xbe3e2fe0
 8008460:	08008cc0 	.word	0x08008cc0
 8008464:	08008cb0 	.word	0x08008cb0
 8008468:	4a8f      	ldr	r2, [pc, #572]	; (80086a8 <__ieee754_pow+0x984>)
 800846a:	4b90      	ldr	r3, [pc, #576]	; (80086ac <__ieee754_pow+0x988>)
 800846c:	9806      	ldr	r0, [sp, #24]
 800846e:	9907      	ldr	r1, [sp, #28]
 8008470:	f7f8 f912 	bl	8000698 <__aeabi_dadd>
 8008474:	0032      	movs	r2, r6
 8008476:	9002      	str	r0, [sp, #8]
 8008478:	9103      	str	r1, [sp, #12]
 800847a:	003b      	movs	r3, r7
 800847c:	0028      	movs	r0, r5
 800847e:	0021      	movs	r1, r4
 8008480:	f7f9 faa2 	bl	80019c8 <__aeabi_dsub>
 8008484:	0002      	movs	r2, r0
 8008486:	000b      	movs	r3, r1
 8008488:	9802      	ldr	r0, [sp, #8]
 800848a:	9903      	ldr	r1, [sp, #12]
 800848c:	f7f7 ffe4 	bl	8000458 <__aeabi_dcmpgt>
 8008490:	2800      	cmp	r0, #0
 8008492:	d000      	beq.n	8008496 <__ieee754_pow+0x772>
 8008494:	e60d      	b.n	80080b2 <__ieee754_pow+0x38e>
 8008496:	2100      	movs	r1, #0
 8008498:	4a85      	ldr	r2, [pc, #532]	; (80086b0 <__ieee754_pow+0x98c>)
 800849a:	0063      	lsls	r3, r4, #1
 800849c:	085b      	lsrs	r3, r3, #1
 800849e:	9102      	str	r1, [sp, #8]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	dd25      	ble.n	80084f0 <__ieee754_pow+0x7cc>
 80084a4:	4a83      	ldr	r2, [pc, #524]	; (80086b4 <__ieee754_pow+0x990>)
 80084a6:	151b      	asrs	r3, r3, #20
 80084a8:	189b      	adds	r3, r3, r2
 80084aa:	2280      	movs	r2, #128	; 0x80
 80084ac:	0352      	lsls	r2, r2, #13
 80084ae:	4694      	mov	ip, r2
 80084b0:	411a      	asrs	r2, r3
 80084b2:	1914      	adds	r4, r2, r4
 80084b4:	0060      	lsls	r0, r4, #1
 80084b6:	4b80      	ldr	r3, [pc, #512]	; (80086b8 <__ieee754_pow+0x994>)
 80084b8:	0d40      	lsrs	r0, r0, #21
 80084ba:	4d80      	ldr	r5, [pc, #512]	; (80086bc <__ieee754_pow+0x998>)
 80084bc:	18c0      	adds	r0, r0, r3
 80084be:	4105      	asrs	r5, r0
 80084c0:	0021      	movs	r1, r4
 80084c2:	43a9      	bics	r1, r5
 80084c4:	000b      	movs	r3, r1
 80084c6:	4661      	mov	r1, ip
 80084c8:	0324      	lsls	r4, r4, #12
 80084ca:	0b24      	lsrs	r4, r4, #12
 80084cc:	4321      	orrs	r1, r4
 80084ce:	2414      	movs	r4, #20
 80084d0:	1a20      	subs	r0, r4, r0
 80084d2:	4101      	asrs	r1, r0
 80084d4:	9102      	str	r1, [sp, #8]
 80084d6:	9908      	ldr	r1, [sp, #32]
 80084d8:	2200      	movs	r2, #0
 80084da:	2900      	cmp	r1, #0
 80084dc:	da02      	bge.n	80084e4 <__ieee754_pow+0x7c0>
 80084de:	9902      	ldr	r1, [sp, #8]
 80084e0:	4249      	negs	r1, r1
 80084e2:	9102      	str	r1, [sp, #8]
 80084e4:	0030      	movs	r0, r6
 80084e6:	0039      	movs	r1, r7
 80084e8:	f7f9 fa6e 	bl	80019c8 <__aeabi_dsub>
 80084ec:	9004      	str	r0, [sp, #16]
 80084ee:	9105      	str	r1, [sp, #20]
 80084f0:	9a06      	ldr	r2, [sp, #24]
 80084f2:	9b07      	ldr	r3, [sp, #28]
 80084f4:	9804      	ldr	r0, [sp, #16]
 80084f6:	9905      	ldr	r1, [sp, #20]
 80084f8:	2600      	movs	r6, #0
 80084fa:	f7f8 f8cd 	bl	8000698 <__aeabi_dadd>
 80084fe:	2200      	movs	r2, #0
 8008500:	4b6f      	ldr	r3, [pc, #444]	; (80086c0 <__ieee754_pow+0x99c>)
 8008502:	0030      	movs	r0, r6
 8008504:	000f      	movs	r7, r1
 8008506:	f7f8 ffed 	bl	80014e4 <__aeabi_dmul>
 800850a:	9a04      	ldr	r2, [sp, #16]
 800850c:	9b05      	ldr	r3, [sp, #20]
 800850e:	9008      	str	r0, [sp, #32]
 8008510:	9109      	str	r1, [sp, #36]	; 0x24
 8008512:	0030      	movs	r0, r6
 8008514:	0039      	movs	r1, r7
 8008516:	f7f9 fa57 	bl	80019c8 <__aeabi_dsub>
 800851a:	0002      	movs	r2, r0
 800851c:	000b      	movs	r3, r1
 800851e:	9806      	ldr	r0, [sp, #24]
 8008520:	9907      	ldr	r1, [sp, #28]
 8008522:	f7f9 fa51 	bl	80019c8 <__aeabi_dsub>
 8008526:	4a67      	ldr	r2, [pc, #412]	; (80086c4 <__ieee754_pow+0x9a0>)
 8008528:	4b67      	ldr	r3, [pc, #412]	; (80086c8 <__ieee754_pow+0x9a4>)
 800852a:	f7f8 ffdb 	bl	80014e4 <__aeabi_dmul>
 800852e:	4a67      	ldr	r2, [pc, #412]	; (80086cc <__ieee754_pow+0x9a8>)
 8008530:	0004      	movs	r4, r0
 8008532:	000d      	movs	r5, r1
 8008534:	4b66      	ldr	r3, [pc, #408]	; (80086d0 <__ieee754_pow+0x9ac>)
 8008536:	0030      	movs	r0, r6
 8008538:	0039      	movs	r1, r7
 800853a:	f7f8 ffd3 	bl	80014e4 <__aeabi_dmul>
 800853e:	0002      	movs	r2, r0
 8008540:	000b      	movs	r3, r1
 8008542:	0020      	movs	r0, r4
 8008544:	0029      	movs	r1, r5
 8008546:	f7f8 f8a7 	bl	8000698 <__aeabi_dadd>
 800854a:	0004      	movs	r4, r0
 800854c:	000d      	movs	r5, r1
 800854e:	0002      	movs	r2, r0
 8008550:	000b      	movs	r3, r1
 8008552:	9808      	ldr	r0, [sp, #32]
 8008554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008556:	f7f8 f89f 	bl	8000698 <__aeabi_dadd>
 800855a:	9a08      	ldr	r2, [sp, #32]
 800855c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855e:	0006      	movs	r6, r0
 8008560:	000f      	movs	r7, r1
 8008562:	f7f9 fa31 	bl	80019c8 <__aeabi_dsub>
 8008566:	0002      	movs	r2, r0
 8008568:	000b      	movs	r3, r1
 800856a:	0020      	movs	r0, r4
 800856c:	0029      	movs	r1, r5
 800856e:	f7f9 fa2b 	bl	80019c8 <__aeabi_dsub>
 8008572:	0032      	movs	r2, r6
 8008574:	9004      	str	r0, [sp, #16]
 8008576:	9105      	str	r1, [sp, #20]
 8008578:	003b      	movs	r3, r7
 800857a:	0030      	movs	r0, r6
 800857c:	0039      	movs	r1, r7
 800857e:	f7f8 ffb1 	bl	80014e4 <__aeabi_dmul>
 8008582:	0004      	movs	r4, r0
 8008584:	000d      	movs	r5, r1
 8008586:	4a53      	ldr	r2, [pc, #332]	; (80086d4 <__ieee754_pow+0x9b0>)
 8008588:	4b53      	ldr	r3, [pc, #332]	; (80086d8 <__ieee754_pow+0x9b4>)
 800858a:	f7f8 ffab 	bl	80014e4 <__aeabi_dmul>
 800858e:	4a53      	ldr	r2, [pc, #332]	; (80086dc <__ieee754_pow+0x9b8>)
 8008590:	4b53      	ldr	r3, [pc, #332]	; (80086e0 <__ieee754_pow+0x9bc>)
 8008592:	f7f9 fa19 	bl	80019c8 <__aeabi_dsub>
 8008596:	0022      	movs	r2, r4
 8008598:	002b      	movs	r3, r5
 800859a:	f7f8 ffa3 	bl	80014e4 <__aeabi_dmul>
 800859e:	4a51      	ldr	r2, [pc, #324]	; (80086e4 <__ieee754_pow+0x9c0>)
 80085a0:	4b51      	ldr	r3, [pc, #324]	; (80086e8 <__ieee754_pow+0x9c4>)
 80085a2:	f7f8 f879 	bl	8000698 <__aeabi_dadd>
 80085a6:	0022      	movs	r2, r4
 80085a8:	002b      	movs	r3, r5
 80085aa:	f7f8 ff9b 	bl	80014e4 <__aeabi_dmul>
 80085ae:	4a4f      	ldr	r2, [pc, #316]	; (80086ec <__ieee754_pow+0x9c8>)
 80085b0:	4b4f      	ldr	r3, [pc, #316]	; (80086f0 <__ieee754_pow+0x9cc>)
 80085b2:	f7f9 fa09 	bl	80019c8 <__aeabi_dsub>
 80085b6:	0022      	movs	r2, r4
 80085b8:	002b      	movs	r3, r5
 80085ba:	f7f8 ff93 	bl	80014e4 <__aeabi_dmul>
 80085be:	4a4d      	ldr	r2, [pc, #308]	; (80086f4 <__ieee754_pow+0x9d0>)
 80085c0:	4b4d      	ldr	r3, [pc, #308]	; (80086f8 <__ieee754_pow+0x9d4>)
 80085c2:	f7f8 f869 	bl	8000698 <__aeabi_dadd>
 80085c6:	0022      	movs	r2, r4
 80085c8:	002b      	movs	r3, r5
 80085ca:	f7f8 ff8b 	bl	80014e4 <__aeabi_dmul>
 80085ce:	0002      	movs	r2, r0
 80085d0:	000b      	movs	r3, r1
 80085d2:	0030      	movs	r0, r6
 80085d4:	0039      	movs	r1, r7
 80085d6:	f7f9 f9f7 	bl	80019c8 <__aeabi_dsub>
 80085da:	0004      	movs	r4, r0
 80085dc:	000d      	movs	r5, r1
 80085de:	0002      	movs	r2, r0
 80085e0:	000b      	movs	r3, r1
 80085e2:	0030      	movs	r0, r6
 80085e4:	0039      	movs	r1, r7
 80085e6:	f7f8 ff7d 	bl	80014e4 <__aeabi_dmul>
 80085ea:	2380      	movs	r3, #128	; 0x80
 80085ec:	9006      	str	r0, [sp, #24]
 80085ee:	9107      	str	r1, [sp, #28]
 80085f0:	2200      	movs	r2, #0
 80085f2:	05db      	lsls	r3, r3, #23
 80085f4:	0020      	movs	r0, r4
 80085f6:	0029      	movs	r1, r5
 80085f8:	f7f9 f9e6 	bl	80019c8 <__aeabi_dsub>
 80085fc:	0002      	movs	r2, r0
 80085fe:	000b      	movs	r3, r1
 8008600:	9806      	ldr	r0, [sp, #24]
 8008602:	9907      	ldr	r1, [sp, #28]
 8008604:	f7f8 fb64 	bl	8000cd0 <__aeabi_ddiv>
 8008608:	9a04      	ldr	r2, [sp, #16]
 800860a:	9b05      	ldr	r3, [sp, #20]
 800860c:	0004      	movs	r4, r0
 800860e:	000d      	movs	r5, r1
 8008610:	0030      	movs	r0, r6
 8008612:	0039      	movs	r1, r7
 8008614:	f7f8 ff66 	bl	80014e4 <__aeabi_dmul>
 8008618:	9a04      	ldr	r2, [sp, #16]
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	f7f8 f83c 	bl	8000698 <__aeabi_dadd>
 8008620:	0002      	movs	r2, r0
 8008622:	000b      	movs	r3, r1
 8008624:	0020      	movs	r0, r4
 8008626:	0029      	movs	r1, r5
 8008628:	f7f9 f9ce 	bl	80019c8 <__aeabi_dsub>
 800862c:	0032      	movs	r2, r6
 800862e:	003b      	movs	r3, r7
 8008630:	f7f9 f9ca 	bl	80019c8 <__aeabi_dsub>
 8008634:	0002      	movs	r2, r0
 8008636:	000b      	movs	r3, r1
 8008638:	2000      	movs	r0, #0
 800863a:	4930      	ldr	r1, [pc, #192]	; (80086fc <__ieee754_pow+0x9d8>)
 800863c:	f7f9 f9c4 	bl	80019c8 <__aeabi_dsub>
 8008640:	9b02      	ldr	r3, [sp, #8]
 8008642:	051b      	lsls	r3, r3, #20
 8008644:	185b      	adds	r3, r3, r1
 8008646:	151a      	asrs	r2, r3, #20
 8008648:	2a00      	cmp	r2, #0
 800864a:	dc26      	bgt.n	800869a <__ieee754_pow+0x976>
 800864c:	9a02      	ldr	r2, [sp, #8]
 800864e:	f000 f9ad 	bl	80089ac <scalbn>
 8008652:	9a00      	ldr	r2, [sp, #0]
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	f7ff fc04 	bl	8007e62 <__ieee754_pow+0x13e>
 800865a:	4a29      	ldr	r2, [pc, #164]	; (8008700 <__ieee754_pow+0x9dc>)
 800865c:	004b      	lsls	r3, r1, #1
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	4293      	cmp	r3, r2
 8008662:	dc00      	bgt.n	8008666 <__ieee754_pow+0x942>
 8008664:	e717      	b.n	8008496 <__ieee754_pow+0x772>
 8008666:	4b27      	ldr	r3, [pc, #156]	; (8008704 <__ieee754_pow+0x9e0>)
 8008668:	18cb      	adds	r3, r1, r3
 800866a:	4303      	orrs	r3, r0
 800866c:	d009      	beq.n	8008682 <__ieee754_pow+0x95e>
 800866e:	9800      	ldr	r0, [sp, #0]
 8008670:	9901      	ldr	r1, [sp, #4]
 8008672:	4a25      	ldr	r2, [pc, #148]	; (8008708 <__ieee754_pow+0x9e4>)
 8008674:	4b25      	ldr	r3, [pc, #148]	; (800870c <__ieee754_pow+0x9e8>)
 8008676:	f7f8 ff35 	bl	80014e4 <__aeabi_dmul>
 800867a:	4a23      	ldr	r2, [pc, #140]	; (8008708 <__ieee754_pow+0x9e4>)
 800867c:	4b23      	ldr	r3, [pc, #140]	; (800870c <__ieee754_pow+0x9e8>)
 800867e:	f7ff fbf0 	bl	8007e62 <__ieee754_pow+0x13e>
 8008682:	0032      	movs	r2, r6
 8008684:	003b      	movs	r3, r7
 8008686:	f7f9 f99f 	bl	80019c8 <__aeabi_dsub>
 800868a:	9a06      	ldr	r2, [sp, #24]
 800868c:	9b07      	ldr	r3, [sp, #28]
 800868e:	f7f7 feed 	bl	800046c <__aeabi_dcmpge>
 8008692:	2800      	cmp	r0, #0
 8008694:	d100      	bne.n	8008698 <__ieee754_pow+0x974>
 8008696:	e6fe      	b.n	8008496 <__ieee754_pow+0x772>
 8008698:	e7e9      	b.n	800866e <__ieee754_pow+0x94a>
 800869a:	0019      	movs	r1, r3
 800869c:	e7d9      	b.n	8008652 <__ieee754_pow+0x92e>
 800869e:	2300      	movs	r3, #0
 80086a0:	4c16      	ldr	r4, [pc, #88]	; (80086fc <__ieee754_pow+0x9d8>)
 80086a2:	f7ff fba1 	bl	8007de8 <__ieee754_pow+0xc4>
 80086a6:	46c0      	nop			; (mov r8, r8)
 80086a8:	652b82fe 	.word	0x652b82fe
 80086ac:	3c971547 	.word	0x3c971547
 80086b0:	3fe00000 	.word	0x3fe00000
 80086b4:	fffffc02 	.word	0xfffffc02
 80086b8:	fffffc01 	.word	0xfffffc01
 80086bc:	000fffff 	.word	0x000fffff
 80086c0:	3fe62e43 	.word	0x3fe62e43
 80086c4:	fefa39ef 	.word	0xfefa39ef
 80086c8:	3fe62e42 	.word	0x3fe62e42
 80086cc:	0ca86c39 	.word	0x0ca86c39
 80086d0:	be205c61 	.word	0xbe205c61
 80086d4:	72bea4d0 	.word	0x72bea4d0
 80086d8:	3e663769 	.word	0x3e663769
 80086dc:	c5d26bf1 	.word	0xc5d26bf1
 80086e0:	3ebbbd41 	.word	0x3ebbbd41
 80086e4:	af25de2c 	.word	0xaf25de2c
 80086e8:	3f11566a 	.word	0x3f11566a
 80086ec:	16bebd93 	.word	0x16bebd93
 80086f0:	3f66c16c 	.word	0x3f66c16c
 80086f4:	5555553e 	.word	0x5555553e
 80086f8:	3fc55555 	.word	0x3fc55555
 80086fc:	3ff00000 	.word	0x3ff00000
 8008700:	4090cbff 	.word	0x4090cbff
 8008704:	3f6f3400 	.word	0x3f6f3400
 8008708:	c2f8f359 	.word	0xc2f8f359
 800870c:	01a56e1f 	.word	0x01a56e1f

08008710 <__ieee754_sqrt>:
 8008710:	4b55      	ldr	r3, [pc, #340]	; (8008868 <__ieee754_sqrt+0x158>)
 8008712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008714:	001a      	movs	r2, r3
 8008716:	0005      	movs	r5, r0
 8008718:	000c      	movs	r4, r1
 800871a:	400a      	ands	r2, r1
 800871c:	429a      	cmp	r2, r3
 800871e:	d10f      	bne.n	8008740 <__ieee754_sqrt+0x30>
 8008720:	0002      	movs	r2, r0
 8008722:	000b      	movs	r3, r1
 8008724:	f7f8 fede 	bl	80014e4 <__aeabi_dmul>
 8008728:	0002      	movs	r2, r0
 800872a:	000b      	movs	r3, r1
 800872c:	0028      	movs	r0, r5
 800872e:	0021      	movs	r1, r4
 8008730:	f7f7 ffb2 	bl	8000698 <__aeabi_dadd>
 8008734:	0005      	movs	r5, r0
 8008736:	000c      	movs	r4, r1
 8008738:	0028      	movs	r0, r5
 800873a:	0021      	movs	r1, r4
 800873c:	b003      	add	sp, #12
 800873e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008740:	0002      	movs	r2, r0
 8008742:	2900      	cmp	r1, #0
 8008744:	dc10      	bgt.n	8008768 <__ieee754_sqrt+0x58>
 8008746:	004b      	lsls	r3, r1, #1
 8008748:	085b      	lsrs	r3, r3, #1
 800874a:	4303      	orrs	r3, r0
 800874c:	d0f4      	beq.n	8008738 <__ieee754_sqrt+0x28>
 800874e:	2000      	movs	r0, #0
 8008750:	4281      	cmp	r1, r0
 8008752:	d100      	bne.n	8008756 <__ieee754_sqrt+0x46>
 8008754:	e07f      	b.n	8008856 <__ieee754_sqrt+0x146>
 8008756:	000b      	movs	r3, r1
 8008758:	0028      	movs	r0, r5
 800875a:	f7f9 f935 	bl	80019c8 <__aeabi_dsub>
 800875e:	0002      	movs	r2, r0
 8008760:	000b      	movs	r3, r1
 8008762:	f7f8 fab5 	bl	8000cd0 <__aeabi_ddiv>
 8008766:	e7e5      	b.n	8008734 <__ieee754_sqrt+0x24>
 8008768:	1508      	asrs	r0, r1, #20
 800876a:	d074      	beq.n	8008856 <__ieee754_sqrt+0x146>
 800876c:	4b3f      	ldr	r3, [pc, #252]	; (800886c <__ieee754_sqrt+0x15c>)
 800876e:	0309      	lsls	r1, r1, #12
 8008770:	18c0      	adds	r0, r0, r3
 8008772:	2380      	movs	r3, #128	; 0x80
 8008774:	0b09      	lsrs	r1, r1, #12
 8008776:	035b      	lsls	r3, r3, #13
 8008778:	4319      	orrs	r1, r3
 800877a:	07c3      	lsls	r3, r0, #31
 800877c:	d503      	bpl.n	8008786 <__ieee754_sqrt+0x76>
 800877e:	0fd3      	lsrs	r3, r2, #31
 8008780:	0049      	lsls	r1, r1, #1
 8008782:	18c9      	adds	r1, r1, r3
 8008784:	0052      	lsls	r2, r2, #1
 8008786:	2400      	movs	r4, #0
 8008788:	1043      	asrs	r3, r0, #1
 800878a:	0049      	lsls	r1, r1, #1
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	2580      	movs	r5, #128	; 0x80
 8008790:	0fd3      	lsrs	r3, r2, #31
 8008792:	18cb      	adds	r3, r1, r3
 8008794:	0020      	movs	r0, r4
 8008796:	2116      	movs	r1, #22
 8008798:	0052      	lsls	r2, r2, #1
 800879a:	03ad      	lsls	r5, r5, #14
 800879c:	1946      	adds	r6, r0, r5
 800879e:	429e      	cmp	r6, r3
 80087a0:	dc02      	bgt.n	80087a8 <__ieee754_sqrt+0x98>
 80087a2:	1970      	adds	r0, r6, r5
 80087a4:	1b9b      	subs	r3, r3, r6
 80087a6:	1964      	adds	r4, r4, r5
 80087a8:	0fd6      	lsrs	r6, r2, #31
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	3901      	subs	r1, #1
 80087ae:	199b      	adds	r3, r3, r6
 80087b0:	0052      	lsls	r2, r2, #1
 80087b2:	086d      	lsrs	r5, r5, #1
 80087b4:	2900      	cmp	r1, #0
 80087b6:	d1f1      	bne.n	800879c <__ieee754_sqrt+0x8c>
 80087b8:	2520      	movs	r5, #32
 80087ba:	2680      	movs	r6, #128	; 0x80
 80087bc:	46ac      	mov	ip, r5
 80087be:	9100      	str	r1, [sp, #0]
 80087c0:	0636      	lsls	r6, r6, #24
 80087c2:	9d00      	ldr	r5, [sp, #0]
 80087c4:	1977      	adds	r7, r6, r5
 80087c6:	4283      	cmp	r3, r0
 80087c8:	dc02      	bgt.n	80087d0 <__ieee754_sqrt+0xc0>
 80087ca:	d112      	bne.n	80087f2 <__ieee754_sqrt+0xe2>
 80087cc:	4297      	cmp	r7, r2
 80087ce:	d810      	bhi.n	80087f2 <__ieee754_sqrt+0xe2>
 80087d0:	19bd      	adds	r5, r7, r6
 80087d2:	9500      	str	r5, [sp, #0]
 80087d4:	0005      	movs	r5, r0
 80087d6:	2f00      	cmp	r7, #0
 80087d8:	da03      	bge.n	80087e2 <__ieee754_sqrt+0xd2>
 80087da:	9d00      	ldr	r5, [sp, #0]
 80087dc:	43ed      	mvns	r5, r5
 80087de:	0fed      	lsrs	r5, r5, #31
 80087e0:	1945      	adds	r5, r0, r5
 80087e2:	1a1b      	subs	r3, r3, r0
 80087e4:	42ba      	cmp	r2, r7
 80087e6:	4180      	sbcs	r0, r0
 80087e8:	4240      	negs	r0, r0
 80087ea:	1a1b      	subs	r3, r3, r0
 80087ec:	0028      	movs	r0, r5
 80087ee:	1bd2      	subs	r2, r2, r7
 80087f0:	1989      	adds	r1, r1, r6
 80087f2:	0fd5      	lsrs	r5, r2, #31
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	18eb      	adds	r3, r5, r3
 80087f8:	2501      	movs	r5, #1
 80087fa:	426d      	negs	r5, r5
 80087fc:	44ac      	add	ip, r5
 80087fe:	4665      	mov	r5, ip
 8008800:	0052      	lsls	r2, r2, #1
 8008802:	0876      	lsrs	r6, r6, #1
 8008804:	2d00      	cmp	r5, #0
 8008806:	d1dc      	bne.n	80087c2 <__ieee754_sqrt+0xb2>
 8008808:	4313      	orrs	r3, r2
 800880a:	d003      	beq.n	8008814 <__ieee754_sqrt+0x104>
 800880c:	1c4b      	adds	r3, r1, #1
 800880e:	d127      	bne.n	8008860 <__ieee754_sqrt+0x150>
 8008810:	4661      	mov	r1, ip
 8008812:	3401      	adds	r4, #1
 8008814:	4b16      	ldr	r3, [pc, #88]	; (8008870 <__ieee754_sqrt+0x160>)
 8008816:	1060      	asrs	r0, r4, #1
 8008818:	18c0      	adds	r0, r0, r3
 800881a:	0849      	lsrs	r1, r1, #1
 800881c:	07e3      	lsls	r3, r4, #31
 800881e:	d502      	bpl.n	8008826 <__ieee754_sqrt+0x116>
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	061b      	lsls	r3, r3, #24
 8008824:	4319      	orrs	r1, r3
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	000d      	movs	r5, r1
 800882a:	051c      	lsls	r4, r3, #20
 800882c:	1823      	adds	r3, r4, r0
 800882e:	001c      	movs	r4, r3
 8008830:	e782      	b.n	8008738 <__ieee754_sqrt+0x28>
 8008832:	0ad1      	lsrs	r1, r2, #11
 8008834:	3b15      	subs	r3, #21
 8008836:	0552      	lsls	r2, r2, #21
 8008838:	2900      	cmp	r1, #0
 800883a:	d0fa      	beq.n	8008832 <__ieee754_sqrt+0x122>
 800883c:	2480      	movs	r4, #128	; 0x80
 800883e:	0364      	lsls	r4, r4, #13
 8008840:	4221      	tst	r1, r4
 8008842:	d00a      	beq.n	800885a <__ieee754_sqrt+0x14a>
 8008844:	2420      	movs	r4, #32
 8008846:	0016      	movs	r6, r2
 8008848:	1a24      	subs	r4, r4, r0
 800884a:	40e6      	lsrs	r6, r4
 800884c:	1e45      	subs	r5, r0, #1
 800884e:	4082      	lsls	r2, r0
 8008850:	4331      	orrs	r1, r6
 8008852:	1b58      	subs	r0, r3, r5
 8008854:	e78a      	b.n	800876c <__ieee754_sqrt+0x5c>
 8008856:	2300      	movs	r3, #0
 8008858:	e7ee      	b.n	8008838 <__ieee754_sqrt+0x128>
 800885a:	0049      	lsls	r1, r1, #1
 800885c:	3001      	adds	r0, #1
 800885e:	e7ef      	b.n	8008840 <__ieee754_sqrt+0x130>
 8008860:	2301      	movs	r3, #1
 8008862:	3101      	adds	r1, #1
 8008864:	4399      	bics	r1, r3
 8008866:	e7d5      	b.n	8008814 <__ieee754_sqrt+0x104>
 8008868:	7ff00000 	.word	0x7ff00000
 800886c:	fffffc01 	.word	0xfffffc01
 8008870:	3fe00000 	.word	0x3fe00000

08008874 <fabs>:
 8008874:	0049      	lsls	r1, r1, #1
 8008876:	084b      	lsrs	r3, r1, #1
 8008878:	0019      	movs	r1, r3
 800887a:	4770      	bx	lr

0800887c <finite>:
 800887c:	0048      	lsls	r0, r1, #1
 800887e:	4b02      	ldr	r3, [pc, #8]	; (8008888 <finite+0xc>)
 8008880:	0840      	lsrs	r0, r0, #1
 8008882:	18c0      	adds	r0, r0, r3
 8008884:	0fc0      	lsrs	r0, r0, #31
 8008886:	4770      	bx	lr
 8008888:	80100000 	.word	0x80100000

0800888c <matherr>:
 800888c:	2000      	movs	r0, #0
 800888e:	4770      	bx	lr

08008890 <nan>:
 8008890:	2000      	movs	r0, #0
 8008892:	4901      	ldr	r1, [pc, #4]	; (8008898 <nan+0x8>)
 8008894:	4770      	bx	lr
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	7ff80000 	.word	0x7ff80000

0800889c <rint>:
 800889c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800889e:	004a      	lsls	r2, r1, #1
 80088a0:	4e3e      	ldr	r6, [pc, #248]	; (800899c <rint+0x100>)
 80088a2:	0d52      	lsrs	r2, r2, #21
 80088a4:	b085      	sub	sp, #20
 80088a6:	1996      	adds	r6, r2, r6
 80088a8:	000d      	movs	r5, r1
 80088aa:	9101      	str	r1, [sp, #4]
 80088ac:	0003      	movs	r3, r0
 80088ae:	0fcc      	lsrs	r4, r1, #31
 80088b0:	2e13      	cmp	r6, #19
 80088b2:	dc57      	bgt.n	8008964 <rint+0xc8>
 80088b4:	2e00      	cmp	r6, #0
 80088b6:	da2a      	bge.n	800890e <rint+0x72>
 80088b8:	004a      	lsls	r2, r1, #1
 80088ba:	0852      	lsrs	r2, r2, #1
 80088bc:	4302      	orrs	r2, r0
 80088be:	d024      	beq.n	800890a <rint+0x6e>
 80088c0:	030a      	lsls	r2, r1, #12
 80088c2:	0b12      	lsrs	r2, r2, #12
 80088c4:	4302      	orrs	r2, r0
 80088c6:	4253      	negs	r3, r2
 80088c8:	4313      	orrs	r3, r2
 80088ca:	2280      	movs	r2, #128	; 0x80
 80088cc:	0c4d      	lsrs	r5, r1, #17
 80088ce:	0312      	lsls	r2, r2, #12
 80088d0:	0b1b      	lsrs	r3, r3, #12
 80088d2:	4013      	ands	r3, r2
 80088d4:	046d      	lsls	r5, r5, #17
 80088d6:	432b      	orrs	r3, r5
 80088d8:	0019      	movs	r1, r3
 80088da:	4b31      	ldr	r3, [pc, #196]	; (80089a0 <rint+0x104>)
 80088dc:	00e2      	lsls	r2, r4, #3
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	681e      	ldr	r6, [r3, #0]
 80088e2:	685f      	ldr	r7, [r3, #4]
 80088e4:	0002      	movs	r2, r0
 80088e6:	000b      	movs	r3, r1
 80088e8:	0030      	movs	r0, r6
 80088ea:	0039      	movs	r1, r7
 80088ec:	f7f7 fed4 	bl	8000698 <__aeabi_dadd>
 80088f0:	9002      	str	r0, [sp, #8]
 80088f2:	9103      	str	r1, [sp, #12]
 80088f4:	9802      	ldr	r0, [sp, #8]
 80088f6:	9903      	ldr	r1, [sp, #12]
 80088f8:	003b      	movs	r3, r7
 80088fa:	0032      	movs	r2, r6
 80088fc:	f7f9 f864 	bl	80019c8 <__aeabi_dsub>
 8008900:	004b      	lsls	r3, r1, #1
 8008902:	085b      	lsrs	r3, r3, #1
 8008904:	07e4      	lsls	r4, r4, #31
 8008906:	4323      	orrs	r3, r4
 8008908:	0019      	movs	r1, r3
 800890a:	b005      	add	sp, #20
 800890c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800890e:	4a25      	ldr	r2, [pc, #148]	; (80089a4 <rint+0x108>)
 8008910:	4132      	asrs	r2, r6
 8008912:	0017      	movs	r7, r2
 8008914:	400f      	ands	r7, r1
 8008916:	4307      	orrs	r7, r0
 8008918:	d0f7      	beq.n	800890a <rint+0x6e>
 800891a:	0852      	lsrs	r2, r2, #1
 800891c:	0011      	movs	r1, r2
 800891e:	4029      	ands	r1, r5
 8008920:	430b      	orrs	r3, r1
 8008922:	d00a      	beq.n	800893a <rint+0x9e>
 8008924:	2300      	movs	r3, #0
 8008926:	2e13      	cmp	r6, #19
 8008928:	d101      	bne.n	800892e <rint+0x92>
 800892a:	2380      	movs	r3, #128	; 0x80
 800892c:	061b      	lsls	r3, r3, #24
 800892e:	2780      	movs	r7, #128	; 0x80
 8008930:	02ff      	lsls	r7, r7, #11
 8008932:	4137      	asrs	r7, r6
 8008934:	4395      	bics	r5, r2
 8008936:	432f      	orrs	r7, r5
 8008938:	9701      	str	r7, [sp, #4]
 800893a:	9901      	ldr	r1, [sp, #4]
 800893c:	001a      	movs	r2, r3
 800893e:	000b      	movs	r3, r1
 8008940:	4917      	ldr	r1, [pc, #92]	; (80089a0 <rint+0x104>)
 8008942:	00e4      	lsls	r4, r4, #3
 8008944:	190c      	adds	r4, r1, r4
 8008946:	6865      	ldr	r5, [r4, #4]
 8008948:	6824      	ldr	r4, [r4, #0]
 800894a:	0020      	movs	r0, r4
 800894c:	0029      	movs	r1, r5
 800894e:	f7f7 fea3 	bl	8000698 <__aeabi_dadd>
 8008952:	9002      	str	r0, [sp, #8]
 8008954:	9103      	str	r1, [sp, #12]
 8008956:	9802      	ldr	r0, [sp, #8]
 8008958:	9903      	ldr	r1, [sp, #12]
 800895a:	0022      	movs	r2, r4
 800895c:	002b      	movs	r3, r5
 800895e:	f7f9 f833 	bl	80019c8 <__aeabi_dsub>
 8008962:	e7d2      	b.n	800890a <rint+0x6e>
 8008964:	2e33      	cmp	r6, #51	; 0x33
 8008966:	dd08      	ble.n	800897a <rint+0xde>
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	429e      	cmp	r6, r3
 800896e:	d1cc      	bne.n	800890a <rint+0x6e>
 8008970:	0002      	movs	r2, r0
 8008972:	000b      	movs	r3, r1
 8008974:	f7f7 fe90 	bl	8000698 <__aeabi_dadd>
 8008978:	e7c7      	b.n	800890a <rint+0x6e>
 800897a:	2601      	movs	r6, #1
 800897c:	4d0a      	ldr	r5, [pc, #40]	; (80089a8 <rint+0x10c>)
 800897e:	4276      	negs	r6, r6
 8008980:	1952      	adds	r2, r2, r5
 8008982:	40d6      	lsrs	r6, r2
 8008984:	4206      	tst	r6, r0
 8008986:	d0c0      	beq.n	800890a <rint+0x6e>
 8008988:	0876      	lsrs	r6, r6, #1
 800898a:	4206      	tst	r6, r0
 800898c:	d0d5      	beq.n	800893a <rint+0x9e>
 800898e:	2180      	movs	r1, #128	; 0x80
 8008990:	05c9      	lsls	r1, r1, #23
 8008992:	4111      	asrs	r1, r2
 8008994:	43b3      	bics	r3, r6
 8008996:	430b      	orrs	r3, r1
 8008998:	e7cf      	b.n	800893a <rint+0x9e>
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	fffffc01 	.word	0xfffffc01
 80089a0:	08008cd0 	.word	0x08008cd0
 80089a4:	000fffff 	.word	0x000fffff
 80089a8:	fffffbed 	.word	0xfffffbed

080089ac <scalbn>:
 80089ac:	004b      	lsls	r3, r1, #1
 80089ae:	b570      	push	{r4, r5, r6, lr}
 80089b0:	0d5b      	lsrs	r3, r3, #21
 80089b2:	0014      	movs	r4, r2
 80089b4:	000a      	movs	r2, r1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10d      	bne.n	80089d6 <scalbn+0x2a>
 80089ba:	004b      	lsls	r3, r1, #1
 80089bc:	085b      	lsrs	r3, r3, #1
 80089be:	4303      	orrs	r3, r0
 80089c0:	d010      	beq.n	80089e4 <scalbn+0x38>
 80089c2:	4b21      	ldr	r3, [pc, #132]	; (8008a48 <scalbn+0x9c>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	f7f8 fd8d 	bl	80014e4 <__aeabi_dmul>
 80089ca:	4b20      	ldr	r3, [pc, #128]	; (8008a4c <scalbn+0xa0>)
 80089cc:	429c      	cmp	r4, r3
 80089ce:	da0a      	bge.n	80089e6 <scalbn+0x3a>
 80089d0:	4a1f      	ldr	r2, [pc, #124]	; (8008a50 <scalbn+0xa4>)
 80089d2:	4b20      	ldr	r3, [pc, #128]	; (8008a54 <scalbn+0xa8>)
 80089d4:	e017      	b.n	8008a06 <scalbn+0x5a>
 80089d6:	4d20      	ldr	r5, [pc, #128]	; (8008a58 <scalbn+0xac>)
 80089d8:	42ab      	cmp	r3, r5
 80089da:	d108      	bne.n	80089ee <scalbn+0x42>
 80089dc:	0002      	movs	r2, r0
 80089de:	000b      	movs	r3, r1
 80089e0:	f7f7 fe5a 	bl	8000698 <__aeabi_dadd>
 80089e4:	bd70      	pop	{r4, r5, r6, pc}
 80089e6:	000a      	movs	r2, r1
 80089e8:	004b      	lsls	r3, r1, #1
 80089ea:	0d5b      	lsrs	r3, r3, #21
 80089ec:	3b36      	subs	r3, #54	; 0x36
 80089ee:	4d1b      	ldr	r5, [pc, #108]	; (8008a5c <scalbn+0xb0>)
 80089f0:	18e3      	adds	r3, r4, r3
 80089f2:	42ab      	cmp	r3, r5
 80089f4:	dd0a      	ble.n	8008a0c <scalbn+0x60>
 80089f6:	0002      	movs	r2, r0
 80089f8:	000b      	movs	r3, r1
 80089fa:	4819      	ldr	r0, [pc, #100]	; (8008a60 <scalbn+0xb4>)
 80089fc:	4919      	ldr	r1, [pc, #100]	; (8008a64 <scalbn+0xb8>)
 80089fe:	f000 f839 	bl	8008a74 <copysign>
 8008a02:	4a17      	ldr	r2, [pc, #92]	; (8008a60 <scalbn+0xb4>)
 8008a04:	4b17      	ldr	r3, [pc, #92]	; (8008a64 <scalbn+0xb8>)
 8008a06:	f7f8 fd6d 	bl	80014e4 <__aeabi_dmul>
 8008a0a:	e7eb      	b.n	80089e4 <scalbn+0x38>
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd05      	ble.n	8008a1c <scalbn+0x70>
 8008a10:	4c15      	ldr	r4, [pc, #84]	; (8008a68 <scalbn+0xbc>)
 8008a12:	051b      	lsls	r3, r3, #20
 8008a14:	4022      	ands	r2, r4
 8008a16:	431a      	orrs	r2, r3
 8008a18:	0011      	movs	r1, r2
 8008a1a:	e7e3      	b.n	80089e4 <scalbn+0x38>
 8008a1c:	001d      	movs	r5, r3
 8008a1e:	3535      	adds	r5, #53	; 0x35
 8008a20:	da09      	bge.n	8008a36 <scalbn+0x8a>
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <scalbn+0xc0>)
 8008a24:	0002      	movs	r2, r0
 8008a26:	429c      	cmp	r4, r3
 8008a28:	dce6      	bgt.n	80089f8 <scalbn+0x4c>
 8008a2a:	000b      	movs	r3, r1
 8008a2c:	4808      	ldr	r0, [pc, #32]	; (8008a50 <scalbn+0xa4>)
 8008a2e:	4909      	ldr	r1, [pc, #36]	; (8008a54 <scalbn+0xa8>)
 8008a30:	f000 f820 	bl	8008a74 <copysign>
 8008a34:	e7cc      	b.n	80089d0 <scalbn+0x24>
 8008a36:	4c0c      	ldr	r4, [pc, #48]	; (8008a68 <scalbn+0xbc>)
 8008a38:	3336      	adds	r3, #54	; 0x36
 8008a3a:	4022      	ands	r2, r4
 8008a3c:	051b      	lsls	r3, r3, #20
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	0019      	movs	r1, r3
 8008a42:	2200      	movs	r2, #0
 8008a44:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <scalbn+0xc4>)
 8008a46:	e7de      	b.n	8008a06 <scalbn+0x5a>
 8008a48:	43500000 	.word	0x43500000
 8008a4c:	ffff3cb0 	.word	0xffff3cb0
 8008a50:	c2f8f359 	.word	0xc2f8f359
 8008a54:	01a56e1f 	.word	0x01a56e1f
 8008a58:	000007ff 	.word	0x000007ff
 8008a5c:	000007fe 	.word	0x000007fe
 8008a60:	8800759c 	.word	0x8800759c
 8008a64:	7e37e43c 	.word	0x7e37e43c
 8008a68:	800fffff 	.word	0x800fffff
 8008a6c:	0000c350 	.word	0x0000c350
 8008a70:	3c900000 	.word	0x3c900000

08008a74 <copysign>:
 8008a74:	b530      	push	{r4, r5, lr}
 8008a76:	004a      	lsls	r2, r1, #1
 8008a78:	0fdb      	lsrs	r3, r3, #31
 8008a7a:	07db      	lsls	r3, r3, #31
 8008a7c:	0852      	lsrs	r2, r2, #1
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	0011      	movs	r1, r2
 8008a82:	bd30      	pop	{r4, r5, pc}

08008a84 <_init>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr

08008a90 <_fini>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	46c0      	nop			; (mov r8, r8)
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr
