
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800188c  0800188c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001894  08001894  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001894  08001894  00011894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001898  08001898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800189c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080018a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080018a8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048e8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f36  00000000  00000000  0002491c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003a0  00000000  00000000  00025858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  00025bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012d97  00000000  00000000  00025f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000044f3  00000000  00000000  00038ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072078  00000000  00000000  0003d19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af212  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ba4  00000000  00000000  000af290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800184c 	.word	0x0800184c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800184c 	.word	0x0800184c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	1c08      	adds	r0, r1, #0
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f830 	bl	80002c4 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	0415      	lsls	r5, r2, #16
 8000278:	0c2d      	lsrs	r5, r5, #16
 800027a:	002e      	movs	r6, r5
 800027c:	b580      	push	{r7, lr}
 800027e:	0407      	lsls	r7, r0, #16
 8000280:	0c14      	lsrs	r4, r2, #16
 8000282:	0c3f      	lsrs	r7, r7, #16
 8000284:	4699      	mov	r9, r3
 8000286:	0c03      	lsrs	r3, r0, #16
 8000288:	437e      	muls	r6, r7
 800028a:	435d      	muls	r5, r3
 800028c:	4367      	muls	r7, r4
 800028e:	4363      	muls	r3, r4
 8000290:	197f      	adds	r7, r7, r5
 8000292:	0c34      	lsrs	r4, r6, #16
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	469c      	mov	ip, r3
 8000298:	42a5      	cmp	r5, r4
 800029a:	d903      	bls.n	80002a4 <__aeabi_lmul+0x34>
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	025b      	lsls	r3, r3, #9
 80002a0:	4698      	mov	r8, r3
 80002a2:	44c4      	add	ip, r8
 80002a4:	464b      	mov	r3, r9
 80002a6:	4343      	muls	r3, r0
 80002a8:	4351      	muls	r1, r2
 80002aa:	0c25      	lsrs	r5, r4, #16
 80002ac:	0436      	lsls	r6, r6, #16
 80002ae:	4465      	add	r5, ip
 80002b0:	0c36      	lsrs	r6, r6, #16
 80002b2:	0424      	lsls	r4, r4, #16
 80002b4:	19a4      	adds	r4, r4, r6
 80002b6:	195b      	adds	r3, r3, r5
 80002b8:	1859      	adds	r1, r3, r1
 80002ba:	0020      	movs	r0, r4
 80002bc:	bc0c      	pop	{r2, r3}
 80002be:	4690      	mov	r8, r2
 80002c0:	4699      	mov	r9, r3
 80002c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002c4 <__udivmoddi4>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	464f      	mov	r7, r9
 80002c8:	4646      	mov	r6, r8
 80002ca:	46d6      	mov	lr, sl
 80002cc:	b5c0      	push	{r6, r7, lr}
 80002ce:	0004      	movs	r4, r0
 80002d0:	b082      	sub	sp, #8
 80002d2:	000d      	movs	r5, r1
 80002d4:	4691      	mov	r9, r2
 80002d6:	4698      	mov	r8, r3
 80002d8:	428b      	cmp	r3, r1
 80002da:	d82f      	bhi.n	800033c <__udivmoddi4+0x78>
 80002dc:	d02c      	beq.n	8000338 <__udivmoddi4+0x74>
 80002de:	4641      	mov	r1, r8
 80002e0:	4648      	mov	r0, r9
 80002e2:	f000 f8b1 	bl	8000448 <__clzdi2>
 80002e6:	0029      	movs	r1, r5
 80002e8:	0006      	movs	r6, r0
 80002ea:	0020      	movs	r0, r4
 80002ec:	f000 f8ac 	bl	8000448 <__clzdi2>
 80002f0:	1a33      	subs	r3, r6, r0
 80002f2:	469c      	mov	ip, r3
 80002f4:	3b20      	subs	r3, #32
 80002f6:	469a      	mov	sl, r3
 80002f8:	d500      	bpl.n	80002fc <__udivmoddi4+0x38>
 80002fa:	e076      	b.n	80003ea <__udivmoddi4+0x126>
 80002fc:	464b      	mov	r3, r9
 80002fe:	4652      	mov	r2, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001f      	movs	r7, r3
 8000304:	464b      	mov	r3, r9
 8000306:	4662      	mov	r2, ip
 8000308:	4093      	lsls	r3, r2
 800030a:	001e      	movs	r6, r3
 800030c:	42af      	cmp	r7, r5
 800030e:	d828      	bhi.n	8000362 <__udivmoddi4+0x9e>
 8000310:	d025      	beq.n	800035e <__udivmoddi4+0x9a>
 8000312:	4653      	mov	r3, sl
 8000314:	1ba4      	subs	r4, r4, r6
 8000316:	41bd      	sbcs	r5, r7
 8000318:	2b00      	cmp	r3, #0
 800031a:	da00      	bge.n	800031e <__udivmoddi4+0x5a>
 800031c:	e07b      	b.n	8000416 <__udivmoddi4+0x152>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2301      	movs	r3, #1
 8000328:	4652      	mov	r2, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2301      	movs	r3, #1
 8000330:	4662      	mov	r2, ip
 8000332:	4093      	lsls	r3, r2
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	e018      	b.n	800036a <__udivmoddi4+0xa6>
 8000338:	4282      	cmp	r2, r0
 800033a:	d9d0      	bls.n	80002de <__udivmoddi4+0x1a>
 800033c:	2200      	movs	r2, #0
 800033e:	2300      	movs	r3, #0
 8000340:	9200      	str	r2, [sp, #0]
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <__udivmoddi4+0x8a>
 800034a:	601c      	str	r4, [r3, #0]
 800034c:	605d      	str	r5, [r3, #4]
 800034e:	9800      	ldr	r0, [sp, #0]
 8000350:	9901      	ldr	r1, [sp, #4]
 8000352:	b002      	add	sp, #8
 8000354:	bc1c      	pop	{r2, r3, r4}
 8000356:	4690      	mov	r8, r2
 8000358:	4699      	mov	r9, r3
 800035a:	46a2      	mov	sl, r4
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035e:	42a3      	cmp	r3, r4
 8000360:	d9d7      	bls.n	8000312 <__udivmoddi4+0x4e>
 8000362:	2200      	movs	r2, #0
 8000364:	2300      	movs	r3, #0
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	4663      	mov	r3, ip
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0e9      	beq.n	8000344 <__udivmoddi4+0x80>
 8000370:	07fb      	lsls	r3, r7, #31
 8000372:	4698      	mov	r8, r3
 8000374:	4641      	mov	r1, r8
 8000376:	0872      	lsrs	r2, r6, #1
 8000378:	430a      	orrs	r2, r1
 800037a:	087b      	lsrs	r3, r7, #1
 800037c:	4666      	mov	r6, ip
 800037e:	e00e      	b.n	800039e <__udivmoddi4+0xda>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d101      	bne.n	8000388 <__udivmoddi4+0xc4>
 8000384:	42a2      	cmp	r2, r4
 8000386:	d80c      	bhi.n	80003a2 <__udivmoddi4+0xde>
 8000388:	1aa4      	subs	r4, r4, r2
 800038a:	419d      	sbcs	r5, r3
 800038c:	2001      	movs	r0, #1
 800038e:	1924      	adds	r4, r4, r4
 8000390:	416d      	adcs	r5, r5
 8000392:	2100      	movs	r1, #0
 8000394:	3e01      	subs	r6, #1
 8000396:	1824      	adds	r4, r4, r0
 8000398:	414d      	adcs	r5, r1
 800039a:	2e00      	cmp	r6, #0
 800039c:	d006      	beq.n	80003ac <__udivmoddi4+0xe8>
 800039e:	42ab      	cmp	r3, r5
 80003a0:	d9ee      	bls.n	8000380 <__udivmoddi4+0xbc>
 80003a2:	3e01      	subs	r6, #1
 80003a4:	1924      	adds	r4, r4, r4
 80003a6:	416d      	adcs	r5, r5
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d1f8      	bne.n	800039e <__udivmoddi4+0xda>
 80003ac:	9800      	ldr	r0, [sp, #0]
 80003ae:	9901      	ldr	r1, [sp, #4]
 80003b0:	4653      	mov	r3, sl
 80003b2:	1900      	adds	r0, r0, r4
 80003b4:	4169      	adcs	r1, r5
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	db23      	blt.n	8000402 <__udivmoddi4+0x13e>
 80003ba:	002b      	movs	r3, r5
 80003bc:	4652      	mov	r2, sl
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	002a      	movs	r2, r5
 80003c2:	4664      	mov	r4, ip
 80003c4:	40e2      	lsrs	r2, r4
 80003c6:	001c      	movs	r4, r3
 80003c8:	4653      	mov	r3, sl
 80003ca:	0015      	movs	r5, r2
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	db2d      	blt.n	800042c <__udivmoddi4+0x168>
 80003d0:	0026      	movs	r6, r4
 80003d2:	4657      	mov	r7, sl
 80003d4:	40be      	lsls	r6, r7
 80003d6:	0033      	movs	r3, r6
 80003d8:	0026      	movs	r6, r4
 80003da:	4667      	mov	r7, ip
 80003dc:	40be      	lsls	r6, r7
 80003de:	0032      	movs	r2, r6
 80003e0:	1a80      	subs	r0, r0, r2
 80003e2:	4199      	sbcs	r1, r3
 80003e4:	9000      	str	r0, [sp, #0]
 80003e6:	9101      	str	r1, [sp, #4]
 80003e8:	e7ac      	b.n	8000344 <__udivmoddi4+0x80>
 80003ea:	4662      	mov	r2, ip
 80003ec:	2320      	movs	r3, #32
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	464a      	mov	r2, r9
 80003f2:	40da      	lsrs	r2, r3
 80003f4:	4661      	mov	r1, ip
 80003f6:	0013      	movs	r3, r2
 80003f8:	4642      	mov	r2, r8
 80003fa:	408a      	lsls	r2, r1
 80003fc:	0017      	movs	r7, r2
 80003fe:	431f      	orrs	r7, r3
 8000400:	e780      	b.n	8000304 <__udivmoddi4+0x40>
 8000402:	4662      	mov	r2, ip
 8000404:	2320      	movs	r3, #32
 8000406:	1a9b      	subs	r3, r3, r2
 8000408:	002a      	movs	r2, r5
 800040a:	4666      	mov	r6, ip
 800040c:	409a      	lsls	r2, r3
 800040e:	0023      	movs	r3, r4
 8000410:	40f3      	lsrs	r3, r6
 8000412:	4313      	orrs	r3, r2
 8000414:	e7d4      	b.n	80003c0 <__udivmoddi4+0xfc>
 8000416:	4662      	mov	r2, ip
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e780      	b.n	800032e <__udivmoddi4+0x6a>
 800042c:	2320      	movs	r3, #32
 800042e:	4662      	mov	r2, ip
 8000430:	0026      	movs	r6, r4
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	40de      	lsrs	r6, r3
 8000436:	002f      	movs	r7, r5
 8000438:	46b0      	mov	r8, r6
 800043a:	4666      	mov	r6, ip
 800043c:	40b7      	lsls	r7, r6
 800043e:	4646      	mov	r6, r8
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7c8      	b.n	80003d8 <__udivmoddi4+0x114>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
#include "main.h"

void SystemClock_Config(void);

int main(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	; 0x2c
 80004a0:	af00      	add	r7, sp, #0
  HAL_Init();
 80004a2:	f000 f95b 	bl	800075c <HAL_Init>
  SystemClock_Config();
 80004a6:	f000 f8a7 	bl	80005f8 <SystemClock_Config>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	240c      	movs	r4, #12
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2314      	movs	r3, #20
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f001 f9c1 	bl	800183c <memset>
  RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 80004ba:	4b48      	ldr	r3, [pc, #288]	; (80005dc <main+0x140>)
 80004bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004be:	4b47      	ldr	r3, [pc, #284]	; (80005dc <main+0x140>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->IOPENR |= RCC_IOPENR_IOPCEN;
 80004c6:	4b45      	ldr	r3, [pc, #276]	; (80005dc <main+0x140>)
 80004c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ca:	4b44      	ldr	r3, [pc, #272]	; (80005dc <main+0x140>)
 80004cc:	2104      	movs	r1, #4
 80004ce:	430a      	orrs	r2, r1
 80004d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->APB1ENR |= RCC_APB1ENR_LPUART1EN;
 80004d2:	4b42      	ldr	r3, [pc, #264]	; (80005dc <main+0x140>)
 80004d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004d6:	4b41      	ldr	r3, [pc, #260]	; (80005dc <main+0x140>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	02c9      	lsls	r1, r1, #11
 80004dc:	430a      	orrs	r2, r1
 80004de:	639a      	str	r2, [r3, #56]	; 0x38

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2220      	movs	r2, #32
 80004e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2201      	movs	r2, #1
 80004ea:	605a      	str	r2, [r3, #4]
  //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	193a      	adds	r2, r7, r4
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fa52 	bl	80009a4 <HAL_GPIO_Init>
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000500:	23a0      	movs	r3, #160	; 0xa0
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	23a0      	movs	r3, #160	; 0xa0
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	2120      	movs	r1, #32
 800050c:	438a      	bics	r2, r1
 800050e:	615a      	str	r2, [r3, #20]

		 Set selected pins that were at low level, and reset ones that were high
	  GPIOA->BSRR = ((odr & GPIO_ODR_OD5) << 16) | (~odr & GPIO_ODR_OD5);
	  HAL_Delay(250);
  }*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000510:	0021      	movs	r1, r4
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2210      	movs	r2, #16
 8000516:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2212      	movs	r2, #18
 800051c:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051e:	000c      	movs	r4, r1
 8000520:	187b      	adds	r3, r7, r1
 8000522:	4a2f      	ldr	r2, [pc, #188]	; (80005e0 <main+0x144>)
 8000524:	0019      	movs	r1, r3
 8000526:	0010      	movs	r0, r2
 8000528:	f000 fa3c 	bl	80009a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800052c:	0021      	movs	r1, r4
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2220      	movs	r2, #32
 8000532:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2212      	movs	r2, #18
 8000538:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	187b      	adds	r3, r7, r1
 800053c:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <main+0x144>)
 800053e:	0019      	movs	r1, r3
 8000540:	0010      	movs	r0, r2
 8000542:	f000 fa2f 	bl	80009a4 <HAL_GPIO_Init>

  LPUART1->CR1 &= ~USART_CR1_M;
 8000546:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <main+0x148>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <main+0x148>)
 800054c:	4926      	ldr	r1, [pc, #152]	; (80005e8 <main+0x14c>)
 800054e:	400a      	ands	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
  LPUART1->BRR |= 0x369; // divides clock source so baud rate = 9600 bps
 8000552:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <main+0x148>)
 8000554:	68da      	ldr	r2, [r3, #12]
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <main+0x148>)
 8000558:	4924      	ldr	r1, [pc, #144]	; (80005ec <main+0x150>)
 800055a:	430a      	orrs	r2, r1
 800055c:	60da      	str	r2, [r3, #12]
  LPUART1->CR2 &= ~USART_CR2_STOP;
 800055e:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <main+0x148>)
 8000560:	685a      	ldr	r2, [r3, #4]
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <main+0x148>)
 8000564:	4922      	ldr	r1, [pc, #136]	; (80005f0 <main+0x154>)
 8000566:	400a      	ands	r2, r1
 8000568:	605a      	str	r2, [r3, #4]
  LPUART1->CR1 |= USART_CR1_UE;
 800056a:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <main+0x148>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <main+0x148>)
 8000570:	2101      	movs	r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	601a      	str	r2, [r3, #0]
  LPUART1->CR1 |= USART_CR1_TE;
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <main+0x148>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <main+0x148>)
 800057c:	2108      	movs	r1, #8
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]
  char hello[] = "Hello World";
 8000582:	003b      	movs	r3, r7
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <main+0x158>)
 8000586:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000588:	c313      	stmia	r3!, {r0, r1, r4}
	  printf("Error: Could not open file\n");
	  return 0;
  }
  fprintf(fptr, "Hello\n");*/

  for (int i = 0; i < strlen(hello); i++){
 800058a:	2300      	movs	r3, #0
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	003b      	movs	r3, r7
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff fdb8 	bl	8000108 <strlen>
 8000598:	0002      	movs	r2, r0
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	429a      	cmp	r2, r3
 800059e:	d917      	bls.n	80005d0 <main+0x134>
	  current = hello[i];
 80005a0:	2023      	movs	r0, #35	; 0x23
 80005a2:	183b      	adds	r3, r7, r0
 80005a4:	0039      	movs	r1, r7
 80005a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005a8:	188a      	adds	r2, r1, r2
 80005aa:	7812      	ldrb	r2, [r2, #0]
 80005ac:	701a      	strb	r2, [r3, #0]
//	  fprintf(fptr, "%c", current);
	  LPUART1->TDR &= ~0xff;
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <main+0x148>)
 80005b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <main+0x148>)
 80005b4:	21ff      	movs	r1, #255	; 0xff
 80005b6:	438a      	bics	r2, r1
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
	  LPUART1->TDR |= current;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <main+0x148>)
 80005bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80005be:	183b      	adds	r3, r7, r0
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <main+0x148>)
 80005c4:	430a      	orrs	r2, r1
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
	  while ((LPUART1->ISR & USART_ISR_TC) != 1){}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <main+0x148>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	e7fc      	b.n	80005ca <main+0x12e>
 80005d0:	2300      	movs	r3, #0
  }
//  fclose(fptr);

}
 80005d2:	0018      	movs	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b00b      	add	sp, #44	; 0x2c
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40021000 	.word	0x40021000
 80005e0:	50000800 	.word	0x50000800
 80005e4:	40004800 	.word	0x40004800
 80005e8:	efffefff 	.word	0xefffefff
 80005ec:	00000369 	.word	0x00000369
 80005f0:	ffffcfff 	.word	0xffffcfff
 80005f4:	08001864 	.word	0x08001864

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b095      	sub	sp, #84	; 0x54
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	2418      	movs	r4, #24
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	2338      	movs	r3, #56	; 0x38
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f001 f917 	bl	800183c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	0018      	movs	r0, r3
 8000612:	2314      	movs	r3, #20
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f001 f910 	bl	800183c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <SystemClock_Config+0xa0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <SystemClock_Config+0xa4>)
 8000622:	401a      	ands	r2, r3
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <SystemClock_Config+0xa0>)
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	0109      	lsls	r1, r1, #4
 800062a:	430a      	orrs	r2, r1
 800062c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2210      	movs	r2, #16
 8000634:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	22a0      	movs	r2, #160	; 0xa0
 8000646:	0212      	lsls	r2, r2, #8
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	187b      	adds	r3, r7, r1
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fb1c 	bl	8000c90 <HAL_RCC_OscConfig>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800065c:	f000 f820 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	220f      	movs	r2, #15
 8000664:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2100      	movs	r1, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fecc 	bl	8001420 <HAL_RCC_ClockConfig>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800068c:	f000 f808 	bl	80006a0 <Error_Handler>
  }
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b015      	add	sp, #84	; 0x54
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	40007000 	.word	0x40007000
 800069c:	ffffe7ff 	.word	0xffffe7ff

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <Error_Handler+0x6>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <HAL_MspInit+0x24>)
 80006ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MspInit+0x24>)
 80006b2:	2101      	movs	r1, #1
 80006b4:	430a      	orrs	r2, r1
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_MspInit+0x24>)
 80006ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <HAL_MspInit+0x24>)
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	0549      	lsls	r1, r1, #21
 80006c2:	430a      	orrs	r2, r1
 80006c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f4:	f000 f886 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Reset_Handler>:
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopForever+0x2>)
 800070a:	4685      	mov	sp, r0
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <LoopForever+0x6>)
 800070e:	490e      	ldr	r1, [pc, #56]	; (8000748 <LoopForever+0xa>)
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <LoopForever+0xe>)
 8000712:	2300      	movs	r3, #0
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:
 8000716:	58d4      	ldr	r4, [r2, r3]
 8000718:	50c4      	str	r4, [r0, r3]
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:
 800071c:	18c4      	adds	r4, r0, r3
 800071e:	428c      	cmp	r4, r1
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopForever+0x12>)
 8000724:	4c0b      	ldr	r4, [pc, #44]	; (8000754 <LoopForever+0x16>)
 8000726:	2300      	movs	r3, #0
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:
 800072e:	42a2      	cmp	r2, r4
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>
 8000732:	f7ff ffe4 	bl	80006fe <SystemInit>
 8000736:	f001 f85d 	bl	80017f4 <__libc_init_array>
 800073a:	f7ff feaf 	bl	800049c <main>

0800073e <LoopForever>:
 800073e:	e7fe      	b.n	800073e <LoopForever>
 8000740:	20002000 	.word	0x20002000
 8000744:	20000000 	.word	0x20000000
 8000748:	2000000c 	.word	0x2000000c
 800074c:	0800189c 	.word	0x0800189c
 8000750:	2000000c 	.word	0x2000000c
 8000754:	2000002c 	.word	0x2000002c

08000758 <ADC1_COMP_IRQHandler>:
 8000758:	e7fe      	b.n	8000758 <ADC1_COMP_IRQHandler>
	...

0800075c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_Init+0x3c>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_Init+0x3c>)
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	430a      	orrs	r2, r1
 8000772:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000774:	2000      	movs	r0, #0
 8000776:	f000 f811 	bl	800079c <HAL_InitTick>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d003      	beq.n	8000786 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e001      	b.n	800078a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000786:	f7ff ff8f 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
}
 800078e:	0018      	movs	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_InitTick+0x5c>)
 80007a6:	681c      	ldr	r4, [r3, #0]
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_InitTick+0x60>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	23fa      	movs	r3, #250	; 0xfa
 80007b0:	0098      	lsls	r0, r3, #2
 80007b2:	f7ff fcb1 	bl	8000118 <__udivsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	0019      	movs	r1, r3
 80007ba:	0020      	movs	r0, r4
 80007bc:	f7ff fcac 	bl	8000118 <__udivsi3>
 80007c0:	0003      	movs	r3, r0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f8e1 	bl	800098a <HAL_SYSTICK_Config>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	e00f      	b.n	80007f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d80b      	bhi.n	80007ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f8be 	bl	8000960 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_InitTick+0x64>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b003      	add	sp, #12
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	001a      	movs	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	18d2      	adds	r2, r2, r3
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000008 	.word	0x20000008
 8000824:	20000028 	.word	0x20000028

08000828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	20000028 	.word	0x20000028

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	0002      	movs	r2, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b7f      	cmp	r3, #127	; 0x7f
 8000850:	d828      	bhi.n	80008a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000852:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <__NVIC_SetPriority+0xd4>)
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	33c0      	adds	r3, #192	; 0xc0
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	589b      	ldr	r3, [r3, r2]
 8000862:	1dfa      	adds	r2, r7, #7
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	0011      	movs	r1, r2
 8000868:	2203      	movs	r2, #3
 800086a:	400a      	ands	r2, r1
 800086c:	00d2      	lsls	r2, r2, #3
 800086e:	21ff      	movs	r1, #255	; 0xff
 8000870:	4091      	lsls	r1, r2
 8000872:	000a      	movs	r2, r1
 8000874:	43d2      	mvns	r2, r2
 8000876:	401a      	ands	r2, r3
 8000878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	019b      	lsls	r3, r3, #6
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	401a      	ands	r2, r3
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0018      	movs	r0, r3
 8000888:	2303      	movs	r3, #3
 800088a:	4003      	ands	r3, r0
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000890:	481f      	ldr	r0, [pc, #124]	; (8000910 <__NVIC_SetPriority+0xd4>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	089b      	lsrs	r3, r3, #2
 800089a:	430a      	orrs	r2, r1
 800089c:	33c0      	adds	r3, #192	; 0xc0
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008a2:	e031      	b.n	8000908 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <__NVIC_SetPriority+0xd8>)
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	0019      	movs	r1, r3
 80008ac:	230f      	movs	r3, #15
 80008ae:	400b      	ands	r3, r1
 80008b0:	3b08      	subs	r3, #8
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	3306      	adds	r3, #6
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	18d3      	adds	r3, r2, r3
 80008ba:	3304      	adds	r3, #4
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	1dfa      	adds	r2, r7, #7
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	0011      	movs	r1, r2
 80008c4:	2203      	movs	r2, #3
 80008c6:	400a      	ands	r2, r1
 80008c8:	00d2      	lsls	r2, r2, #3
 80008ca:	21ff      	movs	r1, #255	; 0xff
 80008cc:	4091      	lsls	r1, r2
 80008ce:	000a      	movs	r2, r1
 80008d0:	43d2      	mvns	r2, r2
 80008d2:	401a      	ands	r2, r3
 80008d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	019b      	lsls	r3, r3, #6
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	401a      	ands	r2, r3
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	0018      	movs	r0, r3
 80008e4:	2303      	movs	r3, #3
 80008e6:	4003      	ands	r3, r0
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <__NVIC_SetPriority+0xd8>)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	001c      	movs	r4, r3
 80008f4:	230f      	movs	r3, #15
 80008f6:	4023      	ands	r3, r4
 80008f8:	3b08      	subs	r3, #8
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	430a      	orrs	r2, r1
 80008fe:	3306      	adds	r3, #6
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	18c3      	adds	r3, r0, r3
 8000904:	3304      	adds	r3, #4
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b003      	add	sp, #12
 800090e:	bd90      	pop	{r4, r7, pc}
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <SysTick_Config+0x40>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d901      	bls.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e010      	b.n	8000950 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <SysTick_Config+0x44>)
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	3a01      	subs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	2301      	movs	r3, #1
 8000938:	425b      	negs	r3, r3
 800093a:	2103      	movs	r1, #3
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff ff7d 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <SysTick_Config+0x44>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <SysTick_Config+0x44>)
 800094a:	2207      	movs	r2, #7
 800094c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094e:	2300      	movs	r3, #0
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}
 8000958:	00ffffff 	.word	0x00ffffff
 800095c:	e000e010 	.word	0xe000e010

08000960 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	210f      	movs	r1, #15
 800096c:	187b      	adds	r3, r7, r1
 800096e:	1c02      	adds	r2, r0, #0
 8000970:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	187b      	adds	r3, r7, r1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b25b      	sxtb	r3, r3
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff ff5d 	bl	800083c <__NVIC_SetPriority>
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b004      	add	sp, #16
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff ffbf 	bl	8000918 <SysTick_Config>
 800099a:	0003      	movs	r3, r0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80009ba:	e14f      	b.n	8000c5c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2101      	movs	r1, #1
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	4091      	lsls	r1, r2
 80009c6:	000a      	movs	r2, r1
 80009c8:	4013      	ands	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d100      	bne.n	80009d4 <HAL_GPIO_Init+0x30>
 80009d2:	e140      	b.n	8000c56 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d00b      	beq.n	80009f4 <HAL_GPIO_Init+0x50>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d007      	beq.n	80009f4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e8:	2b11      	cmp	r3, #17
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	409a      	lsls	r2, r3
 8000a02:	0013      	movs	r3, r2
 8000a04:	43da      	mvns	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	2201      	movs	r2, #1
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2203      	movs	r2, #3
 8000a62:	409a      	lsls	r2, r3
 8000a64:	0013      	movs	r3, r2
 8000a66:	43da      	mvns	r2, r3
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0xf2>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b12      	cmp	r3, #18
 8000a94:	d123      	bne.n	8000ade <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	08da      	lsrs	r2, r3, #3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3208      	adds	r2, #8
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	58d3      	ldr	r3, [r2, r3]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	220f      	movs	r2, #15
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	0013      	movs	r3, r2
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	691a      	ldr	r2, [r3, #16]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2107      	movs	r1, #7
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	0013      	movs	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	08da      	lsrs	r2, r3, #3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	6939      	ldr	r1, [r7, #16]
 8000adc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	43da      	mvns	r2, r3
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	2203      	movs	r2, #3
 8000afc:	401a      	ands	r2, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	409a      	lsls	r2, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	055b      	lsls	r3, r3, #21
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d100      	bne.n	8000b20 <HAL_GPIO_Init+0x17c>
 8000b1e:	e09a      	b.n	8000c56 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b20:	4b54      	ldr	r3, [pc, #336]	; (8000c74 <HAL_GPIO_Init+0x2d0>)
 8000b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b24:	4b53      	ldr	r3, [pc, #332]	; (8000c74 <HAL_GPIO_Init+0x2d0>)
 8000b26:	2101      	movs	r1, #1
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b2c:	4a52      	ldr	r2, [pc, #328]	; (8000c78 <HAL_GPIO_Init+0x2d4>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	589b      	ldr	r3, [r3, r2]
 8000b38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	220f      	movs	r2, #15
 8000b44:	409a      	lsls	r2, r3
 8000b46:	0013      	movs	r3, r2
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	23a0      	movs	r3, #160	; 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d019      	beq.n	8000b8e <HAL_GPIO_Init+0x1ea>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a47      	ldr	r2, [pc, #284]	; (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d013      	beq.n	8000b8a <HAL_GPIO_Init+0x1e6>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a46      	ldr	r2, [pc, #280]	; (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d00d      	beq.n	8000b86 <HAL_GPIO_Init+0x1e2>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a45      	ldr	r2, [pc, #276]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d007      	beq.n	8000b82 <HAL_GPIO_Init+0x1de>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <HAL_GPIO_Init+0x2e4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_GPIO_Init+0x1da>
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	e008      	b.n	8000b90 <HAL_GPIO_Init+0x1ec>
 8000b7e:	2306      	movs	r3, #6
 8000b80:	e006      	b.n	8000b90 <HAL_GPIO_Init+0x1ec>
 8000b82:	2303      	movs	r3, #3
 8000b84:	e004      	b.n	8000b90 <HAL_GPIO_Init+0x1ec>
 8000b86:	2302      	movs	r3, #2
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_Init+0x1ec>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e000      	b.n	8000b90 <HAL_GPIO_Init+0x1ec>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	2103      	movs	r1, #3
 8000b94:	400a      	ands	r2, r1
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	4093      	lsls	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba0:	4935      	ldr	r1, [pc, #212]	; (8000c78 <HAL_GPIO_Init+0x2d4>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bae:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43da      	mvns	r2, r3
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	029b      	lsls	r3, r3, #10
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	035b      	lsls	r3, r3, #13
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43da      	mvns	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	039b      	lsls	r3, r3, #14
 8000c44:	4013      	ands	r3, r2
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	40da      	lsrs	r2, r3
 8000c64:	1e13      	subs	r3, r2, #0
 8000c66:	d000      	beq.n	8000c6a <HAL_GPIO_Init+0x2c6>
 8000c68:	e6a8      	b.n	80009bc <HAL_GPIO_Init+0x18>
  }
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b006      	add	sp, #24
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	50000400 	.word	0x50000400
 8000c80:	50000800 	.word	0x50000800
 8000c84:	50000c00 	.word	0x50000c00
 8000c88:	50001c00 	.word	0x50001c00
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f000 fbb4 	bl	800140c <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ca4:	4bc3      	ldr	r3, [pc, #780]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4013      	ands	r3, r2
 8000cac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cae:	4bc1      	ldr	r3, [pc, #772]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d100      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x36>
 8000cc4:	e07e      	b.n	8000dc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d007      	beq.n	8000cdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	2b0c      	cmp	r3, #12
 8000cd0:	d112      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x68>
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	025b      	lsls	r3, r3, #9
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d10d      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cdc:	4bb5      	ldr	r3, [pc, #724]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	029b      	lsls	r3, r3, #10
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d100      	bne.n	8000cea <HAL_RCC_OscConfig+0x5a>
 8000ce8:	e06b      	b.n	8000dc2 <HAL_RCC_OscConfig+0x132>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d167      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f000 fb8a 	bl	800140c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d107      	bne.n	8000d14 <HAL_RCC_OscConfig+0x84>
 8000d04:	4bab      	ldr	r3, [pc, #684]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4baa      	ldr	r3, [pc, #680]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	0249      	lsls	r1, r1, #9
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e027      	b.n	8000d64 <HAL_RCC_OscConfig+0xd4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	02db      	lsls	r3, r3, #11
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d10e      	bne.n	8000d3e <HAL_RCC_OscConfig+0xae>
 8000d20:	4ba4      	ldr	r3, [pc, #656]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4ba3      	ldr	r3, [pc, #652]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	02c9      	lsls	r1, r1, #11
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	4ba1      	ldr	r3, [pc, #644]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4ba0      	ldr	r3, [pc, #640]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0249      	lsls	r1, r1, #9
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e012      	b.n	8000d64 <HAL_RCC_OscConfig+0xd4>
 8000d3e:	4b9d      	ldr	r3, [pc, #628]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b9c      	ldr	r3, [pc, #624]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d44:	499c      	ldr	r1, [pc, #624]	; (8000fb8 <HAL_RCC_OscConfig+0x328>)
 8000d46:	400a      	ands	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	4b9a      	ldr	r3, [pc, #616]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	025b      	lsls	r3, r3, #9
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4b96      	ldr	r3, [pc, #600]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b95      	ldr	r3, [pc, #596]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d5e:	4997      	ldr	r1, [pc, #604]	; (8000fbc <HAL_RCC_OscConfig+0x32c>)
 8000d60:	400a      	ands	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d015      	beq.n	8000d98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fd5c 	bl	8000828 <HAL_GetTick>
 8000d70:	0003      	movs	r3, r0
 8000d72:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d74:	e009      	b.n	8000d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d76:	f7ff fd57 	bl	8000828 <HAL_GetTick>
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b64      	cmp	r3, #100	; 0x64
 8000d82:	d902      	bls.n	8000d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	f000 fb41 	bl	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d8a:	4b8a      	ldr	r3, [pc, #552]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	029b      	lsls	r3, r3, #10
 8000d92:	4013      	ands	r3, r2
 8000d94:	d0ef      	beq.n	8000d76 <HAL_RCC_OscConfig+0xe6>
 8000d96:	e015      	b.n	8000dc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fd46 	bl	8000828 <HAL_GetTick>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da2:	f7ff fd41 	bl	8000828 <HAL_GetTick>
 8000da6:	0002      	movs	r2, r0
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b64      	cmp	r3, #100	; 0x64
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e32b      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000db4:	4b7f      	ldr	r3, [pc, #508]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	029b      	lsls	r3, r3, #10
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d1f0      	bne.n	8000da2 <HAL_RCC_OscConfig+0x112>
 8000dc0:	e000      	b.n	8000dc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2202      	movs	r2, #2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x140>
 8000dce:	e08c      	b.n	8000eea <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d005      	beq.n	8000de8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	d13f      	bne.n	8000e62 <HAL_RCC_OscConfig+0x1d2>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d13c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000de8:	4b72      	ldr	r3, [pc, #456]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2204      	movs	r2, #4
 8000dee:	4013      	ands	r3, r2
 8000df0:	d004      	beq.n	8000dfc <HAL_RCC_OscConfig+0x16c>
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e307      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfc:	4b6d      	ldr	r3, [pc, #436]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	4a6f      	ldr	r2, [pc, #444]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	0019      	movs	r1, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	021a      	lsls	r2, r3, #8
 8000e0c:	4b69      	ldr	r3, [pc, #420]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e12:	4b68      	ldr	r3, [pc, #416]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2209      	movs	r2, #9
 8000e18:	4393      	bics	r3, r2
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	4b65      	ldr	r3, [pc, #404]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e24:	f000 fc44 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 8000e28:	0001      	movs	r1, r0
 8000e2a:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	220f      	movs	r2, #15
 8000e32:	4013      	ands	r3, r2
 8000e34:	4a63      	ldr	r2, [pc, #396]	; (8000fc4 <HAL_RCC_OscConfig+0x334>)
 8000e36:	5cd3      	ldrb	r3, [r2, r3]
 8000e38:	000a      	movs	r2, r1
 8000e3a:	40da      	lsrs	r2, r3
 8000e3c:	4b62      	ldr	r3, [pc, #392]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e3e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000e40:	4b62      	ldr	r3, [pc, #392]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2513      	movs	r5, #19
 8000e46:	197c      	adds	r4, r7, r5
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fca7 	bl	800079c <HAL_InitTick>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000e52:	197b      	adds	r3, r7, r5
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d047      	beq.n	8000eea <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 8000e5a:	2313      	movs	r3, #19
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	e2d4      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d027      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000e68:	4b52      	ldr	r3, [pc, #328]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2209      	movs	r2, #9
 8000e6e:	4393      	bics	r3, r2
 8000e70:	0019      	movs	r1, r3
 8000e72:	4b50      	ldr	r3, [pc, #320]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fcd5 	bl	8000828 <HAL_GetTick>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff fcd0 	bl	8000828 <HAL_GetTick>
 8000e88:	0002      	movs	r2, r0
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e2ba      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e96:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d0f1      	beq.n	8000e84 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a46      	ldr	r2, [pc, #280]	; (8000fc0 <HAL_RCC_OscConfig+0x330>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	021a      	lsls	r2, r3, #8
 8000eb0:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	e018      	b.n	8000eea <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	438a      	bics	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fcb0 	bl	8000828 <HAL_GetTick>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ece:	f7ff fcab 	bl	8000828 <HAL_GetTick>
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e295      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000ee0:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d1f1      	bne.n	8000ece <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2210      	movs	r2, #16
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x266>
 8000ef4:	e0a3      	b.n	800103e <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d141      	bne.n	8000f80 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	d005      	beq.n	8000f14 <HAL_RCC_OscConfig+0x284>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e27b      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a2d      	ldr	r2, [pc, #180]	; (8000fd0 <HAL_RCC_OscConfig+0x340>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000f24:	430a      	orrs	r2, r1
 8000f26:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	0a19      	lsrs	r1, r3, #8
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	061a      	lsls	r2, r3, #24
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	0b5b      	lsrs	r3, r3, #13
 8000f42:	3301      	adds	r3, #1
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	0212      	lsls	r2, r2, #8
 8000f48:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	091b      	lsrs	r3, r3, #4
 8000f50:	210f      	movs	r1, #15
 8000f52:	400b      	ands	r3, r1
 8000f54:	491b      	ldr	r1, [pc, #108]	; (8000fc4 <HAL_RCC_OscConfig+0x334>)
 8000f56:	5ccb      	ldrb	r3, [r1, r3]
 8000f58:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2513      	movs	r5, #19
 8000f64:	197c      	adds	r4, r7, r5
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fc18 	bl	800079c <HAL_InitTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000f70:	197b      	adds	r3, r7, r5
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d062      	beq.n	800103e <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8000f78:	2313      	movs	r3, #19
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	e245      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d040      	beq.n	800100a <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_RCC_OscConfig+0x324>)
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	0049      	lsls	r1, r1, #1
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fc47 	bl	8000828 <HAL_GetTick>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f9e:	e019      	b.n	8000fd4 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fc42 	bl	8000828 <HAL_GetTick>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d912      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e22c      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	fffeffff 	.word	0xfffeffff
 8000fbc:	fffbffff 	.word	0xfffbffff
 8000fc0:	ffffe0ff 	.word	0xffffe0ff
 8000fc4:	08001870 	.word	0x08001870
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000004 	.word	0x20000004
 8000fd0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fd4:	4bc6      	ldr	r3, [pc, #792]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d0df      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe0:	4bc3      	ldr	r3, [pc, #780]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4ac3      	ldr	r2, [pc, #780]	; (80012f4 <HAL_RCC_OscConfig+0x664>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	0019      	movs	r1, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fee:	4bc0      	ldr	r3, [pc, #768]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ff4:	4bbe      	ldr	r3, [pc, #760]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	0a19      	lsrs	r1, r3, #8
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	061a      	lsls	r2, r3, #24
 8001002:	4bbb      	ldr	r3, [pc, #748]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001004:	430a      	orrs	r2, r1
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	e019      	b.n	800103e <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800100a:	4bb9      	ldr	r3, [pc, #740]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4bb8      	ldr	r3, [pc, #736]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001010:	49b9      	ldr	r1, [pc, #740]	; (80012f8 <HAL_RCC_OscConfig+0x668>)
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fc07 	bl	8000828 <HAL_GetTick>
 800101a:	0003      	movs	r3, r0
 800101c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001020:	f7ff fc02 	bl	8000828 <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1ec      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001032:	4baf      	ldr	r3, [pc, #700]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4013      	ands	r3, r2
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2208      	movs	r2, #8
 8001044:	4013      	ands	r3, r2
 8001046:	d036      	beq.n	80010b6 <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d019      	beq.n	8001084 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001050:	4ba7      	ldr	r3, [pc, #668]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001054:	4ba6      	ldr	r3, [pc, #664]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105c:	f7ff fbe4 	bl	8000828 <HAL_GetTick>
 8001060:	0003      	movs	r3, r0
 8001062:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001066:	f7ff fbdf 	bl	8000828 <HAL_GetTick>
 800106a:	0002      	movs	r2, r0
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e1c9      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001078:	4b9d      	ldr	r3, [pc, #628]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800107a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800107c:	2202      	movs	r2, #2
 800107e:	4013      	ands	r3, r2
 8001080:	d0f1      	beq.n	8001066 <HAL_RCC_OscConfig+0x3d6>
 8001082:	e018      	b.n	80010b6 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001084:	4b9a      	ldr	r3, [pc, #616]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001088:	4b99      	ldr	r3, [pc, #612]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800108a:	2101      	movs	r1, #1
 800108c:	438a      	bics	r2, r1
 800108e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001090:	f7ff fbca 	bl	8000828 <HAL_GetTick>
 8001094:	0003      	movs	r3, r0
 8001096:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109a:	f7ff fbc5 	bl	8000828 <HAL_GetTick>
 800109e:	0002      	movs	r2, r0
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e1af      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80010ac:	4b90      	ldr	r3, [pc, #576]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80010ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010b0:	2202      	movs	r2, #2
 80010b2:	4013      	ands	r3, r2
 80010b4:	d1f1      	bne.n	800109a <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2204      	movs	r2, #4
 80010bc:	4013      	ands	r3, r2
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0x432>
 80010c0:	e0af      	b.n	8001222 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c2:	2327      	movs	r3, #39	; 0x27
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80010cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	055b      	lsls	r3, r3, #21
 80010d2:	4013      	ands	r3, r2
 80010d4:	d10a      	bne.n	80010ec <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b86      	ldr	r3, [pc, #536]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80010d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010da:	4b85      	ldr	r3, [pc, #532]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0549      	lsls	r1, r1, #21
 80010e0:	430a      	orrs	r2, r1
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80010e4:	2327      	movs	r3, #39	; 0x27
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	4b83      	ldr	r3, [pc, #524]	; (80012fc <HAL_RCC_OscConfig+0x66c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	d11a      	bne.n	800112e <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f8:	4b80      	ldr	r3, [pc, #512]	; (80012fc <HAL_RCC_OscConfig+0x66c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b7f      	ldr	r3, [pc, #508]	; (80012fc <HAL_RCC_OscConfig+0x66c>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	0049      	lsls	r1, r1, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001106:	f7ff fb8f 	bl	8000828 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001110:	f7ff fb8a 	bl	8000828 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e174      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001122:	4b76      	ldr	r3, [pc, #472]	; (80012fc <HAL_RCC_OscConfig+0x66c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4013      	ands	r3, r2
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	429a      	cmp	r2, r3
 8001138:	d107      	bne.n	800114a <HAL_RCC_OscConfig+0x4ba>
 800113a:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800113c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800113e:	4b6c      	ldr	r3, [pc, #432]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0049      	lsls	r1, r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	651a      	str	r2, [r3, #80]	; 0x50
 8001148:	e031      	b.n	80011ae <HAL_RCC_OscConfig+0x51e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0x4dc>
 8001152:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001156:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001158:	4967      	ldr	r1, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x668>)
 800115a:	400a      	ands	r2, r1
 800115c:	651a      	str	r2, [r3, #80]	; 0x50
 800115e:	4b64      	ldr	r3, [pc, #400]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001164:	4966      	ldr	r1, [pc, #408]	; (8001300 <HAL_RCC_OscConfig+0x670>)
 8001166:	400a      	ands	r2, r1
 8001168:	651a      	str	r2, [r3, #80]	; 0x50
 800116a:	e020      	b.n	80011ae <HAL_RCC_OscConfig+0x51e>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	23a0      	movs	r3, #160	; 0xa0
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	429a      	cmp	r2, r3
 8001176:	d10e      	bne.n	8001196 <HAL_RCC_OscConfig+0x506>
 8001178:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800117a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800117c:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	00c9      	lsls	r1, r1, #3
 8001182:	430a      	orrs	r2, r1
 8001184:	651a      	str	r2, [r3, #80]	; 0x50
 8001186:	4b5a      	ldr	r3, [pc, #360]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800118a:	4b59      	ldr	r3, [pc, #356]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	0049      	lsls	r1, r1, #1
 8001190:	430a      	orrs	r2, r1
 8001192:	651a      	str	r2, [r3, #80]	; 0x50
 8001194:	e00b      	b.n	80011ae <HAL_RCC_OscConfig+0x51e>
 8001196:	4b56      	ldr	r3, [pc, #344]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800119a:	4b55      	ldr	r3, [pc, #340]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800119c:	4956      	ldr	r1, [pc, #344]	; (80012f8 <HAL_RCC_OscConfig+0x668>)
 800119e:	400a      	ands	r2, r1
 80011a0:	651a      	str	r2, [r3, #80]	; 0x50
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80011a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80011a8:	4955      	ldr	r1, [pc, #340]	; (8001300 <HAL_RCC_OscConfig+0x670>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d015      	beq.n	80011e2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fb37 	bl	8000828 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011be:	e009      	b.n	80011d4 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011c0:	f7ff fb32 	bl	8000828 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <HAL_RCC_OscConfig+0x674>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e11b      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011d4:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80011d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4013      	ands	r3, r2
 80011de:	d0ef      	beq.n	80011c0 <HAL_RCC_OscConfig+0x530>
 80011e0:	e014      	b.n	800120c <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fb21 	bl	8000828 <HAL_GetTick>
 80011e6:	0003      	movs	r3, r0
 80011e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011ea:	e009      	b.n	8001200 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ec:	f7ff fb1c 	bl	8000828 <HAL_GetTick>
 80011f0:	0002      	movs	r2, r0
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	4a43      	ldr	r2, [pc, #268]	; (8001304 <HAL_RCC_OscConfig+0x674>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e105      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d1ef      	bne.n	80011ec <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800120c:	2327      	movs	r3, #39	; 0x27
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d105      	bne.n	8001222 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001216:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800121c:	493a      	ldr	r1, [pc, #232]	; (8001308 <HAL_RCC_OscConfig+0x678>)
 800121e:	400a      	ands	r2, r1
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2220      	movs	r2, #32
 8001228:	4013      	ands	r3, r2
 800122a:	d049      	beq.n	80012c0 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d026      	beq.n	8001282 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 800123a:	2101      	movs	r1, #1
 800123c:	430a      	orrs	r2, r1
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001246:	2101      	movs	r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	; 0x34
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800124e:	6a1a      	ldr	r2, [r3, #32]
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	0189      	lsls	r1, r1, #6
 8001256:	430a      	orrs	r2, r1
 8001258:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff fae5 	bl	8000828 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001264:	f7ff fae0 	bl	8000828 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e0ca      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d0f1      	beq.n	8001264 <HAL_RCC_OscConfig+0x5d4>
 8001280:	e01e      	b.n	80012c0 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 8001288:	2101      	movs	r1, #1
 800128a:	438a      	bics	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001290:	6a1a      	ldr	r2, [r3, #32]
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001294:	491e      	ldr	r1, [pc, #120]	; (8001310 <HAL_RCC_OscConfig+0x680>)
 8001296:	400a      	ands	r2, r1
 8001298:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fac5 	bl	8000828 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012a4:	f7ff fac0 	bl	8000828 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e0aa      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d1f1      	bne.n	80012a4 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <HAL_RCC_OscConfig+0x63a>
 80012c8:	e09f      	b.n	800140a <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d100      	bne.n	80012d2 <HAL_RCC_OscConfig+0x642>
 80012d0:	e078      	b.n	80013c4 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d159      	bne.n	800138e <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <HAL_RCC_OscConfig+0x660>)
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <HAL_RCC_OscConfig+0x684>)
 80012e2:	400a      	ands	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fa9f 	bl	8000828 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012ee:	e01c      	b.n	800132a <HAL_RCC_OscConfig+0x69a>
 80012f0:	40021000 	.word	0x40021000
 80012f4:	ffff1fff 	.word	0xffff1fff
 80012f8:	fffffeff 	.word	0xfffffeff
 80012fc:	40007000 	.word	0x40007000
 8001300:	fffffbff 	.word	0xfffffbff
 8001304:	00001388 	.word	0x00001388
 8001308:	efffffff 	.word	0xefffffff
 800130c:	40010000 	.word	0x40010000
 8001310:	ffffdfff 	.word	0xffffdfff
 8001314:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff fa86 	bl	8000828 <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e070      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800132a:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	049b      	lsls	r3, r3, #18
 8001332:	4013      	ands	r3, r2
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001336:	4b37      	ldr	r3, [pc, #220]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4a37      	ldr	r2, [pc, #220]	; (8001418 <HAL_RCC_OscConfig+0x788>)
 800133c:	4013      	ands	r3, r2
 800133e:	0019      	movs	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	431a      	orrs	r2, r3
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 8001352:	430a      	orrs	r2, r1
 8001354:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	0449      	lsls	r1, r1, #17
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fa60 	bl	8000828 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fa5b 	bl	8000828 <HAL_GetTick>
 8001372:	0002      	movs	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e045      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	049b      	lsls	r3, r3, #18
 8001388:	4013      	ands	r3, r2
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x6de>
 800138c:	e03d      	b.n	800140a <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 8001394:	4921      	ldr	r1, [pc, #132]	; (800141c <HAL_RCC_OscConfig+0x78c>)
 8001396:	400a      	ands	r2, r1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fa45 	bl	8000828 <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fa40 	bl	8000828 <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e02a      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	049b      	lsls	r3, r3, #18
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x714>
 80013c2:	e022      	b.n	800140a <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_RCC_OscConfig+0x784>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	401a      	ands	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d10f      	bne.n	8001406 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	23f0      	movs	r3, #240	; 0xf0
 80013ea:	039b      	lsls	r3, r3, #14
 80013ec:	401a      	ands	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	23c0      	movs	r3, #192	; 0xc0
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	401a      	ands	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b00a      	add	sp, #40	; 0x28
 8001412:	bdb0      	pop	{r4, r5, r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	ff02ffff 	.word	0xff02ffff
 800141c:	feffffff 	.word	0xfeffffff

08001420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e129      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001434:	4b96      	ldr	r3, [pc, #600]	; (8001690 <HAL_RCC_ClockConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d91e      	bls.n	8001480 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b93      	ldr	r3, [pc, #588]	; (8001690 <HAL_RCC_ClockConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2201      	movs	r2, #1
 8001448:	4393      	bics	r3, r2
 800144a:	0019      	movs	r1, r3
 800144c:	4b90      	ldr	r3, [pc, #576]	; (8001690 <HAL_RCC_ClockConfig+0x270>)
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001454:	f7ff f9e8 	bl	8000828 <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145c:	e009      	b.n	8001472 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145e:	f7ff f9e3 	bl	8000828 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	4a8a      	ldr	r2, [pc, #552]	; (8001694 <HAL_RCC_ClockConfig+0x274>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e10a      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001472:	4b87      	ldr	r3, [pc, #540]	; (8001690 <HAL_RCC_ClockConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	4013      	ands	r3, r2
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d1ee      	bne.n	800145e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d009      	beq.n	800149e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800148a:	4b83      	ldr	r3, [pc, #524]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	22f0      	movs	r2, #240	; 0xf0
 8001490:	4393      	bics	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 800149a:	430a      	orrs	r2, r1
 800149c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d100      	bne.n	80014aa <HAL_RCC_ClockConfig+0x8a>
 80014a8:	e089      	b.n	80015be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b2:	4b79      	ldr	r3, [pc, #484]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d120      	bne.n	8001500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0e2      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014ca:	4b73      	ldr	r3, [pc, #460]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	049b      	lsls	r3, r3, #18
 80014d2:	4013      	ands	r3, r2
 80014d4:	d114      	bne.n	8001500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0d6      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014e2:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2204      	movs	r2, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	d109      	bne.n	8001500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0cb      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014f0:	4b69      	ldr	r3, [pc, #420]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4013      	ands	r3, r2
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0c3      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2203      	movs	r2, #3
 8001506:	4393      	bics	r3, r2
 8001508:	0019      	movs	r1, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4b62      	ldr	r3, [pc, #392]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001510:	430a      	orrs	r2, r1
 8001512:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff f988 	bl	8000828 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d111      	bne.n	8001548 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001524:	e009      	b.n	800153a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001526:	f7ff f97f 	bl	8000828 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4a58      	ldr	r2, [pc, #352]	; (8001694 <HAL_RCC_ClockConfig+0x274>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0a6      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800153a:	4b57      	ldr	r3, [pc, #348]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	220c      	movs	r2, #12
 8001540:	4013      	ands	r3, r2
 8001542:	2b08      	cmp	r3, #8
 8001544:	d1ef      	bne.n	8001526 <HAL_RCC_ClockConfig+0x106>
 8001546:	e03a      	b.n	80015be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d111      	bne.n	8001574 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001550:	e009      	b.n	8001566 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001552:	f7ff f969 	bl	8000828 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <HAL_RCC_ClockConfig+0x274>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e090      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	220c      	movs	r2, #12
 800156c:	4013      	ands	r3, r2
 800156e:	2b0c      	cmp	r3, #12
 8001570:	d1ef      	bne.n	8001552 <HAL_RCC_ClockConfig+0x132>
 8001572:	e024      	b.n	80015be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d11b      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800157c:	e009      	b.n	8001592 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157e:	f7ff f953 	bl	8000828 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	4a42      	ldr	r2, [pc, #264]	; (8001694 <HAL_RCC_ClockConfig+0x274>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e07a      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	220c      	movs	r2, #12
 8001598:	4013      	ands	r3, r2
 800159a:	2b04      	cmp	r3, #4
 800159c:	d1ef      	bne.n	800157e <HAL_RCC_ClockConfig+0x15e>
 800159e:	e00e      	b.n	80015be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a0:	f7ff f942 	bl	8000828 <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	4a3a      	ldr	r2, [pc, #232]	; (8001694 <HAL_RCC_ClockConfig+0x274>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e069      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015b4:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	220c      	movs	r2, #12
 80015ba:	4013      	ands	r3, r2
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_RCC_ClockConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d21e      	bcs.n	800160a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <HAL_RCC_ClockConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4393      	bics	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <HAL_RCC_ClockConfig+0x270>)
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015de:	f7ff f923 	bl	8000828 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	e009      	b.n	80015fc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e8:	f7ff f91e 	bl	8000828 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	4a28      	ldr	r2, [pc, #160]	; (8001694 <HAL_RCC_ClockConfig+0x274>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e045      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_RCC_ClockConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2201      	movs	r2, #1
 8001602:	4013      	ands	r3, r2
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2204      	movs	r2, #4
 8001610:	4013      	ands	r3, r2
 8001612:	d009      	beq.n	8001628 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4a20      	ldr	r2, [pc, #128]	; (800169c <HAL_RCC_ClockConfig+0x27c>)
 800161a:	4013      	ands	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001624:	430a      	orrs	r2, r1
 8001626:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2208      	movs	r2, #8
 800162e:	4013      	ands	r3, r2
 8001630:	d00a      	beq.n	8001648 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <HAL_RCC_ClockConfig+0x280>)
 8001638:	4013      	ands	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	00da      	lsls	r2, r3, #3
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001648:	f000 f832 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 800164c:	0001      	movs	r1, r0
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_ClockConfig+0x278>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	220f      	movs	r2, #15
 8001656:	4013      	ands	r3, r2
 8001658:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <HAL_RCC_ClockConfig+0x284>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	000a      	movs	r2, r1
 800165e:	40da      	lsrs	r2, r3
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_ClockConfig+0x288>)
 8001662:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_RCC_ClockConfig+0x28c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	250b      	movs	r5, #11
 800166a:	197c      	adds	r4, r7, r5
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff f895 	bl	800079c <HAL_InitTick>
 8001672:	0003      	movs	r3, r0
 8001674:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001676:	197b      	adds	r3, r7, r5
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800167e:	230b      	movs	r3, #11
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	e000      	b.n	8001688 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bdb0      	pop	{r4, r5, r7, pc}
 8001690:	40022000 	.word	0x40022000
 8001694:	00001388 	.word	0x00001388
 8001698:	40021000 	.word	0x40021000
 800169c:	fffff8ff 	.word	0xfffff8ff
 80016a0:	ffffc7ff 	.word	0xffffc7ff
 80016a4:	08001870 	.word	0x08001870
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b2:	b08f      	sub	sp, #60	; 0x3c
 80016b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80016b6:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x130>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016be:	230c      	movs	r3, #12
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d00f      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0x36>
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d010      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x3c>
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d000      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x20>
 80016ce:	e073      	b.n	80017b8 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x130>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2210      	movs	r2, #16
 80016d6:	4013      	ands	r3, r2
 80016d8:	d002      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x134>)
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80016de:	e079      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x138>)
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016e4:	e076      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_GetSysClockFreq+0x13c>)
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016ea:	e073      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	0c9a      	lsrs	r2, r3, #18
 80016f0:	230f      	movs	r3, #15
 80016f2:	401a      	ands	r2, r3
 80016f4:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x140>)
 80016f6:	5c9b      	ldrb	r3, [r3, r2]
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	0d9a      	lsrs	r2, r3, #22
 80016fe:	2303      	movs	r3, #3
 8001700:	4013      	ands	r3, r2
 8001702:	3301      	adds	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	4013      	ands	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <HAL_RCC_GetSysClockFreq+0x13c>)
 800171c:	2300      	movs	r3, #0
 800171e:	69b8      	ldr	r0, [r7, #24]
 8001720:	69f9      	ldr	r1, [r7, #28]
 8001722:	f7fe fda5 	bl	8000270 <__aeabi_lmul>
 8001726:	0003      	movs	r3, r0
 8001728:	000c      	movs	r4, r1
 800172a:	0018      	movs	r0, r3
 800172c:	0021      	movs	r1, r4
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f7fe fd79 	bl	8000230 <__aeabi_uldivmod>
 800173e:	0003      	movs	r3, r0
 8001740:	000c      	movs	r4, r1
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
 8001744:	e035      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2210      	movs	r2, #16
 800174c:	4013      	ands	r3, r2
 800174e:	d019      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x134>)
 800175a:	2300      	movs	r3, #0
 800175c:	68b8      	ldr	r0, [r7, #8]
 800175e:	68f9      	ldr	r1, [r7, #12]
 8001760:	f7fe fd86 	bl	8000270 <__aeabi_lmul>
 8001764:	0003      	movs	r3, r0
 8001766:	000c      	movs	r4, r1
 8001768:	0018      	movs	r0, r3
 800176a:	0021      	movs	r1, r4
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f7fe fd5a 	bl	8000230 <__aeabi_uldivmod>
 800177c:	0003      	movs	r3, r0
 800177e:	000c      	movs	r4, r1
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
 8001782:	e016      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001786:	0018      	movs	r0, r3
 8001788:	2300      	movs	r3, #0
 800178a:	0019      	movs	r1, r3
 800178c:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x138>)
 800178e:	2300      	movs	r3, #0
 8001790:	f7fe fd6e 	bl	8000270 <__aeabi_lmul>
 8001794:	0003      	movs	r3, r0
 8001796:	000c      	movs	r4, r1
 8001798:	0018      	movs	r0, r3
 800179a:	0021      	movs	r1, r4
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	001d      	movs	r5, r3
 80017a0:	2300      	movs	r3, #0
 80017a2:	001e      	movs	r6, r3
 80017a4:	002a      	movs	r2, r5
 80017a6:	0033      	movs	r3, r6
 80017a8:	f7fe fd42 	bl	8000230 <__aeabi_uldivmod>
 80017ac:	0003      	movs	r3, r0
 80017ae:	000c      	movs	r4, r1
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80017b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017b6:	e00d      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x130>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	0b5b      	lsrs	r3, r3, #13
 80017be:	2207      	movs	r2, #7
 80017c0:	4013      	ands	r3, r2
 80017c2:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	3301      	adds	r3, #1
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	0212      	lsls	r2, r2, #8
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b00f      	add	sp, #60	; 0x3c
 80017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	40021000 	.word	0x40021000
 80017e4:	003d0900 	.word	0x003d0900
 80017e8:	00f42400 	.word	0x00f42400
 80017ec:	007a1200 	.word	0x007a1200
 80017f0:	08001880 	.word	0x08001880

080017f4 <__libc_init_array>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	2600      	movs	r6, #0
 80017f8:	4d0c      	ldr	r5, [pc, #48]	; (800182c <__libc_init_array+0x38>)
 80017fa:	4c0d      	ldr	r4, [pc, #52]	; (8001830 <__libc_init_array+0x3c>)
 80017fc:	1b64      	subs	r4, r4, r5
 80017fe:	10a4      	asrs	r4, r4, #2
 8001800:	42a6      	cmp	r6, r4
 8001802:	d109      	bne.n	8001818 <__libc_init_array+0x24>
 8001804:	2600      	movs	r6, #0
 8001806:	f000 f821 	bl	800184c <_init>
 800180a:	4d0a      	ldr	r5, [pc, #40]	; (8001834 <__libc_init_array+0x40>)
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <__libc_init_array+0x44>)
 800180e:	1b64      	subs	r4, r4, r5
 8001810:	10a4      	asrs	r4, r4, #2
 8001812:	42a6      	cmp	r6, r4
 8001814:	d105      	bne.n	8001822 <__libc_init_array+0x2e>
 8001816:	bd70      	pop	{r4, r5, r6, pc}
 8001818:	00b3      	lsls	r3, r6, #2
 800181a:	58eb      	ldr	r3, [r5, r3]
 800181c:	4798      	blx	r3
 800181e:	3601      	adds	r6, #1
 8001820:	e7ee      	b.n	8001800 <__libc_init_array+0xc>
 8001822:	00b3      	lsls	r3, r6, #2
 8001824:	58eb      	ldr	r3, [r5, r3]
 8001826:	4798      	blx	r3
 8001828:	3601      	adds	r6, #1
 800182a:	e7f2      	b.n	8001812 <__libc_init_array+0x1e>
 800182c:	08001894 	.word	0x08001894
 8001830:	08001894 	.word	0x08001894
 8001834:	08001894 	.word	0x08001894
 8001838:	08001898 	.word	0x08001898

0800183c <memset>:
 800183c:	0003      	movs	r3, r0
 800183e:	1812      	adds	r2, r2, r0
 8001840:	4293      	cmp	r3, r2
 8001842:	d100      	bne.n	8001846 <memset+0xa>
 8001844:	4770      	bx	lr
 8001846:	7019      	strb	r1, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	e7f9      	b.n	8001840 <memset+0x4>

0800184c <_init>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr

08001858 <_fini>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185e:	bc08      	pop	{r3}
 8001860:	469e      	mov	lr, r3
 8001862:	4770      	bx	lr
