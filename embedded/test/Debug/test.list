
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001734  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001810  08001810  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001810  08001810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001818  08001818  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001818  08001818  00011818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800181c  0800181c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800182c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800182c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000048f6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f57  00000000  00000000  0002492a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003a0  00000000  00000000  00025888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  00025c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012d97  00000000  00000000  00025f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000044ed  00000000  00000000  00038cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072078  00000000  00000000  0003d1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af23c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ba4  00000000  00000000  000af2b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080017dc 	.word	0x080017dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080017dc 	.word	0x080017dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <main>:
#include "main.h"

void SystemClock_Config(void);

int main(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b08b      	sub	sp, #44	; 0x2c
 8000490:	af00      	add	r7, sp, #0
  HAL_Init();
 8000492:	f000 f909 	bl	80006a8 <HAL_Init>
  SystemClock_Config();
 8000496:	f000 f855 	bl	8000544 <SystemClock_Config>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	2410      	movs	r4, #16
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2314      	movs	r3, #20
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f001 f991 	bl	80017cc <memset>
  RCC->IOPENR |= RCC_IOPENR_IOPAEN;
 80004aa:	4b23      	ldr	r3, [pc, #140]	; (8000538 <main+0xac>)
 80004ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ae:	4b22      	ldr	r3, [pc, #136]	; (8000538 <main+0xac>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->IOPENR |= RCC_IOPENR_IOPCEN;
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <main+0xac>)
 80004b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ba:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <main+0xac>)
 80004bc:	2104      	movs	r1, #4
 80004be:	430a      	orrs	r2, r1
 80004c0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->IOPENR |= RCC_IOPENR_IOPBEN;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <main+0xac>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004c6:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <main+0xac>)
 80004c8:	2102      	movs	r1, #2
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->APB1ENR |= RCC_APB1ENR_LPUART1EN;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <main+0xac>)
 80004d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004d2:	4b19      	ldr	r3, [pc, #100]	; (8000538 <main+0xac>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	02c9      	lsls	r1, r1, #11
 80004d8:	430a      	orrs	r2, r1
 80004da:	639a      	str	r2, [r3, #56]	; 0x38

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	0192      	lsls	r2, r2, #6
 80004e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2201      	movs	r2, #1
 80004e8:	605a      	str	r2, [r3, #4]
  //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <main+0xb0>)
 80004f4:	0019      	movs	r1, r3
 80004f6:	0010      	movs	r0, r2
 80004f8:	f000 fa1c 	bl	8000934 <HAL_GPIO_Init>
  GPIOA->ODR &= ~GPIO_ODR_OD13;
 80004fc:	23a0      	movs	r3, #160	; 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	490e      	ldr	r1, [pc, #56]	; (8000540 <main+0xb4>)
 8000508:	400a      	ands	r2, r1
 800050a:	615a      	str	r2, [r3, #20]

  while(1){
	  uint32_t odr = GPIOB->ODR;
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <main+0xb0>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	627b      	str	r3, [r7, #36]	; 0x24

//		 Set selected pins that were at low level, and reset ones that were high
	  GPIOB->BSRR = ((odr & GPIO_ODR_OD13) << 16) | (~odr & GPIO_ODR_OD13);
 8000512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000514:	041a      	lsls	r2, r3, #16
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	059b      	lsls	r3, r3, #22
 800051a:	401a      	ands	r2, r3
 800051c:	0011      	movs	r1, r2
 800051e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000520:	43da      	mvns	r2, r3
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	019b      	lsls	r3, r3, #6
 8000526:	401a      	ands	r2, r3
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <main+0xb0>)
 800052a:	430a      	orrs	r2, r1
 800052c:	619a      	str	r2, [r3, #24]
	  HAL_Delay(250);
 800052e:	20fa      	movs	r0, #250	; 0xfa
 8000530:	f000 f92a 	bl	8000788 <HAL_Delay>
  while(1){
 8000534:	e7ea      	b.n	800050c <main+0x80>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40021000 	.word	0x40021000
 800053c:	50000400 	.word	0x50000400
 8000540:	ffffdfff 	.word	0xffffdfff

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b095      	sub	sp, #84	; 0x54
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	2418      	movs	r4, #24
 800054c:	193b      	adds	r3, r7, r4
 800054e:	0018      	movs	r0, r3
 8000550:	2338      	movs	r3, #56	; 0x38
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f001 f939 	bl	80017cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	0018      	movs	r0, r3
 800055e:	2314      	movs	r3, #20
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f001 f932 	bl	80017cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <SystemClock_Config+0xa0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <SystemClock_Config+0xa4>)
 800056e:	401a      	ands	r2, r3
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <SystemClock_Config+0xa0>)
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0109      	lsls	r1, r1, #4
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2210      	movs	r2, #16
 8000580:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2201      	movs	r2, #1
 8000586:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	22a0      	movs	r2, #160	; 0xa0
 8000592:	0212      	lsls	r2, r2, #8
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	187b      	adds	r3, r7, r1
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fb3e 	bl	8000c20 <HAL_RCC_OscConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005a8:	f000 f820 	bl	80005ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	220f      	movs	r2, #15
 80005b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 feee 	bl	80013b0 <HAL_RCC_ClockConfig>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d8:	f000 f808 	bl	80005ec <Error_Handler>
  }
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b015      	add	sp, #84	; 0x54
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40007000 	.word	0x40007000
 80005e8:	ffffe7ff 	.word	0xffffe7ff

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <Error_Handler+0x6>

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <HAL_MspInit+0x24>)
 80005fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_MspInit+0x24>)
 80005fe:	2101      	movs	r1, #1
 8000600:	430a      	orrs	r2, r1
 8000602:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_MspInit+0x24>)
 8000606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_MspInit+0x24>)
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0549      	lsls	r1, r1, #21
 800060e:	430a      	orrs	r2, r1
 8000610:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f886 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <Reset_Handler>:
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <LoopForever+0x2>)
 8000656:	4685      	mov	sp, r0
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <LoopForever+0x6>)
 800065a:	490e      	ldr	r1, [pc, #56]	; (8000694 <LoopForever+0xa>)
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <LoopForever+0xe>)
 800065e:	2300      	movs	r3, #0
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:
 8000662:	58d4      	ldr	r4, [r2, r3]
 8000664:	50c4      	str	r4, [r0, r3]
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:
 8000668:	18c4      	adds	r4, r0, r3
 800066a:	428c      	cmp	r4, r1
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>
 800066e:	4a0b      	ldr	r2, [pc, #44]	; (800069c <LoopForever+0x12>)
 8000670:	4c0b      	ldr	r4, [pc, #44]	; (80006a0 <LoopForever+0x16>)
 8000672:	2300      	movs	r3, #0
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:
 800067a:	42a2      	cmp	r2, r4
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>
 800067e:	f7ff ffe4 	bl	800064a <SystemInit>
 8000682:	f001 f87f 	bl	8001784 <__libc_init_array>
 8000686:	f7ff ff01 	bl	800048c <main>

0800068a <LoopForever>:
 800068a:	e7fe      	b.n	800068a <LoopForever>
 800068c:	20002000 	.word	0x20002000
 8000690:	20000000 	.word	0x20000000
 8000694:	2000000c 	.word	0x2000000c
 8000698:	08001820 	.word	0x08001820
 800069c:	2000000c 	.word	0x2000000c
 80006a0:	2000002c 	.word	0x2000002c

080006a4 <ADC1_COMP_IRQHandler>:
 80006a4:	e7fe      	b.n	80006a4 <ADC1_COMP_IRQHandler>
	...

080006a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_Init+0x3c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_Init+0x3c>)
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	430a      	orrs	r2, r1
 80006be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 f811 	bl	80006e8 <HAL_InitTick>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d003      	beq.n	80006d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	e001      	b.n	80006d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006d2:	f7ff ff8f 	bl	80005f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
}
 80006da:	0018      	movs	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_InitTick+0x5c>)
 80006f2:	681c      	ldr	r4, [r3, #0]
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_InitTick+0x60>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	0019      	movs	r1, r3
 80006fa:	23fa      	movs	r3, #250	; 0xfa
 80006fc:	0098      	lsls	r0, r3, #2
 80006fe:	f7ff fd03 	bl	8000108 <__udivsi3>
 8000702:	0003      	movs	r3, r0
 8000704:	0019      	movs	r1, r3
 8000706:	0020      	movs	r0, r4
 8000708:	f7ff fcfe 	bl	8000108 <__udivsi3>
 800070c:	0003      	movs	r3, r0
 800070e:	0018      	movs	r0, r3
 8000710:	f000 f903 	bl	800091a <HAL_SYSTICK_Config>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e00f      	b.n	800073c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d80b      	bhi.n	800073a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f8e0 	bl	80008f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_InitTick+0x64>)
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	b003      	add	sp, #12
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	001a      	movs	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	18d2      	adds	r2, r2, r3
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000008 	.word	0x20000008
 8000770:	20000028 	.word	0x20000028

08000774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	20000028 	.word	0x20000028

08000788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000790:	f7ff fff0 	bl	8000774 <HAL_GetTick>
 8000794:	0003      	movs	r3, r0
 8000796:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	d005      	beq.n	80007ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_Delay+0x40>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	001a      	movs	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	189b      	adds	r3, r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	f7ff ffe0 	bl	8000774 <HAL_GetTick>
 80007b4:	0002      	movs	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8f7      	bhi.n	80007b0 <HAL_Delay+0x28>
  {
  }
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b004      	add	sp, #16
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000008 	.word	0x20000008

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	0002      	movs	r2, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b7f      	cmp	r3, #127	; 0x7f
 80007e0:	d828      	bhi.n	8000834 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e2:	4a2f      	ldr	r2, [pc, #188]	; (80008a0 <__NVIC_SetPriority+0xd4>)
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	33c0      	adds	r3, #192	; 0xc0
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	589b      	ldr	r3, [r3, r2]
 80007f2:	1dfa      	adds	r2, r7, #7
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	0011      	movs	r1, r2
 80007f8:	2203      	movs	r2, #3
 80007fa:	400a      	ands	r2, r1
 80007fc:	00d2      	lsls	r2, r2, #3
 80007fe:	21ff      	movs	r1, #255	; 0xff
 8000800:	4091      	lsls	r1, r2
 8000802:	000a      	movs	r2, r1
 8000804:	43d2      	mvns	r2, r2
 8000806:	401a      	ands	r2, r3
 8000808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	019b      	lsls	r3, r3, #6
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	401a      	ands	r2, r3
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	0018      	movs	r0, r3
 8000818:	2303      	movs	r3, #3
 800081a:	4003      	ands	r3, r0
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000820:	481f      	ldr	r0, [pc, #124]	; (80008a0 <__NVIC_SetPriority+0xd4>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	089b      	lsrs	r3, r3, #2
 800082a:	430a      	orrs	r2, r1
 800082c:	33c0      	adds	r3, #192	; 0xc0
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000832:	e031      	b.n	8000898 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <__NVIC_SetPriority+0xd8>)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	0019      	movs	r1, r3
 800083c:	230f      	movs	r3, #15
 800083e:	400b      	ands	r3, r1
 8000840:	3b08      	subs	r3, #8
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	3306      	adds	r3, #6
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	3304      	adds	r3, #4
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1dfa      	adds	r2, r7, #7
 8000850:	7812      	ldrb	r2, [r2, #0]
 8000852:	0011      	movs	r1, r2
 8000854:	2203      	movs	r2, #3
 8000856:	400a      	ands	r2, r1
 8000858:	00d2      	lsls	r2, r2, #3
 800085a:	21ff      	movs	r1, #255	; 0xff
 800085c:	4091      	lsls	r1, r2
 800085e:	000a      	movs	r2, r1
 8000860:	43d2      	mvns	r2, r2
 8000862:	401a      	ands	r2, r3
 8000864:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	019b      	lsls	r3, r3, #6
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	401a      	ands	r2, r3
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	0018      	movs	r0, r3
 8000874:	2303      	movs	r3, #3
 8000876:	4003      	ands	r3, r0
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <__NVIC_SetPriority+0xd8>)
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	001c      	movs	r4, r3
 8000884:	230f      	movs	r3, #15
 8000886:	4023      	ands	r3, r4
 8000888:	3b08      	subs	r3, #8
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	430a      	orrs	r2, r1
 800088e:	3306      	adds	r3, #6
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	18c3      	adds	r3, r0, r3
 8000894:	3304      	adds	r3, #4
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b003      	add	sp, #12
 800089e:	bd90      	pop	{r4, r7, pc}
 80008a0:	e000e100 	.word	0xe000e100
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <SysTick_Config+0x40>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d901      	bls.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e010      	b.n	80008e0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <SysTick_Config+0x44>)
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	3a01      	subs	r2, #1
 80008c4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	2301      	movs	r3, #1
 80008c8:	425b      	negs	r3, r3
 80008ca:	2103      	movs	r1, #3
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ff7d 	bl	80007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SysTick_Config+0x44>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Config+0x44>)
 80008da:	2207      	movs	r2, #7
 80008dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008de:	2300      	movs	r3, #0
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	00ffffff 	.word	0x00ffffff
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	210f      	movs	r1, #15
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	1c02      	adds	r2, r0, #0
 8000900:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	187b      	adds	r3, r7, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b25b      	sxtb	r3, r3
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff ff5d 	bl	80007cc <__NVIC_SetPriority>
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff ffbf 	bl	80008a8 <SysTick_Config>
 800092a:	0003      	movs	r3, r0
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	b002      	add	sp, #8
 8000932:	bd80      	pop	{r7, pc}

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800094a:	e14f      	b.n	8000bec <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4091      	lsls	r1, r2
 8000956:	000a      	movs	r2, r1
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d100      	bne.n	8000964 <HAL_GPIO_Init+0x30>
 8000962:	e140      	b.n	8000be6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d00b      	beq.n	8000984 <HAL_GPIO_Init+0x50>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d007      	beq.n	8000984 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000978:	2b11      	cmp	r3, #17
 800097a:	d003      	beq.n	8000984 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b12      	cmp	r3, #18
 8000982:	d130      	bne.n	80009e6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	409a      	lsls	r2, r3
 8000992:	0013      	movs	r3, r2
 8000994:	43da      	mvns	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	409a      	lsls	r2, r3
 80009a6:	0013      	movs	r3, r2
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ba:	2201      	movs	r2, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
 80009c0:	0013      	movs	r3, r2
 80009c2:	43da      	mvns	r2, r3
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	2201      	movs	r2, #1
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
 80009d8:	0013      	movs	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0xf2>
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b12      	cmp	r3, #18
 8000a24:	d123      	bne.n	8000a6e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	08da      	lsrs	r2, r3, #3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	58d3      	ldr	r3, [r2, r3]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2207      	movs	r2, #7
 8000a38:	4013      	ands	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2107      	movs	r1, #7
 8000a52:	400b      	ands	r3, r1
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3208      	adds	r2, #8
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	6939      	ldr	r1, [r7, #16]
 8000a6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	055b      	lsls	r3, r3, #21
 8000aaa:	4013      	ands	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <HAL_GPIO_Init+0x17c>
 8000aae:	e09a      	b.n	8000be6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b54      	ldr	r3, [pc, #336]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab4:	4b53      	ldr	r3, [pc, #332]	; (8000c04 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000abc:	4a52      	ldr	r2, [pc, #328]	; (8000c08 <HAL_GPIO_Init+0x2d4>)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	089b      	lsrs	r3, r3, #2
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	589b      	ldr	r3, [r3, r2]
 8000ac8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2203      	movs	r2, #3
 8000ace:	4013      	ands	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	220f      	movs	r2, #15
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	43da      	mvns	r2, r3
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d019      	beq.n	8000b1e <HAL_GPIO_Init+0x1ea>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a47      	ldr	r2, [pc, #284]	; (8000c0c <HAL_GPIO_Init+0x2d8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d013      	beq.n	8000b1a <HAL_GPIO_Init+0x1e6>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a46      	ldr	r2, [pc, #280]	; (8000c10 <HAL_GPIO_Init+0x2dc>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d00d      	beq.n	8000b16 <HAL_GPIO_Init+0x1e2>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <HAL_GPIO_Init+0x2e0>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d007      	beq.n	8000b12 <HAL_GPIO_Init+0x1de>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a44      	ldr	r2, [pc, #272]	; (8000c18 <HAL_GPIO_Init+0x2e4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <HAL_GPIO_Init+0x1da>
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	e008      	b.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000b0e:	2306      	movs	r3, #6
 8000b10:	e006      	b.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000b12:	2303      	movs	r3, #3
 8000b14:	e004      	b.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000b16:	2302      	movs	r3, #2
 8000b18:	e002      	b.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <HAL_GPIO_Init+0x1ec>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	2103      	movs	r1, #3
 8000b24:	400a      	ands	r2, r1
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	4093      	lsls	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b30:	4935      	ldr	r1, [pc, #212]	; (8000c08 <HAL_GPIO_Init+0x2d4>)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	43da      	mvns	r2, r3
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	025b      	lsls	r3, r3, #9
 8000b56:	4013      	ands	r3, r2
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43da      	mvns	r2, r3
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	4013      	ands	r3, r2
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b8c:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	035b      	lsls	r3, r3, #13
 8000baa:	4013      	ands	r3, r2
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43da      	mvns	r2, r3
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	039b      	lsls	r3, r3, #14
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_GPIO_Init+0x2e8>)
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	40da      	lsrs	r2, r3
 8000bf4:	1e13      	subs	r3, r2, #0
 8000bf6:	d000      	beq.n	8000bfa <HAL_GPIO_Init+0x2c6>
 8000bf8:	e6a8      	b.n	800094c <HAL_GPIO_Init+0x18>
  }
}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b006      	add	sp, #24
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010000 	.word	0x40010000
 8000c0c:	50000400 	.word	0x50000400
 8000c10:	50000800 	.word	0x50000800
 8000c14:	50000c00 	.word	0x50000c00
 8000c18:	50001c00 	.word	0x50001c00
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b5b0      	push	{r4, r5, r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f000 fbb4 	bl	800139c <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c34:	4bc3      	ldr	r3, [pc, #780]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	220c      	movs	r2, #12
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c3e:	4bc1      	ldr	r3, [pc, #772]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	025b      	lsls	r3, r3, #9
 8000c46:	4013      	ands	r3, r2
 8000c48:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4013      	ands	r3, r2
 8000c52:	d100      	bne.n	8000c56 <HAL_RCC_OscConfig+0x36>
 8000c54:	e07e      	b.n	8000d54 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	2b08      	cmp	r3, #8
 8000c5a:	d007      	beq.n	8000c6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	2b0c      	cmp	r3, #12
 8000c60:	d112      	bne.n	8000c88 <HAL_RCC_OscConfig+0x68>
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	025b      	lsls	r3, r3, #9
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d10d      	bne.n	8000c88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6c:	4bb5      	ldr	r3, [pc, #724]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	4013      	ands	r3, r2
 8000c76:	d100      	bne.n	8000c7a <HAL_RCC_OscConfig+0x5a>
 8000c78:	e06b      	b.n	8000d52 <HAL_RCC_OscConfig+0x132>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d167      	bne.n	8000d52 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f000 fb8a 	bl	800139c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	025b      	lsls	r3, r3, #9
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d107      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x84>
 8000c94:	4bab      	ldr	r3, [pc, #684]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4baa      	ldr	r3, [pc, #680]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	0249      	lsls	r1, r1, #9
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e027      	b.n	8000cf4 <HAL_RCC_OscConfig+0xd4>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	02db      	lsls	r3, r3, #11
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d10e      	bne.n	8000cce <HAL_RCC_OscConfig+0xae>
 8000cb0:	4ba4      	ldr	r3, [pc, #656]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4ba3      	ldr	r3, [pc, #652]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	02c9      	lsls	r1, r1, #11
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	4ba1      	ldr	r3, [pc, #644]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	0249      	lsls	r1, r1, #9
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	e012      	b.n	8000cf4 <HAL_RCC_OscConfig+0xd4>
 8000cce:	4b9d      	ldr	r3, [pc, #628]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b9c      	ldr	r3, [pc, #624]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cd4:	499c      	ldr	r1, [pc, #624]	; (8000f48 <HAL_RCC_OscConfig+0x328>)
 8000cd6:	400a      	ands	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	4b9a      	ldr	r3, [pc, #616]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	025b      	lsls	r3, r3, #9
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4b96      	ldr	r3, [pc, #600]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b95      	ldr	r3, [pc, #596]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000cee:	4997      	ldr	r1, [pc, #604]	; (8000f4c <HAL_RCC_OscConfig+0x32c>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d015      	beq.n	8000d28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfc:	f7ff fd3a 	bl	8000774 <HAL_GetTick>
 8000d00:	0003      	movs	r3, r0
 8000d02:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d04:	e009      	b.n	8000d1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d06:	f7ff fd35 	bl	8000774 <HAL_GetTick>
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b64      	cmp	r3, #100	; 0x64
 8000d12:	d902      	bls.n	8000d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	f000 fb41 	bl	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d1a:	4b8a      	ldr	r3, [pc, #552]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	029b      	lsls	r3, r3, #10
 8000d22:	4013      	ands	r3, r2
 8000d24:	d0ef      	beq.n	8000d06 <HAL_RCC_OscConfig+0xe6>
 8000d26:	e015      	b.n	8000d54 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fd24 	bl	8000774 <HAL_GetTick>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d32:	f7ff fd1f 	bl	8000774 <HAL_GetTick>
 8000d36:	0002      	movs	r2, r0
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b64      	cmp	r3, #100	; 0x64
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e32b      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d44:	4b7f      	ldr	r3, [pc, #508]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	029b      	lsls	r3, r3, #10
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d1f0      	bne.n	8000d32 <HAL_RCC_OscConfig+0x112>
 8000d50:	e000      	b.n	8000d54 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d100      	bne.n	8000d60 <HAL_RCC_OscConfig+0x140>
 8000d5e:	e08c      	b.n	8000e7a <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d005      	beq.n	8000d78 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	2b0c      	cmp	r3, #12
 8000d70:	d13f      	bne.n	8000df2 <HAL_RCC_OscConfig+0x1d2>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d13c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000d78:	4b72      	ldr	r3, [pc, #456]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d004      	beq.n	8000d8c <HAL_RCC_OscConfig+0x16c>
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e307      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8c:	4b6d      	ldr	r3, [pc, #436]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a6f      	ldr	r2, [pc, #444]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	0019      	movs	r1, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	021a      	lsls	r2, r3, #8
 8000d9c:	4b69      	ldr	r3, [pc, #420]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000da2:	4b68      	ldr	r3, [pc, #416]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2209      	movs	r2, #9
 8000da8:	4393      	bics	r3, r2
 8000daa:	0019      	movs	r1, r3
 8000dac:	4b65      	ldr	r3, [pc, #404]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000db4:	f000 fc44 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8000db8:	0001      	movs	r1, r0
 8000dba:	4b62      	ldr	r3, [pc, #392]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	4a63      	ldr	r2, [pc, #396]	; (8000f54 <HAL_RCC_OscConfig+0x334>)
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	000a      	movs	r2, r1
 8000dca:	40da      	lsrs	r2, r3
 8000dcc:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000dce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000dd0:	4b62      	ldr	r3, [pc, #392]	; (8000f5c <HAL_RCC_OscConfig+0x33c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2513      	movs	r5, #19
 8000dd6:	197c      	adds	r4, r7, r5
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff fc85 	bl	80006e8 <HAL_InitTick>
 8000dde:	0003      	movs	r3, r0
 8000de0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000de2:	197b      	adds	r3, r7, r5
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d047      	beq.n	8000e7a <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 8000dea:	2313      	movs	r3, #19
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	e2d4      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d027      	beq.n	8000e48 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000df8:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2209      	movs	r2, #9
 8000dfe:	4393      	bics	r3, r2
 8000e00:	0019      	movs	r1, r3
 8000e02:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fcb3 	bl	8000774 <HAL_GetTick>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fcae 	bl	8000774 <HAL_GetTick>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e2ba      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d0f1      	beq.n	8000e14 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	4a46      	ldr	r2, [pc, #280]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000e36:	4013      	ands	r3, r2
 8000e38:	0019      	movs	r1, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	021a      	lsls	r2, r3, #8
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e42:	430a      	orrs	r2, r1
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	e018      	b.n	8000e7a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e48:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	438a      	bics	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc8e 	bl	8000774 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fc89 	bl	8000774 <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e295      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e70:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2204      	movs	r2, #4
 8000e76:	4013      	ands	r3, r2
 8000e78:	d1f1      	bne.n	8000e5e <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2210      	movs	r2, #16
 8000e80:	4013      	ands	r3, r2
 8000e82:	d100      	bne.n	8000e86 <HAL_RCC_OscConfig+0x266>
 8000e84:	e0a3      	b.n	8000fce <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e86:	6a3b      	ldr	r3, [r7, #32]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d141      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4013      	ands	r3, r2
 8000e96:	d005      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x284>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d101      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e27b      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a2d      	ldr	r2, [pc, #180]	; (8000f60 <HAL_RCC_OscConfig+0x340>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	0a19      	lsrs	r1, r3, #8
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	061a      	lsls	r2, r3, #24
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	0b5b      	lsrs	r3, r3, #13
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	0212      	lsls	r2, r2, #8
 8000ed8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	491b      	ldr	r1, [pc, #108]	; (8000f54 <HAL_RCC_OscConfig+0x334>)
 8000ee6:	5ccb      	ldrb	r3, [r1, r3]
 8000ee8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_RCC_OscConfig+0x338>)
 8000eec:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_RCC_OscConfig+0x33c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2513      	movs	r5, #19
 8000ef4:	197c      	adds	r4, r7, r5
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff fbf6 	bl	80006e8 <HAL_InitTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000f00:	197b      	adds	r3, r7, r5
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d062      	beq.n	8000fce <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8000f08:	2313      	movs	r3, #19
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	e245      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d040      	beq.n	8000f9a <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_RCC_OscConfig+0x324>)
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	0049      	lsls	r1, r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fc25 	bl	8000774 <HAL_GetTick>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f2e:	e019      	b.n	8000f64 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f30:	f7ff fc20 	bl	8000774 <HAL_GetTick>
 8000f34:	0002      	movs	r2, r0
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d912      	bls.n	8000f64 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e22c      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40021000 	.word	0x40021000
 8000f48:	fffeffff 	.word	0xfffeffff
 8000f4c:	fffbffff 	.word	0xfffbffff
 8000f50:	ffffe0ff 	.word	0xffffe0ff
 8000f54:	080017f4 	.word	0x080017f4
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f64:	4bc6      	ldr	r3, [pc, #792]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d0df      	beq.n	8000f30 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f70:	4bc3      	ldr	r3, [pc, #780]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4ac3      	ldr	r2, [pc, #780]	; (8001284 <HAL_RCC_OscConfig+0x664>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	0019      	movs	r1, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f7e:	4bc0      	ldr	r3, [pc, #768]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000f80:	430a      	orrs	r2, r1
 8000f82:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f84:	4bbe      	ldr	r3, [pc, #760]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	0a19      	lsrs	r1, r3, #8
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	061a      	lsls	r2, r3, #24
 8000f92:	4bbb      	ldr	r3, [pc, #748]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000f94:	430a      	orrs	r2, r1
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	e019      	b.n	8000fce <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f9a:	4bb9      	ldr	r3, [pc, #740]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4bb8      	ldr	r3, [pc, #736]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000fa0:	49b9      	ldr	r1, [pc, #740]	; (8001288 <HAL_RCC_OscConfig+0x668>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fbe5 	bl	8000774 <HAL_GetTick>
 8000faa:	0003      	movs	r3, r0
 8000fac:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fbe0 	bl	8000774 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1ec      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fc2:	4baf      	ldr	r3, [pc, #700]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d036      	beq.n	8001046 <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d019      	beq.n	8001014 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe0:	4ba7      	ldr	r3, [pc, #668]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fe4:	4ba6      	ldr	r3, [pc, #664]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fbc2 	bl	8000774 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fbbd 	bl	8000774 <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e1c9      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001008:	4b9d      	ldr	r3, [pc, #628]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800100a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800100c:	2202      	movs	r2, #2
 800100e:	4013      	ands	r3, r2
 8001010:	d0f1      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3d6>
 8001012:	e018      	b.n	8001046 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001014:	4b9a      	ldr	r3, [pc, #616]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001018:	4b99      	ldr	r3, [pc, #612]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800101a:	2101      	movs	r1, #1
 800101c:	438a      	bics	r2, r1
 800101e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001020:	f7ff fba8 	bl	8000774 <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800102a:	f7ff fba3 	bl	8000774 <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e1af      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800103c:	4b90      	ldr	r3, [pc, #576]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800103e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001040:	2202      	movs	r2, #2
 8001042:	4013      	ands	r3, r2
 8001044:	d1f1      	bne.n	800102a <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2204      	movs	r2, #4
 800104c:	4013      	ands	r3, r2
 800104e:	d100      	bne.n	8001052 <HAL_RCC_OscConfig+0x432>
 8001050:	e0af      	b.n	80011b2 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001052:	2327      	movs	r3, #39	; 0x27
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105a:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800105c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	055b      	lsls	r3, r3, #21
 8001062:	4013      	ands	r3, r2
 8001064:	d10a      	bne.n	800107c <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b86      	ldr	r3, [pc, #536]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800106a:	4b85      	ldr	r3, [pc, #532]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0549      	lsls	r1, r1, #21
 8001070:	430a      	orrs	r2, r1
 8001072:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001074:	2327      	movs	r3, #39	; 0x27
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	4b83      	ldr	r3, [pc, #524]	; (800128c <HAL_RCC_OscConfig+0x66c>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4013      	ands	r3, r2
 8001086:	d11a      	bne.n	80010be <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001088:	4b80      	ldr	r3, [pc, #512]	; (800128c <HAL_RCC_OscConfig+0x66c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b7f      	ldr	r3, [pc, #508]	; (800128c <HAL_RCC_OscConfig+0x66c>)
 800108e:	2180      	movs	r1, #128	; 0x80
 8001090:	0049      	lsls	r1, r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001096:	f7ff fb6d 	bl	8000774 <HAL_GetTick>
 800109a:	0003      	movs	r3, r0
 800109c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a0:	f7ff fb68 	bl	8000774 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e174      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b2:	4b76      	ldr	r3, [pc, #472]	; (800128c <HAL_RCC_OscConfig+0x66c>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d107      	bne.n	80010da <HAL_RCC_OscConfig+0x4ba>
 80010ca:	4b6d      	ldr	r3, [pc, #436]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80010cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ce:	4b6c      	ldr	r3, [pc, #432]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0049      	lsls	r1, r1, #1
 80010d4:	430a      	orrs	r2, r1
 80010d6:	651a      	str	r2, [r3, #80]	; 0x50
 80010d8:	e031      	b.n	800113e <HAL_RCC_OscConfig+0x51e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x4dc>
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80010e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010e6:	4b66      	ldr	r3, [pc, #408]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80010e8:	4967      	ldr	r1, [pc, #412]	; (8001288 <HAL_RCC_OscConfig+0x668>)
 80010ea:	400a      	ands	r2, r1
 80010ec:	651a      	str	r2, [r3, #80]	; 0x50
 80010ee:	4b64      	ldr	r3, [pc, #400]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80010f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80010f4:	4966      	ldr	r1, [pc, #408]	; (8001290 <HAL_RCC_OscConfig+0x670>)
 80010f6:	400a      	ands	r2, r1
 80010f8:	651a      	str	r2, [r3, #80]	; 0x50
 80010fa:	e020      	b.n	800113e <HAL_RCC_OscConfig+0x51e>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	23a0      	movs	r3, #160	; 0xa0
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	429a      	cmp	r2, r3
 8001106:	d10e      	bne.n	8001126 <HAL_RCC_OscConfig+0x506>
 8001108:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800110a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800110c:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	00c9      	lsls	r1, r1, #3
 8001112:	430a      	orrs	r2, r1
 8001114:	651a      	str	r2, [r3, #80]	; 0x50
 8001116:	4b5a      	ldr	r3, [pc, #360]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800111a:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	0049      	lsls	r1, r1, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	651a      	str	r2, [r3, #80]	; 0x50
 8001124:	e00b      	b.n	800113e <HAL_RCC_OscConfig+0x51e>
 8001126:	4b56      	ldr	r3, [pc, #344]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800112a:	4b55      	ldr	r3, [pc, #340]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800112c:	4956      	ldr	r1, [pc, #344]	; (8001288 <HAL_RCC_OscConfig+0x668>)
 800112e:	400a      	ands	r2, r1
 8001130:	651a      	str	r2, [r3, #80]	; 0x50
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001136:	4b52      	ldr	r3, [pc, #328]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001138:	4955      	ldr	r1, [pc, #340]	; (8001290 <HAL_RCC_OscConfig+0x670>)
 800113a:	400a      	ands	r2, r1
 800113c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d015      	beq.n	8001172 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001146:	f7ff fb15 	bl	8000774 <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800114e:	e009      	b.n	8001164 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001150:	f7ff fb10 	bl	8000774 <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_RCC_OscConfig+0x674>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e11b      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001164:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001166:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4013      	ands	r3, r2
 800116e:	d0ef      	beq.n	8001150 <HAL_RCC_OscConfig+0x530>
 8001170:	e014      	b.n	800119c <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001172:	f7ff faff 	bl	8000774 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800117a:	e009      	b.n	8001190 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117c:	f7ff fafa 	bl	8000774 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	4a43      	ldr	r2, [pc, #268]	; (8001294 <HAL_RCC_OscConfig+0x674>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e105      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4013      	ands	r3, r2
 800119a:	d1ef      	bne.n	800117c <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800119c:	2327      	movs	r3, #39	; 0x27
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d105      	bne.n	80011b2 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a6:	4b36      	ldr	r3, [pc, #216]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80011a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011aa:	4b35      	ldr	r3, [pc, #212]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80011ac:	493a      	ldr	r1, [pc, #232]	; (8001298 <HAL_RCC_OscConfig+0x678>)
 80011ae:	400a      	ands	r2, r1
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2220      	movs	r2, #32
 80011b8:	4013      	ands	r3, r2
 80011ba:	d049      	beq.n	8001250 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d026      	beq.n	8001212 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	430a      	orrs	r2, r1
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80011d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0189      	lsls	r1, r1, #6
 80011e6:	430a      	orrs	r2, r1
 80011e8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fac3 	bl	8000774 <HAL_GetTick>
 80011ee:	0003      	movs	r3, r0
 80011f0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f4:	f7ff fabe 	bl	8000774 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e0ca      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2202      	movs	r2, #2
 800120c:	4013      	ands	r3, r2
 800120e:	d0f1      	beq.n	80011f4 <HAL_RCC_OscConfig+0x5d4>
 8001210:	e01e      	b.n	8001250 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001218:	2101      	movs	r1, #1
 800121a:	438a      	bics	r2, r1
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001220:	6a1a      	ldr	r2, [r3, #32]
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <HAL_RCC_OscConfig+0x67c>)
 8001224:	491e      	ldr	r1, [pc, #120]	; (80012a0 <HAL_RCC_OscConfig+0x680>)
 8001226:	400a      	ands	r2, r1
 8001228:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff faa3 	bl	8000774 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001234:	f7ff fa9e 	bl	8000774 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e0aa      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d1f1      	bne.n	8001234 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	2b00      	cmp	r3, #0
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x63a>
 8001258:	e09f      	b.n	800139a <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2b0c      	cmp	r3, #12
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x642>
 8001260:	e078      	b.n	8001354 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	2b02      	cmp	r3, #2
 8001268:	d159      	bne.n	800131e <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_RCC_OscConfig+0x660>)
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <HAL_RCC_OscConfig+0x684>)
 8001272:	400a      	ands	r2, r1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fa7d 	bl	8000774 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800127e:	e01c      	b.n	80012ba <HAL_RCC_OscConfig+0x69a>
 8001280:	40021000 	.word	0x40021000
 8001284:	ffff1fff 	.word	0xffff1fff
 8001288:	fffffeff 	.word	0xfffffeff
 800128c:	40007000 	.word	0x40007000
 8001290:	fffffbff 	.word	0xfffffbff
 8001294:	00001388 	.word	0x00001388
 8001298:	efffffff 	.word	0xefffffff
 800129c:	40010000 	.word	0x40010000
 80012a0:	ffffdfff 	.word	0xffffdfff
 80012a4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fa64 	bl	8000774 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e070      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	049b      	lsls	r3, r3, #18
 80012c2:	4013      	ands	r3, r2
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	4a37      	ldr	r2, [pc, #220]	; (80013a8 <HAL_RCC_OscConfig+0x788>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	0019      	movs	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012de:	431a      	orrs	r2, r3
 80012e0:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0449      	lsls	r1, r1, #17
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fa3e 	bl	8000774 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff fa39 	bl	8000774 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e045      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	049b      	lsls	r3, r3, #18
 8001318:	4013      	ands	r3, r2
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x6de>
 800131c:	e03d      	b.n	800139a <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001324:	4921      	ldr	r1, [pc, #132]	; (80013ac <HAL_RCC_OscConfig+0x78c>)
 8001326:	400a      	ands	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fa23 	bl	8000774 <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff fa1e 	bl	8000774 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e02a      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	049b      	lsls	r3, r3, #18
 800134e:	4013      	ands	r3, r2
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x714>
 8001352:	e022      	b.n	800139a <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e01d      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_RCC_OscConfig+0x784>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	025b      	lsls	r3, r3, #9
 800136c:	401a      	ands	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	429a      	cmp	r2, r3
 8001374:	d10f      	bne.n	8001396 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	23f0      	movs	r3, #240	; 0xf0
 800137a:	039b      	lsls	r3, r3, #14
 800137c:	401a      	ands	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001382:	429a      	cmp	r2, r3
 8001384:	d107      	bne.n	8001396 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	23c0      	movs	r3, #192	; 0xc0
 800138a:	041b      	lsls	r3, r3, #16
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001392:	429a      	cmp	r2, r3
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b00a      	add	sp, #40	; 0x28
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	ff02ffff 	.word	0xff02ffff
 80013ac:	feffffff 	.word	0xfeffffff

080013b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e129      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c4:	4b96      	ldr	r3, [pc, #600]	; (8001620 <HAL_RCC_ClockConfig+0x270>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4013      	ands	r3, r2
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d91e      	bls.n	8001410 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b93      	ldr	r3, [pc, #588]	; (8001620 <HAL_RCC_ClockConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2201      	movs	r2, #1
 80013d8:	4393      	bics	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	4b90      	ldr	r3, [pc, #576]	; (8001620 <HAL_RCC_ClockConfig+0x270>)
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013e4:	f7ff f9c6 	bl	8000774 <HAL_GetTick>
 80013e8:	0003      	movs	r3, r0
 80013ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ec:	e009      	b.n	8001402 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ee:	f7ff f9c1 	bl	8000774 <HAL_GetTick>
 80013f2:	0002      	movs	r2, r0
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	4a8a      	ldr	r2, [pc, #552]	; (8001624 <HAL_RCC_ClockConfig+0x274>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e10a      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	4b87      	ldr	r3, [pc, #540]	; (8001620 <HAL_RCC_ClockConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	4013      	ands	r3, r2
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d1ee      	bne.n	80013ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	4013      	ands	r3, r2
 8001418:	d009      	beq.n	800142e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141a:	4b83      	ldr	r3, [pc, #524]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	22f0      	movs	r2, #240	; 0xf0
 8001420:	4393      	bics	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 800142a:	430a      	orrs	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2201      	movs	r2, #1
 8001434:	4013      	ands	r3, r2
 8001436:	d100      	bne.n	800143a <HAL_RCC_ClockConfig+0x8a>
 8001438:	e089      	b.n	800154e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001442:	4b79      	ldr	r3, [pc, #484]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	029b      	lsls	r3, r3, #10
 800144a:	4013      	ands	r3, r2
 800144c:	d120      	bne.n	8001490 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e0e2      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800145a:	4b73      	ldr	r3, [pc, #460]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	049b      	lsls	r3, r3, #18
 8001462:	4013      	ands	r3, r2
 8001464:	d114      	bne.n	8001490 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0d6      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d106      	bne.n	8001480 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001472:	4b6d      	ldr	r3, [pc, #436]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2204      	movs	r2, #4
 8001478:	4013      	ands	r3, r2
 800147a:	d109      	bne.n	8001490 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0cb      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001480:	4b69      	ldr	r3, [pc, #420]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4013      	ands	r3, r2
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0c3      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001490:	4b65      	ldr	r3, [pc, #404]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2203      	movs	r2, #3
 8001496:	4393      	bics	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4b62      	ldr	r3, [pc, #392]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff f966 	bl	8000774 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d111      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b4:	e009      	b.n	80014ca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b6:	f7ff f95d 	bl	8000774 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	4a58      	ldr	r2, [pc, #352]	; (8001624 <HAL_RCC_ClockConfig+0x274>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0a6      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ca:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	220c      	movs	r2, #12
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d1ef      	bne.n	80014b6 <HAL_RCC_ClockConfig+0x106>
 80014d6:	e03a      	b.n	800154e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d111      	bne.n	8001504 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e0:	e009      	b.n	80014f6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e2:	f7ff f947 	bl	8000774 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	4a4d      	ldr	r2, [pc, #308]	; (8001624 <HAL_RCC_ClockConfig+0x274>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e090      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f6:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	220c      	movs	r2, #12
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d1ef      	bne.n	80014e2 <HAL_RCC_ClockConfig+0x132>
 8001502:	e024      	b.n	800154e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d11b      	bne.n	8001544 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800150c:	e009      	b.n	8001522 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150e:	f7ff f931 	bl	8000774 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	4a42      	ldr	r2, [pc, #264]	; (8001624 <HAL_RCC_ClockConfig+0x274>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e07a      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	220c      	movs	r2, #12
 8001528:	4013      	ands	r3, r2
 800152a:	2b04      	cmp	r3, #4
 800152c:	d1ef      	bne.n	800150e <HAL_RCC_ClockConfig+0x15e>
 800152e:	e00e      	b.n	800154e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f7ff f920 	bl	8000774 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	4a3a      	ldr	r2, [pc, #232]	; (8001624 <HAL_RCC_ClockConfig+0x274>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e069      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001544:	4b38      	ldr	r3, [pc, #224]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	220c      	movs	r2, #12
 800154a:	4013      	ands	r3, r2
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <HAL_RCC_ClockConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	4013      	ands	r3, r2
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d21e      	bcs.n	800159a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_RCC_ClockConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2201      	movs	r2, #1
 8001562:	4393      	bics	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <HAL_RCC_ClockConfig+0x270>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800156e:	f7ff f901 	bl	8000774 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	e009      	b.n	800158c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f7ff f8fc 	bl	8000774 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	4a28      	ldr	r2, [pc, #160]	; (8001624 <HAL_RCC_ClockConfig+0x274>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e045      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_RCC_ClockConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2201      	movs	r2, #1
 8001592:	4013      	ands	r3, r2
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d1ee      	bne.n	8001578 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2204      	movs	r2, #4
 80015a0:	4013      	ands	r3, r2
 80015a2:	d009      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <HAL_RCC_ClockConfig+0x27c>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2208      	movs	r2, #8
 80015be:	4013      	ands	r3, r2
 80015c0:	d00a      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	4a1a      	ldr	r2, [pc, #104]	; (8001630 <HAL_RCC_ClockConfig+0x280>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00da      	lsls	r2, r3, #3
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 80015d4:	430a      	orrs	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d8:	f000 f832 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 80015dc:	0001      	movs	r1, r0
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_RCC_ClockConfig+0x278>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	220f      	movs	r2, #15
 80015e6:	4013      	ands	r3, r2
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_RCC_ClockConfig+0x284>)
 80015ea:	5cd3      	ldrb	r3, [r2, r3]
 80015ec:	000a      	movs	r2, r1
 80015ee:	40da      	lsrs	r2, r3
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_RCC_ClockConfig+0x288>)
 80015f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_RCC_ClockConfig+0x28c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	250b      	movs	r5, #11
 80015fa:	197c      	adds	r4, r7, r5
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff f873 	bl	80006e8 <HAL_InitTick>
 8001602:	0003      	movs	r3, r0
 8001604:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001606:	197b      	adds	r3, r7, r5
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800160e:	230b      	movs	r3, #11
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	e000      	b.n	8001618 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	40022000 	.word	0x40022000
 8001624:	00001388 	.word	0x00001388
 8001628:	40021000 	.word	0x40021000
 800162c:	fffff8ff 	.word	0xfffff8ff
 8001630:	ffffc7ff 	.word	0xffffc7ff
 8001634:	080017f4 	.word	0x080017f4
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	b08f      	sub	sp, #60	; 0x3c
 8001644:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001646:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_RCC_GetSysClockFreq+0x130>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800164c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164e:	230c      	movs	r3, #12
 8001650:	4013      	ands	r3, r2
 8001652:	2b08      	cmp	r3, #8
 8001654:	d00f      	beq.n	8001676 <HAL_RCC_GetSysClockFreq+0x36>
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d010      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x3c>
 800165a:	2b04      	cmp	r3, #4
 800165c:	d000      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x20>
 800165e:	e073      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_GetSysClockFreq+0x130>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2210      	movs	r2, #16
 8001666:	4013      	ands	r3, r2
 8001668:	d002      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <HAL_RCC_GetSysClockFreq+0x134>)
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800166e:	e079      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_GetSysClockFreq+0x138>)
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001674:	e076      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800167a:	e073      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167e:	0c9a      	lsrs	r2, r3, #18
 8001680:	230f      	movs	r3, #15
 8001682:	401a      	ands	r2, r3
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_RCC_GetSysClockFreq+0x140>)
 8001686:	5c9b      	ldrb	r3, [r3, r2]
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	0d9a      	lsrs	r2, r3, #22
 800168e:	2303      	movs	r3, #3
 8001690:	4013      	ands	r3, r2
 8001692:	3301      	adds	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_GetSysClockFreq+0x130>)
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	4013      	ands	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	4a34      	ldr	r2, [pc, #208]	; (800177c <HAL_RCC_GetSysClockFreq+0x13c>)
 80016ac:	2300      	movs	r3, #0
 80016ae:	69b8      	ldr	r0, [r7, #24]
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	f7fe fdd5 	bl	8000260 <__aeabi_lmul>
 80016b6:	0003      	movs	r3, r0
 80016b8:	000c      	movs	r4, r1
 80016ba:	0018      	movs	r0, r3
 80016bc:	0021      	movs	r1, r4
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f7fe fda9 	bl	8000220 <__aeabi_uldivmod>
 80016ce:	0003      	movs	r3, r0
 80016d0:	000c      	movs	r4, r1
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
 80016d4:	e035      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_GetSysClockFreq+0x130>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2210      	movs	r2, #16
 80016dc:	4013      	ands	r3, r2
 80016de:	d019      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_RCC_GetSysClockFreq+0x134>)
 80016ea:	2300      	movs	r3, #0
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	f7fe fdb6 	bl	8000260 <__aeabi_lmul>
 80016f4:	0003      	movs	r3, r0
 80016f6:	000c      	movs	r4, r1
 80016f8:	0018      	movs	r0, r3
 80016fa:	0021      	movs	r1, r4
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f7fe fd8a 	bl	8000220 <__aeabi_uldivmod>
 800170c:	0003      	movs	r3, r0
 800170e:	000c      	movs	r4, r1
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
 8001712:	e016      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	0018      	movs	r0, r3
 8001718:	2300      	movs	r3, #0
 800171a:	0019      	movs	r1, r3
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_RCC_GetSysClockFreq+0x138>)
 800171e:	2300      	movs	r3, #0
 8001720:	f7fe fd9e 	bl	8000260 <__aeabi_lmul>
 8001724:	0003      	movs	r3, r0
 8001726:	000c      	movs	r4, r1
 8001728:	0018      	movs	r0, r3
 800172a:	0021      	movs	r1, r4
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	001d      	movs	r5, r3
 8001730:	2300      	movs	r3, #0
 8001732:	001e      	movs	r6, r3
 8001734:	002a      	movs	r2, r5
 8001736:	0033      	movs	r3, r6
 8001738:	f7fe fd72 	bl	8000220 <__aeabi_uldivmod>
 800173c:	0003      	movs	r3, r0
 800173e:	000c      	movs	r4, r1
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001746:	e00d      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_GetSysClockFreq+0x130>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	0b5b      	lsrs	r3, r3, #13
 800174e:	2207      	movs	r2, #7
 8001750:	4013      	ands	r3, r2
 8001752:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	3301      	adds	r3, #1
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	0212      	lsls	r2, r2, #8
 800175c:	409a      	lsls	r2, r3
 800175e:	0013      	movs	r3, r2
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001762:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b00f      	add	sp, #60	; 0x3c
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	40021000 	.word	0x40021000
 8001774:	003d0900 	.word	0x003d0900
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200
 8001780:	08001804 	.word	0x08001804

08001784 <__libc_init_array>:
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	2600      	movs	r6, #0
 8001788:	4d0c      	ldr	r5, [pc, #48]	; (80017bc <__libc_init_array+0x38>)
 800178a:	4c0d      	ldr	r4, [pc, #52]	; (80017c0 <__libc_init_array+0x3c>)
 800178c:	1b64      	subs	r4, r4, r5
 800178e:	10a4      	asrs	r4, r4, #2
 8001790:	42a6      	cmp	r6, r4
 8001792:	d109      	bne.n	80017a8 <__libc_init_array+0x24>
 8001794:	2600      	movs	r6, #0
 8001796:	f000 f821 	bl	80017dc <_init>
 800179a:	4d0a      	ldr	r5, [pc, #40]	; (80017c4 <__libc_init_array+0x40>)
 800179c:	4c0a      	ldr	r4, [pc, #40]	; (80017c8 <__libc_init_array+0x44>)
 800179e:	1b64      	subs	r4, r4, r5
 80017a0:	10a4      	asrs	r4, r4, #2
 80017a2:	42a6      	cmp	r6, r4
 80017a4:	d105      	bne.n	80017b2 <__libc_init_array+0x2e>
 80017a6:	bd70      	pop	{r4, r5, r6, pc}
 80017a8:	00b3      	lsls	r3, r6, #2
 80017aa:	58eb      	ldr	r3, [r5, r3]
 80017ac:	4798      	blx	r3
 80017ae:	3601      	adds	r6, #1
 80017b0:	e7ee      	b.n	8001790 <__libc_init_array+0xc>
 80017b2:	00b3      	lsls	r3, r6, #2
 80017b4:	58eb      	ldr	r3, [r5, r3]
 80017b6:	4798      	blx	r3
 80017b8:	3601      	adds	r6, #1
 80017ba:	e7f2      	b.n	80017a2 <__libc_init_array+0x1e>
 80017bc:	08001818 	.word	0x08001818
 80017c0:	08001818 	.word	0x08001818
 80017c4:	08001818 	.word	0x08001818
 80017c8:	0800181c 	.word	0x0800181c

080017cc <memset>:
 80017cc:	0003      	movs	r3, r0
 80017ce:	1812      	adds	r2, r2, r0
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d100      	bne.n	80017d6 <memset+0xa>
 80017d4:	4770      	bx	lr
 80017d6:	7019      	strb	r1, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	e7f9      	b.n	80017d0 <memset+0x4>

080017dc <_init>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr

080017e8 <_fini>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ee:	bc08      	pop	{r3}
 80017f0:	469e      	mov	lr, r3
 80017f2:	4770      	bx	lr
