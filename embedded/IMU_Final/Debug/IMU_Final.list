
IMU_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef8  08001ef8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f00  08001f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f04  08001f04  00011f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08001f14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001f14  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006289  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000126e  00000000  00000000  000262bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005c8  00000000  00000000  00027530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  00027af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012f74  00000000  00000000  00028018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062a1  00000000  00000000  0003af8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073ec5  00000000  00000000  0004122d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b50f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a8  00000000  00000000  000b5170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ec4 	.word	0x08001ec4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001ec4 	.word	0x08001ec4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <SPI1_SendByte>:
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef SPI_InitStruct = {0};

unsigned char SPI1_SendByte(unsigned char data)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	0002      	movs	r2, r0
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	701a      	strb	r2, [r3, #0]
	while((SPI2->SR & SPI_SR_TXE) == RESET);
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <SPI1_SendByte+0x3c>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	2202      	movs	r2, #2
 80004a0:	4013      	ands	r3, r2
 80004a2:	d0fa      	beq.n	800049a <SPI1_SendByte+0xe>
	unsigned char returnVal = 0;
 80004a4:	240f      	movs	r4, #15
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit(&SPI_InitStruct, &data, sizeof(unsigned char), pow(2, 32) - 1);
 80004ac:	2301      	movs	r3, #1
 80004ae:	425b      	negs	r3, r3
 80004b0:	1df9      	adds	r1, r7, #7
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <SPI1_SendByte+0x40>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	f001 faaf 	bl	8001a18 <HAL_SPI_Transmit>

	return returnVal;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	781b      	ldrb	r3, [r3, #0]
}
 80004be:	0018      	movs	r0, r3
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b005      	add	sp, #20
 80004c4:	bd90      	pop	{r4, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40003800 	.word	0x40003800
 80004cc:	20000028 	.word	0x20000028

080004d0 <ICM20602_Readbyte>:

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	val = SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	4252      	negs	r2, r2
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	250f      	movs	r5, #15
 80004ea:	197c      	adds	r4, r7, r5
 80004ec:	0018      	movs	r0, r3
 80004ee:	f7ff ffcd 	bl	800048c <SPI1_SendByte>
 80004f2:	0003      	movs	r3, r0
 80004f4:	7023      	strb	r3, [r4, #0]

	return val;
 80004f6:	197b      	adds	r3, r7, r5
 80004f8:	781b      	ldrb	r3, [r3, #0]
}
 80004fa:	0018      	movs	r0, r3
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b004      	add	sp, #16
 8000500:	bdb0      	pop	{r4, r5, r7, pc}

08000502 <ICM20602_Initialization>:
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
	SPI1_SendByte(val); //Send Data to write
}

int ICM20602_Initialization(void)
{
 8000502:	b590      	push	{r4, r7, lr}
 8000504:	b085      	sub	sp, #20
 8000506:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8000508:	230f      	movs	r3, #15
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8000510:	2308      	movs	r3, #8
 8000512:	18fb      	adds	r3, r7, r3
 8000514:	0018      	movs	r0, r3
 8000516:	2306      	movs	r3, #6
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f001 fcca 	bl	8001eb4 <memset>
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8000520:	003b      	movs	r3, r7
 8000522:	0018      	movs	r0, r3
 8000524:	2306      	movs	r3, #6
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f001 fcc3 	bl	8001eb4 <memset>

//	ICM20602_GPIO_SPI_Initialization();

	// check WHO_AM_I (0x75)
	while(1){
		who_am_i = ICM20602_Readbyte(WHO_AM_I);
 800052e:	230f      	movs	r3, #15
 8000530:	18fc      	adds	r4, r7, r3
 8000532:	2075      	movs	r0, #117	; 0x75
 8000534:	f7ff ffcc 	bl	80004d0 <ICM20602_Readbyte>
 8000538:	0003      	movs	r3, r0
 800053a:	7023      	strb	r3, [r4, #0]
 800053c:	e7f7      	b.n	800052e <ICM20602_Initialization+0x2c>

0800053e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
  HAL_Init();
 8000544:	f000 f988 	bl	8000858 <HAL_Init>
  SystemClock_Config();
 8000548:	f000 f80a 	bl	8000560 <SystemClock_Config>
  MX_GPIO_Init();
 800054c:	f000 f8ac 	bl	80006a8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000550:	f000 f85a 	bl	8000608 <MX_SPI2_Init>

  int device_ID;

  while (1)
  {
	  device_ID = ICM20602_Initialization();
 8000554:	f7ff ffd5 	bl	8000502 <ICM20602_Initialization>
 8000558:	0003      	movs	r3, r0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	e7fa      	b.n	8000554 <main+0x16>
	...

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b095      	sub	sp, #84	; 0x54
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	2418      	movs	r4, #24
 8000568:	193b      	adds	r3, r7, r4
 800056a:	0018      	movs	r0, r3
 800056c:	2338      	movs	r3, #56	; 0x38
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f001 fc9f 	bl	8001eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	0018      	movs	r0, r3
 800057a:	2314      	movs	r3, #20
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f001 fc98 	bl	8001eb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <SystemClock_Config+0xa0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <SystemClock_Config+0xa4>)
 800058a:	401a      	ands	r2, r3
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <SystemClock_Config+0xa0>)
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0109      	lsls	r1, r1, #4
 8000592:	430a      	orrs	r2, r1
 8000594:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000596:	0021      	movs	r1, r4
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2210      	movs	r2, #16
 800059c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2201      	movs	r2, #1
 80005a2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	22a0      	movs	r2, #160	; 0xa0
 80005ae:	0212      	lsls	r2, r2, #8
 80005b0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fbe6 	bl	8000d8c <HAL_RCC_OscConfig>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005c4:	f000 f8a4 	bl	8000710 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	220f      	movs	r2, #15
 80005cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2100      	movs	r1, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 ff96 	bl	800151c <HAL_RCC_ClockConfig>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 f88c 	bl	8000710 <Error_Handler>
  }
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b015      	add	sp, #84	; 0x54
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40007000 	.word	0x40007000
 8000604:	ffffe7ff 	.word	0xffffe7ff

08000608 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	; 0x58
 800060c:	af00      	add	r7, sp, #0
  SPI_HandleTypeDef hspi2 = {0};
 800060e:	003b      	movs	r3, r7
 8000610:	0018      	movs	r0, r3
 8000612:	2358      	movs	r3, #88	; 0x58
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f001 fc4c 	bl	8001eb4 <memset>

  __HAL_RCC_SPI2_CLK_ENABLE();
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_SPI2_Init+0x98>)
 800061e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_SPI2_Init+0x98>)
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	01c9      	lsls	r1, r1, #7
 8000626:	430a      	orrs	r2, r1
 8000628:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Instance = SPI2;
 800062a:	003b      	movs	r3, r7
 800062c:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <MX_SPI2_Init+0x9c>)
 800062e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000630:	003b      	movs	r3, r7
 8000632:	2282      	movs	r2, #130	; 0x82
 8000634:	0052      	lsls	r2, r2, #1
 8000636:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000638:	003b      	movs	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800063e:	003b      	movs	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000644:	003b      	movs	r3, r7
 8000646:	2202      	movs	r2, #2
 8000648:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064a:	003b      	movs	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000650:	003b      	movs	r3, r7
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	0092      	lsls	r2, r2, #2
 8000656:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000658:	003b      	movs	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065e:	003b      	movs	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000664:	003b      	movs	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066a:	003b      	movs	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000670:	003b      	movs	r3, r7
 8000672:	2207      	movs	r2, #7
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Instance->CR1 |= SPI_CR1_SPE;
 8000676:	003b      	movs	r3, r7
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	003b      	movs	r3, r7
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	430a      	orrs	r2, r1
 8000684:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	f001 f931 	bl	80018f0 <HAL_SPI_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_SPI2_Init+0x8e>
  {
    Error_Handler();
 8000692:	f000 f83d 	bl	8000710 <Error_Handler>
  }
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b016      	add	sp, #88	; 0x58
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40003800 	.word	0x40003800

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	0018      	movs	r0, r3
 80006b2:	2314      	movs	r3, #20
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f001 fbfc 	bl	8001eb4 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_GPIO_Init+0x60>)
 80006be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_GPIO_Init+0x60>)
 80006c2:	2102      	movs	r1, #2
 80006c4:	430a      	orrs	r2, r1
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_GPIO_Init+0x60>)
 80006ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006cc:	2202      	movs	r2, #2
 80006ce:	4013      	ands	r3, r2
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	22e0      	movs	r2, #224	; 0xe0
 80006d8:	0212      	lsls	r2, r2, #8
 80006da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2202      	movs	r2, #2
 80006e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2203      	movs	r2, #3
 80006ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <MX_GPIO_Init+0x64>)
 80006f8:	0019      	movs	r1, r3
 80006fa:	0010      	movs	r0, r2
 80006fc:	f000 f9d0 	bl	8000aa0 <HAL_GPIO_Init>
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b006      	add	sp, #24
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	50000400 	.word	0x50000400

08000710 <Error_Handler>:

void Error_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i

  __disable_irq();
  while (1)
 8000716:	e7fe      	b.n	8000716 <Error_Handler+0x6>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <HAL_MspInit+0x24>)
 800071e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x24>)
 8000722:	2101      	movs	r1, #1
 8000724:	430a      	orrs	r2, r1
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <HAL_MspInit+0x24>)
 800072a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_MspInit+0x24>)
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	0549      	lsls	r1, r1, #21
 8000732:	430a      	orrs	r2, r1
 8000734:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	230c      	movs	r3, #12
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f001 fbae 	bl	8001eb4 <memset>
  if(hspi->Instance==SPI2)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <HAL_SPI_MspInit+0x80>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d129      	bne.n	80007b6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <HAL_SPI_MspInit+0x84>)
 8000764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_SPI_MspInit+0x84>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	01c9      	lsls	r1, r1, #7
 800076c:	430a      	orrs	r2, r1
 800076e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_SPI_MspInit+0x84>)
 8000772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <HAL_SPI_MspInit+0x84>)
 8000776:	2102      	movs	r1, #2
 8000778:	430a      	orrs	r2, r1
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_SPI_MspInit+0x84>)
 800077e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000780:	2202      	movs	r2, #2
 8000782:	4013      	ands	r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000788:	210c      	movs	r1, #12
 800078a:	187b      	adds	r3, r7, r1
 800078c:	22e0      	movs	r2, #224	; 0xe0
 800078e:	0212      	lsls	r2, r2, #8
 8000790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2202      	movs	r2, #2
 8000796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2203      	movs	r2, #3
 80007a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <HAL_SPI_MspInit+0x88>)
 80007ae:	0019      	movs	r1, r3
 80007b0:	0010      	movs	r0, r2
 80007b2:	f000 f975 	bl	8000aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b008      	add	sp, #32
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40003800 	.word	0x40003800
 80007c4:	40021000 	.word	0x40021000
 80007c8:	50000400 	.word	0x50000400

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f886 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000806:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000820:	4c0b      	ldr	r4, [pc, #44]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800082e:	f7ff ffe4 	bl	80007fa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f001 fb1b 	bl	8001e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000836:	f7ff fe82 	bl	800053e <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   r0, =_estack
 800083c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000848:	08001f08 	.word	0x08001f08
  ldr r2, =_sbss
 800084c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000850:	20000084 	.word	0x20000084

08000854 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_COMP_IRQHandler>
	...

08000858 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_Init+0x3c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_Init+0x3c>)
 800086a:	2140      	movs	r1, #64	; 0x40
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 f811 	bl	8000898 <HAL_InitTick>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d003      	beq.n	8000882 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e001      	b.n	8000886 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000882:	f7ff ff49 	bl	8000718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0x5c>)
 80008a2:	681c      	ldr	r4, [r3, #0]
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_InitTick+0x60>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	0019      	movs	r1, r3
 80008aa:	23fa      	movs	r3, #250	; 0xfa
 80008ac:	0098      	lsls	r0, r3, #2
 80008ae:	f7ff fc2b 	bl	8000108 <__udivsi3>
 80008b2:	0003      	movs	r3, r0
 80008b4:	0019      	movs	r1, r3
 80008b6:	0020      	movs	r0, r4
 80008b8:	f7ff fc26 	bl	8000108 <__udivsi3>
 80008bc:	0003      	movs	r3, r0
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 f8e1 	bl	8000a86 <HAL_SYSTICK_Config>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e00f      	b.n	80008ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d80b      	bhi.n	80008ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	2301      	movs	r3, #1
 80008d6:	425b      	negs	r3, r3
 80008d8:	2200      	movs	r2, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 f8be 	bl	8000a5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_InitTick+0x64>)
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b003      	add	sp, #12
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	001a      	movs	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	18d2      	adds	r2, r2, r3
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_IncTick+0x20>)
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000008 	.word	0x20000008
 8000920:	20000080 	.word	0x20000080

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000080 	.word	0x20000080

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	0002      	movs	r2, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b7f      	cmp	r3, #127	; 0x7f
 800094c:	d828      	bhi.n	80009a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094e:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <__NVIC_SetPriority+0xd4>)
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b25b      	sxtb	r3, r3
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	33c0      	adds	r3, #192	; 0xc0
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	589b      	ldr	r3, [r3, r2]
 800095e:	1dfa      	adds	r2, r7, #7
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	0011      	movs	r1, r2
 8000964:	2203      	movs	r2, #3
 8000966:	400a      	ands	r2, r1
 8000968:	00d2      	lsls	r2, r2, #3
 800096a:	21ff      	movs	r1, #255	; 0xff
 800096c:	4091      	lsls	r1, r2
 800096e:	000a      	movs	r2, r1
 8000970:	43d2      	mvns	r2, r2
 8000972:	401a      	ands	r2, r3
 8000974:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	019b      	lsls	r3, r3, #6
 800097a:	22ff      	movs	r2, #255	; 0xff
 800097c:	401a      	ands	r2, r3
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	0018      	movs	r0, r3
 8000984:	2303      	movs	r3, #3
 8000986:	4003      	ands	r3, r0
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098c:	481f      	ldr	r0, [pc, #124]	; (8000a0c <__NVIC_SetPriority+0xd4>)
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b25b      	sxtb	r3, r3
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	430a      	orrs	r2, r1
 8000998:	33c0      	adds	r3, #192	; 0xc0
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800099e:	e031      	b.n	8000a04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <__NVIC_SetPriority+0xd8>)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	0019      	movs	r1, r3
 80009a8:	230f      	movs	r3, #15
 80009aa:	400b      	ands	r3, r1
 80009ac:	3b08      	subs	r3, #8
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	3306      	adds	r3, #6
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	18d3      	adds	r3, r2, r3
 80009b6:	3304      	adds	r3, #4
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1dfa      	adds	r2, r7, #7
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	0011      	movs	r1, r2
 80009c0:	2203      	movs	r2, #3
 80009c2:	400a      	ands	r2, r1
 80009c4:	00d2      	lsls	r2, r2, #3
 80009c6:	21ff      	movs	r1, #255	; 0xff
 80009c8:	4091      	lsls	r1, r2
 80009ca:	000a      	movs	r2, r1
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	22ff      	movs	r2, #255	; 0xff
 80009d8:	401a      	ands	r2, r3
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0018      	movs	r0, r3
 80009e0:	2303      	movs	r3, #3
 80009e2:	4003      	ands	r3, r0
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <__NVIC_SetPriority+0xd8>)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	001c      	movs	r4, r3
 80009f0:	230f      	movs	r3, #15
 80009f2:	4023      	ands	r3, r4
 80009f4:	3b08      	subs	r3, #8
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	430a      	orrs	r2, r1
 80009fa:	3306      	adds	r3, #6
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	18c3      	adds	r3, r0, r3
 8000a00:	3304      	adds	r3, #4
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b003      	add	sp, #12
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <SysTick_Config+0x40>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d901      	bls.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e010      	b.n	8000a4c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <SysTick_Config+0x44>)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	3a01      	subs	r2, #1
 8000a30:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	2301      	movs	r3, #1
 8000a34:	425b      	negs	r3, r3
 8000a36:	2103      	movs	r1, #3
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ff7d 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SysTick_Config+0x44>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x44>)
 8000a46:	2207      	movs	r2, #7
 8000a48:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	00ffffff 	.word	0x00ffffff
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	210f      	movs	r1, #15
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	1c02      	adds	r2, r0, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ff5d 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b004      	add	sp, #16
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ffbf 	bl	8000a14 <SysTick_Config>
 8000a96:	0003      	movs	r3, r0
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ab6:	e14f      	b.n	8000d58 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d100      	bne.n	8000ad0 <HAL_GPIO_Init+0x30>
 8000ace:	e140      	b.n	8000d52 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d00b      	beq.n	8000af0 <HAL_GPIO_Init+0x50>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d007      	beq.n	8000af0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae4:	2b11      	cmp	r3, #17
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b12      	cmp	r3, #18
 8000aee:	d130      	bne.n	8000b52 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2203      	movs	r2, #3
 8000afc:	409a      	lsls	r2, r3
 8000afe:	0013      	movs	r3, r2
 8000b00:	43da      	mvns	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	409a      	lsls	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b26:	2201      	movs	r2, #1
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
 8000b2c:	0013      	movs	r3, r2
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0xf2>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	d123      	bne.n	8000bda <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	58d3      	ldr	r3, [r2, r3]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	0013      	movs	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	08da      	lsrs	r2, r3, #3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	6939      	ldr	r1, [r7, #16]
 8000bd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	055b      	lsls	r3, r3, #21
 8000c16:	4013      	ands	r3, r2
 8000c18:	d100      	bne.n	8000c1c <HAL_GPIO_Init+0x17c>
 8000c1a:	e09a      	b.n	8000d52 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c20:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	430a      	orrs	r2, r1
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c28:	4a52      	ldr	r2, [pc, #328]	; (8000d74 <HAL_GPIO_Init+0x2d4>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	589b      	ldr	r3, [r3, r2]
 8000c34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	409a      	lsls	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	43da      	mvns	r2, r3
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	23a0      	movs	r3, #160	; 0xa0
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d019      	beq.n	8000c8a <HAL_GPIO_Init+0x1ea>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a47      	ldr	r2, [pc, #284]	; (8000d78 <HAL_GPIO_Init+0x2d8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0x1e6>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a46      	ldr	r2, [pc, #280]	; (8000d7c <HAL_GPIO_Init+0x2dc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00d      	beq.n	8000c82 <HAL_GPIO_Init+0x1e2>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a45      	ldr	r2, [pc, #276]	; (8000d80 <HAL_GPIO_Init+0x2e0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <HAL_GPIO_Init+0x1de>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a44      	ldr	r2, [pc, #272]	; (8000d84 <HAL_GPIO_Init+0x2e4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_GPIO_Init+0x1da>
 8000c76:	2305      	movs	r3, #5
 8000c78:	e008      	b.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e004      	b.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e002      	b.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	2103      	movs	r1, #3
 8000c90:	400a      	ands	r2, r1
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	4093      	lsls	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c9c:	4935      	ldr	r1, [pc, #212]	; (8000d74 <HAL_GPIO_Init+0x2d4>)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000caa:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	025b      	lsls	r3, r3, #9
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43da      	mvns	r2, r3
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	029b      	lsls	r3, r3, #10
 8000cec:	4013      	ands	r3, r2
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43da      	mvns	r2, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	035b      	lsls	r3, r3, #13
 8000d16:	4013      	ands	r3, r2
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43da      	mvns	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	039b      	lsls	r3, r3, #14
 8000d40:	4013      	ands	r3, r2
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_GPIO_Init+0x2e8>)
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	40da      	lsrs	r2, r3
 8000d60:	1e13      	subs	r3, r2, #0
 8000d62:	d000      	beq.n	8000d66 <HAL_GPIO_Init+0x2c6>
 8000d64:	e6a8      	b.n	8000ab8 <HAL_GPIO_Init+0x18>
  }
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b006      	add	sp, #24
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000
 8000d78:	50000400 	.word	0x50000400
 8000d7c:	50000800 	.word	0x50000800
 8000d80:	50000c00 	.word	0x50000c00
 8000d84:	50001c00 	.word	0x50001c00
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f000 fbb4 	bl	8001508 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000da0:	4bc3      	ldr	r3, [pc, #780]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	220c      	movs	r2, #12
 8000da6:	4013      	ands	r3, r2
 8000da8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000daa:	4bc1      	ldr	r3, [pc, #772]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	4013      	ands	r3, r2
 8000db4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d100      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x36>
 8000dc0:	e07e      	b.n	8000ec0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d007      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	2b0c      	cmp	r3, #12
 8000dcc:	d112      	bne.n	8000df4 <HAL_RCC_OscConfig+0x68>
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	025b      	lsls	r3, r3, #9
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d10d      	bne.n	8000df4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	4bb5      	ldr	r3, [pc, #724]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	029b      	lsls	r3, r3, #10
 8000de0:	4013      	ands	r3, r2
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x5a>
 8000de4:	e06b      	b.n	8000ebe <HAL_RCC_OscConfig+0x132>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d167      	bne.n	8000ebe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f000 fb8a 	bl	8001508 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	025b      	lsls	r3, r3, #9
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d107      	bne.n	8000e10 <HAL_RCC_OscConfig+0x84>
 8000e00:	4bab      	ldr	r3, [pc, #684]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4baa      	ldr	r3, [pc, #680]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	0249      	lsls	r1, r1, #9
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	e027      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	23a0      	movs	r3, #160	; 0xa0
 8000e16:	02db      	lsls	r3, r3, #11
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d10e      	bne.n	8000e3a <HAL_RCC_OscConfig+0xae>
 8000e1c:	4ba4      	ldr	r3, [pc, #656]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4ba3      	ldr	r3, [pc, #652]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	02c9      	lsls	r1, r1, #11
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	4ba1      	ldr	r3, [pc, #644]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4ba0      	ldr	r3, [pc, #640]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	0249      	lsls	r1, r1, #9
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e012      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e3a:	4b9d      	ldr	r3, [pc, #628]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b9c      	ldr	r3, [pc, #624]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e40:	499c      	ldr	r1, [pc, #624]	; (80010b4 <HAL_RCC_OscConfig+0x328>)
 8000e42:	400a      	ands	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	4b9a      	ldr	r3, [pc, #616]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4b96      	ldr	r3, [pc, #600]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b95      	ldr	r3, [pc, #596]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e5a:	4997      	ldr	r1, [pc, #604]	; (80010b8 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d015      	beq.n	8000e94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fd5c 	bl	8000924 <HAL_GetTick>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e70:	e009      	b.n	8000e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e72:	f7ff fd57 	bl	8000924 <HAL_GetTick>
 8000e76:	0002      	movs	r2, r0
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	; 0x64
 8000e7e:	d902      	bls.n	8000e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f000 fb41 	bl	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e86:	4b8a      	ldr	r3, [pc, #552]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d0ef      	beq.n	8000e72 <HAL_RCC_OscConfig+0xe6>
 8000e92:	e015      	b.n	8000ec0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fd46 	bl	8000924 <HAL_GetTick>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fd41 	bl	8000924 <HAL_GetTick>
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	; 0x64
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e32b      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eb0:	4b7f      	ldr	r3, [pc, #508]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	029b      	lsls	r3, r3, #10
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d1f0      	bne.n	8000e9e <HAL_RCC_OscConfig+0x112>
 8000ebc:	e000      	b.n	8000ec0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d100      	bne.n	8000ecc <HAL_RCC_OscConfig+0x140>
 8000eca:	e08c      	b.n	8000fe6 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d005      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	2b0c      	cmp	r3, #12
 8000edc:	d13f      	bne.n	8000f5e <HAL_RCC_OscConfig+0x1d2>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d13c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ee4:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4013      	ands	r3, r2
 8000eec:	d004      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x16c>
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e307      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef8:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a6f      	ldr	r2, [pc, #444]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	0019      	movs	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	021a      	lsls	r2, r3, #8
 8000f08:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f0e:	4b68      	ldr	r3, [pc, #416]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2209      	movs	r2, #9
 8000f14:	4393      	bics	r3, r2
 8000f16:	0019      	movs	r1, r3
 8000f18:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f20:	f000 fc44 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8000f24:	0001      	movs	r1, r0
 8000f26:	4b62      	ldr	r3, [pc, #392]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	4013      	ands	r3, r2
 8000f30:	4a63      	ldr	r2, [pc, #396]	; (80010c0 <HAL_RCC_OscConfig+0x334>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	000a      	movs	r2, r1
 8000f36:	40da      	lsrs	r2, r3
 8000f38:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <HAL_RCC_OscConfig+0x338>)
 8000f3a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000f3c:	4b62      	ldr	r3, [pc, #392]	; (80010c8 <HAL_RCC_OscConfig+0x33c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2513      	movs	r5, #19
 8000f42:	197c      	adds	r4, r7, r5
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff fca7 	bl	8000898 <HAL_InitTick>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000f4e:	197b      	adds	r3, r7, r5
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d047      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 8000f56:	2313      	movs	r3, #19
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	e2d4      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d027      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f64:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2209      	movs	r2, #9
 8000f6a:	4393      	bics	r3, r2
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fcd5 	bl	8000924 <HAL_GetTick>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fcd0 	bl	8000924 <HAL_GetTick>
 8000f84:	0002      	movs	r2, r0
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e2ba      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2204      	movs	r2, #4
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d0f1      	beq.n	8000f80 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9c:	4b44      	ldr	r3, [pc, #272]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4a46      	ldr	r2, [pc, #280]	; (80010bc <HAL_RCC_OscConfig+0x330>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	021a      	lsls	r2, r3, #8
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	e018      	b.n	8000fe6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fcb0 	bl	8000924 <HAL_GetTick>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fca:	f7ff fcab 	bl	8000924 <HAL_GetTick>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e295      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d1f1      	bne.n	8000fca <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2210      	movs	r2, #16
 8000fec:	4013      	ands	r3, r2
 8000fee:	d100      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x266>
 8000ff0:	e0a3      	b.n	800113a <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d141      	bne.n	800107c <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ff8:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4013      	ands	r3, r2
 8001002:	d005      	beq.n	8001010 <HAL_RCC_OscConfig+0x284>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e27b      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <HAL_RCC_OscConfig+0x340>)
 8001016:	4013      	ands	r3, r2
 8001018:	0019      	movs	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8001020:	430a      	orrs	r2, r1
 8001022:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	0a19      	lsrs	r1, r3, #8
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	061a      	lsls	r2, r3, #24
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8001034:	430a      	orrs	r2, r1
 8001036:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	0b5b      	lsrs	r3, r3, #13
 800103e:	3301      	adds	r3, #1
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0212      	lsls	r2, r2, #8
 8001044:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	210f      	movs	r1, #15
 800104e:	400b      	ands	r3, r1
 8001050:	491b      	ldr	r1, [pc, #108]	; (80010c0 <HAL_RCC_OscConfig+0x334>)
 8001052:	5ccb      	ldrb	r3, [r1, r3]
 8001054:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_RCC_OscConfig+0x338>)
 8001058:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_RCC_OscConfig+0x33c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2513      	movs	r5, #19
 8001060:	197c      	adds	r4, r7, r5
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fc18 	bl	8000898 <HAL_InitTick>
 8001068:	0003      	movs	r3, r0
 800106a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800106c:	197b      	adds	r3, r7, r5
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d062      	beq.n	800113a <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8001074:	2313      	movs	r3, #19
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	e245      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d040      	beq.n	8001106 <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_RCC_OscConfig+0x324>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	0049      	lsls	r1, r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fc47 	bl	8000924 <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800109a:	e019      	b.n	80010d0 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800109c:	f7ff fc42 	bl	8000924 <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d912      	bls.n	80010d0 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e22c      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40021000 	.word	0x40021000
 80010b4:	fffeffff 	.word	0xfffeffff
 80010b8:	fffbffff 	.word	0xfffbffff
 80010bc:	ffffe0ff 	.word	0xffffe0ff
 80010c0:	08001edc 	.word	0x08001edc
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000004 	.word	0x20000004
 80010cc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010d0:	4bc6      	ldr	r3, [pc, #792]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4013      	ands	r3, r2
 80010da:	d0df      	beq.n	800109c <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010dc:	4bc3      	ldr	r3, [pc, #780]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4ac3      	ldr	r2, [pc, #780]	; (80013f0 <HAL_RCC_OscConfig+0x664>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	0019      	movs	r1, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ea:	4bc0      	ldr	r3, [pc, #768]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f0:	4bbe      	ldr	r3, [pc, #760]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	0a19      	lsrs	r1, r3, #8
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	061a      	lsls	r2, r3, #24
 80010fe:	4bbb      	ldr	r3, [pc, #748]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001100:	430a      	orrs	r2, r1
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	e019      	b.n	800113a <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001106:	4bb9      	ldr	r3, [pc, #740]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4bb8      	ldr	r3, [pc, #736]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 800110c:	49b9      	ldr	r1, [pc, #740]	; (80013f4 <HAL_RCC_OscConfig+0x668>)
 800110e:	400a      	ands	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fc07 	bl	8000924 <HAL_GetTick>
 8001116:	0003      	movs	r3, r0
 8001118:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800111c:	f7ff fc02 	bl	8000924 <HAL_GetTick>
 8001120:	0002      	movs	r2, r0
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1ec      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800112e:	4baf      	ldr	r3, [pc, #700]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4013      	ands	r3, r2
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2208      	movs	r2, #8
 8001140:	4013      	ands	r3, r2
 8001142:	d036      	beq.n	80011b2 <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d019      	beq.n	8001180 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114c:	4ba7      	ldr	r3, [pc, #668]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 800114e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001150:	4ba6      	ldr	r3, [pc, #664]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001152:	2101      	movs	r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001158:	f7ff fbe4 	bl	8000924 <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fbdf 	bl	8000924 <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e1c9      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001174:	4b9d      	ldr	r3, [pc, #628]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d0f1      	beq.n	8001162 <HAL_RCC_OscConfig+0x3d6>
 800117e:	e018      	b.n	80011b2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001180:	4b9a      	ldr	r3, [pc, #616]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001184:	4b99      	ldr	r3, [pc, #612]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001186:	2101      	movs	r1, #1
 8001188:	438a      	bics	r2, r1
 800118a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fbca 	bl	8000924 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff fbc5 	bl	8000924 <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1af      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011a8:	4b90      	ldr	r3, [pc, #576]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80011aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ac:	2202      	movs	r2, #2
 80011ae:	4013      	ands	r3, r2
 80011b0:	d1f1      	bne.n	8001196 <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2204      	movs	r2, #4
 80011b8:	4013      	ands	r3, r2
 80011ba:	d100      	bne.n	80011be <HAL_RCC_OscConfig+0x432>
 80011bc:	e0af      	b.n	800131e <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011be:	2327      	movs	r3, #39	; 0x27
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c6:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80011c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	055b      	lsls	r3, r3, #21
 80011ce:	4013      	ands	r3, r2
 80011d0:	d10a      	bne.n	80011e8 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b86      	ldr	r3, [pc, #536]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80011d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011d6:	4b85      	ldr	r3, [pc, #532]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	0549      	lsls	r1, r1, #21
 80011dc:	430a      	orrs	r2, r1
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80011e0:	2327      	movs	r3, #39	; 0x27
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b83      	ldr	r3, [pc, #524]	; (80013f8 <HAL_RCC_OscConfig+0x66c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4013      	ands	r3, r2
 80011f2:	d11a      	bne.n	800122a <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f4:	4b80      	ldr	r3, [pc, #512]	; (80013f8 <HAL_RCC_OscConfig+0x66c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x66c>)
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	0049      	lsls	r1, r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001202:	f7ff fb8f 	bl	8000924 <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120c:	f7ff fb8a 	bl	8000924 <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e174      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121e:	4b76      	ldr	r3, [pc, #472]	; (80013f8 <HAL_RCC_OscConfig+0x66c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4013      	ands	r3, r2
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	429a      	cmp	r2, r3
 8001234:	d107      	bne.n	8001246 <HAL_RCC_OscConfig+0x4ba>
 8001236:	4b6d      	ldr	r3, [pc, #436]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	0049      	lsls	r1, r1, #1
 8001240:	430a      	orrs	r2, r1
 8001242:	651a      	str	r2, [r3, #80]	; 0x50
 8001244:	e031      	b.n	80012aa <HAL_RCC_OscConfig+0x51e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x4dc>
 800124e:	4b67      	ldr	r3, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001252:	4b66      	ldr	r3, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001254:	4967      	ldr	r1, [pc, #412]	; (80013f4 <HAL_RCC_OscConfig+0x668>)
 8001256:	400a      	ands	r2, r1
 8001258:	651a      	str	r2, [r3, #80]	; 0x50
 800125a:	4b64      	ldr	r3, [pc, #400]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 800125c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800125e:	4b63      	ldr	r3, [pc, #396]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001260:	4966      	ldr	r1, [pc, #408]	; (80013fc <HAL_RCC_OscConfig+0x670>)
 8001262:	400a      	ands	r2, r1
 8001264:	651a      	str	r2, [r3, #80]	; 0x50
 8001266:	e020      	b.n	80012aa <HAL_RCC_OscConfig+0x51e>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	23a0      	movs	r3, #160	; 0xa0
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	429a      	cmp	r2, r3
 8001272:	d10e      	bne.n	8001292 <HAL_RCC_OscConfig+0x506>
 8001274:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001278:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	00c9      	lsls	r1, r1, #3
 800127e:	430a      	orrs	r2, r1
 8001280:	651a      	str	r2, [r3, #80]	; 0x50
 8001282:	4b5a      	ldr	r3, [pc, #360]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001286:	4b59      	ldr	r3, [pc, #356]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	0049      	lsls	r1, r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	651a      	str	r2, [r3, #80]	; 0x50
 8001290:	e00b      	b.n	80012aa <HAL_RCC_OscConfig+0x51e>
 8001292:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001296:	4b55      	ldr	r3, [pc, #340]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001298:	4956      	ldr	r1, [pc, #344]	; (80013f4 <HAL_RCC_OscConfig+0x668>)
 800129a:	400a      	ands	r2, r1
 800129c:	651a      	str	r2, [r3, #80]	; 0x50
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80012a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012a2:	4b52      	ldr	r3, [pc, #328]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80012a4:	4955      	ldr	r1, [pc, #340]	; (80013fc <HAL_RCC_OscConfig+0x670>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d015      	beq.n	80012de <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb37 	bl	8000924 <HAL_GetTick>
 80012b6:	0003      	movs	r3, r0
 80012b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012ba:	e009      	b.n	80012d0 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f7ff fb32 	bl	8000924 <HAL_GetTick>
 80012c0:	0002      	movs	r2, r0
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	4a4e      	ldr	r2, [pc, #312]	; (8001400 <HAL_RCC_OscConfig+0x674>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e11b      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80012d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d0ef      	beq.n	80012bc <HAL_RCC_OscConfig+0x530>
 80012dc:	e014      	b.n	8001308 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff fb21 	bl	8000924 <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012e6:	e009      	b.n	80012fc <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e8:	f7ff fb1c 	bl	8000924 <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	4a43      	ldr	r2, [pc, #268]	; (8001400 <HAL_RCC_OscConfig+0x674>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e105      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012fc:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80012fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4013      	ands	r3, r2
 8001306:	d1ef      	bne.n	80012e8 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001308:	2327      	movs	r3, #39	; 0x27
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d105      	bne.n	800131e <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001316:	4b35      	ldr	r3, [pc, #212]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001318:	493a      	ldr	r1, [pc, #232]	; (8001404 <HAL_RCC_OscConfig+0x678>)
 800131a:	400a      	ands	r2, r1
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2220      	movs	r2, #32
 8001324:	4013      	ands	r3, r2
 8001326:	d049      	beq.n	80013bc <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d026      	beq.n	800137e <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001330:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001336:	2101      	movs	r1, #1
 8001338:	430a      	orrs	r2, r1
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 800133e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001342:	2101      	movs	r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_RCC_OscConfig+0x67c>)
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_RCC_OscConfig+0x67c>)
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	0189      	lsls	r1, r1, #6
 8001352:	430a      	orrs	r2, r1
 8001354:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fae5 	bl	8000924 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001360:	f7ff fae0 	bl	8000924 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e0ca      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d0f1      	beq.n	8001360 <HAL_RCC_OscConfig+0x5d4>
 800137c:	e01e      	b.n	80013bc <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 8001384:	2101      	movs	r1, #1
 8001386:	438a      	bics	r2, r1
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_RCC_OscConfig+0x67c>)
 800138c:	6a1a      	ldr	r2, [r3, #32]
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x67c>)
 8001390:	491e      	ldr	r1, [pc, #120]	; (800140c <HAL_RCC_OscConfig+0x680>)
 8001392:	400a      	ands	r2, r1
 8001394:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fac5 	bl	8000924 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013a0:	f7ff fac0 	bl	8000924 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e0aa      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1f1      	bne.n	80013a0 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d100      	bne.n	80013c6 <HAL_RCC_OscConfig+0x63a>
 80013c4:	e09f      	b.n	8001506 <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x642>
 80013cc:	e078      	b.n	80014c0 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d159      	bne.n	800148a <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_RCC_OscConfig+0x660>)
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <HAL_RCC_OscConfig+0x684>)
 80013de:	400a      	ands	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fa9f 	bl	8000924 <HAL_GetTick>
 80013e6:	0003      	movs	r3, r0
 80013e8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013ea:	e01c      	b.n	8001426 <HAL_RCC_OscConfig+0x69a>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	ffff1fff 	.word	0xffff1fff
 80013f4:	fffffeff 	.word	0xfffffeff
 80013f8:	40007000 	.word	0x40007000
 80013fc:	fffffbff 	.word	0xfffffbff
 8001400:	00001388 	.word	0x00001388
 8001404:	efffffff 	.word	0xefffffff
 8001408:	40010000 	.word	0x40010000
 800140c:	ffffdfff 	.word	0xffffdfff
 8001410:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fa86 	bl	8000924 <HAL_GetTick>
 8001418:	0002      	movs	r2, r0
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e070      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	049b      	lsls	r3, r3, #18
 800142e:	4013      	ands	r3, r2
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	4a37      	ldr	r2, [pc, #220]	; (8001514 <HAL_RCC_OscConfig+0x788>)
 8001438:	4013      	ands	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	431a      	orrs	r2, r3
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 800144e:	430a      	orrs	r2, r1
 8001450:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0449      	lsls	r1, r1, #17
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fa60 	bl	8000924 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff fa5b 	bl	8000924 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e045      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	049b      	lsls	r3, r3, #18
 8001484:	4013      	ands	r3, r2
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x6de>
 8001488:	e03d      	b.n	8001506 <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 8001490:	4921      	ldr	r1, [pc, #132]	; (8001518 <HAL_RCC_OscConfig+0x78c>)
 8001492:	400a      	ands	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fa45 	bl	8000924 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fa40 	bl	8000924 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e02a      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	049b      	lsls	r3, r3, #18
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x714>
 80014be:	e022      	b.n	8001506 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e01d      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_RCC_OscConfig+0x784>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	025b      	lsls	r3, r3, #9
 80014d8:	401a      	ands	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	429a      	cmp	r2, r3
 80014e0:	d10f      	bne.n	8001502 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	23f0      	movs	r3, #240	; 0xf0
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	401a      	ands	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	23c0      	movs	r3, #192	; 0xc0
 80014f6:	041b      	lsls	r3, r3, #16
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b00a      	add	sp, #40	; 0x28
 800150e:	bdb0      	pop	{r4, r5, r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	ff02ffff 	.word	0xff02ffff
 8001518:	feffffff 	.word	0xfeffffff

0800151c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e129      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b96      	ldr	r3, [pc, #600]	; (800178c <HAL_RCC_ClockConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	4013      	ands	r3, r2
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d91e      	bls.n	800157c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b93      	ldr	r3, [pc, #588]	; (800178c <HAL_RCC_ClockConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	4393      	bics	r3, r2
 8001546:	0019      	movs	r1, r3
 8001548:	4b90      	ldr	r3, [pc, #576]	; (800178c <HAL_RCC_ClockConfig+0x270>)
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001550:	f7ff f9e8 	bl	8000924 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001558:	e009      	b.n	800156e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155a:	f7ff f9e3 	bl	8000924 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a8a      	ldr	r2, [pc, #552]	; (8001790 <HAL_RCC_ClockConfig+0x274>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e10a      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b87      	ldr	r3, [pc, #540]	; (800178c <HAL_RCC_ClockConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	4013      	ands	r3, r2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d1ee      	bne.n	800155a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d009      	beq.n	800159a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001586:	4b83      	ldr	r3, [pc, #524]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	22f0      	movs	r2, #240	; 0xf0
 800158c:	4393      	bics	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b7f      	ldr	r3, [pc, #508]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001596:	430a      	orrs	r2, r1
 8001598:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2201      	movs	r2, #1
 80015a0:	4013      	ands	r3, r2
 80015a2:	d100      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x8a>
 80015a4:	e089      	b.n	80016ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d107      	bne.n	80015be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ae:	4b79      	ldr	r3, [pc, #484]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	029b      	lsls	r3, r3, #10
 80015b6:	4013      	ands	r3, r2
 80015b8:	d120      	bne.n	80015fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0e2      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015c6:	4b73      	ldr	r3, [pc, #460]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	049b      	lsls	r3, r3, #18
 80015ce:	4013      	ands	r3, r2
 80015d0:	d114      	bne.n	80015fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0d6      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d106      	bne.n	80015ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015de:	4b6d      	ldr	r3, [pc, #436]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2204      	movs	r2, #4
 80015e4:	4013      	ands	r3, r2
 80015e6:	d109      	bne.n	80015fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0cb      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ec:	4b69      	ldr	r3, [pc, #420]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0c3      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fc:	4b65      	ldr	r3, [pc, #404]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2203      	movs	r2, #3
 8001602:	4393      	bics	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4b62      	ldr	r3, [pc, #392]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 800160c:	430a      	orrs	r2, r1
 800160e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff f988 	bl	8000924 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d111      	bne.n	8001644 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001620:	e009      	b.n	8001636 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001622:	f7ff f97f 	bl	8000924 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_RCC_ClockConfig+0x274>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e0a6      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001636:	4b57      	ldr	r3, [pc, #348]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	220c      	movs	r2, #12
 800163c:	4013      	ands	r3, r2
 800163e:	2b08      	cmp	r3, #8
 8001640:	d1ef      	bne.n	8001622 <HAL_RCC_ClockConfig+0x106>
 8001642:	e03a      	b.n	80016ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d111      	bne.n	8001670 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164c:	e009      	b.n	8001662 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164e:	f7ff f969 	bl	8000924 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	4a4d      	ldr	r2, [pc, #308]	; (8001790 <HAL_RCC_ClockConfig+0x274>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e090      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001662:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	220c      	movs	r2, #12
 8001668:	4013      	ands	r3, r2
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d1ef      	bne.n	800164e <HAL_RCC_ClockConfig+0x132>
 800166e:	e024      	b.n	80016ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d11b      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001678:	e009      	b.n	800168e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167a:	f7ff f953 	bl	8000924 <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	4a42      	ldr	r2, [pc, #264]	; (8001790 <HAL_RCC_ClockConfig+0x274>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e07a      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	220c      	movs	r2, #12
 8001694:	4013      	ands	r3, r2
 8001696:	2b04      	cmp	r3, #4
 8001698:	d1ef      	bne.n	800167a <HAL_RCC_ClockConfig+0x15e>
 800169a:	e00e      	b.n	80016ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff f942 	bl	8000924 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	4a3a      	ldr	r2, [pc, #232]	; (8001790 <HAL_RCC_ClockConfig+0x274>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e069      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	220c      	movs	r2, #12
 80016b6:	4013      	ands	r3, r2
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_ClockConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d21e      	bcs.n	8001706 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_RCC_ClockConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2201      	movs	r2, #1
 80016ce:	4393      	bics	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_RCC_ClockConfig+0x270>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016da:	f7ff f923 	bl	8000924 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	e009      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff f91e 	bl	8000924 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	4a28      	ldr	r2, [pc, #160]	; (8001790 <HAL_RCC_ClockConfig+0x274>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e045      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_ClockConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d1ee      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
 800170e:	d009      	beq.n	8001724 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a20      	ldr	r2, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x27c>)
 8001716:	4013      	ands	r3, r2
 8001718:	0019      	movs	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001720:	430a      	orrs	r2, r1
 8001722:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2208      	movs	r2, #8
 800172a:	4013      	ands	r3, r2
 800172c:	d00a      	beq.n	8001744 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_RCC_ClockConfig+0x280>)
 8001734:	4013      	ands	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	00da      	lsls	r2, r3, #3
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001744:	f000 f832 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001748:	0001      	movs	r1, r0
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_ClockConfig+0x278>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	220f      	movs	r2, #15
 8001752:	4013      	ands	r3, r2
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <HAL_RCC_ClockConfig+0x284>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	000a      	movs	r2, r1
 800175a:	40da      	lsrs	r2, r3
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_RCC_ClockConfig+0x288>)
 800175e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_RCC_ClockConfig+0x28c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	250b      	movs	r5, #11
 8001766:	197c      	adds	r4, r7, r5
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff f895 	bl	8000898 <HAL_InitTick>
 800176e:	0003      	movs	r3, r0
 8001770:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001772:	197b      	adds	r3, r7, r5
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800177a:	230b      	movs	r3, #11
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	e000      	b.n	8001784 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bdb0      	pop	{r4, r5, r7, pc}
 800178c:	40022000 	.word	0x40022000
 8001790:	00001388 	.word	0x00001388
 8001794:	40021000 	.word	0x40021000
 8001798:	fffff8ff 	.word	0xfffff8ff
 800179c:	ffffc7ff 	.word	0xffffc7ff
 80017a0:	08001edc 	.word	0x08001edc
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ae:	b08f      	sub	sp, #60	; 0x3c
 80017b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80017b2:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <HAL_RCC_GetSysClockFreq+0x130>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ba:	230c      	movs	r3, #12
 80017bc:	4013      	ands	r3, r2
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d00f      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x36>
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d010      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x3c>
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d000      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x20>
 80017ca:	e073      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80017cc:	4b43      	ldr	r3, [pc, #268]	; (80018dc <HAL_RCC_GetSysClockFreq+0x130>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2210      	movs	r2, #16
 80017d2:	4013      	ands	r3, r2
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80017d6:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x134>)
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80017da:	e079      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017e0:	e076      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e2:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017e6:	e073      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	0c9a      	lsrs	r2, r3, #18
 80017ec:	230f      	movs	r3, #15
 80017ee:	401a      	ands	r2, r3
 80017f0:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <HAL_RCC_GetSysClockFreq+0x140>)
 80017f2:	5c9b      	ldrb	r3, [r3, r2]
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	0d9a      	lsrs	r2, r3, #22
 80017fa:	2303      	movs	r3, #3
 80017fc:	4013      	ands	r3, r2
 80017fe:	3301      	adds	r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_RCC_GetSysClockFreq+0x130>)
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	4013      	ands	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001818:	2300      	movs	r3, #0
 800181a:	69b8      	ldr	r0, [r7, #24]
 800181c:	69f9      	ldr	r1, [r7, #28]
 800181e:	f7fe fd1f 	bl	8000260 <__aeabi_lmul>
 8001822:	0003      	movs	r3, r0
 8001824:	000c      	movs	r4, r1
 8001826:	0018      	movs	r0, r3
 8001828:	0021      	movs	r1, r4
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f7fe fcf3 	bl	8000220 <__aeabi_uldivmod>
 800183a:	0003      	movs	r3, r0
 800183c:	000c      	movs	r4, r1
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
 8001840:	e035      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_RCC_GetSysClockFreq+0x130>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2210      	movs	r2, #16
 8001848:	4013      	ands	r3, r2
 800184a:	d019      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8001856:	2300      	movs	r3, #0
 8001858:	68b8      	ldr	r0, [r7, #8]
 800185a:	68f9      	ldr	r1, [r7, #12]
 800185c:	f7fe fd00 	bl	8000260 <__aeabi_lmul>
 8001860:	0003      	movs	r3, r0
 8001862:	000c      	movs	r4, r1
 8001864:	0018      	movs	r0, r3
 8001866:	0021      	movs	r1, r4
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f7fe fcd4 	bl	8000220 <__aeabi_uldivmod>
 8001878:	0003      	movs	r3, r0
 800187a:	000c      	movs	r4, r1
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
 800187e:	e016      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	0018      	movs	r0, r3
 8001884:	2300      	movs	r3, #0
 8001886:	0019      	movs	r1, r3
 8001888:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800188a:	2300      	movs	r3, #0
 800188c:	f7fe fce8 	bl	8000260 <__aeabi_lmul>
 8001890:	0003      	movs	r3, r0
 8001892:	000c      	movs	r4, r1
 8001894:	0018      	movs	r0, r3
 8001896:	0021      	movs	r1, r4
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	001d      	movs	r5, r3
 800189c:	2300      	movs	r3, #0
 800189e:	001e      	movs	r6, r3
 80018a0:	002a      	movs	r2, r5
 80018a2:	0033      	movs	r3, r6
 80018a4:	f7fe fcbc 	bl	8000220 <__aeabi_uldivmod>
 80018a8:	0003      	movs	r3, r0
 80018aa:	000c      	movs	r4, r1
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80018ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018b2:	e00d      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_GetSysClockFreq+0x130>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0b5b      	lsrs	r3, r3, #13
 80018ba:	2207      	movs	r2, #7
 80018bc:	4013      	ands	r3, r2
 80018be:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	3301      	adds	r3, #1
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0212      	lsls	r2, r2, #8
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b00f      	add	sp, #60	; 0x3c
 80018d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	40021000 	.word	0x40021000
 80018e0:	003d0900 	.word	0x003d0900
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	007a1200 	.word	0x007a1200
 80018ec:	08001eec 	.word	0x08001eec

080018f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e083      	b.n	8001a0a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	2382      	movs	r3, #130	; 0x82
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	429a      	cmp	r2, r3
 8001914:	d009      	beq.n	800192a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
 800191c:	e005      	b.n	800192a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2251      	movs	r2, #81	; 0x51
 8001934:	5c9b      	ldrb	r3, [r3, r2]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2250      	movs	r2, #80	; 0x50
 8001940:	2100      	movs	r1, #0
 8001942:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f7fe fefa 	bl	8000740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2251      	movs	r2, #81	; 0x51
 8001950:	2102      	movs	r1, #2
 8001952:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2140      	movs	r1, #64	; 0x40
 8001960:	438a      	bics	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	2382      	movs	r3, #130	; 0x82
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	2384      	movs	r3, #132	; 0x84
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	400b      	ands	r3, r1
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	400b      	ands	r3, r1
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2102      	movs	r1, #2
 800198c:	400b      	ands	r3, r1
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2101      	movs	r1, #1
 8001996:	400b      	ands	r3, r1
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6999      	ldr	r1, [r3, #24]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	400b      	ands	r3, r1
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2138      	movs	r1, #56	; 0x38
 80019ac:	400b      	ands	r3, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	400b      	ands	r3, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	0011      	movs	r1, r2
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	019b      	lsls	r3, r3, #6
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	2204      	movs	r2, #4
 80019d6:	4013      	ands	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	2210      	movs	r2, #16
 80019e0:	401a      	ands	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <HAL_SPI_Init+0x124>)
 80019f6:	400a      	ands	r2, r1
 80019f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2251      	movs	r2, #81	; 0x51
 8001a04:	2101      	movs	r1, #1
 8001a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	fffff7ff 	.word	0xfffff7ff

08001a18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	1dbb      	adds	r3, r7, #6
 8001a26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a28:	231f      	movs	r3, #31
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2250      	movs	r2, #80	; 0x50
 8001a34:	5c9b      	ldrb	r3, [r3, r2]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_SPI_Transmit+0x26>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e13e      	b.n	8001cbc <HAL_SPI_Transmit+0x2a4>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2250      	movs	r2, #80	; 0x50
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a46:	f7fe ff6d 	bl	8000924 <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001a4e:	2316      	movs	r3, #22
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	1dba      	adds	r2, r7, #6
 8001a54:	8812      	ldrh	r2, [r2, #0]
 8001a56:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2251      	movs	r2, #81	; 0x51
 8001a5c:	5c9b      	ldrb	r3, [r3, r2]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d004      	beq.n	8001a6e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001a64:	231f      	movs	r3, #31
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	2202      	movs	r2, #2
 8001a6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a6c:	e11b      	b.n	8001ca6 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_SPI_Transmit+0x64>
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d104      	bne.n	8001a86 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001a7c:	231f      	movs	r3, #31
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a84:	e10f      	b.n	8001ca6 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2251      	movs	r2, #81	; 0x51
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1dba      	adds	r2, r7, #6
 8001a9e:	8812      	ldrh	r2, [r2, #0]
 8001aa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1dba      	adds	r2, r7, #6
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d110      	bne.n	8001af6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	438a      	bics	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	01c9      	lsls	r1, r1, #7
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b40      	cmp	r3, #64	; 0x40
 8001b02:	d007      	beq.n	8001b14 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2140      	movs	r1, #64	; 0x40
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d14e      	bne.n	8001bbe <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_SPI_Transmit+0x11a>
 8001b28:	2316      	movs	r3, #22
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d13f      	bne.n	8001bb2 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	1c9a      	adds	r2, r3, #2
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b56:	e02c      	b.n	8001bb2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d112      	bne.n	8001b8c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	881a      	ldrh	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	1c9a      	adds	r2, r3, #2
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b8a:	e012      	b.n	8001bb2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b8c:	f7fe feca 	bl	8000924 <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d802      	bhi.n	8001ba2 <HAL_SPI_Transmit+0x18a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	d102      	bne.n	8001ba8 <HAL_SPI_Transmit+0x190>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d104      	bne.n	8001bb2 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8001ba8:	231f      	movs	r3, #31
 8001baa:	18fb      	adds	r3, r7, r3
 8001bac:	2203      	movs	r2, #3
 8001bae:	701a      	strb	r2, [r3, #0]
          goto error;
 8001bb0:	e079      	b.n	8001ca6 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1cd      	bne.n	8001b58 <HAL_SPI_Transmit+0x140>
 8001bbc:	e04f      	b.n	8001c5e <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_SPI_Transmit+0x1b8>
 8001bc6:	2316      	movs	r3, #22
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d141      	bne.n	8001c54 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bf6:	e02d      	b.n	8001c54 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d113      	bne.n	8001c2e <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c2c:	e012      	b.n	8001c54 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c2e:	f7fe fe79 	bl	8000924 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d802      	bhi.n	8001c44 <HAL_SPI_Transmit+0x22c>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	d102      	bne.n	8001c4a <HAL_SPI_Transmit+0x232>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d104      	bne.n	8001c54 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8001c4a:	231f      	movs	r3, #31
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2203      	movs	r2, #3
 8001c50:	701a      	strb	r2, [r3, #0]
          goto error;
 8001c52:	e028      	b.n	8001ca6 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1cc      	bne.n	8001bf8 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 f8bb 	bl	8001de0 <SPI_EndRxTxTransaction>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2220      	movs	r2, #32
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10a      	bne.n	8001c92 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8001c9a:	231f      	movs	r3, #31
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e000      	b.n	8001ca6 <HAL_SPI_Transmit+0x28e>
  }

error:
 8001ca4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2251      	movs	r2, #81	; 0x51
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2250      	movs	r2, #80	; 0x50
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001cb6:	231f      	movs	r3, #31
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	781b      	ldrb	r3, [r3, #0]
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b008      	add	sp, #32
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001cd4:	f7fe fe26 	bl	8000924 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ce4:	f7fe fe1e 	bl	8000924 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001cec:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	015b      	lsls	r3, r3, #5
 8001cf2:	0d1b      	lsrs	r3, r3, #20
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	4353      	muls	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cfa:	e058      	b.n	8001dae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	d055      	beq.n	8001dae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d02:	f7fe fe0f 	bl	8000924 <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d902      	bls.n	8001d18 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d142      	bne.n	8001d9e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	21e0      	movs	r1, #224	; 0xe0
 8001d24:	438a      	bics	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	2382      	movs	r3, #130	; 0x82
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d113      	bne.n	8001d5c <SPI_WaitFlagStateUntilTimeout+0x98>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d005      	beq.n	8001d4c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d107      	bne.n	8001d5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	438a      	bics	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	019b      	lsls	r3, r3, #6
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d110      	bne.n	8001d8a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	491a      	ldr	r1, [pc, #104]	; (8001ddc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	0189      	lsls	r1, r1, #6
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2251      	movs	r2, #81	; 0x51
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2250      	movs	r2, #80	; 0x50
 8001d96:	2100      	movs	r1, #0
 8001d98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e017      	b.n	8001dce <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	4013      	ands	r3, r2
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	425a      	negs	r2, r3
 8001dbe:	4153      	adcs	r3, r2
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	001a      	movs	r2, r3
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d197      	bne.n	8001cfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b008      	add	sp, #32
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	ffffdfff 	.word	0xffffdfff

08001de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <SPI_EndRxTxTransaction+0x84>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	491d      	ldr	r1, [pc, #116]	; (8001e68 <SPI_EndRxTxTransaction+0x88>)
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7fe f988 	bl	8000108 <__udivsi3>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	015b      	lsls	r3, r3, #5
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	189b      	adds	r3, r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	2382      	movs	r3, #130	; 0x82
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d112      	bne.n	8001e3c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	0013      	movs	r3, r2
 8001e20:	2200      	movs	r2, #0
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	f7ff ff4e 	bl	8001cc4 <SPI_WaitFlagStateUntilTimeout>
 8001e28:	1e03      	subs	r3, r0, #0
 8001e2a:	d016      	beq.n	8001e5a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	2220      	movs	r2, #32
 8001e32:	431a      	orrs	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e00f      	b.n	8001e5c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d0f2      	beq.n	8001e3c <SPI_EndRxTxTransaction+0x5c>
 8001e56:	e000      	b.n	8001e5a <SPI_EndRxTxTransaction+0x7a>
        break;
 8001e58:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b006      	add	sp, #24
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000000 	.word	0x20000000
 8001e68:	016e3600 	.word	0x016e3600

08001e6c <__libc_init_array>:
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	2600      	movs	r6, #0
 8001e70:	4d0c      	ldr	r5, [pc, #48]	; (8001ea4 <__libc_init_array+0x38>)
 8001e72:	4c0d      	ldr	r4, [pc, #52]	; (8001ea8 <__libc_init_array+0x3c>)
 8001e74:	1b64      	subs	r4, r4, r5
 8001e76:	10a4      	asrs	r4, r4, #2
 8001e78:	42a6      	cmp	r6, r4
 8001e7a:	d109      	bne.n	8001e90 <__libc_init_array+0x24>
 8001e7c:	2600      	movs	r6, #0
 8001e7e:	f000 f821 	bl	8001ec4 <_init>
 8001e82:	4d0a      	ldr	r5, [pc, #40]	; (8001eac <__libc_init_array+0x40>)
 8001e84:	4c0a      	ldr	r4, [pc, #40]	; (8001eb0 <__libc_init_array+0x44>)
 8001e86:	1b64      	subs	r4, r4, r5
 8001e88:	10a4      	asrs	r4, r4, #2
 8001e8a:	42a6      	cmp	r6, r4
 8001e8c:	d105      	bne.n	8001e9a <__libc_init_array+0x2e>
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	00b3      	lsls	r3, r6, #2
 8001e92:	58eb      	ldr	r3, [r5, r3]
 8001e94:	4798      	blx	r3
 8001e96:	3601      	adds	r6, #1
 8001e98:	e7ee      	b.n	8001e78 <__libc_init_array+0xc>
 8001e9a:	00b3      	lsls	r3, r6, #2
 8001e9c:	58eb      	ldr	r3, [r5, r3]
 8001e9e:	4798      	blx	r3
 8001ea0:	3601      	adds	r6, #1
 8001ea2:	e7f2      	b.n	8001e8a <__libc_init_array+0x1e>
 8001ea4:	08001f00 	.word	0x08001f00
 8001ea8:	08001f00 	.word	0x08001f00
 8001eac:	08001f00 	.word	0x08001f00
 8001eb0:	08001f04 	.word	0x08001f04

08001eb4 <memset>:
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	1812      	adds	r2, r2, r0
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d100      	bne.n	8001ebe <memset+0xa>
 8001ebc:	4770      	bx	lr
 8001ebe:	7019      	strb	r1, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	e7f9      	b.n	8001eb8 <memset+0x4>

08001ec4 <_init>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eca:	bc08      	pop	{r3}
 8001ecc:	469e      	mov	lr, r3
 8001ece:	4770      	bx	lr

08001ed0 <_fini>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr
