
Ethan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a64  08003a64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a6c  08003a6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08003ae4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003ae4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a35a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a58  00000000  00000000  0002a3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002be50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013bfe  00000000  00000000  0002cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8d6  00000000  00000000  00040b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000768cb  00000000  00000000  0004c45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2d27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002388  00000000  00000000  000c2d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800399c 	.word	0x0800399c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800399c 	.word	0x0800399c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f82e 	bl	8000498 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 f8ba 	bl	8000630 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f8b5 	bl	8000630 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d433      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004d0:	465a      	mov	r2, fp
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83a      	bhi.n	800055a <__udivmoddi4+0xc2>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e078      	b.n	80005dc <__udivmoddi4+0x144>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e075      	b.n	80005e2 <__udivmoddi4+0x14a>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e028      	b.n	8000562 <__udivmoddi4+0xca>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	2320      	movs	r3, #32
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	4652      	mov	r2, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	4641      	mov	r1, r8
 8000544:	0013      	movs	r3, r2
 8000546:	464a      	mov	r2, r9
 8000548:	408a      	lsls	r2, r1
 800054a:	0017      	movs	r7, r2
 800054c:	4642      	mov	r2, r8
 800054e:	431f      	orrs	r7, r3
 8000550:	4653      	mov	r3, sl
 8000552:	4093      	lsls	r3, r2
 8000554:	001e      	movs	r6, r3
 8000556:	42af      	cmp	r7, r5
 8000558:	d9c4      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d9      	beq.n	800051c <__udivmoddi4+0x84>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	0872      	lsrs	r2, r6, #1
 800056c:	431a      	orrs	r2, r3
 800056e:	4646      	mov	r6, r8
 8000570:	087b      	lsrs	r3, r7, #1
 8000572:	e00e      	b.n	8000592 <__udivmoddi4+0xfa>
 8000574:	42ab      	cmp	r3, r5
 8000576:	d101      	bne.n	800057c <__udivmoddi4+0xe4>
 8000578:	42a2      	cmp	r2, r4
 800057a:	d80c      	bhi.n	8000596 <__udivmoddi4+0xfe>
 800057c:	1aa4      	subs	r4, r4, r2
 800057e:	419d      	sbcs	r5, r3
 8000580:	2001      	movs	r0, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2100      	movs	r1, #0
 8000588:	3e01      	subs	r6, #1
 800058a:	1824      	adds	r4, r4, r0
 800058c:	414d      	adcs	r5, r1
 800058e:	2e00      	cmp	r6, #0
 8000590:	d006      	beq.n	80005a0 <__udivmoddi4+0x108>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d9ee      	bls.n	8000574 <__udivmoddi4+0xdc>
 8000596:	3e01      	subs	r6, #1
 8000598:	1924      	adds	r4, r4, r4
 800059a:	416d      	adcs	r5, r5
 800059c:	2e00      	cmp	r6, #0
 800059e:	d1f8      	bne.n	8000592 <__udivmoddi4+0xfa>
 80005a0:	9800      	ldr	r0, [sp, #0]
 80005a2:	9901      	ldr	r1, [sp, #4]
 80005a4:	465b      	mov	r3, fp
 80005a6:	1900      	adds	r0, r0, r4
 80005a8:	4169      	adcs	r1, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db24      	blt.n	80005f8 <__udivmoddi4+0x160>
 80005ae:	002b      	movs	r3, r5
 80005b0:	465a      	mov	r2, fp
 80005b2:	4644      	mov	r4, r8
 80005b4:	40d3      	lsrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db2a      	blt.n	800061a <__udivmoddi4+0x182>
 80005c4:	0026      	movs	r6, r4
 80005c6:	409e      	lsls	r6, r3
 80005c8:	0033      	movs	r3, r6
 80005ca:	0026      	movs	r6, r4
 80005cc:	4647      	mov	r7, r8
 80005ce:	40be      	lsls	r6, r7
 80005d0:	0032      	movs	r2, r6
 80005d2:	1a80      	subs	r0, r0, r2
 80005d4:	4199      	sbcs	r1, r3
 80005d6:	9000      	str	r0, [sp, #0]
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	e79f      	b.n	800051c <__udivmoddi4+0x84>
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d8bc      	bhi.n	800055a <__udivmoddi4+0xc2>
 80005e0:	e783      	b.n	80004ea <__udivmoddi4+0x52>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	9100      	str	r1, [sp, #0]
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	e786      	b.n	8000506 <__udivmoddi4+0x6e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	4646      	mov	r6, r8
 8000602:	409a      	lsls	r2, r3
 8000604:	0023      	movs	r3, r4
 8000606:	40f3      	lsrs	r3, r6
 8000608:	4644      	mov	r4, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dad4      	bge.n	80005c4 <__udivmoddi4+0x12c>
 800061a:	4642      	mov	r2, r8
 800061c:	002f      	movs	r7, r5
 800061e:	2320      	movs	r3, #32
 8000620:	0026      	movs	r6, r4
 8000622:	4097      	lsls	r7, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40de      	lsrs	r6, r3
 8000628:	003b      	movs	r3, r7
 800062a:	4333      	orrs	r3, r6
 800062c:	e7cd      	b.n	80005ca <__udivmoddi4+0x132>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__clzdi2>:
 8000630:	b510      	push	{r4, lr}
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <__clzdi2+0xe>
 8000636:	f000 f807 	bl	8000648 <__clzsi2>
 800063a:	3020      	adds	r0, #32
 800063c:	e002      	b.n	8000644 <__clzdi2+0x14>
 800063e:	1c08      	adds	r0, r1, #0
 8000640:	f000 f802 	bl	8000648 <__clzsi2>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			; (mov r8, r8)

08000648 <__clzsi2>:
 8000648:	211c      	movs	r1, #28
 800064a:	2301      	movs	r3, #1
 800064c:	041b      	lsls	r3, r3, #16
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0xe>
 8000652:	0c00      	lsrs	r0, r0, #16
 8000654:	3910      	subs	r1, #16
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	4298      	cmp	r0, r3
 800065a:	d301      	bcc.n	8000660 <__clzsi2+0x18>
 800065c:	0a00      	lsrs	r0, r0, #8
 800065e:	3908      	subs	r1, #8
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	4298      	cmp	r0, r3
 8000664:	d301      	bcc.n	800066a <__clzsi2+0x22>
 8000666:	0900      	lsrs	r0, r0, #4
 8000668:	3904      	subs	r1, #4
 800066a:	a202      	add	r2, pc, #8	; (adr r2, 8000674 <__clzsi2+0x2c>)
 800066c:	5c10      	ldrb	r0, [r2, r0]
 800066e:	1840      	adds	r0, r0, r1
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	02020304 	.word	0x02020304
 8000678:	01010101 	.word	0x01010101
	...

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000686:	b093      	sub	sp, #76	; 0x4c
 8000688:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fbd1 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f8d9 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f9e5 	bl	8000a60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000696:	f000 f947 	bl	8000928 <MX_I2C1_Init>
  MX_USART2_Init();
 800069a:	f000 f9b3 	bl	8000a04 <MX_USART2_Init>
  MX_USART1_Init();
 800069e:	f000 f983 	bl	80009a8 <MX_USART1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t Main_ADDR = 0x55 << 1; // Use 8-bit address
 80006a2:	2336      	movs	r3, #54	; 0x36
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	22aa      	movs	r2, #170	; 0xaa
 80006a8:	801a      	strh	r2, [r3, #0]

  HAL_StatusTypeDef ret;
  HAL_StatusTypeDef ret2;

  uint8_t data[2];
  uint8_t test = 0x0C;
 80006aa:	2335      	movs	r3, #53	; 0x35
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	220c      	movs	r2, #12
 80006b0:	701a      	strb	r2, [r3, #0]
  float temp_c;
  uint8_t data2[2];

    while (1)
    {
  	  uint16_t rem = 0x0C;
 80006b2:	2132      	movs	r1, #50	; 0x32
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	220c      	movs	r2, #12
 80006b8:	801a      	strh	r2, [r3, #0]
  	  uint16_t full = 0x0E;
 80006ba:	2530      	movs	r5, #48	; 0x30
 80006bc:	197b      	adds	r3, r7, r5
 80006be:	220e      	movs	r2, #14
 80006c0:	801a      	strh	r2, [r3, #0]
      uint8_t subCommandLSB = (function & 0x00FF);
      uint8_t command[2] = {subCommandLSB, subCommandMSB};*/
      uint8_t data[2];
      uint8_t data2[2];

  	  ret = HAL_I2C_Mem_Read(&hi2c1, Main_ADDR, rem, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80006c2:	262f      	movs	r6, #47	; 0x2f
 80006c4:	19bc      	adds	r4, r7, r6
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	881a      	ldrh	r2, [r3, #0]
 80006ca:	2336      	movs	r3, #54	; 0x36
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	8819      	ldrh	r1, [r3, #0]
 80006d0:	4853      	ldr	r0, [pc, #332]	; (8000820 <main+0x19c>)
 80006d2:	2301      	movs	r3, #1
 80006d4:	425b      	negs	r3, r3
 80006d6:	9302      	str	r3, [sp, #8]
 80006d8:	2302      	movs	r3, #2
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	230c      	movs	r3, #12
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2301      	movs	r3, #1
 80006e4:	f000 ff30 	bl	8001548 <HAL_I2C_Mem_Read>
 80006e8:	0003      	movs	r3, r0
 80006ea:	7023      	strb	r3, [r4, #0]
  	  ret2 = HAL_I2C_Mem_Read(&hi2c1, Main_ADDR, full, I2C_MEMADD_SIZE_8BIT, data2, 2, HAL_MAX_DELAY);
 80006ec:	222e      	movs	r2, #46	; 0x2e
 80006ee:	18bc      	adds	r4, r7, r2
 80006f0:	197b      	adds	r3, r7, r5
 80006f2:	881a      	ldrh	r2, [r3, #0]
 80006f4:	2336      	movs	r3, #54	; 0x36
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	8819      	ldrh	r1, [r3, #0]
 80006fa:	4849      	ldr	r0, [pc, #292]	; (8000820 <main+0x19c>)
 80006fc:	2301      	movs	r3, #1
 80006fe:	425b      	negs	r3, r3
 8000700:	9302      	str	r3, [sp, #8]
 8000702:	2302      	movs	r3, #2
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	2308      	movs	r3, #8
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	f000 ff1b 	bl	8001548 <HAL_I2C_Mem_Read>
 8000712:	0003      	movs	r3, r0
 8000714:	7023      	strb	r3, [r4, #0]

  	  if ( ret != HAL_OK || ret2 != HAL_OK ) {
 8000716:	19bb      	adds	r3, r7, r6
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d104      	bne.n	8000728 <main+0xa4>
 800071e:	222e      	movs	r2, #46	; 0x2e
 8000720:	18bb      	adds	r3, r7, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <main+0xb2>
  		  HAL_USART_Transmit(&husart2, (uint8_t *) " RECEIVE ERROR", strlen(" RECEIVE ERROR"), 100);
 8000728:	493e      	ldr	r1, [pc, #248]	; (8000824 <main+0x1a0>)
 800072a:	483f      	ldr	r0, [pc, #252]	; (8000828 <main+0x1a4>)
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	220e      	movs	r2, #14
 8000730:	f002 fa4c 	bl	8002bcc <HAL_USART_Transmit>
 8000734:	e063      	b.n	80007fe <main+0x17a>
  	  }
  	  else {
  		  char bef[4] = {0,0,0,0}; //create an empty string to store number
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
  		  char aft[4] = {0,0,0,0}; //create an empty string to store number
 800073c:	003b      	movs	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
  		  uint16_t finalval = ((uint16_t) data[1] << 8) | data[0];
 8000742:	210c      	movs	r1, #12
 8000744:	187b      	adds	r3, r7, r1
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	187b      	adds	r3, r7, r1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21a      	sxth	r2, r3
 8000756:	212c      	movs	r1, #44	; 0x2c
 8000758:	187b      	adds	r3, r7, r1
 800075a:	801a      	strh	r2, [r3, #0]
  		  uint16_t finalval2 = ((uint16_t) data2[1] << 8) | data2[0];
 800075c:	2008      	movs	r0, #8
 800075e:	183b      	adds	r3, r7, r0
 8000760:	785b      	ldrb	r3, [r3, #1]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b21a      	sxth	r2, r3
 8000766:	183b      	adds	r3, r7, r0
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	b21b      	sxth	r3, r3
 800076c:	4313      	orrs	r3, r2
 800076e:	b21a      	sxth	r2, r3
 8000770:	202a      	movs	r0, #42	; 0x2a
 8000772:	183b      	adds	r3, r7, r0
 8000774:	801a      	strh	r2, [r3, #0]
  		  int stuff = 100000 * finalval / finalval2;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	4a2c      	ldr	r2, [pc, #176]	; (800082c <main+0x1a8>)
 800077c:	435a      	muls	r2, r3
 800077e:	183b      	adds	r3, r7, r0
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	0019      	movs	r1, r3
 8000784:	0010      	movs	r0, r2
 8000786:	f7ff fd53 	bl	8000230 <__divsi3>
 800078a:	0003      	movs	r3, r0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  	      sprintf(bef, "%d", stuff / 1000);
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	22fa      	movs	r2, #250	; 0xfa
 8000792:	0091      	lsls	r1, r2, #2
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff fd4b 	bl	8000230 <__divsi3>
 800079a:	0003      	movs	r3, r0
 800079c:	001a      	movs	r2, r3
 800079e:	4924      	ldr	r1, [pc, #144]	; (8000830 <main+0x1ac>)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fcd4 	bl	8003150 <siprintf>
  	      sprintf(aft, "%03d", stuff % 1000);
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	22fa      	movs	r2, #250	; 0xfa
 80007ac:	0091      	lsls	r1, r2, #2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fe24 	bl	80003fc <__aeabi_idivmod>
 80007b4:	000b      	movs	r3, r1
 80007b6:	001a      	movs	r2, r3
 80007b8:	491e      	ldr	r1, [pc, #120]	; (8000834 <main+0x1b0>)
 80007ba:	003b      	movs	r3, r7
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fcc7 	bl	8003150 <siprintf>
  		  HAL_USART_Transmit(&husart2, (uint8_t *) "BATTERY LEVEL: ", strlen("BATTERY LEVEL: "), 100);
 80007c2:	491d      	ldr	r1, [pc, #116]	; (8000838 <main+0x1b4>)
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <main+0x1a4>)
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	220f      	movs	r2, #15
 80007ca:	f002 f9ff 	bl	8002bcc <HAL_USART_Transmit>
  		  HAL_USART_Transmit(&husart2, &bef, 4, 100);
 80007ce:	1d39      	adds	r1, r7, #4
 80007d0:	4815      	ldr	r0, [pc, #84]	; (8000828 <main+0x1a4>)
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	2204      	movs	r2, #4
 80007d6:	f002 f9f9 	bl	8002bcc <HAL_USART_Transmit>
  		  HAL_USART_Transmit(&husart2, (uint8_t *) ".", strlen("."), 100);
 80007da:	4918      	ldr	r1, [pc, #96]	; (800083c <main+0x1b8>)
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <main+0x1a4>)
 80007de:	2364      	movs	r3, #100	; 0x64
 80007e0:	2201      	movs	r2, #1
 80007e2:	f002 f9f3 	bl	8002bcc <HAL_USART_Transmit>
  		  HAL_USART_Transmit(&husart2, &aft, 4, 100);
 80007e6:	0039      	movs	r1, r7
 80007e8:	480f      	ldr	r0, [pc, #60]	; (8000828 <main+0x1a4>)
 80007ea:	2364      	movs	r3, #100	; 0x64
 80007ec:	2204      	movs	r2, #4
 80007ee:	f002 f9ed 	bl	8002bcc <HAL_USART_Transmit>
  		  HAL_USART_Transmit(&husart2, (uint8_t *) "%\r\n", strlen("%\r\n"), 100);
 80007f2:	4913      	ldr	r1, [pc, #76]	; (8000840 <main+0x1bc>)
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <main+0x1a4>)
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	2203      	movs	r2, #3
 80007fa:	f002 f9e7 	bl	8002bcc <HAL_USART_Transmit>
  			  }
  			  ret2 = HAL_USART_Transmit(&husart1, finalval, sizeof(uint16_t), 100);
  			  ret2 = HAL_USART_Transmit(&husart2, finalval, sizeof(uint16_t), 100);
  		  }
  	  }*/
  	  if (ret == HAL_OK) {
 80007fe:	232f      	movs	r3, #47	; 0x2f
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d105      	bne.n	8000814 <main+0x190>
  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2120      	movs	r1, #32
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fde9 	bl	80013e6 <HAL_GPIO_TogglePin>
  	  }
	  HAL_Delay(1000);
 8000814:	23fa      	movs	r3, #250	; 0xfa
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fb79 	bl	8000f10 <HAL_Delay>
    {
 800081e:	e748      	b.n	80006b2 <main+0x2e>
 8000820:	20000098 	.word	0x20000098
 8000824:	080039b4 	.word	0x080039b4
 8000828:	200000e4 	.word	0x200000e4
 800082c:	000186a0 	.word	0x000186a0
 8000830:	080039c4 	.word	0x080039c4
 8000834:	080039c8 	.word	0x080039c8
 8000838:	080039d0 	.word	0x080039d0
 800083c:	080039e0 	.word	0x080039e0
 8000840:	080039e4 	.word	0x080039e4

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b09d      	sub	sp, #116	; 0x74
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	2438      	movs	r4, #56	; 0x38
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0018      	movs	r0, r3
 8000850:	2338      	movs	r3, #56	; 0x38
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f002 fc73 	bl	8003140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085a:	2324      	movs	r3, #36	; 0x24
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	0018      	movs	r0, r3
 8000860:	2314      	movs	r3, #20
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f002 fc6b 	bl	8003140 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086a:	003b      	movs	r3, r7
 800086c:	0018      	movs	r0, r3
 800086e:	2324      	movs	r3, #36	; 0x24
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f002 fc64 	bl	8003140 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <SystemClock_Config+0xdc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a29      	ldr	r2, [pc, #164]	; (8000924 <SystemClock_Config+0xe0>)
 800087e:	401a      	ands	r2, r3
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <SystemClock_Config+0xdc>)
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	0109      	lsls	r1, r1, #4
 8000886:	430a      	orrs	r2, r1
 8000888:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800088a:	0021      	movs	r1, r4
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2210      	movs	r2, #16
 8000890:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2201      	movs	r2, #1
 8000896:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	22a0      	movs	r2, #160	; 0xa0
 80008a2:	0212      	lsls	r2, r2, #8
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 f9f0 	bl	8001c94 <HAL_RCC_OscConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008b8:	f000 f942 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	2124      	movs	r1, #36	; 0x24
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	220f      	movs	r2, #15
 80008c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2100      	movs	r1, #0
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 fd9b 	bl	800241c <HAL_RCC_ClockConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008ea:	f000 f929 	bl	8000b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80008ee:	003b      	movs	r3, r7
 80008f0:	220b      	movs	r2, #11
 80008f2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f4:	003b      	movs	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000900:	003b      	movs	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	003b      	movs	r3, r7
 8000908:	0018      	movs	r0, r3
 800090a:	f001 ffab 	bl	8002864 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000912:	f000 f915 	bl	8000b40 <Error_Handler>
  }
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b01d      	add	sp, #116	; 0x74
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40007000 	.word	0x40007000
 8000924:	ffffe7ff 	.word	0xffffe7ff

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_I2C1_Init+0x78>)
 800092e:	4a1d      	ldr	r2, [pc, #116]	; (80009a4 <MX_I2C1_Init+0x7c>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000934:	22e1      	movs	r2, #225	; 0xe1
 8000936:	00d2      	lsls	r2, r2, #3
 8000938:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_I2C1_Init+0x78>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000942:	2201      	movs	r2, #1
 8000944:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_I2C1_Init+0x78>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_I2C1_Init+0x78>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fd58 	bl	800141c <HAL_I2C_Init>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 f8e6 	bl	8000b40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000976:	2100      	movs	r1, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f001 f8f3 	bl	8001b64 <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000982:	f000 f8dd 	bl	8000b40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000988:	2100      	movs	r1, #0
 800098a:	0018      	movs	r0, r3
 800098c:	f001 f936 	bl	8001bfc <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000994:	f000 f8d4 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	20000098 	.word	0x20000098
 80009a4:	40005400 	.word	0x40005400

080009a8 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART1_Init+0x54>)
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <MX_USART1_Init+0x58>)
 80009b0:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_USART1_Init+0x54>)
 80009b4:	22e1      	movs	r2, #225	; 0xe1
 80009b6:	0252      	lsls	r2, r2, #9
 80009b8:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART1_Init+0x54>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART1_Init+0x54>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_USART1_Init+0x54>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART1_Init+0x54>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_USART1_Init+0x54>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART1_Init+0x54>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_USART1_Init+0x54>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_USART1_Init+0x54>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 f8a0 	bl	8002b2c <HAL_USART_Init>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f8a6 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000134 	.word	0x20000134
 8000a00:	40013800 	.word	0x40013800

08000a04 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a0a:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <MX_USART2_Init+0x58>)
 8000a0c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a10:	22e1      	movs	r2, #225	; 0xe1
 8000a12:	0252      	lsls	r2, r2, #9
 8000a14:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <MX_USART2_Init+0x54>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 f872 	bl	8002b2c <HAL_USART_Init>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000a4c:	f000 f878 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	200000e4 	.word	0x200000e4
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b08b      	sub	sp, #44	; 0x2c
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	2414      	movs	r4, #20
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2314      	movs	r3, #20
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f002 fb65 	bl	8003140 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	2204      	movs	r2, #4
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	430a      	orrs	r2, r1
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	2202      	movs	r2, #2
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	23a0      	movs	r3, #160	; 0xa0
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fc64 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	0192      	lsls	r2, r2, #6
 8000aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <MX_GPIO_Init+0xd8>)
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <MX_GPIO_Init+0xdc>)
 8000afc:	0019      	movs	r1, r3
 8000afe:	0010      	movs	r0, r2
 8000b00:	f000 fade 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b04:	0021      	movs	r1, r4
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2220      	movs	r2, #32
 8000b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2201      	movs	r2, #1
 8000b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	187a      	adds	r2, r7, r1
 8000b20:	23a0      	movs	r3, #160	; 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 faca 	bl	80010c0 <HAL_GPIO_Init>

}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b00b      	add	sp, #44	; 0x2c
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	10210000 	.word	0x10210000
 8000b3c:	50000800 	.word	0x50000800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <HAL_MspInit+0x24>)
 8000b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x24>)
 8000b56:	2101      	movs	r1, #1
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_MspInit+0x24>)
 8000b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_MspInit+0x24>)
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0549      	lsls	r1, r1, #21
 8000b66:	430a      	orrs	r2, r1
 8000b68:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	240c      	movs	r4, #12
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f002 fada 	bl	8003140 <memset>
  if(hi2c->Instance==I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_I2C_MspInit+0x80>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d129      	bne.n	8000bea <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	22c0      	movs	r2, #192	; 0xc0
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	0021      	movs	r1, r4
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2212      	movs	r2, #18
 8000bbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2204      	movs	r2, #4
 8000bce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	f000 fa72 	bl	80010c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	0389      	lsls	r1, r1, #14
 8000be6:	430a      	orrs	r2, r1
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b009      	add	sp, #36	; 0x24
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000400 	.word	0x50000400

08000c00 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08b      	sub	sp, #44	; 0x2c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	2414      	movs	r4, #20
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2314      	movs	r3, #20
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f002 fa94 	bl	8003140 <memset>
  if(husart->Instance==USART1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a41      	ldr	r2, [pc, #260]	; (8000d24 <HAL_USART_MspInit+0x124>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d14c      	bne.n	8000cbc <HAL_USART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c22:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c26:	4b40      	ldr	r3, [pc, #256]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	01c9      	lsls	r1, r1, #7
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c34:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c3c:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	2201      	movs	r2, #1
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000c4e:	2102      	movs	r1, #2
 8000c50:	430a      	orrs	r2, r1
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c54:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	2202      	movs	r2, #2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	0052      	lsls	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2203      	movs	r2, #3
 8000c78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	193a      	adds	r2, r7, r4
 8000c82:	23a0      	movs	r3, #160	; 0xa0
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fa19 	bl	80010c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8e:	0021      	movs	r1, r4
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	22c0      	movs	r2, #192	; 0xc0
 8000c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2202      	movs	r2, #2
 8000c9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <HAL_USART_MspInit+0x12c>)
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	0010      	movs	r0, r2
 8000cb6:	f000 fa03 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cba:	e02e      	b.n	8000d1a <HAL_USART_MspInit+0x11a>
  else if(husart->Instance==USART2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_USART_MspInit+0x130>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d129      	bne.n	8000d1a <HAL_USART_MspInit+0x11a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	0289      	lsls	r1, r1, #10
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_USART_MspInit+0x128>)
 8000ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000cec:	2114      	movs	r1, #20
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	221c      	movs	r2, #28
 8000cf2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2203      	movs	r2, #3
 8000d04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2204      	movs	r2, #4
 8000d0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	187a      	adds	r2, r7, r1
 8000d0e:	23a0      	movs	r3, #160	; 0xa0
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	0011      	movs	r1, r2
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 f9d3 	bl	80010c0 <HAL_GPIO_Init>
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b00b      	add	sp, #44	; 0x2c
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40013800 	.word	0x40013800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	50000400 	.word	0x50000400
 8000d30:	40004400 	.word	0x40004400

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f8be 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f002 f9aa 	bl	80030ec <__errno>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	425b      	negs	r3, r3
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	18d2      	adds	r2, r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b006      	add	sp, #24
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20002000 	.word	0x20002000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	2000008c 	.word	0x2000008c
 8000dcc:	20000198 	.word	0x20000198

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e06:	f7ff ffe3 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f002 f975 	bl	80030f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fc39 	bl	8000684 <main>

08000e12 <LoopForever>:

LoopForever:
    b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   r0, =_estack
 8000e14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e20:	08003a74 	.word	0x08003a74
  ldr r2, =_sbss
 8000e24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e28:	20000198 	.word	0x20000198

08000e2c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_COMP_IRQHandler>
	...

08000e30 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_Init+0x3c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Init+0x3c>)
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 f811 	bl	8000e70 <HAL_InitTick>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	e001      	b.n	8000e5e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5a:	f7ff fe77 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_InitTick+0x5c>)
 8000e7a:	681c      	ldr	r4, [r3, #0]
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_InitTick+0x60>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	0019      	movs	r1, r3
 8000e82:	23fa      	movs	r3, #250	; 0xfa
 8000e84:	0098      	lsls	r0, r3, #2
 8000e86:	f7ff f949 	bl	800011c <__udivsi3>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	0020      	movs	r0, r4
 8000e90:	f7ff f944 	bl	800011c <__udivsi3>
 8000e94:	0003      	movs	r3, r0
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f905 	bl	80010a6 <HAL_SYSTICK_Config>
 8000e9c:	1e03      	subs	r3, r0, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e00f      	b.n	8000ec4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d80b      	bhi.n	8000ec2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	2301      	movs	r3, #1
 8000eae:	425b      	negs	r3, r3
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f8e2 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_InitTick+0x64>)
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b003      	add	sp, #12
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	18d2      	adds	r2, r2, r3
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_IncTick+0x20>)
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000184 	.word	0x20000184

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <HAL_GetTick+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20000184 	.word	0x20000184

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff fff0 	bl	8000efc <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	001a      	movs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	189b      	adds	r3, r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	f7ff ffe0 	bl	8000efc <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6c:	d828      	bhi.n	8000fc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	; (800102c <__NVIC_SetPriority+0xd4>)
 8000f70:	1dfb      	adds	r3, r7, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	33c0      	adds	r3, #192	; 0xc0
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	589b      	ldr	r3, [r3, r2]
 8000f7e:	1dfa      	adds	r2, r7, #7
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	0011      	movs	r1, r2
 8000f84:	2203      	movs	r2, #3
 8000f86:	400a      	ands	r2, r1
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	21ff      	movs	r1, #255	; 0xff
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	000a      	movs	r2, r1
 8000f90:	43d2      	mvns	r2, r2
 8000f92:	401a      	ands	r2, r3
 8000f94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	019b      	lsls	r3, r3, #6
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	4003      	ands	r3, r0
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fac:	481f      	ldr	r0, [pc, #124]	; (800102c <__NVIC_SetPriority+0xd4>)
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	33c0      	adds	r3, #192	; 0xc0
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fbe:	e031      	b.n	8001024 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <__NVIC_SetPriority+0xd8>)
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	230f      	movs	r3, #15
 8000fca:	400b      	ands	r3, r1
 8000fcc:	3b08      	subs	r3, #8
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3306      	adds	r3, #6
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	18d3      	adds	r3, r2, r3
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1dfa      	adds	r2, r7, #7
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	0011      	movs	r1, r2
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	00d2      	lsls	r2, r2, #3
 8000fe6:	21ff      	movs	r1, #255	; 0xff
 8000fe8:	4091      	lsls	r1, r2
 8000fea:	000a      	movs	r2, r1
 8000fec:	43d2      	mvns	r2, r2
 8000fee:	401a      	ands	r2, r3
 8000ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	019b      	lsls	r3, r3, #6
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	0018      	movs	r0, r3
 8001000:	2303      	movs	r3, #3
 8001002:	4003      	ands	r3, r0
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <__NVIC_SetPriority+0xd8>)
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	001c      	movs	r4, r3
 8001010:	230f      	movs	r3, #15
 8001012:	4023      	ands	r3, r4
 8001014:	3b08      	subs	r3, #8
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	430a      	orrs	r2, r1
 800101a:	3306      	adds	r3, #6
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	18c3      	adds	r3, r0, r3
 8001020:	3304      	adds	r3, #4
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b003      	add	sp, #12
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	045b      	lsls	r3, r3, #17
 8001044:	429a      	cmp	r2, r3
 8001046:	d301      	bcc.n	800104c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001048:	2301      	movs	r3, #1
 800104a:	e010      	b.n	800106e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <SysTick_Config+0x44>)
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	3a01      	subs	r2, #1
 8001052:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001054:	2301      	movs	r3, #1
 8001056:	425b      	negs	r3, r3
 8001058:	2103      	movs	r1, #3
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff ff7c 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x44>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x44>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	210f      	movs	r1, #15
 8001088:	187b      	adds	r3, r7, r1
 800108a:	1c02      	adds	r2, r0, #0
 800108c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	187b      	adds	r3, r7, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ffbf 	bl	8001034 <SysTick_Config>
 80010b6:	0003      	movs	r3, r0
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010d6:	e14f      	b.n	8001378 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4091      	lsls	r1, r2
 80010e2:	000a      	movs	r2, r1
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d100      	bne.n	80010f0 <HAL_GPIO_Init+0x30>
 80010ee:	e140      	b.n	8001372 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d00b      	beq.n	8001110 <HAL_GPIO_Init+0x50>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d007      	beq.n	8001110 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001104:	2b11      	cmp	r3, #17
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b12      	cmp	r3, #18
 800110e:	d130      	bne.n	8001172 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	409a      	lsls	r2, r3
 800111e:	0013      	movs	r3, r2
 8001120:	43da      	mvns	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	409a      	lsls	r2, r3
 8001132:	0013      	movs	r3, r2
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001146:	2201      	movs	r2, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	2201      	movs	r2, #1
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	409a      	lsls	r2, r3
 8001180:	0013      	movs	r3, r2
 8001182:	43da      	mvns	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0xf2>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d123      	bne.n	80011fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	58d3      	ldr	r3, [r2, r3]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2207      	movs	r2, #7
 80011c4:	4013      	ands	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2107      	movs	r1, #7
 80011de:	400b      	ands	r3, r1
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	6939      	ldr	r1, [r7, #16]
 80011f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	43da      	mvns	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2203      	movs	r2, #3
 8001218:	401a      	ands	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	055b      	lsls	r3, r3, #21
 8001236:	4013      	ands	r3, r2
 8001238:	d100      	bne.n	800123c <HAL_GPIO_Init+0x17c>
 800123a:	e09a      	b.n	8001372 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123c:	4b54      	ldr	r3, [pc, #336]	; (8001390 <HAL_GPIO_Init+0x2d0>)
 800123e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001240:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_GPIO_Init+0x2d0>)
 8001242:	2101      	movs	r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001248:	4a52      	ldr	r2, [pc, #328]	; (8001394 <HAL_GPIO_Init+0x2d4>)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	589b      	ldr	r3, [r3, r2]
 8001254:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2203      	movs	r2, #3
 800125a:	4013      	ands	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	409a      	lsls	r2, r3
 8001262:	0013      	movs	r3, r2
 8001264:	43da      	mvns	r2, r3
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	23a0      	movs	r3, #160	; 0xa0
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	429a      	cmp	r2, r3
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x1ea>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a47      	ldr	r2, [pc, #284]	; (8001398 <HAL_GPIO_Init+0x2d8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x1e6>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a46      	ldr	r2, [pc, #280]	; (800139c <HAL_GPIO_Init+0x2dc>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x1e2>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a45      	ldr	r2, [pc, #276]	; (80013a0 <HAL_GPIO_Init+0x2e0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x1de>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a44      	ldr	r2, [pc, #272]	; (80013a4 <HAL_GPIO_Init+0x2e4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x1da>
 8001296:	2305      	movs	r3, #5
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x1ec>
 800129a:	2306      	movs	r3, #6
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x1ec>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x1ec>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x1ec>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x1ec>
 80012aa:	2300      	movs	r3, #0
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	2103      	movs	r1, #3
 80012b0:	400a      	ands	r2, r1
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	; (8001394 <HAL_GPIO_Init+0x2d4>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ca:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	025b      	lsls	r3, r3, #9
 80012e2:	4013      	ands	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012f4:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	4013      	ands	r3, r2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43da      	mvns	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	035b      	lsls	r3, r3, #13
 8001336:	4013      	ands	r3, r2
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43da      	mvns	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	039b      	lsls	r3, r3, #14
 8001360:	4013      	ands	r3, r2
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_GPIO_Init+0x2e8>)
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	40da      	lsrs	r2, r3
 8001380:	1e13      	subs	r3, r2, #0
 8001382:	d000      	beq.n	8001386 <HAL_GPIO_Init+0x2c6>
 8001384:	e6a8      	b.n	80010d8 <HAL_GPIO_Init+0x18>
  }
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b006      	add	sp, #24
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	50000400 	.word	0x50000400
 800139c:	50000800 	.word	0x50000800
 80013a0:	50000c00 	.word	0x50000c00
 80013a4:	50001c00 	.word	0x50001c00
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	0008      	movs	r0, r1
 80013b6:	0011      	movs	r1, r2
 80013b8:	1cbb      	adds	r3, r7, #2
 80013ba:	1c02      	adds	r2, r0, #0
 80013bc:	801a      	strh	r2, [r3, #0]
 80013be:	1c7b      	adds	r3, r7, #1
 80013c0:	1c0a      	adds	r2, r1, #0
 80013c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c4:	1c7b      	adds	r3, r7, #1
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013cc:	1cbb      	adds	r3, r7, #2
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013d6:	1cbb      	adds	r3, r7, #2
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	000a      	movs	r2, r1
 80013f0:	1cbb      	adds	r3, r7, #2
 80013f2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fa:	1cbb      	adds	r3, r7, #2
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	041a      	lsls	r2, r3, #16
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	1cb9      	adds	r1, r7, #2
 800140a:	8809      	ldrh	r1, [r1, #0]
 800140c:	400b      	ands	r3, r1
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b004      	add	sp, #16
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e082      	b.n	8001534 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2241      	movs	r2, #65	; 0x41
 8001432:	5c9b      	ldrb	r3, [r3, r2]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d107      	bne.n	800144a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2240      	movs	r2, #64	; 0x40
 800143e:	2100      	movs	r1, #0
 8001440:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff fb95 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2241      	movs	r2, #65	; 0x41
 800144e:	2124      	movs	r1, #36	; 0x24
 8001450:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	438a      	bics	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4934      	ldr	r1, [pc, #208]	; (800153c <HAL_I2C_Init+0x120>)
 800146c:	400a      	ands	r2, r1
 800146e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4931      	ldr	r1, [pc, #196]	; (8001540 <HAL_I2C_Init+0x124>)
 800147c:	400a      	ands	r2, r1
 800147e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0209      	lsls	r1, r1, #8
 8001494:	430a      	orrs	r2, r1
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e007      	b.n	80014aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2184      	movs	r1, #132	; 0x84
 80014a4:	0209      	lsls	r1, r1, #8
 80014a6:	430a      	orrs	r2, r1
 80014a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d104      	bne.n	80014bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	491f      	ldr	r1, [pc, #124]	; (8001544 <HAL_I2C_Init+0x128>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	491a      	ldr	r1, [pc, #104]	; (8001540 <HAL_I2C_Init+0x124>)
 80014d8:	400a      	ands	r2, r1
 80014da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	0011      	movs	r1, r2
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	021a      	lsls	r2, r3, #8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69d9      	ldr	r1, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1a      	ldr	r2, [r3, #32]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2241      	movs	r2, #65	; 0x41
 8001520:	2120      	movs	r1, #32
 8001522:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2242      	movs	r2, #66	; 0x42
 800152e:	2100      	movs	r1, #0
 8001530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}
 800153c:	f0ffffff 	.word	0xf0ffffff
 8001540:	ffff7fff 	.word	0xffff7fff
 8001544:	02008000 	.word	0x02008000

08001548 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	000c      	movs	r4, r1
 8001552:	0010      	movs	r0, r2
 8001554:	0019      	movs	r1, r3
 8001556:	230a      	movs	r3, #10
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	1c22      	adds	r2, r4, #0
 800155c:	801a      	strh	r2, [r3, #0]
 800155e:	2308      	movs	r3, #8
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	801a      	strh	r2, [r3, #0]
 8001566:	1dbb      	adds	r3, r7, #6
 8001568:	1c0a      	adds	r2, r1, #0
 800156a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2241      	movs	r2, #65	; 0x41
 8001570:	5c9b      	ldrb	r3, [r3, r2]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b20      	cmp	r3, #32
 8001576:	d000      	beq.n	800157a <HAL_I2C_Mem_Read+0x32>
 8001578:	e110      	b.n	800179c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <HAL_I2C_Mem_Read+0x42>
 8001580:	232c      	movs	r3, #44	; 0x2c
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e103      	b.n	800179e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2240      	movs	r2, #64	; 0x40
 800159a:	5c9b      	ldrb	r3, [r3, r2]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_I2C_Mem_Read+0x5c>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e0fc      	b.n	800179e <HAL_I2C_Mem_Read+0x256>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2240      	movs	r2, #64	; 0x40
 80015a8:	2101      	movs	r1, #1
 80015aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015ac:	f7ff fca6 	bl	8000efc <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	0219      	lsls	r1, r3, #8
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2319      	movs	r3, #25
 80015c0:	2201      	movs	r2, #1
 80015c2:	f000 f979 	bl	80018b8 <I2C_WaitOnFlagUntilTimeout>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0e7      	b.n	800179e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2241      	movs	r2, #65	; 0x41
 80015d2:	2122      	movs	r1, #34	; 0x22
 80015d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2242      	movs	r2, #66	; 0x42
 80015da:	2140      	movs	r1, #64	; 0x40
 80015dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	222c      	movs	r2, #44	; 0x2c
 80015ee:	18ba      	adds	r2, r7, r2
 80015f0:	8812      	ldrh	r2, [r2, #0]
 80015f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015fa:	1dbb      	adds	r3, r7, #6
 80015fc:	881c      	ldrh	r4, [r3, #0]
 80015fe:	2308      	movs	r3, #8
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	881a      	ldrh	r2, [r3, #0]
 8001604:	230a      	movs	r3, #10
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	8819      	ldrh	r1, [r3, #0]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	0023      	movs	r3, r4
 8001616:	f000 f8cb 	bl	80017b0 <I2C_RequestMemoryRead>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d005      	beq.n	800162a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	2100      	movs	r1, #0
 8001624:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0b9      	b.n	800179e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	2bff      	cmp	r3, #255	; 0xff
 8001632:	d911      	bls.n	8001658 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	22ff      	movs	r2, #255	; 0xff
 8001638:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163e:	b2da      	uxtb	r2, r3
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	045c      	lsls	r4, r3, #17
 8001644:	230a      	movs	r3, #10
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	8819      	ldrh	r1, [r3, #0]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <HAL_I2C_Mem_Read+0x260>)
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	0023      	movs	r3, r4
 8001652:	f000 fa51 	bl	8001af8 <I2C_TransferConfig>
 8001656:	e012      	b.n	800167e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	b2da      	uxtb	r2, r3
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	049c      	lsls	r4, r3, #18
 800166c:	230a      	movs	r3, #10
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	8819      	ldrh	r1, [r3, #0]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_I2C_Mem_Read+0x260>)
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	0023      	movs	r3, r4
 800167a:	f000 fa3d 	bl	8001af8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800167e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	0013      	movs	r3, r2
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	f000 f914 	bl	80018b8 <I2C_WaitOnFlagUntilTimeout>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e082      	b.n	800179e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d03a      	beq.n	800174a <HAL_I2C_Mem_Read+0x202>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d136      	bne.n	800174a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	0013      	movs	r3, r2
 80016e6:	2200      	movs	r2, #0
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	f000 f8e5 	bl	80018b8 <I2C_WaitOnFlagUntilTimeout>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e053      	b.n	800179e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d911      	bls.n	8001724 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	22ff      	movs	r2, #255	; 0xff
 8001704:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170a:	b2da      	uxtb	r2, r3
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	045c      	lsls	r4, r3, #17
 8001710:	230a      	movs	r3, #10
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	8819      	ldrh	r1, [r3, #0]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	2300      	movs	r3, #0
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	0023      	movs	r3, r4
 800171e:	f000 f9eb 	bl	8001af8 <I2C_TransferConfig>
 8001722:	e012      	b.n	800174a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001732:	b2da      	uxtb	r2, r3
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	049c      	lsls	r4, r3, #18
 8001738:	230a      	movs	r3, #10
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	8819      	ldrh	r1, [r3, #0]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	2300      	movs	r3, #0
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	0023      	movs	r3, r4
 8001746:	f000 f9d7 	bl	8001af8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174e:	b29b      	uxth	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d194      	bne.n	800167e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	0018      	movs	r0, r3
 800175c:	f000 f92a 	bl	80019b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e01a      	b.n	800179e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2220      	movs	r2, #32
 800176e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	490c      	ldr	r1, [pc, #48]	; (80017ac <HAL_I2C_Mem_Read+0x264>)
 800177c:	400a      	ands	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2241      	movs	r2, #65	; 0x41
 8001784:	2120      	movs	r1, #32
 8001786:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2242      	movs	r2, #66	; 0x42
 800178c:	2100      	movs	r1, #0
 800178e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2240      	movs	r2, #64	; 0x40
 8001794:	2100      	movs	r1, #0
 8001796:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	e000      	b.n	800179e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800179c:	2302      	movs	r3, #2
  }
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b007      	add	sp, #28
 80017a4:	bd90      	pop	{r4, r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	80002400 	.word	0x80002400
 80017ac:	fe00e800 	.word	0xfe00e800

080017b0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	000c      	movs	r4, r1
 80017ba:	0010      	movs	r0, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	250a      	movs	r5, #10
 80017c0:	197b      	adds	r3, r7, r5
 80017c2:	1c22      	adds	r2, r4, #0
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	2308      	movs	r3, #8
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	1c02      	adds	r2, r0, #0
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	1dbb      	adds	r3, r7, #6
 80017d0:	1c0a      	adds	r2, r1, #0
 80017d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80017d4:	1dbb      	adds	r3, r7, #6
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	197b      	adds	r3, r7, r5
 80017dc:	8819      	ldrh	r1, [r3, #0]
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	4b23      	ldr	r3, [pc, #140]	; (8001870 <I2C_RequestMemoryRead+0xc0>)
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	f000 f987 	bl	8001af8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	6a39      	ldr	r1, [r7, #32]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 f8a0 	bl	8001936 <I2C_WaitOnTXISFlagUntilTimeout>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d001      	beq.n	80017fe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e033      	b.n	8001866 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001806:	2308      	movs	r3, #8
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
 8001814:	e019      	b.n	800184a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001816:	2308      	movs	r3, #8
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182a:	6a39      	ldr	r1, [r7, #32]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	0018      	movs	r0, r3
 8001830:	f000 f881 	bl	8001936 <I2C_WaitOnTXISFlagUntilTimeout>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e014      	b.n	8001866 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800183c:	2308      	movs	r3, #8
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	0013      	movs	r3, r2
 8001854:	2200      	movs	r2, #0
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	f000 f82e 	bl	80018b8 <I2C_WaitOnFlagUntilTimeout>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d001      	beq.n	8001864 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bdb0      	pop	{r4, r5, r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	80002000 	.word	0x80002000

08001874 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	2b02      	cmp	r3, #2
 8001888:	d103      	bne.n	8001892 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2201      	movs	r2, #1
 800189a:	4013      	ands	r3, r2
 800189c:	2b01      	cmp	r3, #1
 800189e:	d007      	beq.n	80018b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699a      	ldr	r2, [r3, #24]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	619a      	str	r2, [r3, #24]
  }
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	1dfb      	adds	r3, r7, #7
 80018c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018c8:	e021      	b.n	800190e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	d01e      	beq.n	800190e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d0:	f7ff fb14 	bl	8000efc <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d302      	bcc.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d113      	bne.n	800190e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	2220      	movs	r2, #32
 80018ec:	431a      	orrs	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2241      	movs	r2, #65	; 0x41
 80018f6:	2120      	movs	r1, #32
 80018f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2242      	movs	r2, #66	; 0x42
 80018fe:	2100      	movs	r1, #0
 8001900:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2240      	movs	r2, #64	; 0x40
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4013      	ands	r3, r2
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	425a      	negs	r2, r3
 800191e:	4153      	adcs	r3, r2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	001a      	movs	r2, r3
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d0ce      	beq.n	80018ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b004      	add	sp, #16
 8001934:	bd80      	pop	{r7, pc}

08001936 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001942:	e02b      	b.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	0018      	movs	r0, r3
 800194c:	f000 f86e 	bl	8001a2c <I2C_IsAcknowledgeFailed>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e029      	b.n	80019ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	3301      	adds	r3, #1
 800195c:	d01e      	beq.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195e:	f7ff facd 	bl	8000efc <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	429a      	cmp	r2, r3
 800196c:	d302      	bcc.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d113      	bne.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	2220      	movs	r2, #32
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2241      	movs	r2, #65	; 0x41
 8001984:	2120      	movs	r1, #32
 8001986:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2242      	movs	r2, #66	; 0x42
 800198c:	2100      	movs	r1, #0
 800198e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e007      	b.n	80019ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d1cc      	bne.n	8001944 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019c0:	e028      	b.n	8001a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 f82f 	bl	8001a2c <I2C_IsAcknowledgeFailed>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e026      	b.n	8001a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d6:	f7ff fa91 	bl	8000efc <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d302      	bcc.n	80019ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d113      	bne.n	8001a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	2220      	movs	r2, #32
 80019f2:	431a      	orrs	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	2120      	movs	r1, #32
 80019fe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2242      	movs	r2, #66	; 0x42
 8001a04:	2100      	movs	r1, #0
 8001a06:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e007      	b.n	8001a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d1cf      	bne.n	80019c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b004      	add	sp, #16
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2210      	movs	r2, #16
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d151      	bne.n	8001aea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a46:	e021      	b.n	8001a8c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	d01e      	beq.n	8001a8c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4e:	f7ff fa55 	bl	8000efc <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d302      	bcc.n	8001a64 <I2C_IsAcknowledgeFailed+0x38>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d113      	bne.n	8001a8c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	2220      	movs	r2, #32
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2241      	movs	r2, #65	; 0x41
 8001a74:	2120      	movs	r1, #32
 8001a76:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2242      	movs	r2, #66	; 0x42
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e02f      	b.n	8001aec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2220      	movs	r2, #32
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d1d6      	bne.n	8001a48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff fee1 	bl	8001874 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	490d      	ldr	r1, [pc, #52]	; (8001af4 <I2C_IsAcknowledgeFailed+0xc8>)
 8001abe:	400a      	ands	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2241      	movs	r2, #65	; 0x41
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2242      	movs	r2, #66	; 0x42
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2240      	movs	r2, #64	; 0x40
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b004      	add	sp, #16
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	fe00e800 	.word	0xfe00e800

08001af8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	0008      	movs	r0, r1
 8001b02:	0011      	movs	r1, r2
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	240a      	movs	r4, #10
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	1c02      	adds	r2, r0, #0
 8001b0c:	801a      	strh	r2, [r3, #0]
 8001b0e:	2009      	movs	r0, #9
 8001b10:	183b      	adds	r3, r7, r0
 8001b12:	1c0a      	adds	r2, r1, #0
 8001b14:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	0d51      	lsrs	r1, r2, #21
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	00d2      	lsls	r2, r2, #3
 8001b24:	400a      	ands	r2, r1
 8001b26:	490e      	ldr	r1, [pc, #56]	; (8001b60 <I2C_TransferConfig+0x68>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	43d2      	mvns	r2, r2
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	0011      	movs	r1, r2
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	059b      	lsls	r3, r3, #22
 8001b36:	0d9a      	lsrs	r2, r3, #22
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	0418      	lsls	r0, r3, #16
 8001b3e:	23ff      	movs	r3, #255	; 0xff
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	4003      	ands	r3, r0
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b005      	add	sp, #20
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	03ff63ff 	.word	0x03ff63ff

08001b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2241      	movs	r2, #65	; 0x41
 8001b72:	5c9b      	ldrb	r3, [r3, r2]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d138      	bne.n	8001bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2240      	movs	r2, #64	; 0x40
 8001b7e:	5c9b      	ldrb	r3, [r3, r2]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e032      	b.n	8001bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2240      	movs	r2, #64	; 0x40
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2241      	movs	r2, #65	; 0x41
 8001b94:	2124      	movs	r1, #36	; 0x24
 8001b96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4911      	ldr	r1, [pc, #68]	; (8001bf8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2241      	movs	r2, #65	; 0x41
 8001bdc:	2120      	movs	r1, #32
 8001bde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2240      	movs	r2, #64	; 0x40
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e000      	b.n	8001bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
  }
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	ffffefff 	.word	0xffffefff

08001bfc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2241      	movs	r2, #65	; 0x41
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d139      	bne.n	8001c86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2240      	movs	r2, #64	; 0x40
 8001c16:	5c9b      	ldrb	r3, [r3, r2]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e033      	b.n	8001c88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	2101      	movs	r1, #1
 8001c26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2241      	movs	r2, #65	; 0x41
 8001c2c:	2124      	movs	r1, #36	; 0x24
 8001c2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2241      	movs	r2, #65	; 0x41
 8001c76:	2120      	movs	r1, #32
 8001c78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2240      	movs	r2, #64	; 0x40
 8001c7e:	2100      	movs	r1, #0
 8001c80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c86:	2302      	movs	r3, #2
  }
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b004      	add	sp, #16
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	fffff0ff 	.word	0xfffff0ff

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f000 fbaf 	bl	8002406 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca8:	4bcf      	ldr	r3, [pc, #828]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	220c      	movs	r2, #12
 8001cae:	4013      	ands	r3, r2
 8001cb0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb2:	4bcd      	ldr	r3, [pc, #820]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	025b      	lsls	r3, r3, #9
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d100      	bne.n	8001cca <HAL_RCC_OscConfig+0x36>
 8001cc8:	e07e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d007      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d112      	bne.n	8001cfc <HAL_RCC_OscConfig+0x68>
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d10d      	bne.n	8001cfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4bc1      	ldr	r3, [pc, #772]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	029b      	lsls	r3, r3, #10
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d100      	bne.n	8001cee <HAL_RCC_OscConfig+0x5a>
 8001cec:	e06b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x132>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d167      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f000 fb85 	bl	8002406 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	025b      	lsls	r3, r3, #9
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x84>
 8001d08:	4bb7      	ldr	r3, [pc, #732]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4bb6      	ldr	r3, [pc, #728]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	0249      	lsls	r1, r1, #9
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e027      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	23a0      	movs	r3, #160	; 0xa0
 8001d1e:	02db      	lsls	r3, r3, #11
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10e      	bne.n	8001d42 <HAL_RCC_OscConfig+0xae>
 8001d24:	4bb0      	ldr	r3, [pc, #704]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4baf      	ldr	r3, [pc, #700]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	02c9      	lsls	r1, r1, #11
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	4bad      	ldr	r3, [pc, #692]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4bac      	ldr	r3, [pc, #688]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0249      	lsls	r1, r1, #9
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e012      	b.n	8001d68 <HAL_RCC_OscConfig+0xd4>
 8001d42:	4ba9      	ldr	r3, [pc, #676]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4ba8      	ldr	r3, [pc, #672]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d48:	49a8      	ldr	r1, [pc, #672]	; (8001fec <HAL_RCC_OscConfig+0x358>)
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	4ba6      	ldr	r3, [pc, #664]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	025b      	lsls	r3, r3, #9
 8001d56:	4013      	ands	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4ba2      	ldr	r3, [pc, #648]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4ba1      	ldr	r3, [pc, #644]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d62:	49a3      	ldr	r1, [pc, #652]	; (8001ff0 <HAL_RCC_OscConfig+0x35c>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff f8c4 	bl	8000efc <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d78:	e009      	b.n	8001d8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7a:	f7ff f8bf 	bl	8000efc <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	; 0x64
 8001d86:	d902      	bls.n	8001d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	f000 fb3c 	bl	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d8e:	4b96      	ldr	r3, [pc, #600]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	029b      	lsls	r3, r3, #10
 8001d96:	4013      	ands	r3, r2
 8001d98:	d0ef      	beq.n	8001d7a <HAL_RCC_OscConfig+0xe6>
 8001d9a:	e015      	b.n	8001dc8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f8ae 	bl	8000efc <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da6:	f7ff f8a9 	bl	8000efc <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e326      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db8:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	029b      	lsls	r3, r3, #10
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x112>
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d100      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x140>
 8001dd2:	e08b      	b.n	8001eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d13e      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1d0>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d13b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001dec:	4b7e      	ldr	r3, [pc, #504]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2204      	movs	r2, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_RCC_OscConfig+0x16c>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e302      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a7b      	ldr	r2, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x360>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	021a      	lsls	r2, r3, #8
 8001e10:	4b75      	ldr	r3, [pc, #468]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e16:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2209      	movs	r2, #9
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	4b71      	ldr	r3, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e28:	f000 fc40 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8001e2c:	0001      	movs	r1, r0
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	220f      	movs	r2, #15
 8001e36:	4013      	ands	r3, r2
 8001e38:	4a6f      	ldr	r2, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x364>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	000a      	movs	r2, r1
 8001e3e:	40da      	lsrs	r2, r3
 8001e40:	4b6e      	ldr	r3, [pc, #440]	; (8001ffc <HAL_RCC_OscConfig+0x368>)
 8001e42:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001e44:	4b6e      	ldr	r3, [pc, #440]	; (8002000 <HAL_RCC_OscConfig+0x36c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2513      	movs	r5, #19
 8001e4a:	197c      	adds	r4, r7, r5
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7ff f80f 	bl	8000e70 <HAL_InitTick>
 8001e52:	0003      	movs	r3, r0
 8001e54:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e56:	197b      	adds	r3, r7, r5
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d046      	beq.n	8001eec <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001e5e:	197b      	adds	r3, r7, r5
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	e2d0      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d027      	beq.n	8001eba <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e6a:	4b5f      	ldr	r3, [pc, #380]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2209      	movs	r2, #9
 8001e70:	4393      	bics	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f83e 	bl	8000efc <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff f839 	bl	8000efc <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e2b6      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d0f1      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a53      	ldr	r2, [pc, #332]	; (8001ff4 <HAL_RCC_OscConfig+0x360>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	021a      	lsls	r2, r3, #8
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	e018      	b.n	8001eec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff f819 	bl	8000efc <HAL_GetTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f814 	bl	8000efc <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e291      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ee2:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d1f1      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d100      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x264>
 8001ef6:	e0a1      	b.n	800203c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d140      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001efe:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4013      	ands	r3, r2
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x282>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e277      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f16:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_RCC_OscConfig+0x370>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f24:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	0a19      	lsrs	r1, r3, #8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	061a      	lsls	r2, r3, #24
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	0b5b      	lsrs	r3, r3, #13
 8001f44:	3301      	adds	r3, #1
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0212      	lsls	r2, r2, #8
 8001f4a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	210f      	movs	r1, #15
 8001f54:	400b      	ands	r3, r1
 8001f56:	4928      	ldr	r1, [pc, #160]	; (8001ff8 <HAL_RCC_OscConfig+0x364>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x368>)
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x36c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2513      	movs	r5, #19
 8001f66:	197c      	adds	r4, r7, r5
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7fe ff81 	bl	8000e70 <HAL_InitTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f72:	197b      	adds	r3, r7, r5
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d060      	beq.n	800203c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001f7a:	197b      	adds	r3, r7, r5
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	e242      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03f      	beq.n	8002008 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0049      	lsls	r1, r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe ffb1 	bl	8000efc <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa0:	f7fe ffac 	bl	8000efc <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e229      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_RCC_OscConfig+0x370>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	0a19      	lsrs	r1, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	061a      	lsls	r2, r3, #24
 8001fe0:	4b01      	ldr	r3, [pc, #4]	; (8001fe8 <HAL_RCC_OscConfig+0x354>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	e029      	b.n	800203c <HAL_RCC_OscConfig+0x3a8>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	fffeffff 	.word	0xfffeffff
 8001ff0:	fffbffff 	.word	0xfffbffff
 8001ff4:	ffffe0ff 	.word	0xffffe0ff
 8001ff8:	080039e8 	.word	0x080039e8
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000004 	.word	0x20000004
 8002004:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002008:	4bbd      	ldr	r3, [pc, #756]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4bbc      	ldr	r3, [pc, #752]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 800200e:	49bd      	ldr	r1, [pc, #756]	; (8002304 <HAL_RCC_OscConfig+0x670>)
 8002010:	400a      	ands	r2, r1
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ff72 	bl	8000efc <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201e:	f7fe ff6d 	bl	8000efc <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1ea      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002030:	4bb3      	ldr	r3, [pc, #716]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2208      	movs	r2, #8
 8002042:	4013      	ands	r3, r2
 8002044:	d036      	beq.n	80020b4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d019      	beq.n	8002082 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4bac      	ldr	r3, [pc, #688]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002050:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002052:	4bab      	ldr	r3, [pc, #684]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7fe ff4f 	bl	8000efc <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002064:	f7fe ff4a 	bl	8000efc <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1c7      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002076:	4ba2      	ldr	r3, [pc, #648]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d0f1      	beq.n	8002064 <HAL_RCC_OscConfig+0x3d0>
 8002080:	e018      	b.n	80020b4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002082:	4b9f      	ldr	r3, [pc, #636]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002086:	4b9e      	ldr	r3, [pc, #632]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002088:	2101      	movs	r1, #1
 800208a:	438a      	bics	r2, r1
 800208c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7fe ff35 	bl	8000efc <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002098:	f7fe ff30 	bl	8000efc <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1ad      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020aa:	4b95      	ldr	r3, [pc, #596]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d1f1      	bne.n	8002098 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2204      	movs	r2, #4
 80020ba:	4013      	ands	r3, r2
 80020bc:	d100      	bne.n	80020c0 <HAL_RCC_OscConfig+0x42c>
 80020be:	e0ae      	b.n	800221e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c0:	2027      	movs	r0, #39	; 0x27
 80020c2:	183b      	adds	r3, r7, r0
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c8:	4b8d      	ldr	r3, [pc, #564]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80020ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	055b      	lsls	r3, r3, #21
 80020d0:	4013      	ands	r3, r2
 80020d2:	d109      	bne.n	80020e8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b8a      	ldr	r3, [pc, #552]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80020d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d8:	4b89      	ldr	r3, [pc, #548]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	0549      	lsls	r1, r1, #21
 80020de:	430a      	orrs	r2, r1
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80020e2:	183b      	adds	r3, r7, r0
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b87      	ldr	r3, [pc, #540]	; (8002308 <HAL_RCC_OscConfig+0x674>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d11a      	bne.n	800212a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f4:	4b84      	ldr	r3, [pc, #528]	; (8002308 <HAL_RCC_OscConfig+0x674>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b83      	ldr	r3, [pc, #524]	; (8002308 <HAL_RCC_OscConfig+0x674>)
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0049      	lsls	r1, r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7fe fefb 	bl	8000efc <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7fe fef6 	bl	8000efc <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e173      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCC_OscConfig+0x674>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4013      	ands	r3, r2
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	429a      	cmp	r2, r3
 8002134:	d107      	bne.n	8002146 <HAL_RCC_OscConfig+0x4b2>
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800213a:	4b71      	ldr	r3, [pc, #452]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	0049      	lsls	r1, r1, #1
 8002140:	430a      	orrs	r2, r1
 8002142:	651a      	str	r2, [r3, #80]	; 0x50
 8002144:	e031      	b.n	80021aa <HAL_RCC_OscConfig+0x516>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x4d4>
 800214e:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002152:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002154:	496b      	ldr	r1, [pc, #428]	; (8002304 <HAL_RCC_OscConfig+0x670>)
 8002156:	400a      	ands	r2, r1
 8002158:	651a      	str	r2, [r3, #80]	; 0x50
 800215a:	4b69      	ldr	r3, [pc, #420]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 800215c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800215e:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002160:	496a      	ldr	r1, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x678>)
 8002162:	400a      	ands	r2, r1
 8002164:	651a      	str	r2, [r3, #80]	; 0x50
 8002166:	e020      	b.n	80021aa <HAL_RCC_OscConfig+0x516>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	23a0      	movs	r3, #160	; 0xa0
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	429a      	cmp	r2, r3
 8002172:	d10e      	bne.n	8002192 <HAL_RCC_OscConfig+0x4fe>
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002178:	4b61      	ldr	r3, [pc, #388]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	00c9      	lsls	r1, r1, #3
 800217e:	430a      	orrs	r2, r1
 8002180:	651a      	str	r2, [r3, #80]	; 0x50
 8002182:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002186:	4b5e      	ldr	r3, [pc, #376]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	0049      	lsls	r1, r1, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	651a      	str	r2, [r3, #80]	; 0x50
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x516>
 8002192:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002196:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002198:	495a      	ldr	r1, [pc, #360]	; (8002304 <HAL_RCC_OscConfig+0x670>)
 800219a:	400a      	ands	r2, r1
 800219c:	651a      	str	r2, [r3, #80]	; 0x50
 800219e:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80021a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80021a4:	4959      	ldr	r1, [pc, #356]	; (800230c <HAL_RCC_OscConfig+0x678>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d015      	beq.n	80021de <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fea3 	bl	8000efc <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ba:	e009      	b.n	80021d0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fe9e 	bl	8000efc <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e11a      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021d0:	4b4b      	ldr	r3, [pc, #300]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80021d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d0ef      	beq.n	80021bc <HAL_RCC_OscConfig+0x528>
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7fe fe8d 	bl	8000efc <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021e6:	e009      	b.n	80021fc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7fe fe88 	bl	8000efc <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_RCC_OscConfig+0x67c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e104      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021fc:	4b40      	ldr	r3, [pc, #256]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80021fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d1ef      	bne.n	80021e8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002208:	2327      	movs	r3, #39	; 0x27
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002218:	493e      	ldr	r1, [pc, #248]	; (8002314 <HAL_RCC_OscConfig+0x680>)
 800221a:	400a      	ands	r2, r1
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2220      	movs	r2, #32
 8002224:	4013      	ands	r3, r2
 8002226:	d049      	beq.n	80022bc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d026      	beq.n	800227e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002230:	4b33      	ldr	r3, [pc, #204]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002236:	2101      	movs	r1, #1
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 800223e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002242:	2101      	movs	r1, #1
 8002244:	430a      	orrs	r2, r1
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_RCC_OscConfig+0x684>)
 800224a:	6a1a      	ldr	r2, [r3, #32]
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_RCC_OscConfig+0x684>)
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	0189      	lsls	r1, r1, #6
 8002252:	430a      	orrs	r2, r1
 8002254:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fe51 	bl	8000efc <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002260:	f7fe fe4c 	bl	8000efc <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0c9      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2202      	movs	r2, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d0f1      	beq.n	8002260 <HAL_RCC_OscConfig+0x5cc>
 800227c:	e01e      	b.n	80022bc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 8002284:	2101      	movs	r1, #1
 8002286:	438a      	bics	r2, r1
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_RCC_OscConfig+0x684>)
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_RCC_OscConfig+0x684>)
 8002290:	4922      	ldr	r1, [pc, #136]	; (800231c <HAL_RCC_OscConfig+0x688>)
 8002292:	400a      	ands	r2, r1
 8002294:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fe31 	bl	8000efc <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a0:	f7fe fe2c 	bl	8000efc <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0a9      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d1f1      	bne.n	80022a0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x632>
 80022c4:	e09e      	b.n	8002404 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	d100      	bne.n	80022ce <HAL_RCC_OscConfig+0x63a>
 80022cc:	e077      	b.n	80023be <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d158      	bne.n	8002388 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_OscConfig+0x66c>)
 80022dc:	4910      	ldr	r1, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x68c>)
 80022de:	400a      	ands	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fe0b 	bl	8000efc <HAL_GetTick>
 80022e6:	0003      	movs	r3, r0
 80022e8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022ea:	e01b      	b.n	8002324 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe fe06 	bl	8000efc <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d914      	bls.n	8002324 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e083      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	40021000 	.word	0x40021000
 8002304:	fffffeff 	.word	0xfffffeff
 8002308:	40007000 	.word	0x40007000
 800230c:	fffffbff 	.word	0xfffffbff
 8002310:	00001388 	.word	0x00001388
 8002314:	efffffff 	.word	0xefffffff
 8002318:	40010000 	.word	0x40010000
 800231c:	ffffdfff 	.word	0xffffdfff
 8002320:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002324:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	049b      	lsls	r3, r3, #18
 800232c:	4013      	ands	r3, r2
 800232e:	d1dd      	bne.n	80022ec <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002330:	4b37      	ldr	r3, [pc, #220]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a37      	ldr	r2, [pc, #220]	; (8002414 <HAL_RCC_OscConfig+0x780>)
 8002336:	4013      	ands	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	431a      	orrs	r2, r3
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	0449      	lsls	r1, r1, #17
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe fdcd 	bl	8000efc <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fdc8 	bl	8000efc <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e045      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800237a:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	049b      	lsls	r3, r3, #18
 8002382:	4013      	ands	r3, r2
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x6d4>
 8002386:	e03d      	b.n	8002404 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 800238e:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_RCC_OscConfig+0x784>)
 8002390:	400a      	ands	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fdb2 	bl	8000efc <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe fdad 	bl	8000efc <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e02a      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	049b      	lsls	r3, r3, #18
 80023b8:	4013      	ands	r3, r2
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x70a>
 80023bc:	e022      	b.n	8002404 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e01d      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_RCC_OscConfig+0x77c>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	025b      	lsls	r3, r3, #9
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10f      	bne.n	8002400 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	23f0      	movs	r3, #240	; 0xf0
 80023e4:	039b      	lsls	r3, r3, #14
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	23c0      	movs	r3, #192	; 0xc0
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	401a      	ands	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b00a      	add	sp, #40	; 0x28
 800240c:	bdb0      	pop	{r4, r5, r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40021000 	.word	0x40021000
 8002414:	ff02ffff 	.word	0xff02ffff
 8002418:	feffffff 	.word	0xfeffffff

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b5b0      	push	{r4, r5, r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e128      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b96      	ldr	r3, [pc, #600]	; (800268c <HAL_RCC_ClockConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d91e      	bls.n	800247c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b93      	ldr	r3, [pc, #588]	; (800268c <HAL_RCC_ClockConfig+0x270>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	4393      	bics	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	4b90      	ldr	r3, [pc, #576]	; (800268c <HAL_RCC_ClockConfig+0x270>)
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002450:	f7fe fd54 	bl	8000efc <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002458:	e009      	b.n	800246e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245a:	f7fe fd4f 	bl	8000efc <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	4a8a      	ldr	r2, [pc, #552]	; (8002690 <HAL_RCC_ClockConfig+0x274>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e109      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b87      	ldr	r3, [pc, #540]	; (800268c <HAL_RCC_ClockConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4013      	ands	r3, r2
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002486:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	22f0      	movs	r2, #240	; 0xf0
 800248c:	4393      	bics	r3, r2
 800248e:	0019      	movs	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002496:	430a      	orrs	r2, r1
 8002498:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x8a>
 80024a4:	e089      	b.n	80025ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ae:	4b79      	ldr	r3, [pc, #484]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	4013      	ands	r3, r2
 80024b8:	d120      	bne.n	80024fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0e1      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024c6:	4b73      	ldr	r3, [pc, #460]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	049b      	lsls	r3, r3, #18
 80024ce:	4013      	ands	r3, r2
 80024d0:	d114      	bne.n	80024fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0d5      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d106      	bne.n	80024ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2204      	movs	r2, #4
 80024e4:	4013      	ands	r3, r2
 80024e6:	d109      	bne.n	80024fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0ca      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024ec:	4b69      	ldr	r3, [pc, #420]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0c2      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fc:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2203      	movs	r2, #3
 8002502:	4393      	bics	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 800250c:	430a      	orrs	r2, r1
 800250e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002510:	f7fe fcf4 	bl	8000efc <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d111      	bne.n	8002544 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002520:	e009      	b.n	8002536 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002522:	f7fe fceb 	bl	8000efc <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_ClockConfig+0x274>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0a5      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002536:	4b57      	ldr	r3, [pc, #348]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	220c      	movs	r2, #12
 800253c:	4013      	ands	r3, r2
 800253e:	2b08      	cmp	r3, #8
 8002540:	d1ef      	bne.n	8002522 <HAL_RCC_ClockConfig+0x106>
 8002542:	e03a      	b.n	80025ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d111      	bne.n	8002570 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254c:	e009      	b.n	8002562 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254e:	f7fe fcd5 	bl	8000efc <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <HAL_RCC_ClockConfig+0x274>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e08f      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002562:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	220c      	movs	r2, #12
 8002568:	4013      	ands	r3, r2
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d1ef      	bne.n	800254e <HAL_RCC_ClockConfig+0x132>
 800256e:	e024      	b.n	80025ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d11b      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002578:	e009      	b.n	800258e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257a:	f7fe fcbf 	bl	8000efc <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	4a42      	ldr	r2, [pc, #264]	; (8002690 <HAL_RCC_ClockConfig+0x274>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e079      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800258e:	4b41      	ldr	r3, [pc, #260]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	220c      	movs	r2, #12
 8002594:	4013      	ands	r3, r2
 8002596:	2b04      	cmp	r3, #4
 8002598:	d1ef      	bne.n	800257a <HAL_RCC_ClockConfig+0x15e>
 800259a:	e00e      	b.n	80025ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe fcae 	bl	8000efc <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	4a3a      	ldr	r2, [pc, #232]	; (8002690 <HAL_RCC_ClockConfig+0x274>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e068      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	220c      	movs	r2, #12
 80025b6:	4013      	ands	r3, r2
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ba:	4b34      	ldr	r3, [pc, #208]	; (800268c <HAL_RCC_ClockConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	4013      	ands	r3, r2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d21e      	bcs.n	8002606 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c8:	4b30      	ldr	r3, [pc, #192]	; (800268c <HAL_RCC_ClockConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2201      	movs	r2, #1
 80025ce:	4393      	bics	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCC_ClockConfig+0x270>)
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025da:	f7fe fc8f 	bl	8000efc <HAL_GetTick>
 80025de:	0003      	movs	r3, r0
 80025e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	e009      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7fe fc8a 	bl	8000efc <HAL_GetTick>
 80025e8:	0002      	movs	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	4a28      	ldr	r2, [pc, #160]	; (8002690 <HAL_RCC_ClockConfig+0x274>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e044      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_ClockConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2201      	movs	r2, #1
 80025fe:	4013      	ands	r3, r2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d1ee      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2204      	movs	r2, #4
 800260c:	4013      	ands	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a20      	ldr	r2, [pc, #128]	; (8002698 <HAL_RCC_ClockConfig+0x27c>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2208      	movs	r2, #8
 800262a:	4013      	ands	r3, r2
 800262c:	d00a      	beq.n	8002644 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a1a      	ldr	r2, [pc, #104]	; (800269c <HAL_RCC_ClockConfig+0x280>)
 8002634:	4013      	ands	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00da      	lsls	r2, r3, #3
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 8002640:	430a      	orrs	r2, r1
 8002642:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002644:	f000 f832 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002648:	0001      	movs	r1, r0
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RCC_ClockConfig+0x278>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	220f      	movs	r2, #15
 8002652:	4013      	ands	r3, r2
 8002654:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <HAL_RCC_ClockConfig+0x284>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	000a      	movs	r2, r1
 800265a:	40da      	lsrs	r2, r3
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_RCC_ClockConfig+0x288>)
 800265e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_ClockConfig+0x28c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	250b      	movs	r5, #11
 8002666:	197c      	adds	r4, r7, r5
 8002668:	0018      	movs	r0, r3
 800266a:	f7fe fc01 	bl	8000e70 <HAL_InitTick>
 800266e:	0003      	movs	r3, r0
 8002670:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002672:	197b      	adds	r3, r7, r5
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800267a:	197b      	adds	r3, r7, r5
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	e000      	b.n	8002682 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b004      	add	sp, #16
 8002688:	bdb0      	pop	{r4, r5, r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	40022000 	.word	0x40022000
 8002690:	00001388 	.word	0x00001388
 8002694:	40021000 	.word	0x40021000
 8002698:	fffff8ff 	.word	0xfffff8ff
 800269c:	ffffc7ff 	.word	0xffffc7ff
 80026a0:	080039e8 	.word	0x080039e8
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b5b0      	push	{r4, r5, r7, lr}
 80026ae:	b08e      	sub	sp, #56	; 0x38
 80026b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80026b2:	4b4c      	ldr	r3, [pc, #304]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ba:	230c      	movs	r3, #12
 80026bc:	4013      	ands	r3, r2
 80026be:	2b0c      	cmp	r3, #12
 80026c0:	d014      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x40>
 80026c2:	d900      	bls.n	80026c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80026c4:	e07b      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x112>
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d002      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x24>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d00b      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ce:	e076      	b.n	80027be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026d0:	4b44      	ldr	r3, [pc, #272]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2210      	movs	r2, #16
 80026d6:	4013      	ands	r3, r2
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80026da:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80026de:	e07c      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80026e0:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_RCC_GetSysClockFreq+0x140>)
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026e4:	e079      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e6:	4b42      	ldr	r3, [pc, #264]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80026e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026ea:	e076      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	0c9a      	lsrs	r2, r3, #18
 80026f0:	230f      	movs	r3, #15
 80026f2:	401a      	ands	r2, r3
 80026f4:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80026f6:	5c9b      	ldrb	r3, [r3, r2]
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	0d9a      	lsrs	r2, r3, #22
 80026fe:	2303      	movs	r3, #3
 8002700:	4013      	ands	r3, r2
 8002702:	3301      	adds	r3, #1
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002706:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	4013      	ands	r3, r2
 8002710:	d01a      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800271c:	2300      	movs	r3, #0
 800271e:	69b8      	ldr	r0, [r7, #24]
 8002720:	69f9      	ldr	r1, [r7, #28]
 8002722:	f7fd fe91 	bl	8000448 <__aeabi_lmul>
 8002726:	0002      	movs	r2, r0
 8002728:	000b      	movs	r3, r1
 800272a:	0010      	movs	r0, r2
 800272c:	0019      	movs	r1, r3
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f7fd fe65 	bl	8000408 <__aeabi_uldivmod>
 800273e:	0002      	movs	r2, r0
 8002740:	000b      	movs	r3, r1
 8002742:	0013      	movs	r3, r2
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
 8002746:	e037      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d01a      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800275c:	2300      	movs	r3, #0
 800275e:	68b8      	ldr	r0, [r7, #8]
 8002760:	68f9      	ldr	r1, [r7, #12]
 8002762:	f7fd fe71 	bl	8000448 <__aeabi_lmul>
 8002766:	0002      	movs	r2, r0
 8002768:	000b      	movs	r3, r1
 800276a:	0010      	movs	r0, r2
 800276c:	0019      	movs	r1, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f7fd fe45 	bl	8000408 <__aeabi_uldivmod>
 800277e:	0002      	movs	r2, r0
 8002780:	000b      	movs	r3, r1
 8002782:	0013      	movs	r3, r2
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
 8002786:	e017      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278a:	0018      	movs	r0, r3
 800278c:	2300      	movs	r3, #0
 800278e:	0019      	movs	r1, r3
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_RCC_GetSysClockFreq+0x140>)
 8002792:	2300      	movs	r3, #0
 8002794:	f7fd fe58 	bl	8000448 <__aeabi_lmul>
 8002798:	0002      	movs	r2, r0
 800279a:	000b      	movs	r3, r1
 800279c:	0010      	movs	r0, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	001c      	movs	r4, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	001d      	movs	r5, r3
 80027a8:	0022      	movs	r2, r4
 80027aa:	002b      	movs	r3, r5
 80027ac:	f7fd fe2c 	bl	8000408 <__aeabi_uldivmod>
 80027b0:	0002      	movs	r2, r0
 80027b2:	000b      	movs	r3, r1
 80027b4:	0013      	movs	r3, r2
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027bc:	e00d      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	2207      	movs	r2, #7
 80027c6:	4013      	ands	r3, r2
 80027c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	3301      	adds	r3, #1
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	0212      	lsls	r2, r2, #8
 80027d2:	409a      	lsls	r2, r3
 80027d4:	0013      	movs	r3, r2
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027d8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027dc:	0018      	movs	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	b00e      	add	sp, #56	; 0x38
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	003d0900 	.word	0x003d0900
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	08003a00 	.word	0x08003a00

080027f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_RCC_GetHCLKFreq+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff2 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 8002814:	0001      	movs	r1, r0
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	2207      	movs	r2, #7
 800281e:	4013      	ands	r3, r2
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	40d9      	lsrs	r1, r3
 8002826:	000b      	movs	r3, r1
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40021000 	.word	0x40021000
 8002834:	080039f8 	.word	0x080039f8

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800283c:	f7ff ffdc 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 8002840:	0001      	movs	r1, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	2207      	movs	r2, #7
 800284a:	4013      	ands	r3, r2
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	40d9      	lsrs	r1, r3
 8002852:	000b      	movs	r3, r1
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	40021000 	.word	0x40021000
 8002860:	080039f8 	.word	0x080039f8

08002864 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800286c:	2317      	movs	r3, #23
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2220      	movs	r2, #32
 800287a:	4013      	ands	r3, r2
 800287c:	d106      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	4013      	ands	r3, r2
 8002888:	d100      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800288a:	e0d9      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288c:	4b9c      	ldr	r3, [pc, #624]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800288e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	055b      	lsls	r3, r3, #21
 8002894:	4013      	ands	r3, r2
 8002896:	d10a      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	4b99      	ldr	r3, [pc, #612]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800289a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289c:	4b98      	ldr	r3, [pc, #608]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	0549      	lsls	r1, r1, #21
 80028a2:	430a      	orrs	r2, r1
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80028a6:	2317      	movs	r3, #23
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b95      	ldr	r3, [pc, #596]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4013      	ands	r3, r2
 80028b8:	d11a      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b91      	ldr	r3, [pc, #580]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0049      	lsls	r1, r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c8:	f7fe fb18 	bl	8000efc <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe fb13 	bl	8000efc <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	; 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e108      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b87      	ldr	r3, [pc, #540]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80028f0:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	23c0      	movs	r3, #192	; 0xc0
 80028f6:	039b      	lsls	r3, r3, #14
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	23c0      	movs	r3, #192	; 0xc0
 8002902:	039b      	lsls	r3, r3, #14
 8002904:	4013      	ands	r3, r2
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	23c0      	movs	r3, #192	; 0xc0
 8002912:	039b      	lsls	r3, r3, #14
 8002914:	4013      	ands	r3, r2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d013      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	23c0      	movs	r3, #192	; 0xc0
 8002922:	029b      	lsls	r3, r3, #10
 8002924:	401a      	ands	r2, r3
 8002926:	23c0      	movs	r3, #192	; 0xc0
 8002928:	029b      	lsls	r3, r3, #10
 800292a:	429a      	cmp	r2, r3
 800292c:	d10a      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800292e:	4b74      	ldr	r3, [pc, #464]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	029b      	lsls	r3, r3, #10
 8002936:	401a      	ands	r2, r3
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	029b      	lsls	r3, r3, #10
 800293c:	429a      	cmp	r2, r3
 800293e:	d101      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0d8      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002944:	4b6e      	ldr	r3, [pc, #440]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002948:	23c0      	movs	r3, #192	; 0xc0
 800294a:	029b      	lsls	r3, r3, #10
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d049      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	23c0      	movs	r3, #192	; 0xc0
 800295c:	029b      	lsls	r3, r3, #10
 800295e:	4013      	ands	r3, r2
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	429a      	cmp	r2, r3
 8002964:	d004      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2220      	movs	r2, #32
 800296c:	4013      	ands	r3, r2
 800296e:	d10d      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	23c0      	movs	r3, #192	; 0xc0
 8002976:	029b      	lsls	r3, r3, #10
 8002978:	4013      	ands	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d034      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	4013      	ands	r3, r2
 800298a:	d02e      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800298c:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	4a5d      	ldr	r2, [pc, #372]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002992:	4013      	ands	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002996:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800299a:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	0309      	lsls	r1, r1, #12
 80029a0:	430a      	orrs	r2, r1
 80029a2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a4:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029a8:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029aa:	4958      	ldr	r1, [pc, #352]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80029ac:	400a      	ands	r2, r1
 80029ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4013      	ands	r3, r2
 80029be:	d014      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fa9c 	bl	8000efc <HAL_GetTick>
 80029c4:	0003      	movs	r3, r0
 80029c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c8:	e009      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe fa97 	bl	8000efc <HAL_GetTick>
 80029ce:	0002      	movs	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e08b      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029de:	4b48      	ldr	r3, [pc, #288]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4013      	ands	r3, r2
 80029e8:	d0ef      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	23c0      	movs	r3, #192	; 0xc0
 80029f0:	029b      	lsls	r3, r3, #10
 80029f2:	401a      	ands	r2, r3
 80029f4:	23c0      	movs	r3, #192	; 0xc0
 80029f6:	029b      	lsls	r3, r3, #10
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80029fc:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a44      	ldr	r2, [pc, #272]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	23c0      	movs	r3, #192	; 0xc0
 8002a0c:	039b      	lsls	r3, r3, #14
 8002a0e:	401a      	ands	r2, r3
 8002a10:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	23c0      	movs	r3, #192	; 0xc0
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	401a      	ands	r2, r3
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a26:	430a      	orrs	r2, r1
 8002a28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a2a:	2317      	movs	r3, #23
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a38:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a3a:	4937      	ldr	r1, [pc, #220]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2201      	movs	r2, #1
 8002a46:	4013      	ands	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	2203      	movs	r2, #3
 8002a50:	4393      	bics	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2202      	movs	r2, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	220c      	movs	r2, #12
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2204      	movs	r2, #4
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a24      	ldr	r2, [pc, #144]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2240      	movs	r2, #64	; 0x40
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a17      	ldr	r2, [pc, #92]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1a      	ldr	r2, [r3, #32]
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	4013      	ands	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002af0:	430a      	orrs	r2, r1
 8002af2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b006      	add	sp, #24
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40007000 	.word	0x40007000
 8002b08:	fffcffff 	.word	0xfffcffff
 8002b0c:	fff7ffff 	.word	0xfff7ffff
 8002b10:	00001388 	.word	0x00001388
 8002b14:	ffcfffff 	.word	0xffcfffff
 8002b18:	efffffff 	.word	0xefffffff
 8002b1c:	fffff3ff 	.word	0xfffff3ff
 8002b20:	ffffcfff 	.word	0xffffcfff
 8002b24:	fbffffff 	.word	0xfbffffff
 8002b28:	fff3ffff 	.word	0xfff3ffff

08002b2c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e03f      	b.n	8002bbe <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2249      	movs	r2, #73	; 0x49
 8002b42:	5c9b      	ldrb	r3, [r3, r2]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2248      	movs	r2, #72	; 0x48
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7fe f853 	bl	8000c00 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2249      	movs	r2, #73	; 0x49
 8002b5e:	2102      	movs	r1, #2
 8002b60:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	438a      	bics	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f91d 	bl	8002db4 <USART_SetConfig>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e01c      	b.n	8002bbe <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_USART_Init+0x9c>)
 8002b90:	400a      	ands	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	212a      	movs	r1, #42	; 0x2a
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 fa54 	bl	8003064 <USART_CheckIdleState>
 8002bbc:	0003      	movs	r3, r0
}
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b002      	add	sp, #8
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	ffffbfff 	.word	0xffffbfff

08002bcc <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	1dbb      	adds	r3, r7, #6
 8002bda:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2249      	movs	r2, #73	; 0x49
 8002be0:	5c9b      	ldrb	r3, [r3, r2]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d000      	beq.n	8002bea <HAL_USART_Transmit+0x1e>
 8002be8:	e0a9      	b.n	8002d3e <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_USART_Transmit+0x2c>
 8002bf0:	1dbb      	adds	r3, r7, #6
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0a1      	b.n	8002d40 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	015b      	lsls	r3, r3, #5
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d109      	bne.n	8002c1c <HAL_USART_Transmit+0x50>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2201      	movs	r2, #1
 8002c14:	4013      	ands	r3, r2
 8002c16:	d001      	beq.n	8002c1c <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e091      	b.n	8002d40 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2248      	movs	r2, #72	; 0x48
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_USART_Transmit+0x5e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e08a      	b.n	8002d40 <HAL_USART_Transmit+0x174>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2248      	movs	r2, #72	; 0x48
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2249      	movs	r2, #73	; 0x49
 8002c3c:	2112      	movs	r1, #18
 8002c3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c40:	f7fe f95c 	bl	8000efc <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1dba      	adds	r2, r7, #6
 8002c4c:	8812      	ldrh	r2, [r2, #0]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1dba      	adds	r2, r7, #6
 8002c54:	8812      	ldrh	r2, [r2, #0]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	015b      	lsls	r3, r3, #5
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d108      	bne.n	8002c76 <HAL_USART_Transmit+0xaa>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	e003      	b.n	8002c7e <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002c7e:	e02a      	b.n	8002cd6 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	0013      	movs	r3, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	f000 f85b 	bl	8002d48 <USART_WaitOnFlagUntilTimeout>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e052      	b.n	8002d40 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	05d2      	lsls	r2, r2, #23
 8002cac:	0dd2      	lsrs	r2, r2, #23
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e007      	b.n	8002cc8 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	781a      	ldrb	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1cf      	bne.n	8002c80 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	0013      	movs	r3, r2
 8002cea:	2200      	movs	r2, #0
 8002cec:	2140      	movs	r1, #64	; 0x40
 8002cee:	f000 f82b 	bl	8002d48 <USART_WaitOnFlagUntilTimeout>
 8002cf2:	1e03      	subs	r3, r0, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e022      	b.n	8002d40 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2240      	movs	r2, #64	; 0x40
 8002d00:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2208      	movs	r2, #8
 8002d08:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2108      	movs	r1, #8
 8002d16:	430a      	orrs	r2, r1
 8002d18:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2110      	movs	r1, #16
 8002d26:	430a      	orrs	r2, r1
 8002d28:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2249      	movs	r2, #73	; 0x49
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2248      	movs	r2, #72	; 0x48
 8002d36:	2100      	movs	r1, #0
 8002d38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
  }
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b008      	add	sp, #32
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002d58:	e017      	b.n	8002d8a <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	d014      	beq.n	8002d8a <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d60:	f7fe f8cc 	bl	8000efc <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <USART_WaitOnFlagUntilTimeout+0x2e>
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2249      	movs	r2, #73	; 0x49
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2248      	movs	r2, #72	; 0x48
 8002d82:	2100      	movs	r1, #0
 8002d84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e00f      	b.n	8002daa <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	4013      	ands	r3, r2
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	425a      	negs	r2, r3
 8002d9a:	4153      	adcs	r3, r2
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	001a      	movs	r2, r3
 8002da0:	1dfb      	adds	r3, r7, #7
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d0d8      	beq.n	8002d5a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002dbc:	231e      	movs	r3, #30
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	0212      	lsls	r2, r2, #8
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a97      	ldr	r2, [pc, #604]	; (8003044 <USART_SetConfig+0x290>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a88      	ldr	r2, [pc, #544]	; (8003048 <USART_SetConfig+0x294>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a84      	ldr	r2, [pc, #528]	; (800304c <USART_SetConfig+0x298>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d127      	bne.n	8002e90 <USART_SetConfig+0xdc>
 8002e40:	4b83      	ldr	r3, [pc, #524]	; (8003050 <USART_SetConfig+0x29c>)
 8002e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e44:	2203      	movs	r2, #3
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d017      	beq.n	8002e7c <USART_SetConfig+0xc8>
 8002e4c:	d81b      	bhi.n	8002e86 <USART_SetConfig+0xd2>
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d00a      	beq.n	8002e68 <USART_SetConfig+0xb4>
 8002e52:	d818      	bhi.n	8002e86 <USART_SetConfig+0xd2>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <USART_SetConfig+0xaa>
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d00a      	beq.n	8002e72 <USART_SetConfig+0xbe>
 8002e5c:	e013      	b.n	8002e86 <USART_SetConfig+0xd2>
 8002e5e:	231f      	movs	r3, #31
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e044      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002e68:	231f      	movs	r3, #31
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e03f      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002e72:	231f      	movs	r3, #31
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e03a      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002e7c:	231f      	movs	r3, #31
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2208      	movs	r2, #8
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e035      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002e86:	231f      	movs	r3, #31
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e030      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a6f      	ldr	r2, [pc, #444]	; (8003054 <USART_SetConfig+0x2a0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d127      	bne.n	8002eea <USART_SetConfig+0x136>
 8002e9a:	4b6d      	ldr	r3, [pc, #436]	; (8003050 <USART_SetConfig+0x29c>)
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d017      	beq.n	8002ed6 <USART_SetConfig+0x122>
 8002ea6:	d81b      	bhi.n	8002ee0 <USART_SetConfig+0x12c>
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d00a      	beq.n	8002ec2 <USART_SetConfig+0x10e>
 8002eac:	d818      	bhi.n	8002ee0 <USART_SetConfig+0x12c>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <USART_SetConfig+0x104>
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d00a      	beq.n	8002ecc <USART_SetConfig+0x118>
 8002eb6:	e013      	b.n	8002ee0 <USART_SetConfig+0x12c>
 8002eb8:	231f      	movs	r3, #31
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	e017      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002ec2:	231f      	movs	r3, #31
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e012      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002ecc:	231f      	movs	r3, #31
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e00d      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002ed6:	231f      	movs	r3, #31
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2208      	movs	r2, #8
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e008      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002ee0:	231f      	movs	r3, #31
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e003      	b.n	8002ef2 <USART_SetConfig+0x13e>
 8002eea:	231f      	movs	r3, #31
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2210      	movs	r2, #16
 8002ef0:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8002ef2:	231f      	movs	r3, #31
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d86d      	bhi.n	8002fd8 <USART_SetConfig+0x224>
 8002efc:	009a      	lsls	r2, r3, #2
 8002efe:	4b56      	ldr	r3, [pc, #344]	; (8003058 <USART_SetConfig+0x2a4>)
 8002f00:	18d3      	adds	r3, r2, r3
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	469f      	mov	pc, r3
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f06:	f7ff fc81 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	005a      	lsls	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	18d2      	adds	r2, r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	0019      	movs	r1, r3
 8002f20:	0010      	movs	r0, r2
 8002f22:	f7fd f8fb 	bl	800011c <__udivsi3>
 8002f26:	0003      	movs	r3, r0
 8002f28:	61bb      	str	r3, [r7, #24]
      break;
 8002f2a:	e05a      	b.n	8002fe2 <USART_SetConfig+0x22e>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f2c:	f7ff fc84 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 8002f30:	0003      	movs	r3, r0
 8002f32:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	005a      	lsls	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	18d2      	adds	r2, r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0019      	movs	r1, r3
 8002f46:	0010      	movs	r0, r2
 8002f48:	f7fd f8e8 	bl	800011c <__udivsi3>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	61bb      	str	r3, [r7, #24]
      break;
 8002f50:	e047      	b.n	8002fe2 <USART_SetConfig+0x22e>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <USART_SetConfig+0x29c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2210      	movs	r2, #16
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d00d      	beq.n	8002f78 <USART_SetConfig+0x1c4>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> 2U), husart->Init.BaudRate));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	4a3e      	ldr	r2, [pc, #248]	; (800305c <USART_SetConfig+0x2a8>)
 8002f64:	189a      	adds	r2, r3, r2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	0010      	movs	r0, r2
 8002f6e:	f7fd f8d5 	bl	800011c <__udivsi3>
 8002f72:	0003      	movs	r3, r0
 8002f74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
      }
      break;
 8002f76:	e034      	b.n	8002fe2 <USART_SetConfig+0x22e>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	4a38      	ldr	r2, [pc, #224]	; (8003060 <USART_SetConfig+0x2ac>)
 8002f80:	189a      	adds	r2, r3, r2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	0019      	movs	r1, r3
 8002f88:	0010      	movs	r0, r2
 8002f8a:	f7fd f8c7 	bl	800011c <__udivsi3>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	61bb      	str	r3, [r7, #24]
      break;
 8002f92:	e026      	b.n	8002fe2 <USART_SetConfig+0x22e>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8002f94:	f7ff fb8a 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	005a      	lsls	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	18d2      	adds	r2, r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	0019      	movs	r1, r3
 8002fae:	0010      	movs	r0, r2
 8002fb0:	f7fd f8b4 	bl	800011c <__udivsi3>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	61bb      	str	r3, [r7, #24]
      break;
 8002fb8:	e013      	b.n	8002fe2 <USART_SetConfig+0x22e>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	0252      	lsls	r2, r2, #9
 8002fc4:	189a      	adds	r2, r3, r2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	0019      	movs	r1, r3
 8002fcc:	0010      	movs	r0, r2
 8002fce:	f7fd f8a5 	bl	800011c <__udivsi3>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	61bb      	str	r3, [r7, #24]
      break;
 8002fd6:	e004      	b.n	8002fe2 <USART_SetConfig+0x22e>
    default:
      ret = HAL_ERROR;
 8002fd8:	231e      	movs	r3, #30
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
      break;
 8002fe0:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d91c      	bls.n	8003022 <USART_SetConfig+0x26e>
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	025b      	lsls	r3, r3, #9
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d217      	bcs.n	8003022 <USART_SetConfig+0x26e>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	200e      	movs	r0, #14
 8002ff8:	183b      	adds	r3, r7, r0
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	b29b      	uxth	r3, r3
 8003006:	2207      	movs	r2, #7
 8003008:	4013      	ands	r3, r2
 800300a:	b299      	uxth	r1, r3
 800300c:	183b      	adds	r3, r7, r0
 800300e:	183a      	adds	r2, r7, r0
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	183a      	adds	r2, r7, r0
 800301c:	8812      	ldrh	r2, [r2, #0]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	e003      	b.n	800302a <USART_SetConfig+0x276>
  }
  else
  {
    ret = HAL_ERROR;
 8003022:	231e      	movs	r3, #30
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003036:	231e      	movs	r3, #30
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	781b      	ldrb	r3, [r3, #0]
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b008      	add	sp, #32
 8003042:	bd80      	pop	{r7, pc}
 8003044:	efff69f3 	.word	0xefff69f3
 8003048:	ffffc0ff 	.word	0xffffc0ff
 800304c:	40013800 	.word	0x40013800
 8003050:	40021000 	.word	0x40021000
 8003054:	40004400 	.word	0x40004400
 8003058:	08003a0c 	.word	0x08003a0c
 800305c:	007a1200 	.word	0x007a1200
 8003060:	01e84800 	.word	0x01e84800

08003064 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003072:	f7fd ff43 	bl	8000efc <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2208      	movs	r2, #8
 8003082:	4013      	ands	r3, r2
 8003084:	2b08      	cmp	r3, #8
 8003086:	d10e      	bne.n	80030a6 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	0399      	lsls	r1, r3, #14
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	23fa      	movs	r3, #250	; 0xfa
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	0013      	movs	r3, r2
 8003098:	2200      	movs	r2, #0
 800309a:	f7ff fe55 	bl	8002d48 <USART_WaitOnFlagUntilTimeout>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d001      	beq.n	80030a6 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e01e      	b.n	80030e4 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2204      	movs	r2, #4
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d10e      	bne.n	80030d2 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	03d9      	lsls	r1, r3, #15
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	23fa      	movs	r3, #250	; 0xfa
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	0013      	movs	r3, r2
 80030c4:	2200      	movs	r2, #0
 80030c6:	f7ff fe3f 	bl	8002d48 <USART_WaitOnFlagUntilTimeout>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d001      	beq.n	80030d2 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e008      	b.n	80030e4 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2249      	movs	r2, #73	; 0x49
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2248      	movs	r2, #72	; 0x48
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b004      	add	sp, #16
 80030ea:	bd80      	pop	{r7, pc}

080030ec <__errno>:
 80030ec:	4b01      	ldr	r3, [pc, #4]	; (80030f4 <__errno+0x8>)
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	4770      	bx	lr
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	2000000c 	.word	0x2000000c

080030f8 <__libc_init_array>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	2600      	movs	r6, #0
 80030fc:	4d0c      	ldr	r5, [pc, #48]	; (8003130 <__libc_init_array+0x38>)
 80030fe:	4c0d      	ldr	r4, [pc, #52]	; (8003134 <__libc_init_array+0x3c>)
 8003100:	1b64      	subs	r4, r4, r5
 8003102:	10a4      	asrs	r4, r4, #2
 8003104:	42a6      	cmp	r6, r4
 8003106:	d109      	bne.n	800311c <__libc_init_array+0x24>
 8003108:	2600      	movs	r6, #0
 800310a:	f000 fc47 	bl	800399c <_init>
 800310e:	4d0a      	ldr	r5, [pc, #40]	; (8003138 <__libc_init_array+0x40>)
 8003110:	4c0a      	ldr	r4, [pc, #40]	; (800313c <__libc_init_array+0x44>)
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	42a6      	cmp	r6, r4
 8003118:	d105      	bne.n	8003126 <__libc_init_array+0x2e>
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	00b3      	lsls	r3, r6, #2
 800311e:	58eb      	ldr	r3, [r5, r3]
 8003120:	4798      	blx	r3
 8003122:	3601      	adds	r6, #1
 8003124:	e7ee      	b.n	8003104 <__libc_init_array+0xc>
 8003126:	00b3      	lsls	r3, r6, #2
 8003128:	58eb      	ldr	r3, [r5, r3]
 800312a:	4798      	blx	r3
 800312c:	3601      	adds	r6, #1
 800312e:	e7f2      	b.n	8003116 <__libc_init_array+0x1e>
 8003130:	08003a6c 	.word	0x08003a6c
 8003134:	08003a6c 	.word	0x08003a6c
 8003138:	08003a6c 	.word	0x08003a6c
 800313c:	08003a70 	.word	0x08003a70

08003140 <memset>:
 8003140:	0003      	movs	r3, r0
 8003142:	1882      	adds	r2, r0, r2
 8003144:	4293      	cmp	r3, r2
 8003146:	d100      	bne.n	800314a <memset+0xa>
 8003148:	4770      	bx	lr
 800314a:	7019      	strb	r1, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	e7f9      	b.n	8003144 <memset+0x4>

08003150 <siprintf>:
 8003150:	b40e      	push	{r1, r2, r3}
 8003152:	b500      	push	{lr}
 8003154:	490b      	ldr	r1, [pc, #44]	; (8003184 <siprintf+0x34>)
 8003156:	b09c      	sub	sp, #112	; 0x70
 8003158:	ab1d      	add	r3, sp, #116	; 0x74
 800315a:	9002      	str	r0, [sp, #8]
 800315c:	9006      	str	r0, [sp, #24]
 800315e:	9107      	str	r1, [sp, #28]
 8003160:	9104      	str	r1, [sp, #16]
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <siprintf+0x38>)
 8003164:	4909      	ldr	r1, [pc, #36]	; (800318c <siprintf+0x3c>)
 8003166:	cb04      	ldmia	r3!, {r2}
 8003168:	9105      	str	r1, [sp, #20]
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	a902      	add	r1, sp, #8
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	f000 f870 	bl	8003254 <_svfiprintf_r>
 8003174:	2300      	movs	r3, #0
 8003176:	9a02      	ldr	r2, [sp, #8]
 8003178:	7013      	strb	r3, [r2, #0]
 800317a:	b01c      	add	sp, #112	; 0x70
 800317c:	bc08      	pop	{r3}
 800317e:	b003      	add	sp, #12
 8003180:	4718      	bx	r3
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	7fffffff 	.word	0x7fffffff
 8003188:	2000000c 	.word	0x2000000c
 800318c:	ffff0208 	.word	0xffff0208

08003190 <__ssputs_r>:
 8003190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003192:	688e      	ldr	r6, [r1, #8]
 8003194:	b085      	sub	sp, #20
 8003196:	0007      	movs	r7, r0
 8003198:	000c      	movs	r4, r1
 800319a:	9203      	str	r2, [sp, #12]
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	429e      	cmp	r6, r3
 80031a0:	d83c      	bhi.n	800321c <__ssputs_r+0x8c>
 80031a2:	2390      	movs	r3, #144	; 0x90
 80031a4:	898a      	ldrh	r2, [r1, #12]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	421a      	tst	r2, r3
 80031aa:	d034      	beq.n	8003216 <__ssputs_r+0x86>
 80031ac:	2503      	movs	r5, #3
 80031ae:	6909      	ldr	r1, [r1, #16]
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	1a5b      	subs	r3, r3, r1
 80031b4:	9302      	str	r3, [sp, #8]
 80031b6:	6963      	ldr	r3, [r4, #20]
 80031b8:	9802      	ldr	r0, [sp, #8]
 80031ba:	435d      	muls	r5, r3
 80031bc:	0feb      	lsrs	r3, r5, #31
 80031be:	195d      	adds	r5, r3, r5
 80031c0:	9b01      	ldr	r3, [sp, #4]
 80031c2:	106d      	asrs	r5, r5, #1
 80031c4:	3301      	adds	r3, #1
 80031c6:	181b      	adds	r3, r3, r0
 80031c8:	42ab      	cmp	r3, r5
 80031ca:	d900      	bls.n	80031ce <__ssputs_r+0x3e>
 80031cc:	001d      	movs	r5, r3
 80031ce:	0553      	lsls	r3, r2, #21
 80031d0:	d532      	bpl.n	8003238 <__ssputs_r+0xa8>
 80031d2:	0029      	movs	r1, r5
 80031d4:	0038      	movs	r0, r7
 80031d6:	f000 fb31 	bl	800383c <_malloc_r>
 80031da:	1e06      	subs	r6, r0, #0
 80031dc:	d109      	bne.n	80031f2 <__ssputs_r+0x62>
 80031de:	230c      	movs	r3, #12
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	2001      	movs	r0, #1
 80031e6:	89a2      	ldrh	r2, [r4, #12]
 80031e8:	4240      	negs	r0, r0
 80031ea:	4313      	orrs	r3, r2
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	b005      	add	sp, #20
 80031f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f2:	9a02      	ldr	r2, [sp, #8]
 80031f4:	6921      	ldr	r1, [r4, #16]
 80031f6:	f000 faba 	bl	800376e <memcpy>
 80031fa:	89a3      	ldrh	r3, [r4, #12]
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <__ssputs_r+0xc0>)
 80031fe:	401a      	ands	r2, r3
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	4313      	orrs	r3, r2
 8003204:	81a3      	strh	r3, [r4, #12]
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	6126      	str	r6, [r4, #16]
 800320a:	18f6      	adds	r6, r6, r3
 800320c:	6026      	str	r6, [r4, #0]
 800320e:	6165      	str	r5, [r4, #20]
 8003210:	9e01      	ldr	r6, [sp, #4]
 8003212:	1aed      	subs	r5, r5, r3
 8003214:	60a5      	str	r5, [r4, #8]
 8003216:	9b01      	ldr	r3, [sp, #4]
 8003218:	429e      	cmp	r6, r3
 800321a:	d900      	bls.n	800321e <__ssputs_r+0x8e>
 800321c:	9e01      	ldr	r6, [sp, #4]
 800321e:	0032      	movs	r2, r6
 8003220:	9903      	ldr	r1, [sp, #12]
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	f000 faac 	bl	8003780 <memmove>
 8003228:	68a3      	ldr	r3, [r4, #8]
 800322a:	2000      	movs	r0, #0
 800322c:	1b9b      	subs	r3, r3, r6
 800322e:	60a3      	str	r3, [r4, #8]
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	199e      	adds	r6, r3, r6
 8003234:	6026      	str	r6, [r4, #0]
 8003236:	e7da      	b.n	80031ee <__ssputs_r+0x5e>
 8003238:	002a      	movs	r2, r5
 800323a:	0038      	movs	r0, r7
 800323c:	f000 fb5c 	bl	80038f8 <_realloc_r>
 8003240:	1e06      	subs	r6, r0, #0
 8003242:	d1e0      	bne.n	8003206 <__ssputs_r+0x76>
 8003244:	0038      	movs	r0, r7
 8003246:	6921      	ldr	r1, [r4, #16]
 8003248:	f000 faae 	bl	80037a8 <_free_r>
 800324c:	e7c7      	b.n	80031de <__ssputs_r+0x4e>
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	fffffb7f 	.word	0xfffffb7f

08003254 <_svfiprintf_r>:
 8003254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003256:	b0a1      	sub	sp, #132	; 0x84
 8003258:	9003      	str	r0, [sp, #12]
 800325a:	001d      	movs	r5, r3
 800325c:	898b      	ldrh	r3, [r1, #12]
 800325e:	000f      	movs	r7, r1
 8003260:	0016      	movs	r6, r2
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	d511      	bpl.n	800328a <_svfiprintf_r+0x36>
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10e      	bne.n	800328a <_svfiprintf_r+0x36>
 800326c:	2140      	movs	r1, #64	; 0x40
 800326e:	f000 fae5 	bl	800383c <_malloc_r>
 8003272:	6038      	str	r0, [r7, #0]
 8003274:	6138      	str	r0, [r7, #16]
 8003276:	2800      	cmp	r0, #0
 8003278:	d105      	bne.n	8003286 <_svfiprintf_r+0x32>
 800327a:	230c      	movs	r3, #12
 800327c:	9a03      	ldr	r2, [sp, #12]
 800327e:	3801      	subs	r0, #1
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	b021      	add	sp, #132	; 0x84
 8003284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	2300      	movs	r3, #0
 800328c:	ac08      	add	r4, sp, #32
 800328e:	6163      	str	r3, [r4, #20]
 8003290:	3320      	adds	r3, #32
 8003292:	7663      	strb	r3, [r4, #25]
 8003294:	3310      	adds	r3, #16
 8003296:	76a3      	strb	r3, [r4, #26]
 8003298:	9507      	str	r5, [sp, #28]
 800329a:	0035      	movs	r5, r6
 800329c:	782b      	ldrb	r3, [r5, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <_svfiprintf_r+0x52>
 80032a2:	2b25      	cmp	r3, #37	; 0x25
 80032a4:	d147      	bne.n	8003336 <_svfiprintf_r+0xe2>
 80032a6:	1bab      	subs	r3, r5, r6
 80032a8:	9305      	str	r3, [sp, #20]
 80032aa:	42b5      	cmp	r5, r6
 80032ac:	d00c      	beq.n	80032c8 <_svfiprintf_r+0x74>
 80032ae:	0032      	movs	r2, r6
 80032b0:	0039      	movs	r1, r7
 80032b2:	9803      	ldr	r0, [sp, #12]
 80032b4:	f7ff ff6c 	bl	8003190 <__ssputs_r>
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d100      	bne.n	80032be <_svfiprintf_r+0x6a>
 80032bc:	e0ae      	b.n	800341c <_svfiprintf_r+0x1c8>
 80032be:	6962      	ldr	r2, [r4, #20]
 80032c0:	9b05      	ldr	r3, [sp, #20]
 80032c2:	4694      	mov	ip, r2
 80032c4:	4463      	add	r3, ip
 80032c6:	6163      	str	r3, [r4, #20]
 80032c8:	782b      	ldrb	r3, [r5, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d100      	bne.n	80032d0 <_svfiprintf_r+0x7c>
 80032ce:	e0a5      	b.n	800341c <_svfiprintf_r+0x1c8>
 80032d0:	2201      	movs	r2, #1
 80032d2:	2300      	movs	r3, #0
 80032d4:	4252      	negs	r2, r2
 80032d6:	6062      	str	r2, [r4, #4]
 80032d8:	a904      	add	r1, sp, #16
 80032da:	3254      	adds	r2, #84	; 0x54
 80032dc:	1852      	adds	r2, r2, r1
 80032de:	1c6e      	adds	r6, r5, #1
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	60e3      	str	r3, [r4, #12]
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	7013      	strb	r3, [r2, #0]
 80032e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80032ea:	2205      	movs	r2, #5
 80032ec:	7831      	ldrb	r1, [r6, #0]
 80032ee:	4854      	ldr	r0, [pc, #336]	; (8003440 <_svfiprintf_r+0x1ec>)
 80032f0:	f000 fa32 	bl	8003758 <memchr>
 80032f4:	1c75      	adds	r5, r6, #1
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d11f      	bne.n	800333a <_svfiprintf_r+0xe6>
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	06d3      	lsls	r3, r2, #27
 80032fe:	d504      	bpl.n	800330a <_svfiprintf_r+0xb6>
 8003300:	2353      	movs	r3, #83	; 0x53
 8003302:	a904      	add	r1, sp, #16
 8003304:	185b      	adds	r3, r3, r1
 8003306:	2120      	movs	r1, #32
 8003308:	7019      	strb	r1, [r3, #0]
 800330a:	0713      	lsls	r3, r2, #28
 800330c:	d504      	bpl.n	8003318 <_svfiprintf_r+0xc4>
 800330e:	2353      	movs	r3, #83	; 0x53
 8003310:	a904      	add	r1, sp, #16
 8003312:	185b      	adds	r3, r3, r1
 8003314:	212b      	movs	r1, #43	; 0x2b
 8003316:	7019      	strb	r1, [r3, #0]
 8003318:	7833      	ldrb	r3, [r6, #0]
 800331a:	2b2a      	cmp	r3, #42	; 0x2a
 800331c:	d016      	beq.n	800334c <_svfiprintf_r+0xf8>
 800331e:	0035      	movs	r5, r6
 8003320:	2100      	movs	r1, #0
 8003322:	200a      	movs	r0, #10
 8003324:	68e3      	ldr	r3, [r4, #12]
 8003326:	782a      	ldrb	r2, [r5, #0]
 8003328:	1c6e      	adds	r6, r5, #1
 800332a:	3a30      	subs	r2, #48	; 0x30
 800332c:	2a09      	cmp	r2, #9
 800332e:	d94e      	bls.n	80033ce <_svfiprintf_r+0x17a>
 8003330:	2900      	cmp	r1, #0
 8003332:	d111      	bne.n	8003358 <_svfiprintf_r+0x104>
 8003334:	e017      	b.n	8003366 <_svfiprintf_r+0x112>
 8003336:	3501      	adds	r5, #1
 8003338:	e7b0      	b.n	800329c <_svfiprintf_r+0x48>
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <_svfiprintf_r+0x1ec>)
 800333c:	6822      	ldr	r2, [r4, #0]
 800333e:	1ac0      	subs	r0, r0, r3
 8003340:	2301      	movs	r3, #1
 8003342:	4083      	lsls	r3, r0
 8003344:	4313      	orrs	r3, r2
 8003346:	002e      	movs	r6, r5
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	e7ce      	b.n	80032ea <_svfiprintf_r+0x96>
 800334c:	9b07      	ldr	r3, [sp, #28]
 800334e:	1d19      	adds	r1, r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	9107      	str	r1, [sp, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	db01      	blt.n	800335c <_svfiprintf_r+0x108>
 8003358:	930b      	str	r3, [sp, #44]	; 0x2c
 800335a:	e004      	b.n	8003366 <_svfiprintf_r+0x112>
 800335c:	425b      	negs	r3, r3
 800335e:	60e3      	str	r3, [r4, #12]
 8003360:	2302      	movs	r3, #2
 8003362:	4313      	orrs	r3, r2
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	782b      	ldrb	r3, [r5, #0]
 8003368:	2b2e      	cmp	r3, #46	; 0x2e
 800336a:	d10a      	bne.n	8003382 <_svfiprintf_r+0x12e>
 800336c:	786b      	ldrb	r3, [r5, #1]
 800336e:	2b2a      	cmp	r3, #42	; 0x2a
 8003370:	d135      	bne.n	80033de <_svfiprintf_r+0x18a>
 8003372:	9b07      	ldr	r3, [sp, #28]
 8003374:	3502      	adds	r5, #2
 8003376:	1d1a      	adds	r2, r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	9207      	str	r2, [sp, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db2b      	blt.n	80033d8 <_svfiprintf_r+0x184>
 8003380:	9309      	str	r3, [sp, #36]	; 0x24
 8003382:	4e30      	ldr	r6, [pc, #192]	; (8003444 <_svfiprintf_r+0x1f0>)
 8003384:	2203      	movs	r2, #3
 8003386:	0030      	movs	r0, r6
 8003388:	7829      	ldrb	r1, [r5, #0]
 800338a:	f000 f9e5 	bl	8003758 <memchr>
 800338e:	2800      	cmp	r0, #0
 8003390:	d006      	beq.n	80033a0 <_svfiprintf_r+0x14c>
 8003392:	2340      	movs	r3, #64	; 0x40
 8003394:	1b80      	subs	r0, r0, r6
 8003396:	4083      	lsls	r3, r0
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	3501      	adds	r5, #1
 800339c:	4313      	orrs	r3, r2
 800339e:	6023      	str	r3, [r4, #0]
 80033a0:	7829      	ldrb	r1, [r5, #0]
 80033a2:	2206      	movs	r2, #6
 80033a4:	4828      	ldr	r0, [pc, #160]	; (8003448 <_svfiprintf_r+0x1f4>)
 80033a6:	1c6e      	adds	r6, r5, #1
 80033a8:	7621      	strb	r1, [r4, #24]
 80033aa:	f000 f9d5 	bl	8003758 <memchr>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d03c      	beq.n	800342c <_svfiprintf_r+0x1d8>
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <_svfiprintf_r+0x1f8>)
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d125      	bne.n	8003404 <_svfiprintf_r+0x1b0>
 80033b8:	2207      	movs	r2, #7
 80033ba:	9b07      	ldr	r3, [sp, #28]
 80033bc:	3307      	adds	r3, #7
 80033be:	4393      	bics	r3, r2
 80033c0:	3308      	adds	r3, #8
 80033c2:	9307      	str	r3, [sp, #28]
 80033c4:	6963      	ldr	r3, [r4, #20]
 80033c6:	9a04      	ldr	r2, [sp, #16]
 80033c8:	189b      	adds	r3, r3, r2
 80033ca:	6163      	str	r3, [r4, #20]
 80033cc:	e765      	b.n	800329a <_svfiprintf_r+0x46>
 80033ce:	4343      	muls	r3, r0
 80033d0:	0035      	movs	r5, r6
 80033d2:	2101      	movs	r1, #1
 80033d4:	189b      	adds	r3, r3, r2
 80033d6:	e7a6      	b.n	8003326 <_svfiprintf_r+0xd2>
 80033d8:	2301      	movs	r3, #1
 80033da:	425b      	negs	r3, r3
 80033dc:	e7d0      	b.n	8003380 <_svfiprintf_r+0x12c>
 80033de:	2300      	movs	r3, #0
 80033e0:	200a      	movs	r0, #10
 80033e2:	001a      	movs	r2, r3
 80033e4:	3501      	adds	r5, #1
 80033e6:	6063      	str	r3, [r4, #4]
 80033e8:	7829      	ldrb	r1, [r5, #0]
 80033ea:	1c6e      	adds	r6, r5, #1
 80033ec:	3930      	subs	r1, #48	; 0x30
 80033ee:	2909      	cmp	r1, #9
 80033f0:	d903      	bls.n	80033fa <_svfiprintf_r+0x1a6>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0c5      	beq.n	8003382 <_svfiprintf_r+0x12e>
 80033f6:	9209      	str	r2, [sp, #36]	; 0x24
 80033f8:	e7c3      	b.n	8003382 <_svfiprintf_r+0x12e>
 80033fa:	4342      	muls	r2, r0
 80033fc:	0035      	movs	r5, r6
 80033fe:	2301      	movs	r3, #1
 8003400:	1852      	adds	r2, r2, r1
 8003402:	e7f1      	b.n	80033e8 <_svfiprintf_r+0x194>
 8003404:	ab07      	add	r3, sp, #28
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	003a      	movs	r2, r7
 800340a:	0021      	movs	r1, r4
 800340c:	4b10      	ldr	r3, [pc, #64]	; (8003450 <_svfiprintf_r+0x1fc>)
 800340e:	9803      	ldr	r0, [sp, #12]
 8003410:	e000      	b.n	8003414 <_svfiprintf_r+0x1c0>
 8003412:	bf00      	nop
 8003414:	9004      	str	r0, [sp, #16]
 8003416:	9b04      	ldr	r3, [sp, #16]
 8003418:	3301      	adds	r3, #1
 800341a:	d1d3      	bne.n	80033c4 <_svfiprintf_r+0x170>
 800341c:	89bb      	ldrh	r3, [r7, #12]
 800341e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003420:	065b      	lsls	r3, r3, #25
 8003422:	d400      	bmi.n	8003426 <_svfiprintf_r+0x1d2>
 8003424:	e72d      	b.n	8003282 <_svfiprintf_r+0x2e>
 8003426:	2001      	movs	r0, #1
 8003428:	4240      	negs	r0, r0
 800342a:	e72a      	b.n	8003282 <_svfiprintf_r+0x2e>
 800342c:	ab07      	add	r3, sp, #28
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	003a      	movs	r2, r7
 8003432:	0021      	movs	r1, r4
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <_svfiprintf_r+0x1fc>)
 8003436:	9803      	ldr	r0, [sp, #12]
 8003438:	f000 f87c 	bl	8003534 <_printf_i>
 800343c:	e7ea      	b.n	8003414 <_svfiprintf_r+0x1c0>
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	08003a30 	.word	0x08003a30
 8003444:	08003a36 	.word	0x08003a36
 8003448:	08003a3a 	.word	0x08003a3a
 800344c:	00000000 	.word	0x00000000
 8003450:	08003191 	.word	0x08003191

08003454 <_printf_common>:
 8003454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003456:	0015      	movs	r5, r2
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	688a      	ldr	r2, [r1, #8]
 800345c:	690b      	ldr	r3, [r1, #16]
 800345e:	000c      	movs	r4, r1
 8003460:	9000      	str	r0, [sp, #0]
 8003462:	4293      	cmp	r3, r2
 8003464:	da00      	bge.n	8003468 <_printf_common+0x14>
 8003466:	0013      	movs	r3, r2
 8003468:	0022      	movs	r2, r4
 800346a:	602b      	str	r3, [r5, #0]
 800346c:	3243      	adds	r2, #67	; 0x43
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	2a00      	cmp	r2, #0
 8003472:	d001      	beq.n	8003478 <_printf_common+0x24>
 8003474:	3301      	adds	r3, #1
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	069b      	lsls	r3, r3, #26
 800347c:	d502      	bpl.n	8003484 <_printf_common+0x30>
 800347e:	682b      	ldr	r3, [r5, #0]
 8003480:	3302      	adds	r3, #2
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	2306      	movs	r3, #6
 8003488:	0017      	movs	r7, r2
 800348a:	401f      	ands	r7, r3
 800348c:	421a      	tst	r2, r3
 800348e:	d027      	beq.n	80034e0 <_printf_common+0x8c>
 8003490:	0023      	movs	r3, r4
 8003492:	3343      	adds	r3, #67	; 0x43
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	1e5a      	subs	r2, r3, #1
 8003498:	4193      	sbcs	r3, r2
 800349a:	6822      	ldr	r2, [r4, #0]
 800349c:	0692      	lsls	r2, r2, #26
 800349e:	d430      	bmi.n	8003502 <_printf_common+0xae>
 80034a0:	0022      	movs	r2, r4
 80034a2:	9901      	ldr	r1, [sp, #4]
 80034a4:	9800      	ldr	r0, [sp, #0]
 80034a6:	9e08      	ldr	r6, [sp, #32]
 80034a8:	3243      	adds	r2, #67	; 0x43
 80034aa:	47b0      	blx	r6
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d025      	beq.n	80034fc <_printf_common+0xa8>
 80034b0:	2306      	movs	r3, #6
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	682a      	ldr	r2, [r5, #0]
 80034b6:	68e1      	ldr	r1, [r4, #12]
 80034b8:	2500      	movs	r5, #0
 80034ba:	4003      	ands	r3, r0
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d103      	bne.n	80034c8 <_printf_common+0x74>
 80034c0:	1a8d      	subs	r5, r1, r2
 80034c2:	43eb      	mvns	r3, r5
 80034c4:	17db      	asrs	r3, r3, #31
 80034c6:	401d      	ands	r5, r3
 80034c8:	68a3      	ldr	r3, [r4, #8]
 80034ca:	6922      	ldr	r2, [r4, #16]
 80034cc:	4293      	cmp	r3, r2
 80034ce:	dd01      	ble.n	80034d4 <_printf_common+0x80>
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	18ed      	adds	r5, r5, r3
 80034d4:	2700      	movs	r7, #0
 80034d6:	42bd      	cmp	r5, r7
 80034d8:	d120      	bne.n	800351c <_printf_common+0xc8>
 80034da:	2000      	movs	r0, #0
 80034dc:	e010      	b.n	8003500 <_printf_common+0xac>
 80034de:	3701      	adds	r7, #1
 80034e0:	68e3      	ldr	r3, [r4, #12]
 80034e2:	682a      	ldr	r2, [r5, #0]
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	42bb      	cmp	r3, r7
 80034e8:	ddd2      	ble.n	8003490 <_printf_common+0x3c>
 80034ea:	0022      	movs	r2, r4
 80034ec:	2301      	movs	r3, #1
 80034ee:	9901      	ldr	r1, [sp, #4]
 80034f0:	9800      	ldr	r0, [sp, #0]
 80034f2:	9e08      	ldr	r6, [sp, #32]
 80034f4:	3219      	adds	r2, #25
 80034f6:	47b0      	blx	r6
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	d1f0      	bne.n	80034de <_printf_common+0x8a>
 80034fc:	2001      	movs	r0, #1
 80034fe:	4240      	negs	r0, r0
 8003500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003502:	2030      	movs	r0, #48	; 0x30
 8003504:	18e1      	adds	r1, r4, r3
 8003506:	3143      	adds	r1, #67	; 0x43
 8003508:	7008      	strb	r0, [r1, #0]
 800350a:	0021      	movs	r1, r4
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	3145      	adds	r1, #69	; 0x45
 8003510:	7809      	ldrb	r1, [r1, #0]
 8003512:	18a2      	adds	r2, r4, r2
 8003514:	3243      	adds	r2, #67	; 0x43
 8003516:	3302      	adds	r3, #2
 8003518:	7011      	strb	r1, [r2, #0]
 800351a:	e7c1      	b.n	80034a0 <_printf_common+0x4c>
 800351c:	0022      	movs	r2, r4
 800351e:	2301      	movs	r3, #1
 8003520:	9901      	ldr	r1, [sp, #4]
 8003522:	9800      	ldr	r0, [sp, #0]
 8003524:	9e08      	ldr	r6, [sp, #32]
 8003526:	321a      	adds	r2, #26
 8003528:	47b0      	blx	r6
 800352a:	1c43      	adds	r3, r0, #1
 800352c:	d0e6      	beq.n	80034fc <_printf_common+0xa8>
 800352e:	3701      	adds	r7, #1
 8003530:	e7d1      	b.n	80034d6 <_printf_common+0x82>
	...

08003534 <_printf_i>:
 8003534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003536:	b08b      	sub	sp, #44	; 0x2c
 8003538:	9206      	str	r2, [sp, #24]
 800353a:	000a      	movs	r2, r1
 800353c:	3243      	adds	r2, #67	; 0x43
 800353e:	9307      	str	r3, [sp, #28]
 8003540:	9005      	str	r0, [sp, #20]
 8003542:	9204      	str	r2, [sp, #16]
 8003544:	7e0a      	ldrb	r2, [r1, #24]
 8003546:	000c      	movs	r4, r1
 8003548:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800354a:	2a78      	cmp	r2, #120	; 0x78
 800354c:	d806      	bhi.n	800355c <_printf_i+0x28>
 800354e:	2a62      	cmp	r2, #98	; 0x62
 8003550:	d808      	bhi.n	8003564 <_printf_i+0x30>
 8003552:	2a00      	cmp	r2, #0
 8003554:	d100      	bne.n	8003558 <_printf_i+0x24>
 8003556:	e0c0      	b.n	80036da <_printf_i+0x1a6>
 8003558:	2a58      	cmp	r2, #88	; 0x58
 800355a:	d052      	beq.n	8003602 <_printf_i+0xce>
 800355c:	0026      	movs	r6, r4
 800355e:	3642      	adds	r6, #66	; 0x42
 8003560:	7032      	strb	r2, [r6, #0]
 8003562:	e022      	b.n	80035aa <_printf_i+0x76>
 8003564:	0010      	movs	r0, r2
 8003566:	3863      	subs	r0, #99	; 0x63
 8003568:	2815      	cmp	r0, #21
 800356a:	d8f7      	bhi.n	800355c <_printf_i+0x28>
 800356c:	f7fc fdcc 	bl	8000108 <__gnu_thumb1_case_shi>
 8003570:	001f0016 	.word	0x001f0016
 8003574:	fff6fff6 	.word	0xfff6fff6
 8003578:	fff6fff6 	.word	0xfff6fff6
 800357c:	fff6001f 	.word	0xfff6001f
 8003580:	fff6fff6 	.word	0xfff6fff6
 8003584:	00a8fff6 	.word	0x00a8fff6
 8003588:	009a0036 	.word	0x009a0036
 800358c:	fff6fff6 	.word	0xfff6fff6
 8003590:	fff600b9 	.word	0xfff600b9
 8003594:	fff60036 	.word	0xfff60036
 8003598:	009efff6 	.word	0x009efff6
 800359c:	0026      	movs	r6, r4
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	3642      	adds	r6, #66	; 0x42
 80035a2:	1d11      	adds	r1, r2, #4
 80035a4:	6019      	str	r1, [r3, #0]
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	7033      	strb	r3, [r6, #0]
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0a7      	b.n	80036fe <_printf_i+0x1ca>
 80035ae:	6808      	ldr	r0, [r1, #0]
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	1d0a      	adds	r2, r1, #4
 80035b4:	0605      	lsls	r5, r0, #24
 80035b6:	d50b      	bpl.n	80035d0 <_printf_i+0x9c>
 80035b8:	680d      	ldr	r5, [r1, #0]
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	2d00      	cmp	r5, #0
 80035be:	da03      	bge.n	80035c8 <_printf_i+0x94>
 80035c0:	232d      	movs	r3, #45	; 0x2d
 80035c2:	9a04      	ldr	r2, [sp, #16]
 80035c4:	426d      	negs	r5, r5
 80035c6:	7013      	strb	r3, [r2, #0]
 80035c8:	4b61      	ldr	r3, [pc, #388]	; (8003750 <_printf_i+0x21c>)
 80035ca:	270a      	movs	r7, #10
 80035cc:	9303      	str	r3, [sp, #12]
 80035ce:	e032      	b.n	8003636 <_printf_i+0x102>
 80035d0:	680d      	ldr	r5, [r1, #0]
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	0641      	lsls	r1, r0, #25
 80035d6:	d5f1      	bpl.n	80035bc <_printf_i+0x88>
 80035d8:	b22d      	sxth	r5, r5
 80035da:	e7ef      	b.n	80035bc <_printf_i+0x88>
 80035dc:	680d      	ldr	r5, [r1, #0]
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	1d08      	adds	r0, r1, #4
 80035e2:	6018      	str	r0, [r3, #0]
 80035e4:	062e      	lsls	r6, r5, #24
 80035e6:	d501      	bpl.n	80035ec <_printf_i+0xb8>
 80035e8:	680d      	ldr	r5, [r1, #0]
 80035ea:	e003      	b.n	80035f4 <_printf_i+0xc0>
 80035ec:	066d      	lsls	r5, r5, #25
 80035ee:	d5fb      	bpl.n	80035e8 <_printf_i+0xb4>
 80035f0:	680d      	ldr	r5, [r1, #0]
 80035f2:	b2ad      	uxth	r5, r5
 80035f4:	4b56      	ldr	r3, [pc, #344]	; (8003750 <_printf_i+0x21c>)
 80035f6:	270a      	movs	r7, #10
 80035f8:	9303      	str	r3, [sp, #12]
 80035fa:	2a6f      	cmp	r2, #111	; 0x6f
 80035fc:	d117      	bne.n	800362e <_printf_i+0xfa>
 80035fe:	2708      	movs	r7, #8
 8003600:	e015      	b.n	800362e <_printf_i+0xfa>
 8003602:	3145      	adds	r1, #69	; 0x45
 8003604:	700a      	strb	r2, [r1, #0]
 8003606:	4a52      	ldr	r2, [pc, #328]	; (8003750 <_printf_i+0x21c>)
 8003608:	9203      	str	r2, [sp, #12]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	6821      	ldr	r1, [r4, #0]
 800360e:	ca20      	ldmia	r2!, {r5}
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	0608      	lsls	r0, r1, #24
 8003614:	d550      	bpl.n	80036b8 <_printf_i+0x184>
 8003616:	07cb      	lsls	r3, r1, #31
 8003618:	d502      	bpl.n	8003620 <_printf_i+0xec>
 800361a:	2320      	movs	r3, #32
 800361c:	4319      	orrs	r1, r3
 800361e:	6021      	str	r1, [r4, #0]
 8003620:	2710      	movs	r7, #16
 8003622:	2d00      	cmp	r5, #0
 8003624:	d103      	bne.n	800362e <_printf_i+0xfa>
 8003626:	2320      	movs	r3, #32
 8003628:	6822      	ldr	r2, [r4, #0]
 800362a:	439a      	bics	r2, r3
 800362c:	6022      	str	r2, [r4, #0]
 800362e:	0023      	movs	r3, r4
 8003630:	2200      	movs	r2, #0
 8003632:	3343      	adds	r3, #67	; 0x43
 8003634:	701a      	strb	r2, [r3, #0]
 8003636:	6863      	ldr	r3, [r4, #4]
 8003638:	60a3      	str	r3, [r4, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	db03      	blt.n	8003646 <_printf_i+0x112>
 800363e:	2204      	movs	r2, #4
 8003640:	6821      	ldr	r1, [r4, #0]
 8003642:	4391      	bics	r1, r2
 8003644:	6021      	str	r1, [r4, #0]
 8003646:	2d00      	cmp	r5, #0
 8003648:	d102      	bne.n	8003650 <_printf_i+0x11c>
 800364a:	9e04      	ldr	r6, [sp, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <_printf_i+0x136>
 8003650:	9e04      	ldr	r6, [sp, #16]
 8003652:	0028      	movs	r0, r5
 8003654:	0039      	movs	r1, r7
 8003656:	f7fc fde7 	bl	8000228 <__aeabi_uidivmod>
 800365a:	9b03      	ldr	r3, [sp, #12]
 800365c:	3e01      	subs	r6, #1
 800365e:	5c5b      	ldrb	r3, [r3, r1]
 8003660:	7033      	strb	r3, [r6, #0]
 8003662:	002b      	movs	r3, r5
 8003664:	0005      	movs	r5, r0
 8003666:	429f      	cmp	r7, r3
 8003668:	d9f3      	bls.n	8003652 <_printf_i+0x11e>
 800366a:	2f08      	cmp	r7, #8
 800366c:	d109      	bne.n	8003682 <_printf_i+0x14e>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	07db      	lsls	r3, r3, #31
 8003672:	d506      	bpl.n	8003682 <_printf_i+0x14e>
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	6922      	ldr	r2, [r4, #16]
 8003678:	4293      	cmp	r3, r2
 800367a:	dc02      	bgt.n	8003682 <_printf_i+0x14e>
 800367c:	2330      	movs	r3, #48	; 0x30
 800367e:	3e01      	subs	r6, #1
 8003680:	7033      	strb	r3, [r6, #0]
 8003682:	9b04      	ldr	r3, [sp, #16]
 8003684:	1b9b      	subs	r3, r3, r6
 8003686:	6123      	str	r3, [r4, #16]
 8003688:	9b07      	ldr	r3, [sp, #28]
 800368a:	0021      	movs	r1, r4
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	9805      	ldr	r0, [sp, #20]
 8003690:	9b06      	ldr	r3, [sp, #24]
 8003692:	aa09      	add	r2, sp, #36	; 0x24
 8003694:	f7ff fede 	bl	8003454 <_printf_common>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d135      	bne.n	8003708 <_printf_i+0x1d4>
 800369c:	2001      	movs	r0, #1
 800369e:	4240      	negs	r0, r0
 80036a0:	b00b      	add	sp, #44	; 0x2c
 80036a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a4:	2220      	movs	r2, #32
 80036a6:	6809      	ldr	r1, [r1, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	6022      	str	r2, [r4, #0]
 80036ac:	0022      	movs	r2, r4
 80036ae:	2178      	movs	r1, #120	; 0x78
 80036b0:	3245      	adds	r2, #69	; 0x45
 80036b2:	7011      	strb	r1, [r2, #0]
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <_printf_i+0x220>)
 80036b6:	e7a7      	b.n	8003608 <_printf_i+0xd4>
 80036b8:	0648      	lsls	r0, r1, #25
 80036ba:	d5ac      	bpl.n	8003616 <_printf_i+0xe2>
 80036bc:	b2ad      	uxth	r5, r5
 80036be:	e7aa      	b.n	8003616 <_printf_i+0xe2>
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	680d      	ldr	r5, [r1, #0]
 80036c4:	1d10      	adds	r0, r2, #4
 80036c6:	6949      	ldr	r1, [r1, #20]
 80036c8:	6018      	str	r0, [r3, #0]
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	062e      	lsls	r6, r5, #24
 80036ce:	d501      	bpl.n	80036d4 <_printf_i+0x1a0>
 80036d0:	6019      	str	r1, [r3, #0]
 80036d2:	e002      	b.n	80036da <_printf_i+0x1a6>
 80036d4:	066d      	lsls	r5, r5, #25
 80036d6:	d5fb      	bpl.n	80036d0 <_printf_i+0x19c>
 80036d8:	8019      	strh	r1, [r3, #0]
 80036da:	2300      	movs	r3, #0
 80036dc:	9e04      	ldr	r6, [sp, #16]
 80036de:	6123      	str	r3, [r4, #16]
 80036e0:	e7d2      	b.n	8003688 <_printf_i+0x154>
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	1d11      	adds	r1, r2, #4
 80036e6:	6019      	str	r1, [r3, #0]
 80036e8:	6816      	ldr	r6, [r2, #0]
 80036ea:	2100      	movs	r1, #0
 80036ec:	0030      	movs	r0, r6
 80036ee:	6862      	ldr	r2, [r4, #4]
 80036f0:	f000 f832 	bl	8003758 <memchr>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d001      	beq.n	80036fc <_printf_i+0x1c8>
 80036f8:	1b80      	subs	r0, r0, r6
 80036fa:	6060      	str	r0, [r4, #4]
 80036fc:	6863      	ldr	r3, [r4, #4]
 80036fe:	6123      	str	r3, [r4, #16]
 8003700:	2300      	movs	r3, #0
 8003702:	9a04      	ldr	r2, [sp, #16]
 8003704:	7013      	strb	r3, [r2, #0]
 8003706:	e7bf      	b.n	8003688 <_printf_i+0x154>
 8003708:	6923      	ldr	r3, [r4, #16]
 800370a:	0032      	movs	r2, r6
 800370c:	9906      	ldr	r1, [sp, #24]
 800370e:	9805      	ldr	r0, [sp, #20]
 8003710:	9d07      	ldr	r5, [sp, #28]
 8003712:	47a8      	blx	r5
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d0c1      	beq.n	800369c <_printf_i+0x168>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	079b      	lsls	r3, r3, #30
 800371c:	d415      	bmi.n	800374a <_printf_i+0x216>
 800371e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003720:	68e0      	ldr	r0, [r4, #12]
 8003722:	4298      	cmp	r0, r3
 8003724:	dabc      	bge.n	80036a0 <_printf_i+0x16c>
 8003726:	0018      	movs	r0, r3
 8003728:	e7ba      	b.n	80036a0 <_printf_i+0x16c>
 800372a:	0022      	movs	r2, r4
 800372c:	2301      	movs	r3, #1
 800372e:	9906      	ldr	r1, [sp, #24]
 8003730:	9805      	ldr	r0, [sp, #20]
 8003732:	9e07      	ldr	r6, [sp, #28]
 8003734:	3219      	adds	r2, #25
 8003736:	47b0      	blx	r6
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d0af      	beq.n	800369c <_printf_i+0x168>
 800373c:	3501      	adds	r5, #1
 800373e:	68e3      	ldr	r3, [r4, #12]
 8003740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	42ab      	cmp	r3, r5
 8003746:	dcf0      	bgt.n	800372a <_printf_i+0x1f6>
 8003748:	e7e9      	b.n	800371e <_printf_i+0x1ea>
 800374a:	2500      	movs	r5, #0
 800374c:	e7f7      	b.n	800373e <_printf_i+0x20a>
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	08003a41 	.word	0x08003a41
 8003754:	08003a52 	.word	0x08003a52

08003758 <memchr>:
 8003758:	b2c9      	uxtb	r1, r1
 800375a:	1882      	adds	r2, r0, r2
 800375c:	4290      	cmp	r0, r2
 800375e:	d101      	bne.n	8003764 <memchr+0xc>
 8003760:	2000      	movs	r0, #0
 8003762:	4770      	bx	lr
 8003764:	7803      	ldrb	r3, [r0, #0]
 8003766:	428b      	cmp	r3, r1
 8003768:	d0fb      	beq.n	8003762 <memchr+0xa>
 800376a:	3001      	adds	r0, #1
 800376c:	e7f6      	b.n	800375c <memchr+0x4>

0800376e <memcpy>:
 800376e:	2300      	movs	r3, #0
 8003770:	b510      	push	{r4, lr}
 8003772:	429a      	cmp	r2, r3
 8003774:	d100      	bne.n	8003778 <memcpy+0xa>
 8003776:	bd10      	pop	{r4, pc}
 8003778:	5ccc      	ldrb	r4, [r1, r3]
 800377a:	54c4      	strb	r4, [r0, r3]
 800377c:	3301      	adds	r3, #1
 800377e:	e7f8      	b.n	8003772 <memcpy+0x4>

08003780 <memmove>:
 8003780:	b510      	push	{r4, lr}
 8003782:	4288      	cmp	r0, r1
 8003784:	d902      	bls.n	800378c <memmove+0xc>
 8003786:	188b      	adds	r3, r1, r2
 8003788:	4298      	cmp	r0, r3
 800378a:	d303      	bcc.n	8003794 <memmove+0x14>
 800378c:	2300      	movs	r3, #0
 800378e:	e007      	b.n	80037a0 <memmove+0x20>
 8003790:	5c8b      	ldrb	r3, [r1, r2]
 8003792:	5483      	strb	r3, [r0, r2]
 8003794:	3a01      	subs	r2, #1
 8003796:	d2fb      	bcs.n	8003790 <memmove+0x10>
 8003798:	bd10      	pop	{r4, pc}
 800379a:	5ccc      	ldrb	r4, [r1, r3]
 800379c:	54c4      	strb	r4, [r0, r3]
 800379e:	3301      	adds	r3, #1
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1fa      	bne.n	800379a <memmove+0x1a>
 80037a4:	e7f8      	b.n	8003798 <memmove+0x18>
	...

080037a8 <_free_r>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	0005      	movs	r5, r0
 80037ac:	2900      	cmp	r1, #0
 80037ae:	d010      	beq.n	80037d2 <_free_r+0x2a>
 80037b0:	1f0c      	subs	r4, r1, #4
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da00      	bge.n	80037ba <_free_r+0x12>
 80037b8:	18e4      	adds	r4, r4, r3
 80037ba:	0028      	movs	r0, r5
 80037bc:	f000 f8d4 	bl	8003968 <__malloc_lock>
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <_free_r+0x90>)
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <_free_r+0x2c>
 80037c8:	6063      	str	r3, [r4, #4]
 80037ca:	6014      	str	r4, [r2, #0]
 80037cc:	0028      	movs	r0, r5
 80037ce:	f000 f8d3 	bl	8003978 <__malloc_unlock>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	42a3      	cmp	r3, r4
 80037d6:	d908      	bls.n	80037ea <_free_r+0x42>
 80037d8:	6821      	ldr	r1, [r4, #0]
 80037da:	1860      	adds	r0, r4, r1
 80037dc:	4283      	cmp	r3, r0
 80037de:	d1f3      	bne.n	80037c8 <_free_r+0x20>
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	1841      	adds	r1, r0, r1
 80037e6:	6021      	str	r1, [r4, #0]
 80037e8:	e7ee      	b.n	80037c8 <_free_r+0x20>
 80037ea:	001a      	movs	r2, r3
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <_free_r+0x4e>
 80037f2:	42a3      	cmp	r3, r4
 80037f4:	d9f9      	bls.n	80037ea <_free_r+0x42>
 80037f6:	6811      	ldr	r1, [r2, #0]
 80037f8:	1850      	adds	r0, r2, r1
 80037fa:	42a0      	cmp	r0, r4
 80037fc:	d10b      	bne.n	8003816 <_free_r+0x6e>
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	1809      	adds	r1, r1, r0
 8003802:	1850      	adds	r0, r2, r1
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	4283      	cmp	r3, r0
 8003808:	d1e0      	bne.n	80037cc <_free_r+0x24>
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	1841      	adds	r1, r0, r1
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	6053      	str	r3, [r2, #4]
 8003814:	e7da      	b.n	80037cc <_free_r+0x24>
 8003816:	42a0      	cmp	r0, r4
 8003818:	d902      	bls.n	8003820 <_free_r+0x78>
 800381a:	230c      	movs	r3, #12
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	e7d5      	b.n	80037cc <_free_r+0x24>
 8003820:	6821      	ldr	r1, [r4, #0]
 8003822:	1860      	adds	r0, r4, r1
 8003824:	4283      	cmp	r3, r0
 8003826:	d103      	bne.n	8003830 <_free_r+0x88>
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	1841      	adds	r1, r0, r1
 800382e:	6021      	str	r1, [r4, #0]
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	6054      	str	r4, [r2, #4]
 8003834:	e7ca      	b.n	80037cc <_free_r+0x24>
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	20000090 	.word	0x20000090

0800383c <_malloc_r>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	2303      	movs	r3, #3
 8003840:	1ccd      	adds	r5, r1, #3
 8003842:	439d      	bics	r5, r3
 8003844:	3508      	adds	r5, #8
 8003846:	0006      	movs	r6, r0
 8003848:	2d0c      	cmp	r5, #12
 800384a:	d21f      	bcs.n	800388c <_malloc_r+0x50>
 800384c:	250c      	movs	r5, #12
 800384e:	42a9      	cmp	r1, r5
 8003850:	d81e      	bhi.n	8003890 <_malloc_r+0x54>
 8003852:	0030      	movs	r0, r6
 8003854:	f000 f888 	bl	8003968 <__malloc_lock>
 8003858:	4925      	ldr	r1, [pc, #148]	; (80038f0 <_malloc_r+0xb4>)
 800385a:	680a      	ldr	r2, [r1, #0]
 800385c:	0014      	movs	r4, r2
 800385e:	2c00      	cmp	r4, #0
 8003860:	d11a      	bne.n	8003898 <_malloc_r+0x5c>
 8003862:	4f24      	ldr	r7, [pc, #144]	; (80038f4 <_malloc_r+0xb8>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <_malloc_r+0x38>
 800386a:	0021      	movs	r1, r4
 800386c:	0030      	movs	r0, r6
 800386e:	f000 f869 	bl	8003944 <_sbrk_r>
 8003872:	6038      	str	r0, [r7, #0]
 8003874:	0029      	movs	r1, r5
 8003876:	0030      	movs	r0, r6
 8003878:	f000 f864 	bl	8003944 <_sbrk_r>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d12b      	bne.n	80038d8 <_malloc_r+0x9c>
 8003880:	230c      	movs	r3, #12
 8003882:	0030      	movs	r0, r6
 8003884:	6033      	str	r3, [r6, #0]
 8003886:	f000 f877 	bl	8003978 <__malloc_unlock>
 800388a:	e003      	b.n	8003894 <_malloc_r+0x58>
 800388c:	2d00      	cmp	r5, #0
 800388e:	dade      	bge.n	800384e <_malloc_r+0x12>
 8003890:	230c      	movs	r3, #12
 8003892:	6033      	str	r3, [r6, #0]
 8003894:	2000      	movs	r0, #0
 8003896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	1b5b      	subs	r3, r3, r5
 800389c:	d419      	bmi.n	80038d2 <_malloc_r+0x96>
 800389e:	2b0b      	cmp	r3, #11
 80038a0:	d903      	bls.n	80038aa <_malloc_r+0x6e>
 80038a2:	6023      	str	r3, [r4, #0]
 80038a4:	18e4      	adds	r4, r4, r3
 80038a6:	6025      	str	r5, [r4, #0]
 80038a8:	e003      	b.n	80038b2 <_malloc_r+0x76>
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	42a2      	cmp	r2, r4
 80038ae:	d10e      	bne.n	80038ce <_malloc_r+0x92>
 80038b0:	600b      	str	r3, [r1, #0]
 80038b2:	0030      	movs	r0, r6
 80038b4:	f000 f860 	bl	8003978 <__malloc_unlock>
 80038b8:	0020      	movs	r0, r4
 80038ba:	2207      	movs	r2, #7
 80038bc:	300b      	adds	r0, #11
 80038be:	1d23      	adds	r3, r4, #4
 80038c0:	4390      	bics	r0, r2
 80038c2:	1ac2      	subs	r2, r0, r3
 80038c4:	4298      	cmp	r0, r3
 80038c6:	d0e6      	beq.n	8003896 <_malloc_r+0x5a>
 80038c8:	1a1b      	subs	r3, r3, r0
 80038ca:	50a3      	str	r3, [r4, r2]
 80038cc:	e7e3      	b.n	8003896 <_malloc_r+0x5a>
 80038ce:	6053      	str	r3, [r2, #4]
 80038d0:	e7ef      	b.n	80038b2 <_malloc_r+0x76>
 80038d2:	0022      	movs	r2, r4
 80038d4:	6864      	ldr	r4, [r4, #4]
 80038d6:	e7c2      	b.n	800385e <_malloc_r+0x22>
 80038d8:	2303      	movs	r3, #3
 80038da:	1cc4      	adds	r4, r0, #3
 80038dc:	439c      	bics	r4, r3
 80038de:	42a0      	cmp	r0, r4
 80038e0:	d0e1      	beq.n	80038a6 <_malloc_r+0x6a>
 80038e2:	1a21      	subs	r1, r4, r0
 80038e4:	0030      	movs	r0, r6
 80038e6:	f000 f82d 	bl	8003944 <_sbrk_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	d1db      	bne.n	80038a6 <_malloc_r+0x6a>
 80038ee:	e7c7      	b.n	8003880 <_malloc_r+0x44>
 80038f0:	20000090 	.word	0x20000090
 80038f4:	20000094 	.word	0x20000094

080038f8 <_realloc_r>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	0007      	movs	r7, r0
 80038fc:	000d      	movs	r5, r1
 80038fe:	0016      	movs	r6, r2
 8003900:	2900      	cmp	r1, #0
 8003902:	d105      	bne.n	8003910 <_realloc_r+0x18>
 8003904:	0011      	movs	r1, r2
 8003906:	f7ff ff99 	bl	800383c <_malloc_r>
 800390a:	0004      	movs	r4, r0
 800390c:	0020      	movs	r0, r4
 800390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003910:	2a00      	cmp	r2, #0
 8003912:	d103      	bne.n	800391c <_realloc_r+0x24>
 8003914:	f7ff ff48 	bl	80037a8 <_free_r>
 8003918:	0034      	movs	r4, r6
 800391a:	e7f7      	b.n	800390c <_realloc_r+0x14>
 800391c:	f000 f834 	bl	8003988 <_malloc_usable_size_r>
 8003920:	002c      	movs	r4, r5
 8003922:	42b0      	cmp	r0, r6
 8003924:	d2f2      	bcs.n	800390c <_realloc_r+0x14>
 8003926:	0031      	movs	r1, r6
 8003928:	0038      	movs	r0, r7
 800392a:	f7ff ff87 	bl	800383c <_malloc_r>
 800392e:	1e04      	subs	r4, r0, #0
 8003930:	d0ec      	beq.n	800390c <_realloc_r+0x14>
 8003932:	0029      	movs	r1, r5
 8003934:	0032      	movs	r2, r6
 8003936:	f7ff ff1a 	bl	800376e <memcpy>
 800393a:	0029      	movs	r1, r5
 800393c:	0038      	movs	r0, r7
 800393e:	f7ff ff33 	bl	80037a8 <_free_r>
 8003942:	e7e3      	b.n	800390c <_realloc_r+0x14>

08003944 <_sbrk_r>:
 8003944:	2300      	movs	r3, #0
 8003946:	b570      	push	{r4, r5, r6, lr}
 8003948:	4d06      	ldr	r5, [pc, #24]	; (8003964 <_sbrk_r+0x20>)
 800394a:	0004      	movs	r4, r0
 800394c:	0008      	movs	r0, r1
 800394e:	602b      	str	r3, [r5, #0]
 8003950:	f7fd fa08 	bl	8000d64 <_sbrk>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d103      	bne.n	8003960 <_sbrk_r+0x1c>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d000      	beq.n	8003960 <_sbrk_r+0x1c>
 800395e:	6023      	str	r3, [r4, #0]
 8003960:	bd70      	pop	{r4, r5, r6, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20000188 	.word	0x20000188

08003968 <__malloc_lock>:
 8003968:	b510      	push	{r4, lr}
 800396a:	4802      	ldr	r0, [pc, #8]	; (8003974 <__malloc_lock+0xc>)
 800396c:	f000 f814 	bl	8003998 <__retarget_lock_acquire_recursive>
 8003970:	bd10      	pop	{r4, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	20000190 	.word	0x20000190

08003978 <__malloc_unlock>:
 8003978:	b510      	push	{r4, lr}
 800397a:	4802      	ldr	r0, [pc, #8]	; (8003984 <__malloc_unlock+0xc>)
 800397c:	f000 f80d 	bl	800399a <__retarget_lock_release_recursive>
 8003980:	bd10      	pop	{r4, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	20000190 	.word	0x20000190

08003988 <_malloc_usable_size_r>:
 8003988:	1f0b      	subs	r3, r1, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	1f18      	subs	r0, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	da01      	bge.n	8003996 <_malloc_usable_size_r+0xe>
 8003992:	580b      	ldr	r3, [r1, r0]
 8003994:	18c0      	adds	r0, r0, r3
 8003996:	4770      	bx	lr

08003998 <__retarget_lock_acquire_recursive>:
 8003998:	4770      	bx	lr

0800399a <__retarget_lock_release_recursive>:
 800399a:	4770      	bx	lr

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
