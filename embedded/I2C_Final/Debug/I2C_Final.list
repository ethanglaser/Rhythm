
I2C_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005fa8  08005fa8  00015fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006150  08006150  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006158  08006158  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a8  20000084  080061e4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  080061e4  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008985  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001613  00000000  00000000  00028a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  0002a048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002a790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011e0b  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fa5  00000000  00000000  0003cc2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000735cb  00000000  00000000  00043bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b719b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e30  00000000  00000000  000b7218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005f90 	.word	0x08005f90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08005f90 	.word	0x08005f90

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fa8b 	bl	800174c <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f9e3 	bl	800160c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fa7d 	bl	800174c <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fa73 	bl	800174c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fa05 	bl	8001684 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f9fb 	bl	8001684 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_uldivmod>:
 800029c:	2b00      	cmp	r3, #0
 800029e:	d111      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d10f      	bne.n	80002c4 <__aeabi_uldivmod+0x28>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	d100      	bne.n	80002aa <__aeabi_uldivmod+0xe>
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d002      	beq.n	80002b2 <__aeabi_uldivmod+0x16>
 80002ac:	2100      	movs	r1, #0
 80002ae:	43c9      	mvns	r1, r1
 80002b0:	1c08      	adds	r0, r1, #0
 80002b2:	b407      	push	{r0, r1, r2}
 80002b4:	4802      	ldr	r0, [pc, #8]	; (80002c0 <__aeabi_uldivmod+0x24>)
 80002b6:	a102      	add	r1, pc, #8	; (adr r1, 80002c0 <__aeabi_uldivmod+0x24>)
 80002b8:	1840      	adds	r0, r0, r1
 80002ba:	9002      	str	r0, [sp, #8]
 80002bc:	bd03      	pop	{r0, r1, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	ffffff5d 	.word	0xffffff5d
 80002c4:	b403      	push	{r0, r1}
 80002c6:	4668      	mov	r0, sp
 80002c8:	b501      	push	{r0, lr}
 80002ca:	9802      	ldr	r0, [sp, #8]
 80002cc:	f000 f830 	bl	8000330 <__udivmoddi4>
 80002d0:	9b01      	ldr	r3, [sp, #4]
 80002d2:	469e      	mov	lr, r3
 80002d4:	b002      	add	sp, #8
 80002d6:	bc0c      	pop	{r2, r3}
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <__aeabi_lmul>:
 80002dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002de:	46ce      	mov	lr, r9
 80002e0:	4647      	mov	r7, r8
 80002e2:	0415      	lsls	r5, r2, #16
 80002e4:	0c2d      	lsrs	r5, r5, #16
 80002e6:	002e      	movs	r6, r5
 80002e8:	b580      	push	{r7, lr}
 80002ea:	0407      	lsls	r7, r0, #16
 80002ec:	0c14      	lsrs	r4, r2, #16
 80002ee:	0c3f      	lsrs	r7, r7, #16
 80002f0:	4699      	mov	r9, r3
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	437e      	muls	r6, r7
 80002f6:	435d      	muls	r5, r3
 80002f8:	4367      	muls	r7, r4
 80002fa:	4363      	muls	r3, r4
 80002fc:	197f      	adds	r7, r7, r5
 80002fe:	0c34      	lsrs	r4, r6, #16
 8000300:	19e4      	adds	r4, r4, r7
 8000302:	469c      	mov	ip, r3
 8000304:	42a5      	cmp	r5, r4
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x34>
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	464b      	mov	r3, r9
 8000312:	4343      	muls	r3, r0
 8000314:	4351      	muls	r1, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	0436      	lsls	r6, r6, #16
 800031a:	4465      	add	r5, ip
 800031c:	0c36      	lsrs	r6, r6, #16
 800031e:	0424      	lsls	r4, r4, #16
 8000320:	19a4      	adds	r4, r4, r6
 8000322:	195b      	adds	r3, r3, r5
 8000324:	1859      	adds	r1, r3, r1
 8000326:	0020      	movs	r0, r4
 8000328:	bc0c      	pop	{r2, r3}
 800032a:	4690      	mov	r8, r2
 800032c:	4699      	mov	r9, r3
 800032e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000330 <__udivmoddi4>:
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000332:	464f      	mov	r7, r9
 8000334:	4646      	mov	r6, r8
 8000336:	46d6      	mov	lr, sl
 8000338:	b5c0      	push	{r6, r7, lr}
 800033a:	0004      	movs	r4, r0
 800033c:	b082      	sub	sp, #8
 800033e:	000d      	movs	r5, r1
 8000340:	4691      	mov	r9, r2
 8000342:	4698      	mov	r8, r3
 8000344:	428b      	cmp	r3, r1
 8000346:	d82f      	bhi.n	80003a8 <__udivmoddi4+0x78>
 8000348:	d02c      	beq.n	80003a4 <__udivmoddi4+0x74>
 800034a:	4641      	mov	r1, r8
 800034c:	4648      	mov	r0, r9
 800034e:	f002 f969 	bl	8002624 <__clzdi2>
 8000352:	0029      	movs	r1, r5
 8000354:	0006      	movs	r6, r0
 8000356:	0020      	movs	r0, r4
 8000358:	f002 f964 	bl	8002624 <__clzdi2>
 800035c:	1a33      	subs	r3, r6, r0
 800035e:	469c      	mov	ip, r3
 8000360:	3b20      	subs	r3, #32
 8000362:	469a      	mov	sl, r3
 8000364:	d500      	bpl.n	8000368 <__udivmoddi4+0x38>
 8000366:	e076      	b.n	8000456 <__udivmoddi4+0x126>
 8000368:	464b      	mov	r3, r9
 800036a:	4652      	mov	r2, sl
 800036c:	4093      	lsls	r3, r2
 800036e:	001f      	movs	r7, r3
 8000370:	464b      	mov	r3, r9
 8000372:	4662      	mov	r2, ip
 8000374:	4093      	lsls	r3, r2
 8000376:	001e      	movs	r6, r3
 8000378:	42af      	cmp	r7, r5
 800037a:	d828      	bhi.n	80003ce <__udivmoddi4+0x9e>
 800037c:	d025      	beq.n	80003ca <__udivmoddi4+0x9a>
 800037e:	4653      	mov	r3, sl
 8000380:	1ba4      	subs	r4, r4, r6
 8000382:	41bd      	sbcs	r5, r7
 8000384:	2b00      	cmp	r3, #0
 8000386:	da00      	bge.n	800038a <__udivmoddi4+0x5a>
 8000388:	e07b      	b.n	8000482 <__udivmoddi4+0x152>
 800038a:	2200      	movs	r2, #0
 800038c:	2300      	movs	r3, #0
 800038e:	9200      	str	r2, [sp, #0]
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	4652      	mov	r2, sl
 8000396:	4093      	lsls	r3, r2
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	2301      	movs	r3, #1
 800039c:	4662      	mov	r2, ip
 800039e:	4093      	lsls	r3, r2
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	e018      	b.n	80003d6 <__udivmoddi4+0xa6>
 80003a4:	4282      	cmp	r2, r0
 80003a6:	d9d0      	bls.n	800034a <__udivmoddi4+0x1a>
 80003a8:	2200      	movs	r2, #0
 80003aa:	2300      	movs	r3, #0
 80003ac:	9200      	str	r2, [sp, #0]
 80003ae:	9301      	str	r3, [sp, #4]
 80003b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <__udivmoddi4+0x8a>
 80003b6:	601c      	str	r4, [r3, #0]
 80003b8:	605d      	str	r5, [r3, #4]
 80003ba:	9800      	ldr	r0, [sp, #0]
 80003bc:	9901      	ldr	r1, [sp, #4]
 80003be:	b002      	add	sp, #8
 80003c0:	bc1c      	pop	{r2, r3, r4}
 80003c2:	4690      	mov	r8, r2
 80003c4:	4699      	mov	r9, r3
 80003c6:	46a2      	mov	sl, r4
 80003c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d9d7      	bls.n	800037e <__udivmoddi4+0x4e>
 80003ce:	2200      	movs	r2, #0
 80003d0:	2300      	movs	r3, #0
 80003d2:	9200      	str	r2, [sp, #0]
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	4663      	mov	r3, ip
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0e9      	beq.n	80003b0 <__udivmoddi4+0x80>
 80003dc:	07fb      	lsls	r3, r7, #31
 80003de:	4698      	mov	r8, r3
 80003e0:	4641      	mov	r1, r8
 80003e2:	0872      	lsrs	r2, r6, #1
 80003e4:	430a      	orrs	r2, r1
 80003e6:	087b      	lsrs	r3, r7, #1
 80003e8:	4666      	mov	r6, ip
 80003ea:	e00e      	b.n	800040a <__udivmoddi4+0xda>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	d101      	bne.n	80003f4 <__udivmoddi4+0xc4>
 80003f0:	42a2      	cmp	r2, r4
 80003f2:	d80c      	bhi.n	800040e <__udivmoddi4+0xde>
 80003f4:	1aa4      	subs	r4, r4, r2
 80003f6:	419d      	sbcs	r5, r3
 80003f8:	2001      	movs	r0, #1
 80003fa:	1924      	adds	r4, r4, r4
 80003fc:	416d      	adcs	r5, r5
 80003fe:	2100      	movs	r1, #0
 8000400:	3e01      	subs	r6, #1
 8000402:	1824      	adds	r4, r4, r0
 8000404:	414d      	adcs	r5, r1
 8000406:	2e00      	cmp	r6, #0
 8000408:	d006      	beq.n	8000418 <__udivmoddi4+0xe8>
 800040a:	42ab      	cmp	r3, r5
 800040c:	d9ee      	bls.n	80003ec <__udivmoddi4+0xbc>
 800040e:	3e01      	subs	r6, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2e00      	cmp	r6, #0
 8000416:	d1f8      	bne.n	800040a <__udivmoddi4+0xda>
 8000418:	9800      	ldr	r0, [sp, #0]
 800041a:	9901      	ldr	r1, [sp, #4]
 800041c:	4653      	mov	r3, sl
 800041e:	1900      	adds	r0, r0, r4
 8000420:	4169      	adcs	r1, r5
 8000422:	2b00      	cmp	r3, #0
 8000424:	db23      	blt.n	800046e <__udivmoddi4+0x13e>
 8000426:	002b      	movs	r3, r5
 8000428:	4652      	mov	r2, sl
 800042a:	40d3      	lsrs	r3, r2
 800042c:	002a      	movs	r2, r5
 800042e:	4664      	mov	r4, ip
 8000430:	40e2      	lsrs	r2, r4
 8000432:	001c      	movs	r4, r3
 8000434:	4653      	mov	r3, sl
 8000436:	0015      	movs	r5, r2
 8000438:	2b00      	cmp	r3, #0
 800043a:	db2d      	blt.n	8000498 <__udivmoddi4+0x168>
 800043c:	0026      	movs	r6, r4
 800043e:	4657      	mov	r7, sl
 8000440:	40be      	lsls	r6, r7
 8000442:	0033      	movs	r3, r6
 8000444:	0026      	movs	r6, r4
 8000446:	4667      	mov	r7, ip
 8000448:	40be      	lsls	r6, r7
 800044a:	0032      	movs	r2, r6
 800044c:	1a80      	subs	r0, r0, r2
 800044e:	4199      	sbcs	r1, r3
 8000450:	9000      	str	r0, [sp, #0]
 8000452:	9101      	str	r1, [sp, #4]
 8000454:	e7ac      	b.n	80003b0 <__udivmoddi4+0x80>
 8000456:	4662      	mov	r2, ip
 8000458:	2320      	movs	r3, #32
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	464a      	mov	r2, r9
 800045e:	40da      	lsrs	r2, r3
 8000460:	4661      	mov	r1, ip
 8000462:	0013      	movs	r3, r2
 8000464:	4642      	mov	r2, r8
 8000466:	408a      	lsls	r2, r1
 8000468:	0017      	movs	r7, r2
 800046a:	431f      	orrs	r7, r3
 800046c:	e780      	b.n	8000370 <__udivmoddi4+0x40>
 800046e:	4662      	mov	r2, ip
 8000470:	2320      	movs	r3, #32
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	4666      	mov	r6, ip
 8000478:	409a      	lsls	r2, r3
 800047a:	0023      	movs	r3, r4
 800047c:	40f3      	lsrs	r3, r6
 800047e:	4313      	orrs	r3, r2
 8000480:	e7d4      	b.n	800042c <__udivmoddi4+0xfc>
 8000482:	4662      	mov	r2, ip
 8000484:	2320      	movs	r3, #32
 8000486:	2100      	movs	r1, #0
 8000488:	1a9b      	subs	r3, r3, r2
 800048a:	2200      	movs	r2, #0
 800048c:	9100      	str	r1, [sp, #0]
 800048e:	9201      	str	r2, [sp, #4]
 8000490:	2201      	movs	r2, #1
 8000492:	40da      	lsrs	r2, r3
 8000494:	9201      	str	r2, [sp, #4]
 8000496:	e780      	b.n	800039a <__udivmoddi4+0x6a>
 8000498:	2320      	movs	r3, #32
 800049a:	4662      	mov	r2, ip
 800049c:	0026      	movs	r6, r4
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	40de      	lsrs	r6, r3
 80004a2:	002f      	movs	r7, r5
 80004a4:	46b0      	mov	r8, r6
 80004a6:	4666      	mov	r6, ip
 80004a8:	40b7      	lsls	r7, r6
 80004aa:	4646      	mov	r6, r8
 80004ac:	003b      	movs	r3, r7
 80004ae:	4333      	orrs	r3, r6
 80004b0:	e7c8      	b.n	8000444 <__udivmoddi4+0x114>
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fdiv>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	0244      	lsls	r4, r0, #9
 80004c0:	b5e0      	push	{r5, r6, r7, lr}
 80004c2:	0046      	lsls	r6, r0, #1
 80004c4:	4688      	mov	r8, r1
 80004c6:	0a64      	lsrs	r4, r4, #9
 80004c8:	0e36      	lsrs	r6, r6, #24
 80004ca:	0fc7      	lsrs	r7, r0, #31
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d063      	beq.n	8000598 <__aeabi_fdiv+0xe4>
 80004d0:	2eff      	cmp	r6, #255	; 0xff
 80004d2:	d024      	beq.n	800051e <__aeabi_fdiv+0x6a>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	00e4      	lsls	r4, r4, #3
 80004d8:	04db      	lsls	r3, r3, #19
 80004da:	431c      	orrs	r4, r3
 80004dc:	2300      	movs	r3, #0
 80004de:	4699      	mov	r9, r3
 80004e0:	469b      	mov	fp, r3
 80004e2:	3e7f      	subs	r6, #127	; 0x7f
 80004e4:	4643      	mov	r3, r8
 80004e6:	4642      	mov	r2, r8
 80004e8:	025d      	lsls	r5, r3, #9
 80004ea:	0fd2      	lsrs	r2, r2, #31
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	0a6d      	lsrs	r5, r5, #9
 80004f0:	0e1b      	lsrs	r3, r3, #24
 80004f2:	4690      	mov	r8, r2
 80004f4:	4692      	mov	sl, r2
 80004f6:	d065      	beq.n	80005c4 <__aeabi_fdiv+0x110>
 80004f8:	2bff      	cmp	r3, #255	; 0xff
 80004fa:	d055      	beq.n	80005a8 <__aeabi_fdiv+0xf4>
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	2100      	movs	r1, #0
 8000500:	00ed      	lsls	r5, r5, #3
 8000502:	04d2      	lsls	r2, r2, #19
 8000504:	3b7f      	subs	r3, #127	; 0x7f
 8000506:	4315      	orrs	r5, r2
 8000508:	1af6      	subs	r6, r6, r3
 800050a:	4643      	mov	r3, r8
 800050c:	464a      	mov	r2, r9
 800050e:	407b      	eors	r3, r7
 8000510:	2a0f      	cmp	r2, #15
 8000512:	d900      	bls.n	8000516 <__aeabi_fdiv+0x62>
 8000514:	e08d      	b.n	8000632 <__aeabi_fdiv+0x17e>
 8000516:	486d      	ldr	r0, [pc, #436]	; (80006cc <__aeabi_fdiv+0x218>)
 8000518:	0092      	lsls	r2, r2, #2
 800051a:	5882      	ldr	r2, [r0, r2]
 800051c:	4697      	mov	pc, r2
 800051e:	2c00      	cmp	r4, #0
 8000520:	d154      	bne.n	80005cc <__aeabi_fdiv+0x118>
 8000522:	2308      	movs	r3, #8
 8000524:	4699      	mov	r9, r3
 8000526:	3b06      	subs	r3, #6
 8000528:	26ff      	movs	r6, #255	; 0xff
 800052a:	469b      	mov	fp, r3
 800052c:	e7da      	b.n	80004e4 <__aeabi_fdiv+0x30>
 800052e:	2500      	movs	r5, #0
 8000530:	4653      	mov	r3, sl
 8000532:	2902      	cmp	r1, #2
 8000534:	d01b      	beq.n	800056e <__aeabi_fdiv+0xba>
 8000536:	2903      	cmp	r1, #3
 8000538:	d100      	bne.n	800053c <__aeabi_fdiv+0x88>
 800053a:	e0bf      	b.n	80006bc <__aeabi_fdiv+0x208>
 800053c:	2901      	cmp	r1, #1
 800053e:	d028      	beq.n	8000592 <__aeabi_fdiv+0xde>
 8000540:	0030      	movs	r0, r6
 8000542:	307f      	adds	r0, #127	; 0x7f
 8000544:	2800      	cmp	r0, #0
 8000546:	dd20      	ble.n	800058a <__aeabi_fdiv+0xd6>
 8000548:	076a      	lsls	r2, r5, #29
 800054a:	d004      	beq.n	8000556 <__aeabi_fdiv+0xa2>
 800054c:	220f      	movs	r2, #15
 800054e:	402a      	ands	r2, r5
 8000550:	2a04      	cmp	r2, #4
 8000552:	d000      	beq.n	8000556 <__aeabi_fdiv+0xa2>
 8000554:	3504      	adds	r5, #4
 8000556:	012a      	lsls	r2, r5, #4
 8000558:	d503      	bpl.n	8000562 <__aeabi_fdiv+0xae>
 800055a:	0030      	movs	r0, r6
 800055c:	4a5c      	ldr	r2, [pc, #368]	; (80006d0 <__aeabi_fdiv+0x21c>)
 800055e:	3080      	adds	r0, #128	; 0x80
 8000560:	4015      	ands	r5, r2
 8000562:	28fe      	cmp	r0, #254	; 0xfe
 8000564:	dc03      	bgt.n	800056e <__aeabi_fdiv+0xba>
 8000566:	01ac      	lsls	r4, r5, #6
 8000568:	0a64      	lsrs	r4, r4, #9
 800056a:	b2c2      	uxtb	r2, r0
 800056c:	e001      	b.n	8000572 <__aeabi_fdiv+0xbe>
 800056e:	22ff      	movs	r2, #255	; 0xff
 8000570:	2400      	movs	r4, #0
 8000572:	0264      	lsls	r4, r4, #9
 8000574:	05d2      	lsls	r2, r2, #23
 8000576:	0a60      	lsrs	r0, r4, #9
 8000578:	07db      	lsls	r3, r3, #31
 800057a:	4310      	orrs	r0, r2
 800057c:	4318      	orrs	r0, r3
 800057e:	bc3c      	pop	{r2, r3, r4, r5}
 8000580:	4690      	mov	r8, r2
 8000582:	4699      	mov	r9, r3
 8000584:	46a2      	mov	sl, r4
 8000586:	46ab      	mov	fp, r5
 8000588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800058a:	2201      	movs	r2, #1
 800058c:	1a10      	subs	r0, r2, r0
 800058e:	281b      	cmp	r0, #27
 8000590:	dd7c      	ble.n	800068c <__aeabi_fdiv+0x1d8>
 8000592:	2200      	movs	r2, #0
 8000594:	2400      	movs	r4, #0
 8000596:	e7ec      	b.n	8000572 <__aeabi_fdiv+0xbe>
 8000598:	2c00      	cmp	r4, #0
 800059a:	d11d      	bne.n	80005d8 <__aeabi_fdiv+0x124>
 800059c:	2304      	movs	r3, #4
 800059e:	4699      	mov	r9, r3
 80005a0:	3b03      	subs	r3, #3
 80005a2:	2600      	movs	r6, #0
 80005a4:	469b      	mov	fp, r3
 80005a6:	e79d      	b.n	80004e4 <__aeabi_fdiv+0x30>
 80005a8:	3eff      	subs	r6, #255	; 0xff
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d120      	bne.n	80005f0 <__aeabi_fdiv+0x13c>
 80005ae:	2102      	movs	r1, #2
 80005b0:	4643      	mov	r3, r8
 80005b2:	464a      	mov	r2, r9
 80005b4:	407b      	eors	r3, r7
 80005b6:	430a      	orrs	r2, r1
 80005b8:	2a0f      	cmp	r2, #15
 80005ba:	d8d8      	bhi.n	800056e <__aeabi_fdiv+0xba>
 80005bc:	4845      	ldr	r0, [pc, #276]	; (80006d4 <__aeabi_fdiv+0x220>)
 80005be:	0092      	lsls	r2, r2, #2
 80005c0:	5882      	ldr	r2, [r0, r2]
 80005c2:	4697      	mov	pc, r2
 80005c4:	2d00      	cmp	r5, #0
 80005c6:	d119      	bne.n	80005fc <__aeabi_fdiv+0x148>
 80005c8:	2101      	movs	r1, #1
 80005ca:	e7f1      	b.n	80005b0 <__aeabi_fdiv+0xfc>
 80005cc:	230c      	movs	r3, #12
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b09      	subs	r3, #9
 80005d2:	26ff      	movs	r6, #255	; 0xff
 80005d4:	469b      	mov	fp, r3
 80005d6:	e785      	b.n	80004e4 <__aeabi_fdiv+0x30>
 80005d8:	0020      	movs	r0, r4
 80005da:	f002 f805 	bl	80025e8 <__clzsi2>
 80005de:	2676      	movs	r6, #118	; 0x76
 80005e0:	1f43      	subs	r3, r0, #5
 80005e2:	409c      	lsls	r4, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	4276      	negs	r6, r6
 80005e8:	1a36      	subs	r6, r6, r0
 80005ea:	4699      	mov	r9, r3
 80005ec:	469b      	mov	fp, r3
 80005ee:	e779      	b.n	80004e4 <__aeabi_fdiv+0x30>
 80005f0:	464a      	mov	r2, r9
 80005f2:	2303      	movs	r3, #3
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4691      	mov	r9, r2
 80005f8:	2103      	movs	r1, #3
 80005fa:	e786      	b.n	800050a <__aeabi_fdiv+0x56>
 80005fc:	0028      	movs	r0, r5
 80005fe:	f001 fff3 	bl	80025e8 <__clzsi2>
 8000602:	1f43      	subs	r3, r0, #5
 8000604:	1836      	adds	r6, r6, r0
 8000606:	409d      	lsls	r5, r3
 8000608:	3676      	adds	r6, #118	; 0x76
 800060a:	2100      	movs	r1, #0
 800060c:	e77d      	b.n	800050a <__aeabi_fdiv+0x56>
 800060e:	2480      	movs	r4, #128	; 0x80
 8000610:	2300      	movs	r3, #0
 8000612:	03e4      	lsls	r4, r4, #15
 8000614:	22ff      	movs	r2, #255	; 0xff
 8000616:	e7ac      	b.n	8000572 <__aeabi_fdiv+0xbe>
 8000618:	2500      	movs	r5, #0
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	03db      	lsls	r3, r3, #15
 800061e:	421c      	tst	r4, r3
 8000620:	d028      	beq.n	8000674 <__aeabi_fdiv+0x1c0>
 8000622:	421d      	tst	r5, r3
 8000624:	d126      	bne.n	8000674 <__aeabi_fdiv+0x1c0>
 8000626:	432b      	orrs	r3, r5
 8000628:	025c      	lsls	r4, r3, #9
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	4643      	mov	r3, r8
 800062e:	22ff      	movs	r2, #255	; 0xff
 8000630:	e79f      	b.n	8000572 <__aeabi_fdiv+0xbe>
 8000632:	0162      	lsls	r2, r4, #5
 8000634:	016c      	lsls	r4, r5, #5
 8000636:	42a2      	cmp	r2, r4
 8000638:	d224      	bcs.n	8000684 <__aeabi_fdiv+0x1d0>
 800063a:	211b      	movs	r1, #27
 800063c:	2500      	movs	r5, #0
 800063e:	3e01      	subs	r6, #1
 8000640:	2701      	movs	r7, #1
 8000642:	0010      	movs	r0, r2
 8000644:	006d      	lsls	r5, r5, #1
 8000646:	0052      	lsls	r2, r2, #1
 8000648:	2800      	cmp	r0, #0
 800064a:	db01      	blt.n	8000650 <__aeabi_fdiv+0x19c>
 800064c:	4294      	cmp	r4, r2
 800064e:	d801      	bhi.n	8000654 <__aeabi_fdiv+0x1a0>
 8000650:	1b12      	subs	r2, r2, r4
 8000652:	433d      	orrs	r5, r7
 8000654:	3901      	subs	r1, #1
 8000656:	2900      	cmp	r1, #0
 8000658:	d1f3      	bne.n	8000642 <__aeabi_fdiv+0x18e>
 800065a:	0014      	movs	r4, r2
 800065c:	1e62      	subs	r2, r4, #1
 800065e:	4194      	sbcs	r4, r2
 8000660:	4325      	orrs	r5, r4
 8000662:	e76d      	b.n	8000540 <__aeabi_fdiv+0x8c>
 8000664:	46ba      	mov	sl, r7
 8000666:	4659      	mov	r1, fp
 8000668:	0025      	movs	r5, r4
 800066a:	4653      	mov	r3, sl
 800066c:	2902      	cmp	r1, #2
 800066e:	d000      	beq.n	8000672 <__aeabi_fdiv+0x1be>
 8000670:	e761      	b.n	8000536 <__aeabi_fdiv+0x82>
 8000672:	e77c      	b.n	800056e <__aeabi_fdiv+0xba>
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	03db      	lsls	r3, r3, #15
 8000678:	431c      	orrs	r4, r3
 800067a:	0264      	lsls	r4, r4, #9
 800067c:	0a64      	lsrs	r4, r4, #9
 800067e:	003b      	movs	r3, r7
 8000680:	22ff      	movs	r2, #255	; 0xff
 8000682:	e776      	b.n	8000572 <__aeabi_fdiv+0xbe>
 8000684:	1b12      	subs	r2, r2, r4
 8000686:	211a      	movs	r1, #26
 8000688:	2501      	movs	r5, #1
 800068a:	e7d9      	b.n	8000640 <__aeabi_fdiv+0x18c>
 800068c:	369e      	adds	r6, #158	; 0x9e
 800068e:	002a      	movs	r2, r5
 8000690:	40b5      	lsls	r5, r6
 8000692:	002c      	movs	r4, r5
 8000694:	40c2      	lsrs	r2, r0
 8000696:	1e65      	subs	r5, r4, #1
 8000698:	41ac      	sbcs	r4, r5
 800069a:	4314      	orrs	r4, r2
 800069c:	0762      	lsls	r2, r4, #29
 800069e:	d004      	beq.n	80006aa <__aeabi_fdiv+0x1f6>
 80006a0:	220f      	movs	r2, #15
 80006a2:	4022      	ands	r2, r4
 80006a4:	2a04      	cmp	r2, #4
 80006a6:	d000      	beq.n	80006aa <__aeabi_fdiv+0x1f6>
 80006a8:	3404      	adds	r4, #4
 80006aa:	0162      	lsls	r2, r4, #5
 80006ac:	d403      	bmi.n	80006b6 <__aeabi_fdiv+0x202>
 80006ae:	01a4      	lsls	r4, r4, #6
 80006b0:	0a64      	lsrs	r4, r4, #9
 80006b2:	2200      	movs	r2, #0
 80006b4:	e75d      	b.n	8000572 <__aeabi_fdiv+0xbe>
 80006b6:	2201      	movs	r2, #1
 80006b8:	2400      	movs	r4, #0
 80006ba:	e75a      	b.n	8000572 <__aeabi_fdiv+0xbe>
 80006bc:	2480      	movs	r4, #128	; 0x80
 80006be:	03e4      	lsls	r4, r4, #15
 80006c0:	432c      	orrs	r4, r5
 80006c2:	0264      	lsls	r4, r4, #9
 80006c4:	0a64      	lsrs	r4, r4, #9
 80006c6:	22ff      	movs	r2, #255	; 0xff
 80006c8:	e753      	b.n	8000572 <__aeabi_fdiv+0xbe>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	08005fa8 	.word	0x08005fa8
 80006d0:	f7ffffff 	.word	0xf7ffffff
 80006d4:	08005fe8 	.word	0x08005fe8

080006d8 <__aeabi_fmul>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	464e      	mov	r6, r9
 80006dc:	4657      	mov	r7, sl
 80006de:	4645      	mov	r5, r8
 80006e0:	46de      	mov	lr, fp
 80006e2:	b5e0      	push	{r5, r6, r7, lr}
 80006e4:	0243      	lsls	r3, r0, #9
 80006e6:	0a5b      	lsrs	r3, r3, #9
 80006e8:	0045      	lsls	r5, r0, #1
 80006ea:	b083      	sub	sp, #12
 80006ec:	1c0f      	adds	r7, r1, #0
 80006ee:	4699      	mov	r9, r3
 80006f0:	0e2d      	lsrs	r5, r5, #24
 80006f2:	0fc6      	lsrs	r6, r0, #31
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d057      	beq.n	80007a8 <__aeabi_fmul+0xd0>
 80006f8:	2dff      	cmp	r5, #255	; 0xff
 80006fa:	d024      	beq.n	8000746 <__aeabi_fmul+0x6e>
 80006fc:	2080      	movs	r0, #128	; 0x80
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	04c0      	lsls	r0, r0, #19
 8000702:	4318      	orrs	r0, r3
 8000704:	2300      	movs	r3, #0
 8000706:	4681      	mov	r9, r0
 8000708:	469a      	mov	sl, r3
 800070a:	469b      	mov	fp, r3
 800070c:	3d7f      	subs	r5, #127	; 0x7f
 800070e:	027c      	lsls	r4, r7, #9
 8000710:	007a      	lsls	r2, r7, #1
 8000712:	0ffb      	lsrs	r3, r7, #31
 8000714:	0a64      	lsrs	r4, r4, #9
 8000716:	0e12      	lsrs	r2, r2, #24
 8000718:	4698      	mov	r8, r3
 800071a:	d023      	beq.n	8000764 <__aeabi_fmul+0x8c>
 800071c:	2aff      	cmp	r2, #255	; 0xff
 800071e:	d04b      	beq.n	80007b8 <__aeabi_fmul+0xe0>
 8000720:	00e3      	lsls	r3, r4, #3
 8000722:	2480      	movs	r4, #128	; 0x80
 8000724:	2000      	movs	r0, #0
 8000726:	04e4      	lsls	r4, r4, #19
 8000728:	3a7f      	subs	r2, #127	; 0x7f
 800072a:	431c      	orrs	r4, r3
 800072c:	18ad      	adds	r5, r5, r2
 800072e:	1c6b      	adds	r3, r5, #1
 8000730:	4647      	mov	r7, r8
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	4653      	mov	r3, sl
 8000736:	4077      	eors	r7, r6
 8000738:	003a      	movs	r2, r7
 800073a:	2b0f      	cmp	r3, #15
 800073c:	d848      	bhi.n	80007d0 <__aeabi_fmul+0xf8>
 800073e:	497d      	ldr	r1, [pc, #500]	; (8000934 <__aeabi_fmul+0x25c>)
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	58cb      	ldr	r3, [r1, r3]
 8000744:	469f      	mov	pc, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d000      	beq.n	800074c <__aeabi_fmul+0x74>
 800074a:	e085      	b.n	8000858 <__aeabi_fmul+0x180>
 800074c:	3308      	adds	r3, #8
 800074e:	469a      	mov	sl, r3
 8000750:	3b06      	subs	r3, #6
 8000752:	469b      	mov	fp, r3
 8000754:	027c      	lsls	r4, r7, #9
 8000756:	007a      	lsls	r2, r7, #1
 8000758:	0ffb      	lsrs	r3, r7, #31
 800075a:	25ff      	movs	r5, #255	; 0xff
 800075c:	0a64      	lsrs	r4, r4, #9
 800075e:	0e12      	lsrs	r2, r2, #24
 8000760:	4698      	mov	r8, r3
 8000762:	d1db      	bne.n	800071c <__aeabi_fmul+0x44>
 8000764:	2c00      	cmp	r4, #0
 8000766:	d000      	beq.n	800076a <__aeabi_fmul+0x92>
 8000768:	e090      	b.n	800088c <__aeabi_fmul+0x1b4>
 800076a:	4652      	mov	r2, sl
 800076c:	2301      	movs	r3, #1
 800076e:	431a      	orrs	r2, r3
 8000770:	4692      	mov	sl, r2
 8000772:	2001      	movs	r0, #1
 8000774:	e7db      	b.n	800072e <__aeabi_fmul+0x56>
 8000776:	464c      	mov	r4, r9
 8000778:	4658      	mov	r0, fp
 800077a:	0017      	movs	r7, r2
 800077c:	2802      	cmp	r0, #2
 800077e:	d024      	beq.n	80007ca <__aeabi_fmul+0xf2>
 8000780:	2803      	cmp	r0, #3
 8000782:	d100      	bne.n	8000786 <__aeabi_fmul+0xae>
 8000784:	e0cf      	b.n	8000926 <__aeabi_fmul+0x24e>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	2801      	cmp	r0, #1
 800078c:	d14d      	bne.n	800082a <__aeabi_fmul+0x152>
 800078e:	0258      	lsls	r0, r3, #9
 8000790:	05d2      	lsls	r2, r2, #23
 8000792:	0a40      	lsrs	r0, r0, #9
 8000794:	07ff      	lsls	r7, r7, #31
 8000796:	4310      	orrs	r0, r2
 8000798:	4338      	orrs	r0, r7
 800079a:	b003      	add	sp, #12
 800079c:	bc3c      	pop	{r2, r3, r4, r5}
 800079e:	4690      	mov	r8, r2
 80007a0:	4699      	mov	r9, r3
 80007a2:	46a2      	mov	sl, r4
 80007a4:	46ab      	mov	fp, r5
 80007a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d15b      	bne.n	8000864 <__aeabi_fmul+0x18c>
 80007ac:	2304      	movs	r3, #4
 80007ae:	469a      	mov	sl, r3
 80007b0:	3b03      	subs	r3, #3
 80007b2:	2500      	movs	r5, #0
 80007b4:	469b      	mov	fp, r3
 80007b6:	e7aa      	b.n	800070e <__aeabi_fmul+0x36>
 80007b8:	35ff      	adds	r5, #255	; 0xff
 80007ba:	2c00      	cmp	r4, #0
 80007bc:	d160      	bne.n	8000880 <__aeabi_fmul+0x1a8>
 80007be:	4652      	mov	r2, sl
 80007c0:	2302      	movs	r3, #2
 80007c2:	431a      	orrs	r2, r3
 80007c4:	4692      	mov	sl, r2
 80007c6:	2002      	movs	r0, #2
 80007c8:	e7b1      	b.n	800072e <__aeabi_fmul+0x56>
 80007ca:	22ff      	movs	r2, #255	; 0xff
 80007cc:	2300      	movs	r3, #0
 80007ce:	e7de      	b.n	800078e <__aeabi_fmul+0xb6>
 80007d0:	464b      	mov	r3, r9
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	469c      	mov	ip, r3
 80007d6:	464b      	mov	r3, r9
 80007d8:	0426      	lsls	r6, r4, #16
 80007da:	0c36      	lsrs	r6, r6, #16
 80007dc:	0418      	lsls	r0, r3, #16
 80007de:	4661      	mov	r1, ip
 80007e0:	0033      	movs	r3, r6
 80007e2:	0c22      	lsrs	r2, r4, #16
 80007e4:	4664      	mov	r4, ip
 80007e6:	0c00      	lsrs	r0, r0, #16
 80007e8:	4343      	muls	r3, r0
 80007ea:	434e      	muls	r6, r1
 80007ec:	4350      	muls	r0, r2
 80007ee:	4354      	muls	r4, r2
 80007f0:	1980      	adds	r0, r0, r6
 80007f2:	0c1a      	lsrs	r2, r3, #16
 80007f4:	1812      	adds	r2, r2, r0
 80007f6:	4296      	cmp	r6, r2
 80007f8:	d903      	bls.n	8000802 <__aeabi_fmul+0x12a>
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	0249      	lsls	r1, r1, #9
 80007fe:	468c      	mov	ip, r1
 8000800:	4464      	add	r4, ip
 8000802:	041b      	lsls	r3, r3, #16
 8000804:	0c1b      	lsrs	r3, r3, #16
 8000806:	0410      	lsls	r0, r2, #16
 8000808:	18c0      	adds	r0, r0, r3
 800080a:	0183      	lsls	r3, r0, #6
 800080c:	1e5e      	subs	r6, r3, #1
 800080e:	41b3      	sbcs	r3, r6
 8000810:	0e80      	lsrs	r0, r0, #26
 8000812:	4318      	orrs	r0, r3
 8000814:	0c13      	lsrs	r3, r2, #16
 8000816:	191b      	adds	r3, r3, r4
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	4303      	orrs	r3, r0
 800081c:	001c      	movs	r4, r3
 800081e:	0123      	lsls	r3, r4, #4
 8000820:	d579      	bpl.n	8000916 <__aeabi_fmul+0x23e>
 8000822:	2301      	movs	r3, #1
 8000824:	0862      	lsrs	r2, r4, #1
 8000826:	401c      	ands	r4, r3
 8000828:	4314      	orrs	r4, r2
 800082a:	9a01      	ldr	r2, [sp, #4]
 800082c:	327f      	adds	r2, #127	; 0x7f
 800082e:	2a00      	cmp	r2, #0
 8000830:	dd4d      	ble.n	80008ce <__aeabi_fmul+0x1f6>
 8000832:	0763      	lsls	r3, r4, #29
 8000834:	d004      	beq.n	8000840 <__aeabi_fmul+0x168>
 8000836:	230f      	movs	r3, #15
 8000838:	4023      	ands	r3, r4
 800083a:	2b04      	cmp	r3, #4
 800083c:	d000      	beq.n	8000840 <__aeabi_fmul+0x168>
 800083e:	3404      	adds	r4, #4
 8000840:	0123      	lsls	r3, r4, #4
 8000842:	d503      	bpl.n	800084c <__aeabi_fmul+0x174>
 8000844:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <__aeabi_fmul+0x260>)
 8000846:	9a01      	ldr	r2, [sp, #4]
 8000848:	401c      	ands	r4, r3
 800084a:	3280      	adds	r2, #128	; 0x80
 800084c:	2afe      	cmp	r2, #254	; 0xfe
 800084e:	dcbc      	bgt.n	80007ca <__aeabi_fmul+0xf2>
 8000850:	01a3      	lsls	r3, r4, #6
 8000852:	0a5b      	lsrs	r3, r3, #9
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	e79a      	b.n	800078e <__aeabi_fmul+0xb6>
 8000858:	230c      	movs	r3, #12
 800085a:	469a      	mov	sl, r3
 800085c:	3b09      	subs	r3, #9
 800085e:	25ff      	movs	r5, #255	; 0xff
 8000860:	469b      	mov	fp, r3
 8000862:	e754      	b.n	800070e <__aeabi_fmul+0x36>
 8000864:	0018      	movs	r0, r3
 8000866:	f001 febf 	bl	80025e8 <__clzsi2>
 800086a:	464a      	mov	r2, r9
 800086c:	1f43      	subs	r3, r0, #5
 800086e:	2576      	movs	r5, #118	; 0x76
 8000870:	409a      	lsls	r2, r3
 8000872:	2300      	movs	r3, #0
 8000874:	426d      	negs	r5, r5
 8000876:	4691      	mov	r9, r2
 8000878:	1a2d      	subs	r5, r5, r0
 800087a:	469a      	mov	sl, r3
 800087c:	469b      	mov	fp, r3
 800087e:	e746      	b.n	800070e <__aeabi_fmul+0x36>
 8000880:	4652      	mov	r2, sl
 8000882:	2303      	movs	r3, #3
 8000884:	431a      	orrs	r2, r3
 8000886:	4692      	mov	sl, r2
 8000888:	2003      	movs	r0, #3
 800088a:	e750      	b.n	800072e <__aeabi_fmul+0x56>
 800088c:	0020      	movs	r0, r4
 800088e:	f001 feab 	bl	80025e8 <__clzsi2>
 8000892:	1f43      	subs	r3, r0, #5
 8000894:	1a2d      	subs	r5, r5, r0
 8000896:	409c      	lsls	r4, r3
 8000898:	3d76      	subs	r5, #118	; 0x76
 800089a:	2000      	movs	r0, #0
 800089c:	e747      	b.n	800072e <__aeabi_fmul+0x56>
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	2700      	movs	r7, #0
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	22ff      	movs	r2, #255	; 0xff
 80008a6:	e772      	b.n	800078e <__aeabi_fmul+0xb6>
 80008a8:	4642      	mov	r2, r8
 80008aa:	e766      	b.n	800077a <__aeabi_fmul+0xa2>
 80008ac:	464c      	mov	r4, r9
 80008ae:	0032      	movs	r2, r6
 80008b0:	4658      	mov	r0, fp
 80008b2:	e762      	b.n	800077a <__aeabi_fmul+0xa2>
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	464a      	mov	r2, r9
 80008b8:	03db      	lsls	r3, r3, #15
 80008ba:	421a      	tst	r2, r3
 80008bc:	d022      	beq.n	8000904 <__aeabi_fmul+0x22c>
 80008be:	421c      	tst	r4, r3
 80008c0:	d120      	bne.n	8000904 <__aeabi_fmul+0x22c>
 80008c2:	4323      	orrs	r3, r4
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	0a5b      	lsrs	r3, r3, #9
 80008c8:	4647      	mov	r7, r8
 80008ca:	22ff      	movs	r2, #255	; 0xff
 80008cc:	e75f      	b.n	800078e <__aeabi_fmul+0xb6>
 80008ce:	2301      	movs	r3, #1
 80008d0:	1a9a      	subs	r2, r3, r2
 80008d2:	2a1b      	cmp	r2, #27
 80008d4:	dc21      	bgt.n	800091a <__aeabi_fmul+0x242>
 80008d6:	0023      	movs	r3, r4
 80008d8:	9901      	ldr	r1, [sp, #4]
 80008da:	40d3      	lsrs	r3, r2
 80008dc:	319e      	adds	r1, #158	; 0x9e
 80008de:	408c      	lsls	r4, r1
 80008e0:	001a      	movs	r2, r3
 80008e2:	0023      	movs	r3, r4
 80008e4:	1e5c      	subs	r4, r3, #1
 80008e6:	41a3      	sbcs	r3, r4
 80008e8:	4313      	orrs	r3, r2
 80008ea:	075a      	lsls	r2, r3, #29
 80008ec:	d004      	beq.n	80008f8 <__aeabi_fmul+0x220>
 80008ee:	220f      	movs	r2, #15
 80008f0:	401a      	ands	r2, r3
 80008f2:	2a04      	cmp	r2, #4
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fmul+0x220>
 80008f6:	3304      	adds	r3, #4
 80008f8:	015a      	lsls	r2, r3, #5
 80008fa:	d411      	bmi.n	8000920 <__aeabi_fmul+0x248>
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	0a5b      	lsrs	r3, r3, #9
 8000900:	2200      	movs	r2, #0
 8000902:	e744      	b.n	800078e <__aeabi_fmul+0xb6>
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	464a      	mov	r2, r9
 8000908:	03db      	lsls	r3, r3, #15
 800090a:	4313      	orrs	r3, r2
 800090c:	025b      	lsls	r3, r3, #9
 800090e:	0a5b      	lsrs	r3, r3, #9
 8000910:	0037      	movs	r7, r6
 8000912:	22ff      	movs	r2, #255	; 0xff
 8000914:	e73b      	b.n	800078e <__aeabi_fmul+0xb6>
 8000916:	9501      	str	r5, [sp, #4]
 8000918:	e787      	b.n	800082a <__aeabi_fmul+0x152>
 800091a:	2200      	movs	r2, #0
 800091c:	2300      	movs	r3, #0
 800091e:	e736      	b.n	800078e <__aeabi_fmul+0xb6>
 8000920:	2201      	movs	r2, #1
 8000922:	2300      	movs	r3, #0
 8000924:	e733      	b.n	800078e <__aeabi_fmul+0xb6>
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	03db      	lsls	r3, r3, #15
 800092a:	4323      	orrs	r3, r4
 800092c:	025b      	lsls	r3, r3, #9
 800092e:	0a5b      	lsrs	r3, r3, #9
 8000930:	22ff      	movs	r2, #255	; 0xff
 8000932:	e72c      	b.n	800078e <__aeabi_fmul+0xb6>
 8000934:	08006028 	.word	0x08006028
 8000938:	f7ffffff 	.word	0xf7ffffff

0800093c <__aeabi_i2f>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	2800      	cmp	r0, #0
 8000940:	d03d      	beq.n	80009be <__aeabi_i2f+0x82>
 8000942:	17c3      	asrs	r3, r0, #31
 8000944:	18c5      	adds	r5, r0, r3
 8000946:	405d      	eors	r5, r3
 8000948:	0fc4      	lsrs	r4, r0, #31
 800094a:	0028      	movs	r0, r5
 800094c:	f001 fe4c 	bl	80025e8 <__clzsi2>
 8000950:	229e      	movs	r2, #158	; 0x9e
 8000952:	1a12      	subs	r2, r2, r0
 8000954:	2a96      	cmp	r2, #150	; 0x96
 8000956:	dc07      	bgt.n	8000968 <__aeabi_i2f+0x2c>
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	2808      	cmp	r0, #8
 800095c:	dd33      	ble.n	80009c6 <__aeabi_i2f+0x8a>
 800095e:	3808      	subs	r0, #8
 8000960:	4085      	lsls	r5, r0
 8000962:	0268      	lsls	r0, r5, #9
 8000964:	0a40      	lsrs	r0, r0, #9
 8000966:	e023      	b.n	80009b0 <__aeabi_i2f+0x74>
 8000968:	2a99      	cmp	r2, #153	; 0x99
 800096a:	dd0b      	ble.n	8000984 <__aeabi_i2f+0x48>
 800096c:	2305      	movs	r3, #5
 800096e:	0029      	movs	r1, r5
 8000970:	1a1b      	subs	r3, r3, r0
 8000972:	40d9      	lsrs	r1, r3
 8000974:	0003      	movs	r3, r0
 8000976:	331b      	adds	r3, #27
 8000978:	409d      	lsls	r5, r3
 800097a:	002b      	movs	r3, r5
 800097c:	1e5d      	subs	r5, r3, #1
 800097e:	41ab      	sbcs	r3, r5
 8000980:	4319      	orrs	r1, r3
 8000982:	000d      	movs	r5, r1
 8000984:	2805      	cmp	r0, #5
 8000986:	dd01      	ble.n	800098c <__aeabi_i2f+0x50>
 8000988:	1f43      	subs	r3, r0, #5
 800098a:	409d      	lsls	r5, r3
 800098c:	002b      	movs	r3, r5
 800098e:	490f      	ldr	r1, [pc, #60]	; (80009cc <__aeabi_i2f+0x90>)
 8000990:	400b      	ands	r3, r1
 8000992:	076e      	lsls	r6, r5, #29
 8000994:	d009      	beq.n	80009aa <__aeabi_i2f+0x6e>
 8000996:	260f      	movs	r6, #15
 8000998:	4035      	ands	r5, r6
 800099a:	2d04      	cmp	r5, #4
 800099c:	d005      	beq.n	80009aa <__aeabi_i2f+0x6e>
 800099e:	3304      	adds	r3, #4
 80009a0:	015d      	lsls	r5, r3, #5
 80009a2:	d502      	bpl.n	80009aa <__aeabi_i2f+0x6e>
 80009a4:	229f      	movs	r2, #159	; 0x9f
 80009a6:	400b      	ands	r3, r1
 80009a8:	1a12      	subs	r2, r2, r0
 80009aa:	019b      	lsls	r3, r3, #6
 80009ac:	0a58      	lsrs	r0, r3, #9
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	0240      	lsls	r0, r0, #9
 80009b2:	05d2      	lsls	r2, r2, #23
 80009b4:	0a40      	lsrs	r0, r0, #9
 80009b6:	07e4      	lsls	r4, r4, #31
 80009b8:	4310      	orrs	r0, r2
 80009ba:	4320      	orrs	r0, r4
 80009bc:	bd70      	pop	{r4, r5, r6, pc}
 80009be:	2400      	movs	r4, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	e7f4      	b.n	80009b0 <__aeabi_i2f+0x74>
 80009c6:	0268      	lsls	r0, r5, #9
 80009c8:	0a40      	lsrs	r0, r0, #9
 80009ca:	e7f1      	b.n	80009b0 <__aeabi_i2f+0x74>
 80009cc:	fbffffff 	.word	0xfbffffff

080009d0 <__aeabi_dadd>:
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	464f      	mov	r7, r9
 80009d4:	4646      	mov	r6, r8
 80009d6:	46d6      	mov	lr, sl
 80009d8:	000c      	movs	r4, r1
 80009da:	0309      	lsls	r1, r1, #12
 80009dc:	b5c0      	push	{r6, r7, lr}
 80009de:	0a49      	lsrs	r1, r1, #9
 80009e0:	0f47      	lsrs	r7, r0, #29
 80009e2:	005e      	lsls	r6, r3, #1
 80009e4:	4339      	orrs	r1, r7
 80009e6:	031f      	lsls	r7, r3, #12
 80009e8:	0fdb      	lsrs	r3, r3, #31
 80009ea:	469c      	mov	ip, r3
 80009ec:	0065      	lsls	r5, r4, #1
 80009ee:	0a7b      	lsrs	r3, r7, #9
 80009f0:	0f57      	lsrs	r7, r2, #29
 80009f2:	431f      	orrs	r7, r3
 80009f4:	0d6d      	lsrs	r5, r5, #21
 80009f6:	0fe4      	lsrs	r4, r4, #31
 80009f8:	0d76      	lsrs	r6, r6, #21
 80009fa:	46a1      	mov	r9, r4
 80009fc:	00c0      	lsls	r0, r0, #3
 80009fe:	46b8      	mov	r8, r7
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	1bab      	subs	r3, r5, r6
 8000a04:	4564      	cmp	r4, ip
 8000a06:	d07b      	beq.n	8000b00 <__aeabi_dadd+0x130>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	dd5f      	ble.n	8000acc <__aeabi_dadd+0xfc>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x42>
 8000a10:	e0a4      	b.n	8000b5c <__aeabi_dadd+0x18c>
 8000a12:	003e      	movs	r6, r7
 8000a14:	4316      	orrs	r6, r2
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x4a>
 8000a18:	e112      	b.n	8000c40 <__aeabi_dadd+0x270>
 8000a1a:	1e5e      	subs	r6, r3, #1
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x52>
 8000a20:	e19e      	b.n	8000d60 <__aeabi_dadd+0x390>
 8000a22:	1a87      	subs	r7, r0, r2
 8000a24:	4643      	mov	r3, r8
 8000a26:	42b8      	cmp	r0, r7
 8000a28:	4180      	sbcs	r0, r0
 8000a2a:	2501      	movs	r5, #1
 8000a2c:	1ac9      	subs	r1, r1, r3
 8000a2e:	4240      	negs	r0, r0
 8000a30:	1a09      	subs	r1, r1, r0
 8000a32:	020b      	lsls	r3, r1, #8
 8000a34:	d400      	bmi.n	8000a38 <__aeabi_dadd+0x68>
 8000a36:	e131      	b.n	8000c9c <__aeabi_dadd+0x2cc>
 8000a38:	0249      	lsls	r1, r1, #9
 8000a3a:	0a4e      	lsrs	r6, r1, #9
 8000a3c:	2e00      	cmp	r6, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x72>
 8000a40:	e16e      	b.n	8000d20 <__aeabi_dadd+0x350>
 8000a42:	0030      	movs	r0, r6
 8000a44:	f001 fdd0 	bl	80025e8 <__clzsi2>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	3b08      	subs	r3, #8
 8000a4c:	2b1f      	cmp	r3, #31
 8000a4e:	dd00      	ble.n	8000a52 <__aeabi_dadd+0x82>
 8000a50:	e161      	b.n	8000d16 <__aeabi_dadd+0x346>
 8000a52:	2220      	movs	r2, #32
 8000a54:	0039      	movs	r1, r7
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	409e      	lsls	r6, r3
 8000a5a:	40d1      	lsrs	r1, r2
 8000a5c:	409f      	lsls	r7, r3
 8000a5e:	430e      	orrs	r6, r1
 8000a60:	429d      	cmp	r5, r3
 8000a62:	dd00      	ble.n	8000a66 <__aeabi_dadd+0x96>
 8000a64:	e151      	b.n	8000d0a <__aeabi_dadd+0x33a>
 8000a66:	1b5d      	subs	r5, r3, r5
 8000a68:	1c6b      	adds	r3, r5, #1
 8000a6a:	2b1f      	cmp	r3, #31
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_dadd+0xa0>
 8000a6e:	e17c      	b.n	8000d6a <__aeabi_dadd+0x39a>
 8000a70:	2120      	movs	r1, #32
 8000a72:	1ac9      	subs	r1, r1, r3
 8000a74:	003d      	movs	r5, r7
 8000a76:	0030      	movs	r0, r6
 8000a78:	408f      	lsls	r7, r1
 8000a7a:	4088      	lsls	r0, r1
 8000a7c:	40dd      	lsrs	r5, r3
 8000a7e:	1e79      	subs	r1, r7, #1
 8000a80:	418f      	sbcs	r7, r1
 8000a82:	0031      	movs	r1, r6
 8000a84:	2207      	movs	r2, #7
 8000a86:	4328      	orrs	r0, r5
 8000a88:	40d9      	lsrs	r1, r3
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	4307      	orrs	r7, r0
 8000a8e:	403a      	ands	r2, r7
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d009      	beq.n	8000aa8 <__aeabi_dadd+0xd8>
 8000a94:	230f      	movs	r3, #15
 8000a96:	403b      	ands	r3, r7
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d005      	beq.n	8000aa8 <__aeabi_dadd+0xd8>
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	42bb      	cmp	r3, r7
 8000aa0:	41bf      	sbcs	r7, r7
 8000aa2:	427f      	negs	r7, r7
 8000aa4:	19c9      	adds	r1, r1, r7
 8000aa6:	001f      	movs	r7, r3
 8000aa8:	020b      	lsls	r3, r1, #8
 8000aaa:	d400      	bmi.n	8000aae <__aeabi_dadd+0xde>
 8000aac:	e226      	b.n	8000efc <__aeabi_dadd+0x52c>
 8000aae:	1c6a      	adds	r2, r5, #1
 8000ab0:	4bc6      	ldr	r3, [pc, #792]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000ab2:	0555      	lsls	r5, r2, #21
 8000ab4:	0d6d      	lsrs	r5, r5, #21
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dadd+0xec>
 8000aba:	e106      	b.n	8000cca <__aeabi_dadd+0x2fa>
 8000abc:	4ac4      	ldr	r2, [pc, #784]	; (8000dd0 <__aeabi_dadd+0x400>)
 8000abe:	08ff      	lsrs	r7, r7, #3
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	0753      	lsls	r3, r2, #29
 8000ac4:	0252      	lsls	r2, r2, #9
 8000ac6:	433b      	orrs	r3, r7
 8000ac8:	0b12      	lsrs	r2, r2, #12
 8000aca:	e08e      	b.n	8000bea <__aeabi_dadd+0x21a>
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_dadd+0x102>
 8000ad0:	e0b8      	b.n	8000c44 <__aeabi_dadd+0x274>
 8000ad2:	1c6b      	adds	r3, r5, #1
 8000ad4:	055b      	lsls	r3, r3, #21
 8000ad6:	0d5b      	lsrs	r3, r3, #21
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	dc00      	bgt.n	8000ade <__aeabi_dadd+0x10e>
 8000adc:	e130      	b.n	8000d40 <__aeabi_dadd+0x370>
 8000ade:	1a87      	subs	r7, r0, r2
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	42b8      	cmp	r0, r7
 8000ae4:	41b6      	sbcs	r6, r6
 8000ae6:	1acb      	subs	r3, r1, r3
 8000ae8:	4276      	negs	r6, r6
 8000aea:	1b9e      	subs	r6, r3, r6
 8000aec:	0233      	lsls	r3, r6, #8
 8000aee:	d500      	bpl.n	8000af2 <__aeabi_dadd+0x122>
 8000af0:	e14c      	b.n	8000d8c <__aeabi_dadd+0x3bc>
 8000af2:	003b      	movs	r3, r7
 8000af4:	4333      	orrs	r3, r6
 8000af6:	d1a1      	bne.n	8000a3c <__aeabi_dadd+0x6c>
 8000af8:	2200      	movs	r2, #0
 8000afa:	2400      	movs	r4, #0
 8000afc:	2500      	movs	r5, #0
 8000afe:	e070      	b.n	8000be2 <__aeabi_dadd+0x212>
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	dc00      	bgt.n	8000b06 <__aeabi_dadd+0x136>
 8000b04:	e0e5      	b.n	8000cd2 <__aeabi_dadd+0x302>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x13c>
 8000b0a:	e083      	b.n	8000c14 <__aeabi_dadd+0x244>
 8000b0c:	4eaf      	ldr	r6, [pc, #700]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000b0e:	42b5      	cmp	r5, r6
 8000b10:	d060      	beq.n	8000bd4 <__aeabi_dadd+0x204>
 8000b12:	2680      	movs	r6, #128	; 0x80
 8000b14:	0436      	lsls	r6, r6, #16
 8000b16:	4337      	orrs	r7, r6
 8000b18:	46b8      	mov	r8, r7
 8000b1a:	2b38      	cmp	r3, #56	; 0x38
 8000b1c:	dc00      	bgt.n	8000b20 <__aeabi_dadd+0x150>
 8000b1e:	e13e      	b.n	8000d9e <__aeabi_dadd+0x3ce>
 8000b20:	4643      	mov	r3, r8
 8000b22:	4313      	orrs	r3, r2
 8000b24:	001f      	movs	r7, r3
 8000b26:	1e7a      	subs	r2, r7, #1
 8000b28:	4197      	sbcs	r7, r2
 8000b2a:	183f      	adds	r7, r7, r0
 8000b2c:	4287      	cmp	r7, r0
 8000b2e:	4180      	sbcs	r0, r0
 8000b30:	4240      	negs	r0, r0
 8000b32:	1809      	adds	r1, r1, r0
 8000b34:	020b      	lsls	r3, r1, #8
 8000b36:	d400      	bmi.n	8000b3a <__aeabi_dadd+0x16a>
 8000b38:	e0b0      	b.n	8000c9c <__aeabi_dadd+0x2cc>
 8000b3a:	4ba4      	ldr	r3, [pc, #656]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000b3c:	3501      	adds	r5, #1
 8000b3e:	429d      	cmp	r5, r3
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dadd+0x174>
 8000b42:	e0c3      	b.n	8000ccc <__aeabi_dadd+0x2fc>
 8000b44:	4aa2      	ldr	r2, [pc, #648]	; (8000dd0 <__aeabi_dadd+0x400>)
 8000b46:	087b      	lsrs	r3, r7, #1
 8000b48:	400a      	ands	r2, r1
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	400f      	ands	r7, r1
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	0851      	lsrs	r1, r2, #1
 8000b52:	07d3      	lsls	r3, r2, #31
 8000b54:	2207      	movs	r2, #7
 8000b56:	431f      	orrs	r7, r3
 8000b58:	403a      	ands	r2, r7
 8000b5a:	e799      	b.n	8000a90 <__aeabi_dadd+0xc0>
 8000b5c:	4e9b      	ldr	r6, [pc, #620]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000b5e:	42b5      	cmp	r5, r6
 8000b60:	d038      	beq.n	8000bd4 <__aeabi_dadd+0x204>
 8000b62:	2680      	movs	r6, #128	; 0x80
 8000b64:	0436      	lsls	r6, r6, #16
 8000b66:	4337      	orrs	r7, r6
 8000b68:	46b8      	mov	r8, r7
 8000b6a:	2b38      	cmp	r3, #56	; 0x38
 8000b6c:	dd00      	ble.n	8000b70 <__aeabi_dadd+0x1a0>
 8000b6e:	e0dc      	b.n	8000d2a <__aeabi_dadd+0x35a>
 8000b70:	2b1f      	cmp	r3, #31
 8000b72:	dc00      	bgt.n	8000b76 <__aeabi_dadd+0x1a6>
 8000b74:	e130      	b.n	8000dd8 <__aeabi_dadd+0x408>
 8000b76:	001e      	movs	r6, r3
 8000b78:	4647      	mov	r7, r8
 8000b7a:	3e20      	subs	r6, #32
 8000b7c:	40f7      	lsrs	r7, r6
 8000b7e:	46bc      	mov	ip, r7
 8000b80:	2b20      	cmp	r3, #32
 8000b82:	d004      	beq.n	8000b8e <__aeabi_dadd+0x1be>
 8000b84:	2640      	movs	r6, #64	; 0x40
 8000b86:	1af3      	subs	r3, r6, r3
 8000b88:	4646      	mov	r6, r8
 8000b8a:	409e      	lsls	r6, r3
 8000b8c:	4332      	orrs	r2, r6
 8000b8e:	0017      	movs	r7, r2
 8000b90:	4663      	mov	r3, ip
 8000b92:	1e7a      	subs	r2, r7, #1
 8000b94:	4197      	sbcs	r7, r2
 8000b96:	431f      	orrs	r7, r3
 8000b98:	e0cc      	b.n	8000d34 <__aeabi_dadd+0x364>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0x1d0>
 8000b9e:	e204      	b.n	8000faa <__aeabi_dadd+0x5da>
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_dadd+0x1d8>
 8000ba6:	e159      	b.n	8000e5c <__aeabi_dadd+0x48c>
 8000ba8:	074b      	lsls	r3, r1, #29
 8000baa:	08c0      	lsrs	r0, r0, #3
 8000bac:	4318      	orrs	r0, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	08c9      	lsrs	r1, r1, #3
 8000bb2:	031b      	lsls	r3, r3, #12
 8000bb4:	4219      	tst	r1, r3
 8000bb6:	d008      	beq.n	8000bca <__aeabi_dadd+0x1fa>
 8000bb8:	4645      	mov	r5, r8
 8000bba:	08ed      	lsrs	r5, r5, #3
 8000bbc:	421d      	tst	r5, r3
 8000bbe:	d104      	bne.n	8000bca <__aeabi_dadd+0x1fa>
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	08d0      	lsrs	r0, r2, #3
 8000bc4:	0759      	lsls	r1, r3, #29
 8000bc6:	4308      	orrs	r0, r1
 8000bc8:	0029      	movs	r1, r5
 8000bca:	0f42      	lsrs	r2, r0, #29
 8000bcc:	00c9      	lsls	r1, r1, #3
 8000bce:	4d7f      	ldr	r5, [pc, #508]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000bd0:	4311      	orrs	r1, r2
 8000bd2:	00c0      	lsls	r0, r0, #3
 8000bd4:	074b      	lsls	r3, r1, #29
 8000bd6:	08ca      	lsrs	r2, r1, #3
 8000bd8:	497c      	ldr	r1, [pc, #496]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000bda:	08c0      	lsrs	r0, r0, #3
 8000bdc:	4303      	orrs	r3, r0
 8000bde:	428d      	cmp	r5, r1
 8000be0:	d068      	beq.n	8000cb4 <__aeabi_dadd+0x2e4>
 8000be2:	0312      	lsls	r2, r2, #12
 8000be4:	056d      	lsls	r5, r5, #21
 8000be6:	0b12      	lsrs	r2, r2, #12
 8000be8:	0d6d      	lsrs	r5, r5, #21
 8000bea:	2100      	movs	r1, #0
 8000bec:	0312      	lsls	r2, r2, #12
 8000bee:	0018      	movs	r0, r3
 8000bf0:	0b13      	lsrs	r3, r2, #12
 8000bf2:	0d0a      	lsrs	r2, r1, #20
 8000bf4:	0512      	lsls	r2, r2, #20
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	4b76      	ldr	r3, [pc, #472]	; (8000dd4 <__aeabi_dadd+0x404>)
 8000bfa:	052d      	lsls	r5, r5, #20
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	432b      	orrs	r3, r5
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	07e4      	lsls	r4, r4, #31
 8000c04:	085b      	lsrs	r3, r3, #1
 8000c06:	4323      	orrs	r3, r4
 8000c08:	0019      	movs	r1, r3
 8000c0a:	bc1c      	pop	{r2, r3, r4}
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	4699      	mov	r9, r3
 8000c10:	46a2      	mov	sl, r4
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c14:	003e      	movs	r6, r7
 8000c16:	4316      	orrs	r6, r2
 8000c18:	d012      	beq.n	8000c40 <__aeabi_dadd+0x270>
 8000c1a:	1e5e      	subs	r6, r3, #1
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_dadd+0x252>
 8000c20:	e100      	b.n	8000e24 <__aeabi_dadd+0x454>
 8000c22:	1887      	adds	r7, r0, r2
 8000c24:	4287      	cmp	r7, r0
 8000c26:	4180      	sbcs	r0, r0
 8000c28:	4441      	add	r1, r8
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	1809      	adds	r1, r1, r0
 8000c2e:	2501      	movs	r5, #1
 8000c30:	020b      	lsls	r3, r1, #8
 8000c32:	d533      	bpl.n	8000c9c <__aeabi_dadd+0x2cc>
 8000c34:	2502      	movs	r5, #2
 8000c36:	e785      	b.n	8000b44 <__aeabi_dadd+0x174>
 8000c38:	4664      	mov	r4, ip
 8000c3a:	0033      	movs	r3, r6
 8000c3c:	4641      	mov	r1, r8
 8000c3e:	0010      	movs	r0, r2
 8000c40:	001d      	movs	r5, r3
 8000c42:	e7c7      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x27a>
 8000c48:	e0da      	b.n	8000e00 <__aeabi_dadd+0x430>
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	d0f3      	beq.n	8000c38 <__aeabi_dadd+0x268>
 8000c50:	1c5c      	adds	r4, r3, #1
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dadd+0x286>
 8000c54:	e19f      	b.n	8000f96 <__aeabi_dadd+0x5c6>
 8000c56:	4c5d      	ldr	r4, [pc, #372]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000c58:	42a6      	cmp	r6, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x28e>
 8000c5c:	e12f      	b.n	8000ebe <__aeabi_dadd+0x4ee>
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	2b38      	cmp	r3, #56	; 0x38
 8000c62:	dd00      	ble.n	8000c66 <__aeabi_dadd+0x296>
 8000c64:	e166      	b.n	8000f34 <__aeabi_dadd+0x564>
 8000c66:	2b1f      	cmp	r3, #31
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_dadd+0x29c>
 8000c6a:	e183      	b.n	8000f74 <__aeabi_dadd+0x5a4>
 8000c6c:	2420      	movs	r4, #32
 8000c6e:	0005      	movs	r5, r0
 8000c70:	1ae4      	subs	r4, r4, r3
 8000c72:	000f      	movs	r7, r1
 8000c74:	40dd      	lsrs	r5, r3
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	40a0      	lsls	r0, r4
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	40a7      	lsls	r7, r4
 8000c7e:	1a5b      	subs	r3, r3, r1
 8000c80:	1e44      	subs	r4, r0, #1
 8000c82:	41a0      	sbcs	r0, r4
 8000c84:	4698      	mov	r8, r3
 8000c86:	432f      	orrs	r7, r5
 8000c88:	4338      	orrs	r0, r7
 8000c8a:	1a17      	subs	r7, r2, r0
 8000c8c:	42ba      	cmp	r2, r7
 8000c8e:	4192      	sbcs	r2, r2
 8000c90:	4643      	mov	r3, r8
 8000c92:	4252      	negs	r2, r2
 8000c94:	1a99      	subs	r1, r3, r2
 8000c96:	4664      	mov	r4, ip
 8000c98:	0035      	movs	r5, r6
 8000c9a:	e6ca      	b.n	8000a32 <__aeabi_dadd+0x62>
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	403a      	ands	r2, r7
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_dadd+0x2d6>
 8000ca4:	e6f6      	b.n	8000a94 <__aeabi_dadd+0xc4>
 8000ca6:	074b      	lsls	r3, r1, #29
 8000ca8:	08ca      	lsrs	r2, r1, #3
 8000caa:	4948      	ldr	r1, [pc, #288]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000cac:	08ff      	lsrs	r7, r7, #3
 8000cae:	433b      	orrs	r3, r7
 8000cb0:	428d      	cmp	r5, r1
 8000cb2:	d196      	bne.n	8000be2 <__aeabi_dadd+0x212>
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	4311      	orrs	r1, r2
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dadd+0x2ec>
 8000cba:	e19e      	b.n	8000ffa <__aeabi_dadd+0x62a>
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	0309      	lsls	r1, r1, #12
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	0312      	lsls	r2, r2, #12
 8000cc4:	0b12      	lsrs	r2, r2, #12
 8000cc6:	4d41      	ldr	r5, [pc, #260]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000cc8:	e78f      	b.n	8000bea <__aeabi_dadd+0x21a>
 8000cca:	0015      	movs	r5, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e78b      	b.n	8000bea <__aeabi_dadd+0x21a>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_dadd+0x308>
 8000cd6:	e0c7      	b.n	8000e68 <__aeabi_dadd+0x498>
 8000cd8:	1c6b      	adds	r3, r5, #1
 8000cda:	055f      	lsls	r7, r3, #21
 8000cdc:	0d7f      	lsrs	r7, r7, #21
 8000cde:	2f01      	cmp	r7, #1
 8000ce0:	dc00      	bgt.n	8000ce4 <__aeabi_dadd+0x314>
 8000ce2:	e0f1      	b.n	8000ec8 <__aeabi_dadd+0x4f8>
 8000ce4:	4d39      	ldr	r5, [pc, #228]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000ce6:	42ab      	cmp	r3, r5
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x31c>
 8000cea:	e0b9      	b.n	8000e60 <__aeabi_dadd+0x490>
 8000cec:	1885      	adds	r5, r0, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	4285      	cmp	r5, r0
 8000cf2:	4189      	sbcs	r1, r1
 8000cf4:	4442      	add	r2, r8
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	1851      	adds	r1, r2, r1
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	07cf      	lsls	r7, r1, #31
 8000cfe:	086d      	lsrs	r5, r5, #1
 8000d00:	432f      	orrs	r7, r5
 8000d02:	0849      	lsrs	r1, r1, #1
 8000d04:	403a      	ands	r2, r7
 8000d06:	001d      	movs	r5, r3
 8000d08:	e6c2      	b.n	8000a90 <__aeabi_dadd+0xc0>
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	4930      	ldr	r1, [pc, #192]	; (8000dd0 <__aeabi_dadd+0x400>)
 8000d0e:	1aed      	subs	r5, r5, r3
 8000d10:	4031      	ands	r1, r6
 8000d12:	403a      	ands	r2, r7
 8000d14:	e6bc      	b.n	8000a90 <__aeabi_dadd+0xc0>
 8000d16:	003e      	movs	r6, r7
 8000d18:	3828      	subs	r0, #40	; 0x28
 8000d1a:	4086      	lsls	r6, r0
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	e69f      	b.n	8000a60 <__aeabi_dadd+0x90>
 8000d20:	0038      	movs	r0, r7
 8000d22:	f001 fc61 	bl	80025e8 <__clzsi2>
 8000d26:	3020      	adds	r0, #32
 8000d28:	e68e      	b.n	8000a48 <__aeabi_dadd+0x78>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	001f      	movs	r7, r3
 8000d30:	1e7a      	subs	r2, r7, #1
 8000d32:	4197      	sbcs	r7, r2
 8000d34:	1bc7      	subs	r7, r0, r7
 8000d36:	42b8      	cmp	r0, r7
 8000d38:	4180      	sbcs	r0, r0
 8000d3a:	4240      	negs	r0, r0
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	e678      	b.n	8000a32 <__aeabi_dadd+0x62>
 8000d40:	000e      	movs	r6, r1
 8000d42:	003b      	movs	r3, r7
 8000d44:	4306      	orrs	r6, r0
 8000d46:	4313      	orrs	r3, r2
 8000d48:	2d00      	cmp	r5, #0
 8000d4a:	d161      	bne.n	8000e10 <__aeabi_dadd+0x440>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d000      	beq.n	8000d52 <__aeabi_dadd+0x382>
 8000d50:	e0f4      	b.n	8000f3c <__aeabi_dadd+0x56c>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d100      	bne.n	8000d58 <__aeabi_dadd+0x388>
 8000d56:	e11b      	b.n	8000f90 <__aeabi_dadd+0x5c0>
 8000d58:	4664      	mov	r4, ip
 8000d5a:	0039      	movs	r1, r7
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	e739      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000d60:	4f1a      	ldr	r7, [pc, #104]	; (8000dcc <__aeabi_dadd+0x3fc>)
 8000d62:	42bb      	cmp	r3, r7
 8000d64:	d07a      	beq.n	8000e5c <__aeabi_dadd+0x48c>
 8000d66:	0033      	movs	r3, r6
 8000d68:	e6ff      	b.n	8000b6a <__aeabi_dadd+0x19a>
 8000d6a:	0030      	movs	r0, r6
 8000d6c:	3d1f      	subs	r5, #31
 8000d6e:	40e8      	lsrs	r0, r5
 8000d70:	2b20      	cmp	r3, #32
 8000d72:	d003      	beq.n	8000d7c <__aeabi_dadd+0x3ac>
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	409e      	lsls	r6, r3
 8000d7a:	4337      	orrs	r7, r6
 8000d7c:	1e7b      	subs	r3, r7, #1
 8000d7e:	419f      	sbcs	r7, r3
 8000d80:	2207      	movs	r2, #7
 8000d82:	4307      	orrs	r7, r0
 8000d84:	403a      	ands	r2, r7
 8000d86:	2100      	movs	r1, #0
 8000d88:	2500      	movs	r5, #0
 8000d8a:	e789      	b.n	8000ca0 <__aeabi_dadd+0x2d0>
 8000d8c:	1a17      	subs	r7, r2, r0
 8000d8e:	4643      	mov	r3, r8
 8000d90:	42ba      	cmp	r2, r7
 8000d92:	41b6      	sbcs	r6, r6
 8000d94:	1a59      	subs	r1, r3, r1
 8000d96:	4276      	negs	r6, r6
 8000d98:	1b8e      	subs	r6, r1, r6
 8000d9a:	4664      	mov	r4, ip
 8000d9c:	e64e      	b.n	8000a3c <__aeabi_dadd+0x6c>
 8000d9e:	2b1f      	cmp	r3, #31
 8000da0:	dd00      	ble.n	8000da4 <__aeabi_dadd+0x3d4>
 8000da2:	e0ad      	b.n	8000f00 <__aeabi_dadd+0x530>
 8000da4:	2620      	movs	r6, #32
 8000da6:	4647      	mov	r7, r8
 8000da8:	1af6      	subs	r6, r6, r3
 8000daa:	40b7      	lsls	r7, r6
 8000dac:	46b9      	mov	r9, r7
 8000dae:	0017      	movs	r7, r2
 8000db0:	46b2      	mov	sl, r6
 8000db2:	40df      	lsrs	r7, r3
 8000db4:	464e      	mov	r6, r9
 8000db6:	433e      	orrs	r6, r7
 8000db8:	0037      	movs	r7, r6
 8000dba:	4656      	mov	r6, sl
 8000dbc:	40b2      	lsls	r2, r6
 8000dbe:	1e56      	subs	r6, r2, #1
 8000dc0:	41b2      	sbcs	r2, r6
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	4642      	mov	r2, r8
 8000dc6:	40da      	lsrs	r2, r3
 8000dc8:	1889      	adds	r1, r1, r2
 8000dca:	e6ae      	b.n	8000b2a <__aeabi_dadd+0x15a>
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	ff7fffff 	.word	0xff7fffff
 8000dd4:	800fffff 	.word	0x800fffff
 8000dd8:	2620      	movs	r6, #32
 8000dda:	4647      	mov	r7, r8
 8000ddc:	1af6      	subs	r6, r6, r3
 8000dde:	40b7      	lsls	r7, r6
 8000de0:	46b9      	mov	r9, r7
 8000de2:	0017      	movs	r7, r2
 8000de4:	46b2      	mov	sl, r6
 8000de6:	40df      	lsrs	r7, r3
 8000de8:	464e      	mov	r6, r9
 8000dea:	433e      	orrs	r6, r7
 8000dec:	0037      	movs	r7, r6
 8000dee:	4656      	mov	r6, sl
 8000df0:	40b2      	lsls	r2, r6
 8000df2:	1e56      	subs	r6, r2, #1
 8000df4:	41b2      	sbcs	r2, r6
 8000df6:	4317      	orrs	r7, r2
 8000df8:	4642      	mov	r2, r8
 8000dfa:	40da      	lsrs	r2, r3
 8000dfc:	1a89      	subs	r1, r1, r2
 8000dfe:	e799      	b.n	8000d34 <__aeabi_dadd+0x364>
 8000e00:	4c7f      	ldr	r4, [pc, #508]	; (8001000 <__aeabi_dadd+0x630>)
 8000e02:	42a6      	cmp	r6, r4
 8000e04:	d05b      	beq.n	8000ebe <__aeabi_dadd+0x4ee>
 8000e06:	2480      	movs	r4, #128	; 0x80
 8000e08:	0424      	lsls	r4, r4, #16
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	4321      	orrs	r1, r4
 8000e0e:	e727      	b.n	8000c60 <__aeabi_dadd+0x290>
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d10c      	bne.n	8000e2e <__aeabi_dadd+0x45e>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d100      	bne.n	8000e1a <__aeabi_dadd+0x44a>
 8000e18:	e0cb      	b.n	8000fb2 <__aeabi_dadd+0x5e2>
 8000e1a:	4664      	mov	r4, ip
 8000e1c:	0039      	movs	r1, r7
 8000e1e:	0010      	movs	r0, r2
 8000e20:	4d77      	ldr	r5, [pc, #476]	; (8001000 <__aeabi_dadd+0x630>)
 8000e22:	e6d7      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000e24:	4f76      	ldr	r7, [pc, #472]	; (8001000 <__aeabi_dadd+0x630>)
 8000e26:	42bb      	cmp	r3, r7
 8000e28:	d018      	beq.n	8000e5c <__aeabi_dadd+0x48c>
 8000e2a:	0033      	movs	r3, r6
 8000e2c:	e675      	b.n	8000b1a <__aeabi_dadd+0x14a>
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d014      	beq.n	8000e5c <__aeabi_dadd+0x48c>
 8000e32:	074b      	lsls	r3, r1, #29
 8000e34:	08c0      	lsrs	r0, r0, #3
 8000e36:	4318      	orrs	r0, r3
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	08c9      	lsrs	r1, r1, #3
 8000e3c:	031b      	lsls	r3, r3, #12
 8000e3e:	4219      	tst	r1, r3
 8000e40:	d007      	beq.n	8000e52 <__aeabi_dadd+0x482>
 8000e42:	08fc      	lsrs	r4, r7, #3
 8000e44:	421c      	tst	r4, r3
 8000e46:	d104      	bne.n	8000e52 <__aeabi_dadd+0x482>
 8000e48:	0779      	lsls	r1, r7, #29
 8000e4a:	08d0      	lsrs	r0, r2, #3
 8000e4c:	4308      	orrs	r0, r1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	0021      	movs	r1, r4
 8000e52:	464c      	mov	r4, r9
 8000e54:	0f42      	lsrs	r2, r0, #29
 8000e56:	00c9      	lsls	r1, r1, #3
 8000e58:	4311      	orrs	r1, r2
 8000e5a:	00c0      	lsls	r0, r0, #3
 8000e5c:	4d68      	ldr	r5, [pc, #416]	; (8001000 <__aeabi_dadd+0x630>)
 8000e5e:	e6b9      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000e60:	001d      	movs	r5, r3
 8000e62:	2200      	movs	r2, #0
 8000e64:	2300      	movs	r3, #0
 8000e66:	e6c0      	b.n	8000bea <__aeabi_dadd+0x21a>
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d15b      	bne.n	8000f24 <__aeabi_dadd+0x554>
 8000e6c:	000d      	movs	r5, r1
 8000e6e:	4305      	orrs	r5, r0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dadd+0x4a4>
 8000e72:	e6e2      	b.n	8000c3a <__aeabi_dadd+0x26a>
 8000e74:	1c5d      	adds	r5, r3, #1
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x4aa>
 8000e78:	e0b0      	b.n	8000fdc <__aeabi_dadd+0x60c>
 8000e7a:	4d61      	ldr	r5, [pc, #388]	; (8001000 <__aeabi_dadd+0x630>)
 8000e7c:	42ae      	cmp	r6, r5
 8000e7e:	d01f      	beq.n	8000ec0 <__aeabi_dadd+0x4f0>
 8000e80:	43db      	mvns	r3, r3
 8000e82:	2b38      	cmp	r3, #56	; 0x38
 8000e84:	dc71      	bgt.n	8000f6a <__aeabi_dadd+0x59a>
 8000e86:	2b1f      	cmp	r3, #31
 8000e88:	dd00      	ble.n	8000e8c <__aeabi_dadd+0x4bc>
 8000e8a:	e096      	b.n	8000fba <__aeabi_dadd+0x5ea>
 8000e8c:	2520      	movs	r5, #32
 8000e8e:	000f      	movs	r7, r1
 8000e90:	1aed      	subs	r5, r5, r3
 8000e92:	40af      	lsls	r7, r5
 8000e94:	46b9      	mov	r9, r7
 8000e96:	0007      	movs	r7, r0
 8000e98:	46aa      	mov	sl, r5
 8000e9a:	40df      	lsrs	r7, r3
 8000e9c:	464d      	mov	r5, r9
 8000e9e:	433d      	orrs	r5, r7
 8000ea0:	002f      	movs	r7, r5
 8000ea2:	4655      	mov	r5, sl
 8000ea4:	40a8      	lsls	r0, r5
 8000ea6:	40d9      	lsrs	r1, r3
 8000ea8:	1e45      	subs	r5, r0, #1
 8000eaa:	41a8      	sbcs	r0, r5
 8000eac:	4488      	add	r8, r1
 8000eae:	4307      	orrs	r7, r0
 8000eb0:	18bf      	adds	r7, r7, r2
 8000eb2:	4297      	cmp	r7, r2
 8000eb4:	4192      	sbcs	r2, r2
 8000eb6:	4251      	negs	r1, r2
 8000eb8:	4441      	add	r1, r8
 8000eba:	0035      	movs	r5, r6
 8000ebc:	e63a      	b.n	8000b34 <__aeabi_dadd+0x164>
 8000ebe:	4664      	mov	r4, ip
 8000ec0:	0035      	movs	r5, r6
 8000ec2:	4641      	mov	r1, r8
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	e685      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000ec8:	000b      	movs	r3, r1
 8000eca:	4303      	orrs	r3, r0
 8000ecc:	2d00      	cmp	r5, #0
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_dadd+0x502>
 8000ed0:	e663      	b.n	8000b9a <__aeabi_dadd+0x1ca>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f5      	beq.n	8000ec2 <__aeabi_dadd+0x4f2>
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x50e>
 8000edc:	e67a      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000ede:	1887      	adds	r7, r0, r2
 8000ee0:	4287      	cmp	r7, r0
 8000ee2:	4180      	sbcs	r0, r0
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	4441      	add	r1, r8
 8000ee8:	4240      	negs	r0, r0
 8000eea:	1809      	adds	r1, r1, r0
 8000eec:	403a      	ands	r2, r7
 8000eee:	020b      	lsls	r3, r1, #8
 8000ef0:	d400      	bmi.n	8000ef4 <__aeabi_dadd+0x524>
 8000ef2:	e6d5      	b.n	8000ca0 <__aeabi_dadd+0x2d0>
 8000ef4:	4b43      	ldr	r3, [pc, #268]	; (8001004 <__aeabi_dadd+0x634>)
 8000ef6:	3501      	adds	r5, #1
 8000ef8:	4019      	ands	r1, r3
 8000efa:	e5c9      	b.n	8000a90 <__aeabi_dadd+0xc0>
 8000efc:	0038      	movs	r0, r7
 8000efe:	e669      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000f00:	001e      	movs	r6, r3
 8000f02:	4647      	mov	r7, r8
 8000f04:	3e20      	subs	r6, #32
 8000f06:	40f7      	lsrs	r7, r6
 8000f08:	46bc      	mov	ip, r7
 8000f0a:	2b20      	cmp	r3, #32
 8000f0c:	d004      	beq.n	8000f18 <__aeabi_dadd+0x548>
 8000f0e:	2640      	movs	r6, #64	; 0x40
 8000f10:	1af3      	subs	r3, r6, r3
 8000f12:	4646      	mov	r6, r8
 8000f14:	409e      	lsls	r6, r3
 8000f16:	4332      	orrs	r2, r6
 8000f18:	0017      	movs	r7, r2
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	1e7a      	subs	r2, r7, #1
 8000f1e:	4197      	sbcs	r7, r2
 8000f20:	431f      	orrs	r7, r3
 8000f22:	e602      	b.n	8000b2a <__aeabi_dadd+0x15a>
 8000f24:	4d36      	ldr	r5, [pc, #216]	; (8001000 <__aeabi_dadd+0x630>)
 8000f26:	42ae      	cmp	r6, r5
 8000f28:	d0ca      	beq.n	8000ec0 <__aeabi_dadd+0x4f0>
 8000f2a:	2580      	movs	r5, #128	; 0x80
 8000f2c:	042d      	lsls	r5, r5, #16
 8000f2e:	425b      	negs	r3, r3
 8000f30:	4329      	orrs	r1, r5
 8000f32:	e7a6      	b.n	8000e82 <__aeabi_dadd+0x4b2>
 8000f34:	4308      	orrs	r0, r1
 8000f36:	1e41      	subs	r1, r0, #1
 8000f38:	4188      	sbcs	r0, r1
 8000f3a:	e6a6      	b.n	8000c8a <__aeabi_dadd+0x2ba>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x572>
 8000f40:	e648      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000f42:	1a87      	subs	r7, r0, r2
 8000f44:	4643      	mov	r3, r8
 8000f46:	42b8      	cmp	r0, r7
 8000f48:	41b6      	sbcs	r6, r6
 8000f4a:	1acb      	subs	r3, r1, r3
 8000f4c:	4276      	negs	r6, r6
 8000f4e:	1b9e      	subs	r6, r3, r6
 8000f50:	0233      	lsls	r3, r6, #8
 8000f52:	d54b      	bpl.n	8000fec <__aeabi_dadd+0x61c>
 8000f54:	1a17      	subs	r7, r2, r0
 8000f56:	4643      	mov	r3, r8
 8000f58:	42ba      	cmp	r2, r7
 8000f5a:	4192      	sbcs	r2, r2
 8000f5c:	1a59      	subs	r1, r3, r1
 8000f5e:	4252      	negs	r2, r2
 8000f60:	1a89      	subs	r1, r1, r2
 8000f62:	2207      	movs	r2, #7
 8000f64:	4664      	mov	r4, ip
 8000f66:	403a      	ands	r2, r7
 8000f68:	e592      	b.n	8000a90 <__aeabi_dadd+0xc0>
 8000f6a:	4301      	orrs	r1, r0
 8000f6c:	000f      	movs	r7, r1
 8000f6e:	1e79      	subs	r1, r7, #1
 8000f70:	418f      	sbcs	r7, r1
 8000f72:	e79d      	b.n	8000eb0 <__aeabi_dadd+0x4e0>
 8000f74:	001c      	movs	r4, r3
 8000f76:	000f      	movs	r7, r1
 8000f78:	3c20      	subs	r4, #32
 8000f7a:	40e7      	lsrs	r7, r4
 8000f7c:	2b20      	cmp	r3, #32
 8000f7e:	d003      	beq.n	8000f88 <__aeabi_dadd+0x5b8>
 8000f80:	2440      	movs	r4, #64	; 0x40
 8000f82:	1ae3      	subs	r3, r4, r3
 8000f84:	4099      	lsls	r1, r3
 8000f86:	4308      	orrs	r0, r1
 8000f88:	1e41      	subs	r1, r0, #1
 8000f8a:	4188      	sbcs	r0, r1
 8000f8c:	4338      	orrs	r0, r7
 8000f8e:	e67c      	b.n	8000c8a <__aeabi_dadd+0x2ba>
 8000f90:	2200      	movs	r2, #0
 8000f92:	2400      	movs	r4, #0
 8000f94:	e625      	b.n	8000be2 <__aeabi_dadd+0x212>
 8000f96:	1a17      	subs	r7, r2, r0
 8000f98:	4643      	mov	r3, r8
 8000f9a:	42ba      	cmp	r2, r7
 8000f9c:	4192      	sbcs	r2, r2
 8000f9e:	1a59      	subs	r1, r3, r1
 8000fa0:	4252      	negs	r2, r2
 8000fa2:	1a89      	subs	r1, r1, r2
 8000fa4:	4664      	mov	r4, ip
 8000fa6:	0035      	movs	r5, r6
 8000fa8:	e543      	b.n	8000a32 <__aeabi_dadd+0x62>
 8000faa:	4641      	mov	r1, r8
 8000fac:	0010      	movs	r0, r2
 8000fae:	4d14      	ldr	r5, [pc, #80]	; (8001000 <__aeabi_dadd+0x630>)
 8000fb0:	e610      	b.n	8000bd4 <__aeabi_dadd+0x204>
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	2400      	movs	r4, #0
 8000fb6:	0312      	lsls	r2, r2, #12
 8000fb8:	e680      	b.n	8000cbc <__aeabi_dadd+0x2ec>
 8000fba:	001d      	movs	r5, r3
 8000fbc:	000f      	movs	r7, r1
 8000fbe:	3d20      	subs	r5, #32
 8000fc0:	40ef      	lsrs	r7, r5
 8000fc2:	46bc      	mov	ip, r7
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	d003      	beq.n	8000fd0 <__aeabi_dadd+0x600>
 8000fc8:	2540      	movs	r5, #64	; 0x40
 8000fca:	1aeb      	subs	r3, r5, r3
 8000fcc:	4099      	lsls	r1, r3
 8000fce:	4308      	orrs	r0, r1
 8000fd0:	0007      	movs	r7, r0
 8000fd2:	4663      	mov	r3, ip
 8000fd4:	1e78      	subs	r0, r7, #1
 8000fd6:	4187      	sbcs	r7, r0
 8000fd8:	431f      	orrs	r7, r3
 8000fda:	e769      	b.n	8000eb0 <__aeabi_dadd+0x4e0>
 8000fdc:	1887      	adds	r7, r0, r2
 8000fde:	4297      	cmp	r7, r2
 8000fe0:	419b      	sbcs	r3, r3
 8000fe2:	4441      	add	r1, r8
 8000fe4:	425b      	negs	r3, r3
 8000fe6:	18c9      	adds	r1, r1, r3
 8000fe8:	0035      	movs	r5, r6
 8000fea:	e5a3      	b.n	8000b34 <__aeabi_dadd+0x164>
 8000fec:	003b      	movs	r3, r7
 8000fee:	4333      	orrs	r3, r6
 8000ff0:	d0ce      	beq.n	8000f90 <__aeabi_dadd+0x5c0>
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	0031      	movs	r1, r6
 8000ff6:	403a      	ands	r2, r7
 8000ff8:	e652      	b.n	8000ca0 <__aeabi_dadd+0x2d0>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	e5f4      	b.n	8000bea <__aeabi_dadd+0x21a>
 8001000:	000007ff 	.word	0x000007ff
 8001004:	ff7fffff 	.word	0xff7fffff

08001008 <__aeabi_ddiv>:
 8001008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100a:	4657      	mov	r7, sl
 800100c:	46de      	mov	lr, fp
 800100e:	464e      	mov	r6, r9
 8001010:	4645      	mov	r5, r8
 8001012:	b5e0      	push	{r5, r6, r7, lr}
 8001014:	4683      	mov	fp, r0
 8001016:	0007      	movs	r7, r0
 8001018:	030e      	lsls	r6, r1, #12
 800101a:	0048      	lsls	r0, r1, #1
 800101c:	b085      	sub	sp, #20
 800101e:	4692      	mov	sl, r2
 8001020:	001c      	movs	r4, r3
 8001022:	0b36      	lsrs	r6, r6, #12
 8001024:	0d40      	lsrs	r0, r0, #21
 8001026:	0fcd      	lsrs	r5, r1, #31
 8001028:	2800      	cmp	r0, #0
 800102a:	d100      	bne.n	800102e <__aeabi_ddiv+0x26>
 800102c:	e09d      	b.n	800116a <__aeabi_ddiv+0x162>
 800102e:	4b95      	ldr	r3, [pc, #596]	; (8001284 <__aeabi_ddiv+0x27c>)
 8001030:	4298      	cmp	r0, r3
 8001032:	d039      	beq.n	80010a8 <__aeabi_ddiv+0xa0>
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	00f6      	lsls	r6, r6, #3
 8001038:	041b      	lsls	r3, r3, #16
 800103a:	431e      	orrs	r6, r3
 800103c:	4a92      	ldr	r2, [pc, #584]	; (8001288 <__aeabi_ddiv+0x280>)
 800103e:	0f7b      	lsrs	r3, r7, #29
 8001040:	4333      	orrs	r3, r6
 8001042:	4699      	mov	r9, r3
 8001044:	4694      	mov	ip, r2
 8001046:	0003      	movs	r3, r0
 8001048:	4463      	add	r3, ip
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	2600      	movs	r6, #0
 8001050:	00ff      	lsls	r7, r7, #3
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	0323      	lsls	r3, r4, #12
 8001056:	0b1b      	lsrs	r3, r3, #12
 8001058:	4698      	mov	r8, r3
 800105a:	0063      	lsls	r3, r4, #1
 800105c:	0fe4      	lsrs	r4, r4, #31
 800105e:	4652      	mov	r2, sl
 8001060:	0d5b      	lsrs	r3, r3, #21
 8001062:	9401      	str	r4, [sp, #4]
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x60>
 8001066:	e0b3      	b.n	80011d0 <__aeabi_ddiv+0x1c8>
 8001068:	4986      	ldr	r1, [pc, #536]	; (8001284 <__aeabi_ddiv+0x27c>)
 800106a:	428b      	cmp	r3, r1
 800106c:	d100      	bne.n	8001070 <__aeabi_ddiv+0x68>
 800106e:	e09e      	b.n	80011ae <__aeabi_ddiv+0x1a6>
 8001070:	4642      	mov	r2, r8
 8001072:	00d1      	lsls	r1, r2, #3
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	0412      	lsls	r2, r2, #16
 8001078:	430a      	orrs	r2, r1
 800107a:	4651      	mov	r1, sl
 800107c:	0f49      	lsrs	r1, r1, #29
 800107e:	4311      	orrs	r1, r2
 8001080:	468b      	mov	fp, r1
 8001082:	4981      	ldr	r1, [pc, #516]	; (8001288 <__aeabi_ddiv+0x280>)
 8001084:	4652      	mov	r2, sl
 8001086:	468c      	mov	ip, r1
 8001088:	9900      	ldr	r1, [sp, #0]
 800108a:	4463      	add	r3, ip
 800108c:	1acb      	subs	r3, r1, r3
 800108e:	2100      	movs	r1, #0
 8001090:	00d2      	lsls	r2, r2, #3
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	002b      	movs	r3, r5
 8001096:	4063      	eors	r3, r4
 8001098:	469a      	mov	sl, r3
 800109a:	2e0f      	cmp	r6, #15
 800109c:	d900      	bls.n	80010a0 <__aeabi_ddiv+0x98>
 800109e:	e105      	b.n	80012ac <__aeabi_ddiv+0x2a4>
 80010a0:	4b7a      	ldr	r3, [pc, #488]	; (800128c <__aeabi_ddiv+0x284>)
 80010a2:	00b6      	lsls	r6, r6, #2
 80010a4:	599b      	ldr	r3, [r3, r6]
 80010a6:	469f      	mov	pc, r3
 80010a8:	465b      	mov	r3, fp
 80010aa:	4333      	orrs	r3, r6
 80010ac:	4699      	mov	r9, r3
 80010ae:	d000      	beq.n	80010b2 <__aeabi_ddiv+0xaa>
 80010b0:	e0b8      	b.n	8001224 <__aeabi_ddiv+0x21c>
 80010b2:	2302      	movs	r3, #2
 80010b4:	2608      	movs	r6, #8
 80010b6:	2700      	movs	r7, #0
 80010b8:	9000      	str	r0, [sp, #0]
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	e7ca      	b.n	8001054 <__aeabi_ddiv+0x4c>
 80010be:	46cb      	mov	fp, r9
 80010c0:	003a      	movs	r2, r7
 80010c2:	9902      	ldr	r1, [sp, #8]
 80010c4:	9501      	str	r5, [sp, #4]
 80010c6:	9b01      	ldr	r3, [sp, #4]
 80010c8:	469a      	mov	sl, r3
 80010ca:	2902      	cmp	r1, #2
 80010cc:	d027      	beq.n	800111e <__aeabi_ddiv+0x116>
 80010ce:	2903      	cmp	r1, #3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_ddiv+0xcc>
 80010d2:	e280      	b.n	80015d6 <__aeabi_ddiv+0x5ce>
 80010d4:	2901      	cmp	r1, #1
 80010d6:	d044      	beq.n	8001162 <__aeabi_ddiv+0x15a>
 80010d8:	496d      	ldr	r1, [pc, #436]	; (8001290 <__aeabi_ddiv+0x288>)
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	468c      	mov	ip, r1
 80010de:	4463      	add	r3, ip
 80010e0:	001c      	movs	r4, r3
 80010e2:	2c00      	cmp	r4, #0
 80010e4:	dd38      	ble.n	8001158 <__aeabi_ddiv+0x150>
 80010e6:	0753      	lsls	r3, r2, #29
 80010e8:	d000      	beq.n	80010ec <__aeabi_ddiv+0xe4>
 80010ea:	e213      	b.n	8001514 <__aeabi_ddiv+0x50c>
 80010ec:	08d2      	lsrs	r2, r2, #3
 80010ee:	465b      	mov	r3, fp
 80010f0:	01db      	lsls	r3, r3, #7
 80010f2:	d509      	bpl.n	8001108 <__aeabi_ddiv+0x100>
 80010f4:	4659      	mov	r1, fp
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <__aeabi_ddiv+0x28c>)
 80010f8:	4019      	ands	r1, r3
 80010fa:	468b      	mov	fp, r1
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	00c9      	lsls	r1, r1, #3
 8001100:	468c      	mov	ip, r1
 8001102:	9b00      	ldr	r3, [sp, #0]
 8001104:	4463      	add	r3, ip
 8001106:	001c      	movs	r4, r3
 8001108:	4b63      	ldr	r3, [pc, #396]	; (8001298 <__aeabi_ddiv+0x290>)
 800110a:	429c      	cmp	r4, r3
 800110c:	dc07      	bgt.n	800111e <__aeabi_ddiv+0x116>
 800110e:	465b      	mov	r3, fp
 8001110:	0564      	lsls	r4, r4, #21
 8001112:	075f      	lsls	r7, r3, #29
 8001114:	025b      	lsls	r3, r3, #9
 8001116:	4317      	orrs	r7, r2
 8001118:	0b1b      	lsrs	r3, r3, #12
 800111a:	0d62      	lsrs	r2, r4, #21
 800111c:	e002      	b.n	8001124 <__aeabi_ddiv+0x11c>
 800111e:	2300      	movs	r3, #0
 8001120:	2700      	movs	r7, #0
 8001122:	4a58      	ldr	r2, [pc, #352]	; (8001284 <__aeabi_ddiv+0x27c>)
 8001124:	2100      	movs	r1, #0
 8001126:	031b      	lsls	r3, r3, #12
 8001128:	0b1c      	lsrs	r4, r3, #12
 800112a:	0d0b      	lsrs	r3, r1, #20
 800112c:	051b      	lsls	r3, r3, #20
 800112e:	4323      	orrs	r3, r4
 8001130:	0514      	lsls	r4, r2, #20
 8001132:	4a5a      	ldr	r2, [pc, #360]	; (800129c <__aeabi_ddiv+0x294>)
 8001134:	0038      	movs	r0, r7
 8001136:	4013      	ands	r3, r2
 8001138:	431c      	orrs	r4, r3
 800113a:	4653      	mov	r3, sl
 800113c:	0064      	lsls	r4, r4, #1
 800113e:	07db      	lsls	r3, r3, #31
 8001140:	0864      	lsrs	r4, r4, #1
 8001142:	431c      	orrs	r4, r3
 8001144:	0021      	movs	r1, r4
 8001146:	b005      	add	sp, #20
 8001148:	bc3c      	pop	{r2, r3, r4, r5}
 800114a:	4690      	mov	r8, r2
 800114c:	4699      	mov	r9, r3
 800114e:	46a2      	mov	sl, r4
 8001150:	46ab      	mov	fp, r5
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	2201      	movs	r2, #1
 8001156:	4252      	negs	r2, r2
 8001158:	2301      	movs	r3, #1
 800115a:	1b1b      	subs	r3, r3, r4
 800115c:	2b38      	cmp	r3, #56	; 0x38
 800115e:	dc00      	bgt.n	8001162 <__aeabi_ddiv+0x15a>
 8001160:	e1ad      	b.n	80014be <__aeabi_ddiv+0x4b6>
 8001162:	2200      	movs	r2, #0
 8001164:	2300      	movs	r3, #0
 8001166:	2700      	movs	r7, #0
 8001168:	e7dc      	b.n	8001124 <__aeabi_ddiv+0x11c>
 800116a:	465b      	mov	r3, fp
 800116c:	4333      	orrs	r3, r6
 800116e:	4699      	mov	r9, r3
 8001170:	d05e      	beq.n	8001230 <__aeabi_ddiv+0x228>
 8001172:	2e00      	cmp	r6, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_ddiv+0x170>
 8001176:	e18a      	b.n	800148e <__aeabi_ddiv+0x486>
 8001178:	0030      	movs	r0, r6
 800117a:	f001 fa35 	bl	80025e8 <__clzsi2>
 800117e:	0003      	movs	r3, r0
 8001180:	3b0b      	subs	r3, #11
 8001182:	2b1c      	cmp	r3, #28
 8001184:	dd00      	ble.n	8001188 <__aeabi_ddiv+0x180>
 8001186:	e17b      	b.n	8001480 <__aeabi_ddiv+0x478>
 8001188:	221d      	movs	r2, #29
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	465a      	mov	r2, fp
 800118e:	0001      	movs	r1, r0
 8001190:	40da      	lsrs	r2, r3
 8001192:	3908      	subs	r1, #8
 8001194:	408e      	lsls	r6, r1
 8001196:	0013      	movs	r3, r2
 8001198:	465f      	mov	r7, fp
 800119a:	4333      	orrs	r3, r6
 800119c:	4699      	mov	r9, r3
 800119e:	408f      	lsls	r7, r1
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <__aeabi_ddiv+0x298>)
 80011a2:	2600      	movs	r6, #0
 80011a4:	1a1b      	subs	r3, r3, r0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2300      	movs	r3, #0
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	e752      	b.n	8001054 <__aeabi_ddiv+0x4c>
 80011ae:	4641      	mov	r1, r8
 80011b0:	4653      	mov	r3, sl
 80011b2:	430b      	orrs	r3, r1
 80011b4:	493b      	ldr	r1, [pc, #236]	; (80012a4 <__aeabi_ddiv+0x29c>)
 80011b6:	469b      	mov	fp, r3
 80011b8:	468c      	mov	ip, r1
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	4463      	add	r3, ip
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	465b      	mov	r3, fp
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d13b      	bne.n	800123e <__aeabi_ddiv+0x236>
 80011c6:	2302      	movs	r3, #2
 80011c8:	2200      	movs	r2, #0
 80011ca:	431e      	orrs	r6, r3
 80011cc:	2102      	movs	r1, #2
 80011ce:	e761      	b.n	8001094 <__aeabi_ddiv+0x8c>
 80011d0:	4643      	mov	r3, r8
 80011d2:	4313      	orrs	r3, r2
 80011d4:	469b      	mov	fp, r3
 80011d6:	d037      	beq.n	8001248 <__aeabi_ddiv+0x240>
 80011d8:	4643      	mov	r3, r8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x1d8>
 80011de:	e162      	b.n	80014a6 <__aeabi_ddiv+0x49e>
 80011e0:	4640      	mov	r0, r8
 80011e2:	f001 fa01 	bl	80025e8 <__clzsi2>
 80011e6:	0003      	movs	r3, r0
 80011e8:	3b0b      	subs	r3, #11
 80011ea:	2b1c      	cmp	r3, #28
 80011ec:	dd00      	ble.n	80011f0 <__aeabi_ddiv+0x1e8>
 80011ee:	e153      	b.n	8001498 <__aeabi_ddiv+0x490>
 80011f0:	0002      	movs	r2, r0
 80011f2:	4641      	mov	r1, r8
 80011f4:	3a08      	subs	r2, #8
 80011f6:	4091      	lsls	r1, r2
 80011f8:	4688      	mov	r8, r1
 80011fa:	211d      	movs	r1, #29
 80011fc:	1acb      	subs	r3, r1, r3
 80011fe:	4651      	mov	r1, sl
 8001200:	40d9      	lsrs	r1, r3
 8001202:	000b      	movs	r3, r1
 8001204:	4641      	mov	r1, r8
 8001206:	430b      	orrs	r3, r1
 8001208:	469b      	mov	fp, r3
 800120a:	4653      	mov	r3, sl
 800120c:	4093      	lsls	r3, r2
 800120e:	001a      	movs	r2, r3
 8001210:	9b00      	ldr	r3, [sp, #0]
 8001212:	4925      	ldr	r1, [pc, #148]	; (80012a8 <__aeabi_ddiv+0x2a0>)
 8001214:	469c      	mov	ip, r3
 8001216:	4460      	add	r0, ip
 8001218:	0003      	movs	r3, r0
 800121a:	468c      	mov	ip, r1
 800121c:	4463      	add	r3, ip
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2100      	movs	r1, #0
 8001222:	e737      	b.n	8001094 <__aeabi_ddiv+0x8c>
 8001224:	2303      	movs	r3, #3
 8001226:	46b1      	mov	r9, r6
 8001228:	9000      	str	r0, [sp, #0]
 800122a:	260c      	movs	r6, #12
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	e711      	b.n	8001054 <__aeabi_ddiv+0x4c>
 8001230:	2300      	movs	r3, #0
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	2604      	movs	r6, #4
 8001238:	2700      	movs	r7, #0
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	e70a      	b.n	8001054 <__aeabi_ddiv+0x4c>
 800123e:	2303      	movs	r3, #3
 8001240:	46c3      	mov	fp, r8
 8001242:	431e      	orrs	r6, r3
 8001244:	2103      	movs	r1, #3
 8001246:	e725      	b.n	8001094 <__aeabi_ddiv+0x8c>
 8001248:	3301      	adds	r3, #1
 800124a:	431e      	orrs	r6, r3
 800124c:	2200      	movs	r2, #0
 800124e:	2101      	movs	r1, #1
 8001250:	e720      	b.n	8001094 <__aeabi_ddiv+0x8c>
 8001252:	2300      	movs	r3, #0
 8001254:	469a      	mov	sl, r3
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	2700      	movs	r7, #0
 800125a:	031b      	lsls	r3, r3, #12
 800125c:	4a09      	ldr	r2, [pc, #36]	; (8001284 <__aeabi_ddiv+0x27c>)
 800125e:	e761      	b.n	8001124 <__aeabi_ddiv+0x11c>
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	4649      	mov	r1, r9
 8001264:	031b      	lsls	r3, r3, #12
 8001266:	4219      	tst	r1, r3
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x264>
 800126a:	e0e2      	b.n	8001432 <__aeabi_ddiv+0x42a>
 800126c:	4659      	mov	r1, fp
 800126e:	4219      	tst	r1, r3
 8001270:	d000      	beq.n	8001274 <__aeabi_ddiv+0x26c>
 8001272:	e0de      	b.n	8001432 <__aeabi_ddiv+0x42a>
 8001274:	430b      	orrs	r3, r1
 8001276:	031b      	lsls	r3, r3, #12
 8001278:	0017      	movs	r7, r2
 800127a:	0b1b      	lsrs	r3, r3, #12
 800127c:	46a2      	mov	sl, r4
 800127e:	4a01      	ldr	r2, [pc, #4]	; (8001284 <__aeabi_ddiv+0x27c>)
 8001280:	e750      	b.n	8001124 <__aeabi_ddiv+0x11c>
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	000007ff 	.word	0x000007ff
 8001288:	fffffc01 	.word	0xfffffc01
 800128c:	08006068 	.word	0x08006068
 8001290:	000003ff 	.word	0x000003ff
 8001294:	feffffff 	.word	0xfeffffff
 8001298:	000007fe 	.word	0x000007fe
 800129c:	800fffff 	.word	0x800fffff
 80012a0:	fffffc0d 	.word	0xfffffc0d
 80012a4:	fffff801 	.word	0xfffff801
 80012a8:	000003f3 	.word	0x000003f3
 80012ac:	45d9      	cmp	r9, fp
 80012ae:	d900      	bls.n	80012b2 <__aeabi_ddiv+0x2aa>
 80012b0:	e0cb      	b.n	800144a <__aeabi_ddiv+0x442>
 80012b2:	d100      	bne.n	80012b6 <__aeabi_ddiv+0x2ae>
 80012b4:	e0c6      	b.n	8001444 <__aeabi_ddiv+0x43c>
 80012b6:	003c      	movs	r4, r7
 80012b8:	4648      	mov	r0, r9
 80012ba:	2700      	movs	r7, #0
 80012bc:	9b00      	ldr	r3, [sp, #0]
 80012be:	3b01      	subs	r3, #1
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	465b      	mov	r3, fp
 80012c4:	0e16      	lsrs	r6, r2, #24
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	431e      	orrs	r6, r3
 80012ca:	0213      	lsls	r3, r2, #8
 80012cc:	4698      	mov	r8, r3
 80012ce:	0433      	lsls	r3, r6, #16
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	4699      	mov	r9, r3
 80012d4:	0c31      	lsrs	r1, r6, #16
 80012d6:	9101      	str	r1, [sp, #4]
 80012d8:	f7fe ff9c 	bl	8000214 <__aeabi_uidivmod>
 80012dc:	464a      	mov	r2, r9
 80012de:	4342      	muls	r2, r0
 80012e0:	040b      	lsls	r3, r1, #16
 80012e2:	0c21      	lsrs	r1, r4, #16
 80012e4:	0005      	movs	r5, r0
 80012e6:	4319      	orrs	r1, r3
 80012e8:	428a      	cmp	r2, r1
 80012ea:	d907      	bls.n	80012fc <__aeabi_ddiv+0x2f4>
 80012ec:	1989      	adds	r1, r1, r6
 80012ee:	3d01      	subs	r5, #1
 80012f0:	428e      	cmp	r6, r1
 80012f2:	d803      	bhi.n	80012fc <__aeabi_ddiv+0x2f4>
 80012f4:	428a      	cmp	r2, r1
 80012f6:	d901      	bls.n	80012fc <__aeabi_ddiv+0x2f4>
 80012f8:	1e85      	subs	r5, r0, #2
 80012fa:	1989      	adds	r1, r1, r6
 80012fc:	1a88      	subs	r0, r1, r2
 80012fe:	9901      	ldr	r1, [sp, #4]
 8001300:	f7fe ff88 	bl	8000214 <__aeabi_uidivmod>
 8001304:	0409      	lsls	r1, r1, #16
 8001306:	468c      	mov	ip, r1
 8001308:	464a      	mov	r2, r9
 800130a:	0421      	lsls	r1, r4, #16
 800130c:	4664      	mov	r4, ip
 800130e:	4342      	muls	r2, r0
 8001310:	0c09      	lsrs	r1, r1, #16
 8001312:	0003      	movs	r3, r0
 8001314:	4321      	orrs	r1, r4
 8001316:	428a      	cmp	r2, r1
 8001318:	d904      	bls.n	8001324 <__aeabi_ddiv+0x31c>
 800131a:	1989      	adds	r1, r1, r6
 800131c:	3b01      	subs	r3, #1
 800131e:	428e      	cmp	r6, r1
 8001320:	d800      	bhi.n	8001324 <__aeabi_ddiv+0x31c>
 8001322:	e0f1      	b.n	8001508 <__aeabi_ddiv+0x500>
 8001324:	042d      	lsls	r5, r5, #16
 8001326:	431d      	orrs	r5, r3
 8001328:	46ab      	mov	fp, r5
 800132a:	4643      	mov	r3, r8
 800132c:	1a89      	subs	r1, r1, r2
 800132e:	4642      	mov	r2, r8
 8001330:	0c28      	lsrs	r0, r5, #16
 8001332:	0412      	lsls	r2, r2, #16
 8001334:	0c1d      	lsrs	r5, r3, #16
 8001336:	465b      	mov	r3, fp
 8001338:	0c14      	lsrs	r4, r2, #16
 800133a:	0022      	movs	r2, r4
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	0c1b      	lsrs	r3, r3, #16
 8001340:	435a      	muls	r2, r3
 8001342:	9403      	str	r4, [sp, #12]
 8001344:	436b      	muls	r3, r5
 8001346:	4344      	muls	r4, r0
 8001348:	9502      	str	r5, [sp, #8]
 800134a:	4368      	muls	r0, r5
 800134c:	191b      	adds	r3, r3, r4
 800134e:	0c15      	lsrs	r5, r2, #16
 8001350:	18eb      	adds	r3, r5, r3
 8001352:	429c      	cmp	r4, r3
 8001354:	d903      	bls.n	800135e <__aeabi_ddiv+0x356>
 8001356:	2480      	movs	r4, #128	; 0x80
 8001358:	0264      	lsls	r4, r4, #9
 800135a:	46a4      	mov	ip, r4
 800135c:	4460      	add	r0, ip
 800135e:	0c1c      	lsrs	r4, r3, #16
 8001360:	0415      	lsls	r5, r2, #16
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	0c2d      	lsrs	r5, r5, #16
 8001366:	1820      	adds	r0, r4, r0
 8001368:	195d      	adds	r5, r3, r5
 800136a:	4281      	cmp	r1, r0
 800136c:	d377      	bcc.n	800145e <__aeabi_ddiv+0x456>
 800136e:	d073      	beq.n	8001458 <__aeabi_ddiv+0x450>
 8001370:	1a0c      	subs	r4, r1, r0
 8001372:	4aa2      	ldr	r2, [pc, #648]	; (80015fc <__aeabi_ddiv+0x5f4>)
 8001374:	1b7d      	subs	r5, r7, r5
 8001376:	42af      	cmp	r7, r5
 8001378:	41bf      	sbcs	r7, r7
 800137a:	4694      	mov	ip, r2
 800137c:	9b00      	ldr	r3, [sp, #0]
 800137e:	427f      	negs	r7, r7
 8001380:	4463      	add	r3, ip
 8001382:	1be0      	subs	r0, r4, r7
 8001384:	001c      	movs	r4, r3
 8001386:	4286      	cmp	r6, r0
 8001388:	d100      	bne.n	800138c <__aeabi_ddiv+0x384>
 800138a:	e0db      	b.n	8001544 <__aeabi_ddiv+0x53c>
 800138c:	9901      	ldr	r1, [sp, #4]
 800138e:	f7fe ff41 	bl	8000214 <__aeabi_uidivmod>
 8001392:	464a      	mov	r2, r9
 8001394:	4342      	muls	r2, r0
 8001396:	040b      	lsls	r3, r1, #16
 8001398:	0c29      	lsrs	r1, r5, #16
 800139a:	0007      	movs	r7, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	428a      	cmp	r2, r1
 80013a0:	d907      	bls.n	80013b2 <__aeabi_ddiv+0x3aa>
 80013a2:	1989      	adds	r1, r1, r6
 80013a4:	3f01      	subs	r7, #1
 80013a6:	428e      	cmp	r6, r1
 80013a8:	d803      	bhi.n	80013b2 <__aeabi_ddiv+0x3aa>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d901      	bls.n	80013b2 <__aeabi_ddiv+0x3aa>
 80013ae:	1e87      	subs	r7, r0, #2
 80013b0:	1989      	adds	r1, r1, r6
 80013b2:	1a88      	subs	r0, r1, r2
 80013b4:	9901      	ldr	r1, [sp, #4]
 80013b6:	f7fe ff2d 	bl	8000214 <__aeabi_uidivmod>
 80013ba:	0409      	lsls	r1, r1, #16
 80013bc:	464a      	mov	r2, r9
 80013be:	4689      	mov	r9, r1
 80013c0:	0429      	lsls	r1, r5, #16
 80013c2:	464d      	mov	r5, r9
 80013c4:	4342      	muls	r2, r0
 80013c6:	0c09      	lsrs	r1, r1, #16
 80013c8:	0003      	movs	r3, r0
 80013ca:	4329      	orrs	r1, r5
 80013cc:	428a      	cmp	r2, r1
 80013ce:	d907      	bls.n	80013e0 <__aeabi_ddiv+0x3d8>
 80013d0:	1989      	adds	r1, r1, r6
 80013d2:	3b01      	subs	r3, #1
 80013d4:	428e      	cmp	r6, r1
 80013d6:	d803      	bhi.n	80013e0 <__aeabi_ddiv+0x3d8>
 80013d8:	428a      	cmp	r2, r1
 80013da:	d901      	bls.n	80013e0 <__aeabi_ddiv+0x3d8>
 80013dc:	1e83      	subs	r3, r0, #2
 80013de:	1989      	adds	r1, r1, r6
 80013e0:	043f      	lsls	r7, r7, #16
 80013e2:	1a89      	subs	r1, r1, r2
 80013e4:	003a      	movs	r2, r7
 80013e6:	9f03      	ldr	r7, [sp, #12]
 80013e8:	431a      	orrs	r2, r3
 80013ea:	0038      	movs	r0, r7
 80013ec:	0413      	lsls	r3, r2, #16
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	4358      	muls	r0, r3
 80013f2:	4681      	mov	r9, r0
 80013f4:	9802      	ldr	r0, [sp, #8]
 80013f6:	0c15      	lsrs	r5, r2, #16
 80013f8:	436f      	muls	r7, r5
 80013fa:	4343      	muls	r3, r0
 80013fc:	4345      	muls	r5, r0
 80013fe:	4648      	mov	r0, r9
 8001400:	0c00      	lsrs	r0, r0, #16
 8001402:	4684      	mov	ip, r0
 8001404:	19db      	adds	r3, r3, r7
 8001406:	4463      	add	r3, ip
 8001408:	429f      	cmp	r7, r3
 800140a:	d903      	bls.n	8001414 <__aeabi_ddiv+0x40c>
 800140c:	2080      	movs	r0, #128	; 0x80
 800140e:	0240      	lsls	r0, r0, #9
 8001410:	4684      	mov	ip, r0
 8001412:	4465      	add	r5, ip
 8001414:	4648      	mov	r0, r9
 8001416:	0c1f      	lsrs	r7, r3, #16
 8001418:	0400      	lsls	r0, r0, #16
 800141a:	041b      	lsls	r3, r3, #16
 800141c:	0c00      	lsrs	r0, r0, #16
 800141e:	197d      	adds	r5, r7, r5
 8001420:	1818      	adds	r0, r3, r0
 8001422:	42a9      	cmp	r1, r5
 8001424:	d200      	bcs.n	8001428 <__aeabi_ddiv+0x420>
 8001426:	e084      	b.n	8001532 <__aeabi_ddiv+0x52a>
 8001428:	d100      	bne.n	800142c <__aeabi_ddiv+0x424>
 800142a:	e07f      	b.n	800152c <__aeabi_ddiv+0x524>
 800142c:	2301      	movs	r3, #1
 800142e:	431a      	orrs	r2, r3
 8001430:	e657      	b.n	80010e2 <__aeabi_ddiv+0xda>
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	464a      	mov	r2, r9
 8001436:	031b      	lsls	r3, r3, #12
 8001438:	4313      	orrs	r3, r2
 800143a:	031b      	lsls	r3, r3, #12
 800143c:	0b1b      	lsrs	r3, r3, #12
 800143e:	46aa      	mov	sl, r5
 8001440:	4a6f      	ldr	r2, [pc, #444]	; (8001600 <__aeabi_ddiv+0x5f8>)
 8001442:	e66f      	b.n	8001124 <__aeabi_ddiv+0x11c>
 8001444:	42ba      	cmp	r2, r7
 8001446:	d900      	bls.n	800144a <__aeabi_ddiv+0x442>
 8001448:	e735      	b.n	80012b6 <__aeabi_ddiv+0x2ae>
 800144a:	464b      	mov	r3, r9
 800144c:	07dc      	lsls	r4, r3, #31
 800144e:	0858      	lsrs	r0, r3, #1
 8001450:	087b      	lsrs	r3, r7, #1
 8001452:	431c      	orrs	r4, r3
 8001454:	07ff      	lsls	r7, r7, #31
 8001456:	e734      	b.n	80012c2 <__aeabi_ddiv+0x2ba>
 8001458:	2400      	movs	r4, #0
 800145a:	42af      	cmp	r7, r5
 800145c:	d289      	bcs.n	8001372 <__aeabi_ddiv+0x36a>
 800145e:	4447      	add	r7, r8
 8001460:	4547      	cmp	r7, r8
 8001462:	41a4      	sbcs	r4, r4
 8001464:	465b      	mov	r3, fp
 8001466:	4264      	negs	r4, r4
 8001468:	19a4      	adds	r4, r4, r6
 800146a:	1864      	adds	r4, r4, r1
 800146c:	3b01      	subs	r3, #1
 800146e:	42a6      	cmp	r6, r4
 8001470:	d21e      	bcs.n	80014b0 <__aeabi_ddiv+0x4a8>
 8001472:	42a0      	cmp	r0, r4
 8001474:	d86d      	bhi.n	8001552 <__aeabi_ddiv+0x54a>
 8001476:	d100      	bne.n	800147a <__aeabi_ddiv+0x472>
 8001478:	e0b6      	b.n	80015e8 <__aeabi_ddiv+0x5e0>
 800147a:	1a24      	subs	r4, r4, r0
 800147c:	469b      	mov	fp, r3
 800147e:	e778      	b.n	8001372 <__aeabi_ddiv+0x36a>
 8001480:	0003      	movs	r3, r0
 8001482:	465a      	mov	r2, fp
 8001484:	3b28      	subs	r3, #40	; 0x28
 8001486:	409a      	lsls	r2, r3
 8001488:	2700      	movs	r7, #0
 800148a:	4691      	mov	r9, r2
 800148c:	e688      	b.n	80011a0 <__aeabi_ddiv+0x198>
 800148e:	4658      	mov	r0, fp
 8001490:	f001 f8aa 	bl	80025e8 <__clzsi2>
 8001494:	3020      	adds	r0, #32
 8001496:	e672      	b.n	800117e <__aeabi_ddiv+0x176>
 8001498:	0003      	movs	r3, r0
 800149a:	4652      	mov	r2, sl
 800149c:	3b28      	subs	r3, #40	; 0x28
 800149e:	409a      	lsls	r2, r3
 80014a0:	4693      	mov	fp, r2
 80014a2:	2200      	movs	r2, #0
 80014a4:	e6b4      	b.n	8001210 <__aeabi_ddiv+0x208>
 80014a6:	4650      	mov	r0, sl
 80014a8:	f001 f89e 	bl	80025e8 <__clzsi2>
 80014ac:	3020      	adds	r0, #32
 80014ae:	e69a      	b.n	80011e6 <__aeabi_ddiv+0x1de>
 80014b0:	42a6      	cmp	r6, r4
 80014b2:	d1e2      	bne.n	800147a <__aeabi_ddiv+0x472>
 80014b4:	45b8      	cmp	r8, r7
 80014b6:	d9dc      	bls.n	8001472 <__aeabi_ddiv+0x46a>
 80014b8:	1a34      	subs	r4, r6, r0
 80014ba:	469b      	mov	fp, r3
 80014bc:	e759      	b.n	8001372 <__aeabi_ddiv+0x36a>
 80014be:	2b1f      	cmp	r3, #31
 80014c0:	dc65      	bgt.n	800158e <__aeabi_ddiv+0x586>
 80014c2:	4c50      	ldr	r4, [pc, #320]	; (8001604 <__aeabi_ddiv+0x5fc>)
 80014c4:	9900      	ldr	r1, [sp, #0]
 80014c6:	46a4      	mov	ip, r4
 80014c8:	465c      	mov	r4, fp
 80014ca:	4461      	add	r1, ip
 80014cc:	0008      	movs	r0, r1
 80014ce:	408c      	lsls	r4, r1
 80014d0:	0011      	movs	r1, r2
 80014d2:	4082      	lsls	r2, r0
 80014d4:	40d9      	lsrs	r1, r3
 80014d6:	1e50      	subs	r0, r2, #1
 80014d8:	4182      	sbcs	r2, r0
 80014da:	430c      	orrs	r4, r1
 80014dc:	4314      	orrs	r4, r2
 80014de:	465a      	mov	r2, fp
 80014e0:	40da      	lsrs	r2, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	0762      	lsls	r2, r4, #29
 80014e6:	d009      	beq.n	80014fc <__aeabi_ddiv+0x4f4>
 80014e8:	220f      	movs	r2, #15
 80014ea:	4022      	ands	r2, r4
 80014ec:	2a04      	cmp	r2, #4
 80014ee:	d005      	beq.n	80014fc <__aeabi_ddiv+0x4f4>
 80014f0:	0022      	movs	r2, r4
 80014f2:	1d14      	adds	r4, r2, #4
 80014f4:	4294      	cmp	r4, r2
 80014f6:	4189      	sbcs	r1, r1
 80014f8:	4249      	negs	r1, r1
 80014fa:	185b      	adds	r3, r3, r1
 80014fc:	021a      	lsls	r2, r3, #8
 80014fe:	d562      	bpl.n	80015c6 <__aeabi_ddiv+0x5be>
 8001500:	2201      	movs	r2, #1
 8001502:	2300      	movs	r3, #0
 8001504:	2700      	movs	r7, #0
 8001506:	e60d      	b.n	8001124 <__aeabi_ddiv+0x11c>
 8001508:	428a      	cmp	r2, r1
 800150a:	d800      	bhi.n	800150e <__aeabi_ddiv+0x506>
 800150c:	e70a      	b.n	8001324 <__aeabi_ddiv+0x31c>
 800150e:	1e83      	subs	r3, r0, #2
 8001510:	1989      	adds	r1, r1, r6
 8001512:	e707      	b.n	8001324 <__aeabi_ddiv+0x31c>
 8001514:	230f      	movs	r3, #15
 8001516:	4013      	ands	r3, r2
 8001518:	2b04      	cmp	r3, #4
 800151a:	d100      	bne.n	800151e <__aeabi_ddiv+0x516>
 800151c:	e5e6      	b.n	80010ec <__aeabi_ddiv+0xe4>
 800151e:	1d17      	adds	r7, r2, #4
 8001520:	4297      	cmp	r7, r2
 8001522:	4192      	sbcs	r2, r2
 8001524:	4253      	negs	r3, r2
 8001526:	449b      	add	fp, r3
 8001528:	08fa      	lsrs	r2, r7, #3
 800152a:	e5e0      	b.n	80010ee <__aeabi_ddiv+0xe6>
 800152c:	2800      	cmp	r0, #0
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0x52a>
 8001530:	e5d7      	b.n	80010e2 <__aeabi_ddiv+0xda>
 8001532:	1871      	adds	r1, r6, r1
 8001534:	1e53      	subs	r3, r2, #1
 8001536:	42b1      	cmp	r1, r6
 8001538:	d327      	bcc.n	800158a <__aeabi_ddiv+0x582>
 800153a:	42a9      	cmp	r1, r5
 800153c:	d315      	bcc.n	800156a <__aeabi_ddiv+0x562>
 800153e:	d058      	beq.n	80015f2 <__aeabi_ddiv+0x5ea>
 8001540:	001a      	movs	r2, r3
 8001542:	e773      	b.n	800142c <__aeabi_ddiv+0x424>
 8001544:	2b00      	cmp	r3, #0
 8001546:	dc00      	bgt.n	800154a <__aeabi_ddiv+0x542>
 8001548:	e604      	b.n	8001154 <__aeabi_ddiv+0x14c>
 800154a:	2301      	movs	r3, #1
 800154c:	2200      	movs	r2, #0
 800154e:	449b      	add	fp, r3
 8001550:	e5cd      	b.n	80010ee <__aeabi_ddiv+0xe6>
 8001552:	2302      	movs	r3, #2
 8001554:	4447      	add	r7, r8
 8001556:	4547      	cmp	r7, r8
 8001558:	4189      	sbcs	r1, r1
 800155a:	425b      	negs	r3, r3
 800155c:	469c      	mov	ip, r3
 800155e:	4249      	negs	r1, r1
 8001560:	1989      	adds	r1, r1, r6
 8001562:	190c      	adds	r4, r1, r4
 8001564:	44e3      	add	fp, ip
 8001566:	1a24      	subs	r4, r4, r0
 8001568:	e703      	b.n	8001372 <__aeabi_ddiv+0x36a>
 800156a:	4643      	mov	r3, r8
 800156c:	005f      	lsls	r7, r3, #1
 800156e:	4547      	cmp	r7, r8
 8001570:	419b      	sbcs	r3, r3
 8001572:	46b8      	mov	r8, r7
 8001574:	425b      	negs	r3, r3
 8001576:	199e      	adds	r6, r3, r6
 8001578:	3a02      	subs	r2, #2
 800157a:	1989      	adds	r1, r1, r6
 800157c:	42a9      	cmp	r1, r5
 800157e:	d000      	beq.n	8001582 <__aeabi_ddiv+0x57a>
 8001580:	e754      	b.n	800142c <__aeabi_ddiv+0x424>
 8001582:	4540      	cmp	r0, r8
 8001584:	d000      	beq.n	8001588 <__aeabi_ddiv+0x580>
 8001586:	e751      	b.n	800142c <__aeabi_ddiv+0x424>
 8001588:	e5ab      	b.n	80010e2 <__aeabi_ddiv+0xda>
 800158a:	001a      	movs	r2, r3
 800158c:	e7f6      	b.n	800157c <__aeabi_ddiv+0x574>
 800158e:	211f      	movs	r1, #31
 8001590:	465f      	mov	r7, fp
 8001592:	4249      	negs	r1, r1
 8001594:	1b0c      	subs	r4, r1, r4
 8001596:	40e7      	lsrs	r7, r4
 8001598:	2b20      	cmp	r3, #32
 800159a:	d007      	beq.n	80015ac <__aeabi_ddiv+0x5a4>
 800159c:	491a      	ldr	r1, [pc, #104]	; (8001608 <__aeabi_ddiv+0x600>)
 800159e:	9b00      	ldr	r3, [sp, #0]
 80015a0:	468c      	mov	ip, r1
 80015a2:	4463      	add	r3, ip
 80015a4:	0018      	movs	r0, r3
 80015a6:	465b      	mov	r3, fp
 80015a8:	4083      	lsls	r3, r0
 80015aa:	431a      	orrs	r2, r3
 80015ac:	1e50      	subs	r0, r2, #1
 80015ae:	4182      	sbcs	r2, r0
 80015b0:	433a      	orrs	r2, r7
 80015b2:	2707      	movs	r7, #7
 80015b4:	2300      	movs	r3, #0
 80015b6:	4017      	ands	r7, r2
 80015b8:	d009      	beq.n	80015ce <__aeabi_ddiv+0x5c6>
 80015ba:	210f      	movs	r1, #15
 80015bc:	2300      	movs	r3, #0
 80015be:	4011      	ands	r1, r2
 80015c0:	0014      	movs	r4, r2
 80015c2:	2904      	cmp	r1, #4
 80015c4:	d195      	bne.n	80014f2 <__aeabi_ddiv+0x4ea>
 80015c6:	0022      	movs	r2, r4
 80015c8:	075f      	lsls	r7, r3, #29
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	0b1b      	lsrs	r3, r3, #12
 80015ce:	08d2      	lsrs	r2, r2, #3
 80015d0:	4317      	orrs	r7, r2
 80015d2:	2200      	movs	r2, #0
 80015d4:	e5a6      	b.n	8001124 <__aeabi_ddiv+0x11c>
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	4659      	mov	r1, fp
 80015da:	031b      	lsls	r3, r3, #12
 80015dc:	430b      	orrs	r3, r1
 80015de:	031b      	lsls	r3, r3, #12
 80015e0:	0017      	movs	r7, r2
 80015e2:	0b1b      	lsrs	r3, r3, #12
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <__aeabi_ddiv+0x5f8>)
 80015e6:	e59d      	b.n	8001124 <__aeabi_ddiv+0x11c>
 80015e8:	42bd      	cmp	r5, r7
 80015ea:	d8b2      	bhi.n	8001552 <__aeabi_ddiv+0x54a>
 80015ec:	469b      	mov	fp, r3
 80015ee:	2400      	movs	r4, #0
 80015f0:	e6bf      	b.n	8001372 <__aeabi_ddiv+0x36a>
 80015f2:	4580      	cmp	r8, r0
 80015f4:	d3b9      	bcc.n	800156a <__aeabi_ddiv+0x562>
 80015f6:	001a      	movs	r2, r3
 80015f8:	e7c3      	b.n	8001582 <__aeabi_ddiv+0x57a>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	000003ff 	.word	0x000003ff
 8001600:	000007ff 	.word	0x000007ff
 8001604:	0000041e 	.word	0x0000041e
 8001608:	0000043e 	.word	0x0000043e

0800160c <__eqdf2>:
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	464f      	mov	r7, r9
 8001610:	4646      	mov	r6, r8
 8001612:	46d6      	mov	lr, sl
 8001614:	4684      	mov	ip, r0
 8001616:	b5c0      	push	{r6, r7, lr}
 8001618:	4680      	mov	r8, r0
 800161a:	4e19      	ldr	r6, [pc, #100]	; (8001680 <__eqdf2+0x74>)
 800161c:	0318      	lsls	r0, r3, #12
 800161e:	030f      	lsls	r7, r1, #12
 8001620:	004d      	lsls	r5, r1, #1
 8001622:	0b00      	lsrs	r0, r0, #12
 8001624:	005c      	lsls	r4, r3, #1
 8001626:	4682      	mov	sl, r0
 8001628:	0b3f      	lsrs	r7, r7, #12
 800162a:	0d6d      	lsrs	r5, r5, #21
 800162c:	0fc9      	lsrs	r1, r1, #31
 800162e:	4691      	mov	r9, r2
 8001630:	0d64      	lsrs	r4, r4, #21
 8001632:	0fdb      	lsrs	r3, r3, #31
 8001634:	2001      	movs	r0, #1
 8001636:	42b5      	cmp	r5, r6
 8001638:	d00a      	beq.n	8001650 <__eqdf2+0x44>
 800163a:	42b4      	cmp	r4, r6
 800163c:	d003      	beq.n	8001646 <__eqdf2+0x3a>
 800163e:	42a5      	cmp	r5, r4
 8001640:	d101      	bne.n	8001646 <__eqdf2+0x3a>
 8001642:	4557      	cmp	r7, sl
 8001644:	d00c      	beq.n	8001660 <__eqdf2+0x54>
 8001646:	bc1c      	pop	{r2, r3, r4}
 8001648:	4690      	mov	r8, r2
 800164a:	4699      	mov	r9, r3
 800164c:	46a2      	mov	sl, r4
 800164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001650:	4666      	mov	r6, ip
 8001652:	433e      	orrs	r6, r7
 8001654:	d1f7      	bne.n	8001646 <__eqdf2+0x3a>
 8001656:	42ac      	cmp	r4, r5
 8001658:	d1f5      	bne.n	8001646 <__eqdf2+0x3a>
 800165a:	4654      	mov	r4, sl
 800165c:	4314      	orrs	r4, r2
 800165e:	d1f2      	bne.n	8001646 <__eqdf2+0x3a>
 8001660:	2001      	movs	r0, #1
 8001662:	45c8      	cmp	r8, r9
 8001664:	d1ef      	bne.n	8001646 <__eqdf2+0x3a>
 8001666:	4299      	cmp	r1, r3
 8001668:	d007      	beq.n	800167a <__eqdf2+0x6e>
 800166a:	2d00      	cmp	r5, #0
 800166c:	d1eb      	bne.n	8001646 <__eqdf2+0x3a>
 800166e:	4663      	mov	r3, ip
 8001670:	431f      	orrs	r7, r3
 8001672:	0038      	movs	r0, r7
 8001674:	1e47      	subs	r7, r0, #1
 8001676:	41b8      	sbcs	r0, r7
 8001678:	e7e5      	b.n	8001646 <__eqdf2+0x3a>
 800167a:	2000      	movs	r0, #0
 800167c:	e7e3      	b.n	8001646 <__eqdf2+0x3a>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	000007ff 	.word	0x000007ff

08001684 <__gedf2>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	464f      	mov	r7, r9
 8001688:	4646      	mov	r6, r8
 800168a:	46d6      	mov	lr, sl
 800168c:	004d      	lsls	r5, r1, #1
 800168e:	b5c0      	push	{r6, r7, lr}
 8001690:	030e      	lsls	r6, r1, #12
 8001692:	0fc9      	lsrs	r1, r1, #31
 8001694:	468a      	mov	sl, r1
 8001696:	492c      	ldr	r1, [pc, #176]	; (8001748 <__gedf2+0xc4>)
 8001698:	031f      	lsls	r7, r3, #12
 800169a:	005c      	lsls	r4, r3, #1
 800169c:	4680      	mov	r8, r0
 800169e:	0b36      	lsrs	r6, r6, #12
 80016a0:	0d6d      	lsrs	r5, r5, #21
 80016a2:	4691      	mov	r9, r2
 80016a4:	0b3f      	lsrs	r7, r7, #12
 80016a6:	0d64      	lsrs	r4, r4, #21
 80016a8:	0fdb      	lsrs	r3, r3, #31
 80016aa:	428d      	cmp	r5, r1
 80016ac:	d01e      	beq.n	80016ec <__gedf2+0x68>
 80016ae:	428c      	cmp	r4, r1
 80016b0:	d016      	beq.n	80016e0 <__gedf2+0x5c>
 80016b2:	2d00      	cmp	r5, #0
 80016b4:	d11e      	bne.n	80016f4 <__gedf2+0x70>
 80016b6:	4330      	orrs	r0, r6
 80016b8:	4684      	mov	ip, r0
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d101      	bne.n	80016c2 <__gedf2+0x3e>
 80016be:	433a      	orrs	r2, r7
 80016c0:	d023      	beq.n	800170a <__gedf2+0x86>
 80016c2:	4662      	mov	r2, ip
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d01a      	beq.n	80016fe <__gedf2+0x7a>
 80016c8:	459a      	cmp	sl, r3
 80016ca:	d029      	beq.n	8001720 <__gedf2+0x9c>
 80016cc:	4651      	mov	r1, sl
 80016ce:	2002      	movs	r0, #2
 80016d0:	3901      	subs	r1, #1
 80016d2:	4008      	ands	r0, r1
 80016d4:	3801      	subs	r0, #1
 80016d6:	bc1c      	pop	{r2, r3, r4}
 80016d8:	4690      	mov	r8, r2
 80016da:	4699      	mov	r9, r3
 80016dc:	46a2      	mov	sl, r4
 80016de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e0:	0039      	movs	r1, r7
 80016e2:	4311      	orrs	r1, r2
 80016e4:	d0e5      	beq.n	80016b2 <__gedf2+0x2e>
 80016e6:	2002      	movs	r0, #2
 80016e8:	4240      	negs	r0, r0
 80016ea:	e7f4      	b.n	80016d6 <__gedf2+0x52>
 80016ec:	4330      	orrs	r0, r6
 80016ee:	d1fa      	bne.n	80016e6 <__gedf2+0x62>
 80016f0:	42ac      	cmp	r4, r5
 80016f2:	d00f      	beq.n	8001714 <__gedf2+0x90>
 80016f4:	2c00      	cmp	r4, #0
 80016f6:	d10f      	bne.n	8001718 <__gedf2+0x94>
 80016f8:	433a      	orrs	r2, r7
 80016fa:	d0e7      	beq.n	80016cc <__gedf2+0x48>
 80016fc:	e00c      	b.n	8001718 <__gedf2+0x94>
 80016fe:	2201      	movs	r2, #1
 8001700:	3b01      	subs	r3, #1
 8001702:	4393      	bics	r3, r2
 8001704:	0018      	movs	r0, r3
 8001706:	3001      	adds	r0, #1
 8001708:	e7e5      	b.n	80016d6 <__gedf2+0x52>
 800170a:	4663      	mov	r3, ip
 800170c:	2000      	movs	r0, #0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0e1      	beq.n	80016d6 <__gedf2+0x52>
 8001712:	e7db      	b.n	80016cc <__gedf2+0x48>
 8001714:	433a      	orrs	r2, r7
 8001716:	d1e6      	bne.n	80016e6 <__gedf2+0x62>
 8001718:	459a      	cmp	sl, r3
 800171a:	d1d7      	bne.n	80016cc <__gedf2+0x48>
 800171c:	42a5      	cmp	r5, r4
 800171e:	dcd5      	bgt.n	80016cc <__gedf2+0x48>
 8001720:	42a5      	cmp	r5, r4
 8001722:	db05      	blt.n	8001730 <__gedf2+0xac>
 8001724:	42be      	cmp	r6, r7
 8001726:	d8d1      	bhi.n	80016cc <__gedf2+0x48>
 8001728:	d008      	beq.n	800173c <__gedf2+0xb8>
 800172a:	2000      	movs	r0, #0
 800172c:	42be      	cmp	r6, r7
 800172e:	d2d2      	bcs.n	80016d6 <__gedf2+0x52>
 8001730:	4650      	mov	r0, sl
 8001732:	2301      	movs	r3, #1
 8001734:	3801      	subs	r0, #1
 8001736:	4398      	bics	r0, r3
 8001738:	3001      	adds	r0, #1
 800173a:	e7cc      	b.n	80016d6 <__gedf2+0x52>
 800173c:	45c8      	cmp	r8, r9
 800173e:	d8c5      	bhi.n	80016cc <__gedf2+0x48>
 8001740:	2000      	movs	r0, #0
 8001742:	45c8      	cmp	r8, r9
 8001744:	d3f4      	bcc.n	8001730 <__gedf2+0xac>
 8001746:	e7c6      	b.n	80016d6 <__gedf2+0x52>
 8001748:	000007ff 	.word	0x000007ff

0800174c <__ledf2>:
 800174c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174e:	464f      	mov	r7, r9
 8001750:	4646      	mov	r6, r8
 8001752:	46d6      	mov	lr, sl
 8001754:	004d      	lsls	r5, r1, #1
 8001756:	b5c0      	push	{r6, r7, lr}
 8001758:	030e      	lsls	r6, r1, #12
 800175a:	0fc9      	lsrs	r1, r1, #31
 800175c:	468a      	mov	sl, r1
 800175e:	492e      	ldr	r1, [pc, #184]	; (8001818 <__ledf2+0xcc>)
 8001760:	031f      	lsls	r7, r3, #12
 8001762:	005c      	lsls	r4, r3, #1
 8001764:	4680      	mov	r8, r0
 8001766:	0b36      	lsrs	r6, r6, #12
 8001768:	0d6d      	lsrs	r5, r5, #21
 800176a:	4691      	mov	r9, r2
 800176c:	0b3f      	lsrs	r7, r7, #12
 800176e:	0d64      	lsrs	r4, r4, #21
 8001770:	0fdb      	lsrs	r3, r3, #31
 8001772:	428d      	cmp	r5, r1
 8001774:	d018      	beq.n	80017a8 <__ledf2+0x5c>
 8001776:	428c      	cmp	r4, r1
 8001778:	d011      	beq.n	800179e <__ledf2+0x52>
 800177a:	2d00      	cmp	r5, #0
 800177c:	d118      	bne.n	80017b0 <__ledf2+0x64>
 800177e:	4330      	orrs	r0, r6
 8001780:	4684      	mov	ip, r0
 8001782:	2c00      	cmp	r4, #0
 8001784:	d11e      	bne.n	80017c4 <__ledf2+0x78>
 8001786:	433a      	orrs	r2, r7
 8001788:	d11c      	bne.n	80017c4 <__ledf2+0x78>
 800178a:	4663      	mov	r3, ip
 800178c:	2000      	movs	r0, #0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d030      	beq.n	80017f4 <__ledf2+0xa8>
 8001792:	4651      	mov	r1, sl
 8001794:	2002      	movs	r0, #2
 8001796:	3901      	subs	r1, #1
 8001798:	4008      	ands	r0, r1
 800179a:	3801      	subs	r0, #1
 800179c:	e02a      	b.n	80017f4 <__ledf2+0xa8>
 800179e:	0039      	movs	r1, r7
 80017a0:	4311      	orrs	r1, r2
 80017a2:	d0ea      	beq.n	800177a <__ledf2+0x2e>
 80017a4:	2002      	movs	r0, #2
 80017a6:	e025      	b.n	80017f4 <__ledf2+0xa8>
 80017a8:	4330      	orrs	r0, r6
 80017aa:	d1fb      	bne.n	80017a4 <__ledf2+0x58>
 80017ac:	42ac      	cmp	r4, r5
 80017ae:	d026      	beq.n	80017fe <__ledf2+0xb2>
 80017b0:	2c00      	cmp	r4, #0
 80017b2:	d126      	bne.n	8001802 <__ledf2+0xb6>
 80017b4:	433a      	orrs	r2, r7
 80017b6:	d124      	bne.n	8001802 <__ledf2+0xb6>
 80017b8:	4651      	mov	r1, sl
 80017ba:	2002      	movs	r0, #2
 80017bc:	3901      	subs	r1, #1
 80017be:	4008      	ands	r0, r1
 80017c0:	3801      	subs	r0, #1
 80017c2:	e017      	b.n	80017f4 <__ledf2+0xa8>
 80017c4:	4662      	mov	r2, ip
 80017c6:	2a00      	cmp	r2, #0
 80017c8:	d00f      	beq.n	80017ea <__ledf2+0x9e>
 80017ca:	459a      	cmp	sl, r3
 80017cc:	d1e1      	bne.n	8001792 <__ledf2+0x46>
 80017ce:	42a5      	cmp	r5, r4
 80017d0:	db05      	blt.n	80017de <__ledf2+0x92>
 80017d2:	42be      	cmp	r6, r7
 80017d4:	d8dd      	bhi.n	8001792 <__ledf2+0x46>
 80017d6:	d019      	beq.n	800180c <__ledf2+0xc0>
 80017d8:	2000      	movs	r0, #0
 80017da:	42be      	cmp	r6, r7
 80017dc:	d20a      	bcs.n	80017f4 <__ledf2+0xa8>
 80017de:	4650      	mov	r0, sl
 80017e0:	2301      	movs	r3, #1
 80017e2:	3801      	subs	r0, #1
 80017e4:	4398      	bics	r0, r3
 80017e6:	3001      	adds	r0, #1
 80017e8:	e004      	b.n	80017f4 <__ledf2+0xa8>
 80017ea:	2201      	movs	r2, #1
 80017ec:	3b01      	subs	r3, #1
 80017ee:	4393      	bics	r3, r2
 80017f0:	0018      	movs	r0, r3
 80017f2:	3001      	adds	r0, #1
 80017f4:	bc1c      	pop	{r2, r3, r4}
 80017f6:	4690      	mov	r8, r2
 80017f8:	4699      	mov	r9, r3
 80017fa:	46a2      	mov	sl, r4
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fe:	433a      	orrs	r2, r7
 8001800:	d1d0      	bne.n	80017a4 <__ledf2+0x58>
 8001802:	459a      	cmp	sl, r3
 8001804:	d1c5      	bne.n	8001792 <__ledf2+0x46>
 8001806:	42a5      	cmp	r5, r4
 8001808:	dcc3      	bgt.n	8001792 <__ledf2+0x46>
 800180a:	e7e0      	b.n	80017ce <__ledf2+0x82>
 800180c:	45c8      	cmp	r8, r9
 800180e:	d8c0      	bhi.n	8001792 <__ledf2+0x46>
 8001810:	2000      	movs	r0, #0
 8001812:	45c8      	cmp	r8, r9
 8001814:	d3e3      	bcc.n	80017de <__ledf2+0x92>
 8001816:	e7ed      	b.n	80017f4 <__ledf2+0xa8>
 8001818:	000007ff 	.word	0x000007ff

0800181c <__aeabi_dmul>:
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	4657      	mov	r7, sl
 8001820:	46de      	mov	lr, fp
 8001822:	464e      	mov	r6, r9
 8001824:	4645      	mov	r5, r8
 8001826:	b5e0      	push	{r5, r6, r7, lr}
 8001828:	4683      	mov	fp, r0
 800182a:	0006      	movs	r6, r0
 800182c:	030f      	lsls	r7, r1, #12
 800182e:	0048      	lsls	r0, r1, #1
 8001830:	b087      	sub	sp, #28
 8001832:	4692      	mov	sl, r2
 8001834:	001d      	movs	r5, r3
 8001836:	0b3f      	lsrs	r7, r7, #12
 8001838:	0d40      	lsrs	r0, r0, #21
 800183a:	0fcc      	lsrs	r4, r1, #31
 800183c:	2800      	cmp	r0, #0
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0x26>
 8001840:	e06f      	b.n	8001922 <__aeabi_dmul+0x106>
 8001842:	4bde      	ldr	r3, [pc, #888]	; (8001bbc <__aeabi_dmul+0x3a0>)
 8001844:	4298      	cmp	r0, r3
 8001846:	d038      	beq.n	80018ba <__aeabi_dmul+0x9e>
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	00ff      	lsls	r7, r7, #3
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	431f      	orrs	r7, r3
 8001850:	0f73      	lsrs	r3, r6, #29
 8001852:	433b      	orrs	r3, r7
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	4bda      	ldr	r3, [pc, #872]	; (8001bc0 <__aeabi_dmul+0x3a4>)
 8001858:	2700      	movs	r7, #0
 800185a:	4699      	mov	r9, r3
 800185c:	2300      	movs	r3, #0
 800185e:	469b      	mov	fp, r3
 8001860:	00f6      	lsls	r6, r6, #3
 8001862:	4481      	add	r9, r0
 8001864:	032b      	lsls	r3, r5, #12
 8001866:	0069      	lsls	r1, r5, #1
 8001868:	0b1b      	lsrs	r3, r3, #12
 800186a:	4652      	mov	r2, sl
 800186c:	4698      	mov	r8, r3
 800186e:	0d49      	lsrs	r1, r1, #21
 8001870:	0fed      	lsrs	r5, r5, #31
 8001872:	2900      	cmp	r1, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_dmul+0x5c>
 8001876:	e085      	b.n	8001984 <__aeabi_dmul+0x168>
 8001878:	4bd0      	ldr	r3, [pc, #832]	; (8001bbc <__aeabi_dmul+0x3a0>)
 800187a:	4299      	cmp	r1, r3
 800187c:	d100      	bne.n	8001880 <__aeabi_dmul+0x64>
 800187e:	e073      	b.n	8001968 <__aeabi_dmul+0x14c>
 8001880:	4643      	mov	r3, r8
 8001882:	00da      	lsls	r2, r3, #3
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	041b      	lsls	r3, r3, #16
 8001888:	4313      	orrs	r3, r2
 800188a:	4652      	mov	r2, sl
 800188c:	48cc      	ldr	r0, [pc, #816]	; (8001bc0 <__aeabi_dmul+0x3a4>)
 800188e:	0f52      	lsrs	r2, r2, #29
 8001890:	4684      	mov	ip, r0
 8001892:	4313      	orrs	r3, r2
 8001894:	4652      	mov	r2, sl
 8001896:	2000      	movs	r0, #0
 8001898:	4461      	add	r1, ip
 800189a:	00d2      	lsls	r2, r2, #3
 800189c:	4489      	add	r9, r1
 800189e:	0021      	movs	r1, r4
 80018a0:	4069      	eors	r1, r5
 80018a2:	9100      	str	r1, [sp, #0]
 80018a4:	468c      	mov	ip, r1
 80018a6:	2101      	movs	r1, #1
 80018a8:	4449      	add	r1, r9
 80018aa:	468a      	mov	sl, r1
 80018ac:	2f0f      	cmp	r7, #15
 80018ae:	d900      	bls.n	80018b2 <__aeabi_dmul+0x96>
 80018b0:	e090      	b.n	80019d4 <__aeabi_dmul+0x1b8>
 80018b2:	49c4      	ldr	r1, [pc, #784]	; (8001bc4 <__aeabi_dmul+0x3a8>)
 80018b4:	00bf      	lsls	r7, r7, #2
 80018b6:	59cf      	ldr	r7, [r1, r7]
 80018b8:	46bf      	mov	pc, r7
 80018ba:	465b      	mov	r3, fp
 80018bc:	433b      	orrs	r3, r7
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	d000      	beq.n	80018c4 <__aeabi_dmul+0xa8>
 80018c2:	e16a      	b.n	8001b9a <__aeabi_dmul+0x37e>
 80018c4:	2302      	movs	r3, #2
 80018c6:	2708      	movs	r7, #8
 80018c8:	2600      	movs	r6, #0
 80018ca:	4681      	mov	r9, r0
 80018cc:	469b      	mov	fp, r3
 80018ce:	e7c9      	b.n	8001864 <__aeabi_dmul+0x48>
 80018d0:	0032      	movs	r2, r6
 80018d2:	4658      	mov	r0, fp
 80018d4:	9b01      	ldr	r3, [sp, #4]
 80018d6:	4661      	mov	r1, ip
 80018d8:	9100      	str	r1, [sp, #0]
 80018da:	2802      	cmp	r0, #2
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dmul+0xc4>
 80018de:	e075      	b.n	80019cc <__aeabi_dmul+0x1b0>
 80018e0:	2803      	cmp	r0, #3
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dmul+0xca>
 80018e4:	e1fe      	b.n	8001ce4 <__aeabi_dmul+0x4c8>
 80018e6:	2801      	cmp	r0, #1
 80018e8:	d000      	beq.n	80018ec <__aeabi_dmul+0xd0>
 80018ea:	e12c      	b.n	8001b46 <__aeabi_dmul+0x32a>
 80018ec:	2300      	movs	r3, #0
 80018ee:	2700      	movs	r7, #0
 80018f0:	2600      	movs	r6, #0
 80018f2:	2500      	movs	r5, #0
 80018f4:	033f      	lsls	r7, r7, #12
 80018f6:	0d2a      	lsrs	r2, r5, #20
 80018f8:	0b3f      	lsrs	r7, r7, #12
 80018fa:	48b3      	ldr	r0, [pc, #716]	; (8001bc8 <__aeabi_dmul+0x3ac>)
 80018fc:	0512      	lsls	r2, r2, #20
 80018fe:	433a      	orrs	r2, r7
 8001900:	4002      	ands	r2, r0
 8001902:	051b      	lsls	r3, r3, #20
 8001904:	4313      	orrs	r3, r2
 8001906:	9a00      	ldr	r2, [sp, #0]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	07d1      	lsls	r1, r2, #31
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	430b      	orrs	r3, r1
 8001910:	0030      	movs	r0, r6
 8001912:	0019      	movs	r1, r3
 8001914:	b007      	add	sp, #28
 8001916:	bc3c      	pop	{r2, r3, r4, r5}
 8001918:	4690      	mov	r8, r2
 800191a:	4699      	mov	r9, r3
 800191c:	46a2      	mov	sl, r4
 800191e:	46ab      	mov	fp, r5
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001922:	465b      	mov	r3, fp
 8001924:	433b      	orrs	r3, r7
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	d100      	bne.n	800192c <__aeabi_dmul+0x110>
 800192a:	e12f      	b.n	8001b8c <__aeabi_dmul+0x370>
 800192c:	2f00      	cmp	r7, #0
 800192e:	d100      	bne.n	8001932 <__aeabi_dmul+0x116>
 8001930:	e1a5      	b.n	8001c7e <__aeabi_dmul+0x462>
 8001932:	0038      	movs	r0, r7
 8001934:	f000 fe58 	bl	80025e8 <__clzsi2>
 8001938:	0003      	movs	r3, r0
 800193a:	3b0b      	subs	r3, #11
 800193c:	2b1c      	cmp	r3, #28
 800193e:	dd00      	ble.n	8001942 <__aeabi_dmul+0x126>
 8001940:	e196      	b.n	8001c70 <__aeabi_dmul+0x454>
 8001942:	221d      	movs	r2, #29
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	465a      	mov	r2, fp
 8001948:	0001      	movs	r1, r0
 800194a:	40da      	lsrs	r2, r3
 800194c:	465e      	mov	r6, fp
 800194e:	3908      	subs	r1, #8
 8001950:	408f      	lsls	r7, r1
 8001952:	0013      	movs	r3, r2
 8001954:	408e      	lsls	r6, r1
 8001956:	433b      	orrs	r3, r7
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	4b9c      	ldr	r3, [pc, #624]	; (8001bcc <__aeabi_dmul+0x3b0>)
 800195c:	2700      	movs	r7, #0
 800195e:	1a1b      	subs	r3, r3, r0
 8001960:	4699      	mov	r9, r3
 8001962:	2300      	movs	r3, #0
 8001964:	469b      	mov	fp, r3
 8001966:	e77d      	b.n	8001864 <__aeabi_dmul+0x48>
 8001968:	4641      	mov	r1, r8
 800196a:	4653      	mov	r3, sl
 800196c:	430b      	orrs	r3, r1
 800196e:	4993      	ldr	r1, [pc, #588]	; (8001bbc <__aeabi_dmul+0x3a0>)
 8001970:	468c      	mov	ip, r1
 8001972:	44e1      	add	r9, ip
 8001974:	2b00      	cmp	r3, #0
 8001976:	d000      	beq.n	800197a <__aeabi_dmul+0x15e>
 8001978:	e11a      	b.n	8001bb0 <__aeabi_dmul+0x394>
 800197a:	2202      	movs	r2, #2
 800197c:	2002      	movs	r0, #2
 800197e:	4317      	orrs	r7, r2
 8001980:	2200      	movs	r2, #0
 8001982:	e78c      	b.n	800189e <__aeabi_dmul+0x82>
 8001984:	4313      	orrs	r3, r2
 8001986:	d100      	bne.n	800198a <__aeabi_dmul+0x16e>
 8001988:	e10d      	b.n	8001ba6 <__aeabi_dmul+0x38a>
 800198a:	4643      	mov	r3, r8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d100      	bne.n	8001992 <__aeabi_dmul+0x176>
 8001990:	e181      	b.n	8001c96 <__aeabi_dmul+0x47a>
 8001992:	4640      	mov	r0, r8
 8001994:	f000 fe28 	bl	80025e8 <__clzsi2>
 8001998:	0002      	movs	r2, r0
 800199a:	3a0b      	subs	r2, #11
 800199c:	2a1c      	cmp	r2, #28
 800199e:	dd00      	ble.n	80019a2 <__aeabi_dmul+0x186>
 80019a0:	e172      	b.n	8001c88 <__aeabi_dmul+0x46c>
 80019a2:	0001      	movs	r1, r0
 80019a4:	4643      	mov	r3, r8
 80019a6:	3908      	subs	r1, #8
 80019a8:	408b      	lsls	r3, r1
 80019aa:	4698      	mov	r8, r3
 80019ac:	231d      	movs	r3, #29
 80019ae:	1a9a      	subs	r2, r3, r2
 80019b0:	4653      	mov	r3, sl
 80019b2:	40d3      	lsrs	r3, r2
 80019b4:	001a      	movs	r2, r3
 80019b6:	4643      	mov	r3, r8
 80019b8:	4313      	orrs	r3, r2
 80019ba:	4652      	mov	r2, sl
 80019bc:	408a      	lsls	r2, r1
 80019be:	4649      	mov	r1, r9
 80019c0:	1a08      	subs	r0, r1, r0
 80019c2:	4982      	ldr	r1, [pc, #520]	; (8001bcc <__aeabi_dmul+0x3b0>)
 80019c4:	4689      	mov	r9, r1
 80019c6:	4481      	add	r9, r0
 80019c8:	2000      	movs	r0, #0
 80019ca:	e768      	b.n	800189e <__aeabi_dmul+0x82>
 80019cc:	4b7b      	ldr	r3, [pc, #492]	; (8001bbc <__aeabi_dmul+0x3a0>)
 80019ce:	2700      	movs	r7, #0
 80019d0:	2600      	movs	r6, #0
 80019d2:	e78e      	b.n	80018f2 <__aeabi_dmul+0xd6>
 80019d4:	0c14      	lsrs	r4, r2, #16
 80019d6:	0412      	lsls	r2, r2, #16
 80019d8:	0c12      	lsrs	r2, r2, #16
 80019da:	0011      	movs	r1, r2
 80019dc:	0c37      	lsrs	r7, r6, #16
 80019de:	0436      	lsls	r6, r6, #16
 80019e0:	0c35      	lsrs	r5, r6, #16
 80019e2:	4379      	muls	r1, r7
 80019e4:	0028      	movs	r0, r5
 80019e6:	468c      	mov	ip, r1
 80019e8:	002e      	movs	r6, r5
 80019ea:	4360      	muls	r0, r4
 80019ec:	4460      	add	r0, ip
 80019ee:	4683      	mov	fp, r0
 80019f0:	4356      	muls	r6, r2
 80019f2:	0021      	movs	r1, r4
 80019f4:	0c30      	lsrs	r0, r6, #16
 80019f6:	4680      	mov	r8, r0
 80019f8:	4658      	mov	r0, fp
 80019fa:	4379      	muls	r1, r7
 80019fc:	4440      	add	r0, r8
 80019fe:	9102      	str	r1, [sp, #8]
 8001a00:	4584      	cmp	ip, r0
 8001a02:	d906      	bls.n	8001a12 <__aeabi_dmul+0x1f6>
 8001a04:	4688      	mov	r8, r1
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0249      	lsls	r1, r1, #9
 8001a0a:	468c      	mov	ip, r1
 8001a0c:	44e0      	add	r8, ip
 8001a0e:	4641      	mov	r1, r8
 8001a10:	9102      	str	r1, [sp, #8]
 8001a12:	0436      	lsls	r6, r6, #16
 8001a14:	0c01      	lsrs	r1, r0, #16
 8001a16:	0c36      	lsrs	r6, r6, #16
 8001a18:	0400      	lsls	r0, r0, #16
 8001a1a:	468b      	mov	fp, r1
 8001a1c:	1981      	adds	r1, r0, r6
 8001a1e:	0c1e      	lsrs	r6, r3, #16
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	9103      	str	r1, [sp, #12]
 8001a26:	0019      	movs	r1, r3
 8001a28:	4379      	muls	r1, r7
 8001a2a:	468c      	mov	ip, r1
 8001a2c:	0028      	movs	r0, r5
 8001a2e:	4375      	muls	r5, r6
 8001a30:	4465      	add	r5, ip
 8001a32:	46a8      	mov	r8, r5
 8001a34:	4358      	muls	r0, r3
 8001a36:	0c05      	lsrs	r5, r0, #16
 8001a38:	4445      	add	r5, r8
 8001a3a:	4377      	muls	r7, r6
 8001a3c:	42a9      	cmp	r1, r5
 8001a3e:	d903      	bls.n	8001a48 <__aeabi_dmul+0x22c>
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	0249      	lsls	r1, r1, #9
 8001a44:	468c      	mov	ip, r1
 8001a46:	4467      	add	r7, ip
 8001a48:	0c29      	lsrs	r1, r5, #16
 8001a4a:	468c      	mov	ip, r1
 8001a4c:	0039      	movs	r1, r7
 8001a4e:	0400      	lsls	r0, r0, #16
 8001a50:	0c00      	lsrs	r0, r0, #16
 8001a52:	042d      	lsls	r5, r5, #16
 8001a54:	182d      	adds	r5, r5, r0
 8001a56:	4461      	add	r1, ip
 8001a58:	44ab      	add	fp, r5
 8001a5a:	9105      	str	r1, [sp, #20]
 8001a5c:	4659      	mov	r1, fp
 8001a5e:	9104      	str	r1, [sp, #16]
 8001a60:	9901      	ldr	r1, [sp, #4]
 8001a62:	040f      	lsls	r7, r1, #16
 8001a64:	0c3f      	lsrs	r7, r7, #16
 8001a66:	0c08      	lsrs	r0, r1, #16
 8001a68:	0039      	movs	r1, r7
 8001a6a:	4351      	muls	r1, r2
 8001a6c:	4342      	muls	r2, r0
 8001a6e:	4690      	mov	r8, r2
 8001a70:	0002      	movs	r2, r0
 8001a72:	468c      	mov	ip, r1
 8001a74:	0c09      	lsrs	r1, r1, #16
 8001a76:	468b      	mov	fp, r1
 8001a78:	4362      	muls	r2, r4
 8001a7a:	437c      	muls	r4, r7
 8001a7c:	4444      	add	r4, r8
 8001a7e:	445c      	add	r4, fp
 8001a80:	45a0      	cmp	r8, r4
 8001a82:	d903      	bls.n	8001a8c <__aeabi_dmul+0x270>
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	0249      	lsls	r1, r1, #9
 8001a88:	4688      	mov	r8, r1
 8001a8a:	4442      	add	r2, r8
 8001a8c:	0c21      	lsrs	r1, r4, #16
 8001a8e:	4688      	mov	r8, r1
 8001a90:	4661      	mov	r1, ip
 8001a92:	0409      	lsls	r1, r1, #16
 8001a94:	0c09      	lsrs	r1, r1, #16
 8001a96:	468c      	mov	ip, r1
 8001a98:	0039      	movs	r1, r7
 8001a9a:	4359      	muls	r1, r3
 8001a9c:	4343      	muls	r3, r0
 8001a9e:	4370      	muls	r0, r6
 8001aa0:	437e      	muls	r6, r7
 8001aa2:	0c0f      	lsrs	r7, r1, #16
 8001aa4:	18f6      	adds	r6, r6, r3
 8001aa6:	0424      	lsls	r4, r4, #16
 8001aa8:	19be      	adds	r6, r7, r6
 8001aaa:	4464      	add	r4, ip
 8001aac:	4442      	add	r2, r8
 8001aae:	468c      	mov	ip, r1
 8001ab0:	42b3      	cmp	r3, r6
 8001ab2:	d903      	bls.n	8001abc <__aeabi_dmul+0x2a0>
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	025b      	lsls	r3, r3, #9
 8001ab8:	4698      	mov	r8, r3
 8001aba:	4440      	add	r0, r8
 8001abc:	9b02      	ldr	r3, [sp, #8]
 8001abe:	4661      	mov	r1, ip
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	9b04      	ldr	r3, [sp, #16]
 8001ac4:	0437      	lsls	r7, r6, #16
 8001ac6:	4443      	add	r3, r8
 8001ac8:	469b      	mov	fp, r3
 8001aca:	45ab      	cmp	fp, r5
 8001acc:	41ad      	sbcs	r5, r5
 8001ace:	426b      	negs	r3, r5
 8001ad0:	040d      	lsls	r5, r1, #16
 8001ad2:	9905      	ldr	r1, [sp, #20]
 8001ad4:	0c2d      	lsrs	r5, r5, #16
 8001ad6:	468c      	mov	ip, r1
 8001ad8:	197f      	adds	r7, r7, r5
 8001ada:	4467      	add	r7, ip
 8001adc:	18fd      	adds	r5, r7, r3
 8001ade:	46a8      	mov	r8, r5
 8001ae0:	465d      	mov	r5, fp
 8001ae2:	192d      	adds	r5, r5, r4
 8001ae4:	42a5      	cmp	r5, r4
 8001ae6:	41a4      	sbcs	r4, r4
 8001ae8:	4693      	mov	fp, r2
 8001aea:	4264      	negs	r4, r4
 8001aec:	46a4      	mov	ip, r4
 8001aee:	44c3      	add	fp, r8
 8001af0:	44dc      	add	ip, fp
 8001af2:	428f      	cmp	r7, r1
 8001af4:	41bf      	sbcs	r7, r7
 8001af6:	4598      	cmp	r8, r3
 8001af8:	419b      	sbcs	r3, r3
 8001afa:	4593      	cmp	fp, r2
 8001afc:	4192      	sbcs	r2, r2
 8001afe:	45a4      	cmp	ip, r4
 8001b00:	41a4      	sbcs	r4, r4
 8001b02:	425b      	negs	r3, r3
 8001b04:	427f      	negs	r7, r7
 8001b06:	431f      	orrs	r7, r3
 8001b08:	0c36      	lsrs	r6, r6, #16
 8001b0a:	4252      	negs	r2, r2
 8001b0c:	4264      	negs	r4, r4
 8001b0e:	19bf      	adds	r7, r7, r6
 8001b10:	4322      	orrs	r2, r4
 8001b12:	18bf      	adds	r7, r7, r2
 8001b14:	4662      	mov	r2, ip
 8001b16:	1838      	adds	r0, r7, r0
 8001b18:	0243      	lsls	r3, r0, #9
 8001b1a:	0dd2      	lsrs	r2, r2, #23
 8001b1c:	9903      	ldr	r1, [sp, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	026a      	lsls	r2, r5, #9
 8001b22:	430a      	orrs	r2, r1
 8001b24:	1e50      	subs	r0, r2, #1
 8001b26:	4182      	sbcs	r2, r0
 8001b28:	4661      	mov	r1, ip
 8001b2a:	0ded      	lsrs	r5, r5, #23
 8001b2c:	432a      	orrs	r2, r5
 8001b2e:	024e      	lsls	r6, r1, #9
 8001b30:	4332      	orrs	r2, r6
 8001b32:	01d9      	lsls	r1, r3, #7
 8001b34:	d400      	bmi.n	8001b38 <__aeabi_dmul+0x31c>
 8001b36:	e0b3      	b.n	8001ca0 <__aeabi_dmul+0x484>
 8001b38:	2601      	movs	r6, #1
 8001b3a:	0850      	lsrs	r0, r2, #1
 8001b3c:	4032      	ands	r2, r6
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	07de      	lsls	r6, r3, #31
 8001b42:	4332      	orrs	r2, r6
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	4c22      	ldr	r4, [pc, #136]	; (8001bd0 <__aeabi_dmul+0x3b4>)
 8001b48:	4454      	add	r4, sl
 8001b4a:	2c00      	cmp	r4, #0
 8001b4c:	dd62      	ble.n	8001c14 <__aeabi_dmul+0x3f8>
 8001b4e:	0751      	lsls	r1, r2, #29
 8001b50:	d009      	beq.n	8001b66 <__aeabi_dmul+0x34a>
 8001b52:	200f      	movs	r0, #15
 8001b54:	4010      	ands	r0, r2
 8001b56:	2804      	cmp	r0, #4
 8001b58:	d005      	beq.n	8001b66 <__aeabi_dmul+0x34a>
 8001b5a:	1d10      	adds	r0, r2, #4
 8001b5c:	4290      	cmp	r0, r2
 8001b5e:	4192      	sbcs	r2, r2
 8001b60:	4252      	negs	r2, r2
 8001b62:	189b      	adds	r3, r3, r2
 8001b64:	0002      	movs	r2, r0
 8001b66:	01d9      	lsls	r1, r3, #7
 8001b68:	d504      	bpl.n	8001b74 <__aeabi_dmul+0x358>
 8001b6a:	2480      	movs	r4, #128	; 0x80
 8001b6c:	4819      	ldr	r0, [pc, #100]	; (8001bd4 <__aeabi_dmul+0x3b8>)
 8001b6e:	00e4      	lsls	r4, r4, #3
 8001b70:	4003      	ands	r3, r0
 8001b72:	4454      	add	r4, sl
 8001b74:	4818      	ldr	r0, [pc, #96]	; (8001bd8 <__aeabi_dmul+0x3bc>)
 8001b76:	4284      	cmp	r4, r0
 8001b78:	dd00      	ble.n	8001b7c <__aeabi_dmul+0x360>
 8001b7a:	e727      	b.n	80019cc <__aeabi_dmul+0x1b0>
 8001b7c:	075e      	lsls	r6, r3, #29
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	08d2      	lsrs	r2, r2, #3
 8001b82:	0b1f      	lsrs	r7, r3, #12
 8001b84:	0563      	lsls	r3, r4, #21
 8001b86:	4316      	orrs	r6, r2
 8001b88:	0d5b      	lsrs	r3, r3, #21
 8001b8a:	e6b2      	b.n	80018f2 <__aeabi_dmul+0xd6>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	4699      	mov	r9, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	2704      	movs	r7, #4
 8001b94:	2600      	movs	r6, #0
 8001b96:	469b      	mov	fp, r3
 8001b98:	e664      	b.n	8001864 <__aeabi_dmul+0x48>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	9701      	str	r7, [sp, #4]
 8001b9e:	4681      	mov	r9, r0
 8001ba0:	270c      	movs	r7, #12
 8001ba2:	469b      	mov	fp, r3
 8001ba4:	e65e      	b.n	8001864 <__aeabi_dmul+0x48>
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2001      	movs	r0, #1
 8001baa:	4317      	orrs	r7, r2
 8001bac:	2200      	movs	r2, #0
 8001bae:	e676      	b.n	800189e <__aeabi_dmul+0x82>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	431f      	orrs	r7, r3
 8001bb6:	4643      	mov	r3, r8
 8001bb8:	e671      	b.n	800189e <__aeabi_dmul+0x82>
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	000007ff 	.word	0x000007ff
 8001bc0:	fffffc01 	.word	0xfffffc01
 8001bc4:	080060a8 	.word	0x080060a8
 8001bc8:	800fffff 	.word	0x800fffff
 8001bcc:	fffffc0d 	.word	0xfffffc0d
 8001bd0:	000003ff 	.word	0x000003ff
 8001bd4:	feffffff 	.word	0xfeffffff
 8001bd8:	000007fe 	.word	0x000007fe
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2780      	movs	r7, #128	; 0x80
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	033f      	lsls	r7, r7, #12
 8001be4:	2600      	movs	r6, #0
 8001be6:	4b43      	ldr	r3, [pc, #268]	; (8001cf4 <__aeabi_dmul+0x4d8>)
 8001be8:	e683      	b.n	80018f2 <__aeabi_dmul+0xd6>
 8001bea:	9b01      	ldr	r3, [sp, #4]
 8001bec:	0032      	movs	r2, r6
 8001bee:	46a4      	mov	ip, r4
 8001bf0:	4658      	mov	r0, fp
 8001bf2:	e670      	b.n	80018d6 <__aeabi_dmul+0xba>
 8001bf4:	46ac      	mov	ip, r5
 8001bf6:	e66e      	b.n	80018d6 <__aeabi_dmul+0xba>
 8001bf8:	2780      	movs	r7, #128	; 0x80
 8001bfa:	9901      	ldr	r1, [sp, #4]
 8001bfc:	033f      	lsls	r7, r7, #12
 8001bfe:	4239      	tst	r1, r7
 8001c00:	d02d      	beq.n	8001c5e <__aeabi_dmul+0x442>
 8001c02:	423b      	tst	r3, r7
 8001c04:	d12b      	bne.n	8001c5e <__aeabi_dmul+0x442>
 8001c06:	431f      	orrs	r7, r3
 8001c08:	033f      	lsls	r7, r7, #12
 8001c0a:	0b3f      	lsrs	r7, r7, #12
 8001c0c:	9500      	str	r5, [sp, #0]
 8001c0e:	0016      	movs	r6, r2
 8001c10:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <__aeabi_dmul+0x4d8>)
 8001c12:	e66e      	b.n	80018f2 <__aeabi_dmul+0xd6>
 8001c14:	2501      	movs	r5, #1
 8001c16:	1b2d      	subs	r5, r5, r4
 8001c18:	2d38      	cmp	r5, #56	; 0x38
 8001c1a:	dd00      	ble.n	8001c1e <__aeabi_dmul+0x402>
 8001c1c:	e666      	b.n	80018ec <__aeabi_dmul+0xd0>
 8001c1e:	2d1f      	cmp	r5, #31
 8001c20:	dc40      	bgt.n	8001ca4 <__aeabi_dmul+0x488>
 8001c22:	4835      	ldr	r0, [pc, #212]	; (8001cf8 <__aeabi_dmul+0x4dc>)
 8001c24:	001c      	movs	r4, r3
 8001c26:	4450      	add	r0, sl
 8001c28:	0016      	movs	r6, r2
 8001c2a:	4082      	lsls	r2, r0
 8001c2c:	4084      	lsls	r4, r0
 8001c2e:	40ee      	lsrs	r6, r5
 8001c30:	1e50      	subs	r0, r2, #1
 8001c32:	4182      	sbcs	r2, r0
 8001c34:	4334      	orrs	r4, r6
 8001c36:	4314      	orrs	r4, r2
 8001c38:	40eb      	lsrs	r3, r5
 8001c3a:	0762      	lsls	r2, r4, #29
 8001c3c:	d009      	beq.n	8001c52 <__aeabi_dmul+0x436>
 8001c3e:	220f      	movs	r2, #15
 8001c40:	4022      	ands	r2, r4
 8001c42:	2a04      	cmp	r2, #4
 8001c44:	d005      	beq.n	8001c52 <__aeabi_dmul+0x436>
 8001c46:	0022      	movs	r2, r4
 8001c48:	1d14      	adds	r4, r2, #4
 8001c4a:	4294      	cmp	r4, r2
 8001c4c:	4180      	sbcs	r0, r0
 8001c4e:	4240      	negs	r0, r0
 8001c50:	181b      	adds	r3, r3, r0
 8001c52:	021a      	lsls	r2, r3, #8
 8001c54:	d53e      	bpl.n	8001cd4 <__aeabi_dmul+0x4b8>
 8001c56:	2301      	movs	r3, #1
 8001c58:	2700      	movs	r7, #0
 8001c5a:	2600      	movs	r6, #0
 8001c5c:	e649      	b.n	80018f2 <__aeabi_dmul+0xd6>
 8001c5e:	2780      	movs	r7, #128	; 0x80
 8001c60:	9b01      	ldr	r3, [sp, #4]
 8001c62:	033f      	lsls	r7, r7, #12
 8001c64:	431f      	orrs	r7, r3
 8001c66:	033f      	lsls	r7, r7, #12
 8001c68:	0b3f      	lsrs	r7, r7, #12
 8001c6a:	9400      	str	r4, [sp, #0]
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <__aeabi_dmul+0x4d8>)
 8001c6e:	e640      	b.n	80018f2 <__aeabi_dmul+0xd6>
 8001c70:	0003      	movs	r3, r0
 8001c72:	465a      	mov	r2, fp
 8001c74:	3b28      	subs	r3, #40	; 0x28
 8001c76:	409a      	lsls	r2, r3
 8001c78:	2600      	movs	r6, #0
 8001c7a:	9201      	str	r2, [sp, #4]
 8001c7c:	e66d      	b.n	800195a <__aeabi_dmul+0x13e>
 8001c7e:	4658      	mov	r0, fp
 8001c80:	f000 fcb2 	bl	80025e8 <__clzsi2>
 8001c84:	3020      	adds	r0, #32
 8001c86:	e657      	b.n	8001938 <__aeabi_dmul+0x11c>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	4652      	mov	r2, sl
 8001c8c:	3b28      	subs	r3, #40	; 0x28
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	2200      	movs	r2, #0
 8001c94:	e693      	b.n	80019be <__aeabi_dmul+0x1a2>
 8001c96:	4650      	mov	r0, sl
 8001c98:	f000 fca6 	bl	80025e8 <__clzsi2>
 8001c9c:	3020      	adds	r0, #32
 8001c9e:	e67b      	b.n	8001998 <__aeabi_dmul+0x17c>
 8001ca0:	46ca      	mov	sl, r9
 8001ca2:	e750      	b.n	8001b46 <__aeabi_dmul+0x32a>
 8001ca4:	201f      	movs	r0, #31
 8001ca6:	001e      	movs	r6, r3
 8001ca8:	4240      	negs	r0, r0
 8001caa:	1b04      	subs	r4, r0, r4
 8001cac:	40e6      	lsrs	r6, r4
 8001cae:	2d20      	cmp	r5, #32
 8001cb0:	d003      	beq.n	8001cba <__aeabi_dmul+0x49e>
 8001cb2:	4c12      	ldr	r4, [pc, #72]	; (8001cfc <__aeabi_dmul+0x4e0>)
 8001cb4:	4454      	add	r4, sl
 8001cb6:	40a3      	lsls	r3, r4
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	1e50      	subs	r0, r2, #1
 8001cbc:	4182      	sbcs	r2, r0
 8001cbe:	4332      	orrs	r2, r6
 8001cc0:	2607      	movs	r6, #7
 8001cc2:	2700      	movs	r7, #0
 8001cc4:	4016      	ands	r6, r2
 8001cc6:	d009      	beq.n	8001cdc <__aeabi_dmul+0x4c0>
 8001cc8:	200f      	movs	r0, #15
 8001cca:	2300      	movs	r3, #0
 8001ccc:	4010      	ands	r0, r2
 8001cce:	0014      	movs	r4, r2
 8001cd0:	2804      	cmp	r0, #4
 8001cd2:	d1b9      	bne.n	8001c48 <__aeabi_dmul+0x42c>
 8001cd4:	0022      	movs	r2, r4
 8001cd6:	075e      	lsls	r6, r3, #29
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	0b1f      	lsrs	r7, r3, #12
 8001cdc:	08d2      	lsrs	r2, r2, #3
 8001cde:	4316      	orrs	r6, r2
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e606      	b.n	80018f2 <__aeabi_dmul+0xd6>
 8001ce4:	2780      	movs	r7, #128	; 0x80
 8001ce6:	033f      	lsls	r7, r7, #12
 8001ce8:	431f      	orrs	r7, r3
 8001cea:	033f      	lsls	r7, r7, #12
 8001cec:	0b3f      	lsrs	r7, r7, #12
 8001cee:	0016      	movs	r6, r2
 8001cf0:	4b00      	ldr	r3, [pc, #0]	; (8001cf4 <__aeabi_dmul+0x4d8>)
 8001cf2:	e5fe      	b.n	80018f2 <__aeabi_dmul+0xd6>
 8001cf4:	000007ff 	.word	0x000007ff
 8001cf8:	0000041e 	.word	0x0000041e
 8001cfc:	0000043e 	.word	0x0000043e

08001d00 <__aeabi_dsub>:
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d02:	4657      	mov	r7, sl
 8001d04:	464e      	mov	r6, r9
 8001d06:	4645      	mov	r5, r8
 8001d08:	46de      	mov	lr, fp
 8001d0a:	000c      	movs	r4, r1
 8001d0c:	0309      	lsls	r1, r1, #12
 8001d0e:	b5e0      	push	{r5, r6, r7, lr}
 8001d10:	0a49      	lsrs	r1, r1, #9
 8001d12:	0f46      	lsrs	r6, r0, #29
 8001d14:	005f      	lsls	r7, r3, #1
 8001d16:	4331      	orrs	r1, r6
 8001d18:	031e      	lsls	r6, r3, #12
 8001d1a:	0fdb      	lsrs	r3, r3, #31
 8001d1c:	0a76      	lsrs	r6, r6, #9
 8001d1e:	469b      	mov	fp, r3
 8001d20:	0f53      	lsrs	r3, r2, #29
 8001d22:	4333      	orrs	r3, r6
 8001d24:	4ec8      	ldr	r6, [pc, #800]	; (8002048 <__aeabi_dsub+0x348>)
 8001d26:	0065      	lsls	r5, r4, #1
 8001d28:	00c0      	lsls	r0, r0, #3
 8001d2a:	0fe4      	lsrs	r4, r4, #31
 8001d2c:	00d2      	lsls	r2, r2, #3
 8001d2e:	0d6d      	lsrs	r5, r5, #21
 8001d30:	46a2      	mov	sl, r4
 8001d32:	4681      	mov	r9, r0
 8001d34:	0d7f      	lsrs	r7, r7, #21
 8001d36:	469c      	mov	ip, r3
 8001d38:	4690      	mov	r8, r2
 8001d3a:	42b7      	cmp	r7, r6
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x40>
 8001d3e:	e0b9      	b.n	8001eb4 <__aeabi_dsub+0x1b4>
 8001d40:	465b      	mov	r3, fp
 8001d42:	2601      	movs	r6, #1
 8001d44:	4073      	eors	r3, r6
 8001d46:	469b      	mov	fp, r3
 8001d48:	1bee      	subs	r6, r5, r7
 8001d4a:	45a3      	cmp	fp, r4
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x50>
 8001d4e:	e083      	b.n	8001e58 <__aeabi_dsub+0x158>
 8001d50:	2e00      	cmp	r6, #0
 8001d52:	dd63      	ble.n	8001e1c <__aeabi_dsub+0x11c>
 8001d54:	2f00      	cmp	r7, #0
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x5a>
 8001d58:	e0b1      	b.n	8001ebe <__aeabi_dsub+0x1be>
 8001d5a:	4663      	mov	r3, ip
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0x62>
 8001d60:	e123      	b.n	8001faa <__aeabi_dsub+0x2aa>
 8001d62:	1e73      	subs	r3, r6, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d000      	beq.n	8001d6a <__aeabi_dsub+0x6a>
 8001d68:	e1ba      	b.n	80020e0 <__aeabi_dsub+0x3e0>
 8001d6a:	1a86      	subs	r6, r0, r2
 8001d6c:	4663      	mov	r3, ip
 8001d6e:	42b0      	cmp	r0, r6
 8001d70:	4180      	sbcs	r0, r0
 8001d72:	2501      	movs	r5, #1
 8001d74:	1ac9      	subs	r1, r1, r3
 8001d76:	4240      	negs	r0, r0
 8001d78:	1a09      	subs	r1, r1, r0
 8001d7a:	020b      	lsls	r3, r1, #8
 8001d7c:	d400      	bmi.n	8001d80 <__aeabi_dsub+0x80>
 8001d7e:	e147      	b.n	8002010 <__aeabi_dsub+0x310>
 8001d80:	0249      	lsls	r1, r1, #9
 8001d82:	0a4b      	lsrs	r3, r1, #9
 8001d84:	4698      	mov	r8, r3
 8001d86:	4643      	mov	r3, r8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x8e>
 8001d8c:	e189      	b.n	80020a2 <__aeabi_dsub+0x3a2>
 8001d8e:	4640      	mov	r0, r8
 8001d90:	f000 fc2a 	bl	80025e8 <__clzsi2>
 8001d94:	0003      	movs	r3, r0
 8001d96:	3b08      	subs	r3, #8
 8001d98:	2b1f      	cmp	r3, #31
 8001d9a:	dd00      	ble.n	8001d9e <__aeabi_dsub+0x9e>
 8001d9c:	e17c      	b.n	8002098 <__aeabi_dsub+0x398>
 8001d9e:	2220      	movs	r2, #32
 8001da0:	0030      	movs	r0, r6
 8001da2:	1ad2      	subs	r2, r2, r3
 8001da4:	4641      	mov	r1, r8
 8001da6:	40d0      	lsrs	r0, r2
 8001da8:	4099      	lsls	r1, r3
 8001daa:	0002      	movs	r2, r0
 8001dac:	409e      	lsls	r6, r3
 8001dae:	430a      	orrs	r2, r1
 8001db0:	429d      	cmp	r5, r3
 8001db2:	dd00      	ble.n	8001db6 <__aeabi_dsub+0xb6>
 8001db4:	e16a      	b.n	800208c <__aeabi_dsub+0x38c>
 8001db6:	1b5d      	subs	r5, r3, r5
 8001db8:	1c6b      	adds	r3, r5, #1
 8001dba:	2b1f      	cmp	r3, #31
 8001dbc:	dd00      	ble.n	8001dc0 <__aeabi_dsub+0xc0>
 8001dbe:	e194      	b.n	80020ea <__aeabi_dsub+0x3ea>
 8001dc0:	2120      	movs	r1, #32
 8001dc2:	0010      	movs	r0, r2
 8001dc4:	0035      	movs	r5, r6
 8001dc6:	1ac9      	subs	r1, r1, r3
 8001dc8:	408e      	lsls	r6, r1
 8001dca:	40da      	lsrs	r2, r3
 8001dcc:	4088      	lsls	r0, r1
 8001dce:	40dd      	lsrs	r5, r3
 8001dd0:	1e71      	subs	r1, r6, #1
 8001dd2:	418e      	sbcs	r6, r1
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	4328      	orrs	r0, r5
 8001dda:	2500      	movs	r5, #0
 8001ddc:	4306      	orrs	r6, r0
 8001dde:	4032      	ands	r2, r6
 8001de0:	2a00      	cmp	r2, #0
 8001de2:	d009      	beq.n	8001df8 <__aeabi_dsub+0xf8>
 8001de4:	230f      	movs	r3, #15
 8001de6:	4033      	ands	r3, r6
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d005      	beq.n	8001df8 <__aeabi_dsub+0xf8>
 8001dec:	1d33      	adds	r3, r6, #4
 8001dee:	42b3      	cmp	r3, r6
 8001df0:	41b6      	sbcs	r6, r6
 8001df2:	4276      	negs	r6, r6
 8001df4:	1989      	adds	r1, r1, r6
 8001df6:	001e      	movs	r6, r3
 8001df8:	020b      	lsls	r3, r1, #8
 8001dfa:	d400      	bmi.n	8001dfe <__aeabi_dsub+0xfe>
 8001dfc:	e23d      	b.n	800227a <__aeabi_dsub+0x57a>
 8001dfe:	1c6a      	adds	r2, r5, #1
 8001e00:	4b91      	ldr	r3, [pc, #580]	; (8002048 <__aeabi_dsub+0x348>)
 8001e02:	0555      	lsls	r5, r2, #21
 8001e04:	0d6d      	lsrs	r5, r5, #21
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x10c>
 8001e0a:	e119      	b.n	8002040 <__aeabi_dsub+0x340>
 8001e0c:	4a8f      	ldr	r2, [pc, #572]	; (800204c <__aeabi_dsub+0x34c>)
 8001e0e:	08f6      	lsrs	r6, r6, #3
 8001e10:	400a      	ands	r2, r1
 8001e12:	0757      	lsls	r7, r2, #29
 8001e14:	0252      	lsls	r2, r2, #9
 8001e16:	4337      	orrs	r7, r6
 8001e18:	0b12      	lsrs	r2, r2, #12
 8001e1a:	e09b      	b.n	8001f54 <__aeabi_dsub+0x254>
 8001e1c:	2e00      	cmp	r6, #0
 8001e1e:	d000      	beq.n	8001e22 <__aeabi_dsub+0x122>
 8001e20:	e0c5      	b.n	8001fae <__aeabi_dsub+0x2ae>
 8001e22:	1c6e      	adds	r6, r5, #1
 8001e24:	0576      	lsls	r6, r6, #21
 8001e26:	0d76      	lsrs	r6, r6, #21
 8001e28:	2e01      	cmp	r6, #1
 8001e2a:	dc00      	bgt.n	8001e2e <__aeabi_dsub+0x12e>
 8001e2c:	e148      	b.n	80020c0 <__aeabi_dsub+0x3c0>
 8001e2e:	4667      	mov	r7, ip
 8001e30:	1a86      	subs	r6, r0, r2
 8001e32:	1bcb      	subs	r3, r1, r7
 8001e34:	42b0      	cmp	r0, r6
 8001e36:	41bf      	sbcs	r7, r7
 8001e38:	427f      	negs	r7, r7
 8001e3a:	46b8      	mov	r8, r7
 8001e3c:	001f      	movs	r7, r3
 8001e3e:	4643      	mov	r3, r8
 8001e40:	1aff      	subs	r7, r7, r3
 8001e42:	003b      	movs	r3, r7
 8001e44:	46b8      	mov	r8, r7
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	d500      	bpl.n	8001e4c <__aeabi_dsub+0x14c>
 8001e4a:	e15f      	b.n	800210c <__aeabi_dsub+0x40c>
 8001e4c:	4337      	orrs	r7, r6
 8001e4e:	d19a      	bne.n	8001d86 <__aeabi_dsub+0x86>
 8001e50:	2200      	movs	r2, #0
 8001e52:	2400      	movs	r4, #0
 8001e54:	2500      	movs	r5, #0
 8001e56:	e079      	b.n	8001f4c <__aeabi_dsub+0x24c>
 8001e58:	2e00      	cmp	r6, #0
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x15e>
 8001e5c:	e0fa      	b.n	8002054 <__aeabi_dsub+0x354>
 8001e5e:	2f00      	cmp	r7, #0
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x164>
 8001e62:	e08d      	b.n	8001f80 <__aeabi_dsub+0x280>
 8001e64:	4b78      	ldr	r3, [pc, #480]	; (8002048 <__aeabi_dsub+0x348>)
 8001e66:	429d      	cmp	r5, r3
 8001e68:	d067      	beq.n	8001f3a <__aeabi_dsub+0x23a>
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	4667      	mov	r7, ip
 8001e6e:	041b      	lsls	r3, r3, #16
 8001e70:	431f      	orrs	r7, r3
 8001e72:	46bc      	mov	ip, r7
 8001e74:	2e38      	cmp	r6, #56	; 0x38
 8001e76:	dc00      	bgt.n	8001e7a <__aeabi_dsub+0x17a>
 8001e78:	e152      	b.n	8002120 <__aeabi_dsub+0x420>
 8001e7a:	4663      	mov	r3, ip
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	1e5a      	subs	r2, r3, #1
 8001e80:	4193      	sbcs	r3, r2
 8001e82:	181e      	adds	r6, r3, r0
 8001e84:	4286      	cmp	r6, r0
 8001e86:	4180      	sbcs	r0, r0
 8001e88:	4240      	negs	r0, r0
 8001e8a:	1809      	adds	r1, r1, r0
 8001e8c:	020b      	lsls	r3, r1, #8
 8001e8e:	d400      	bmi.n	8001e92 <__aeabi_dsub+0x192>
 8001e90:	e0be      	b.n	8002010 <__aeabi_dsub+0x310>
 8001e92:	4b6d      	ldr	r3, [pc, #436]	; (8002048 <__aeabi_dsub+0x348>)
 8001e94:	3501      	adds	r5, #1
 8001e96:	429d      	cmp	r5, r3
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x19c>
 8001e9a:	e0d2      	b.n	8002042 <__aeabi_dsub+0x342>
 8001e9c:	4a6b      	ldr	r2, [pc, #428]	; (800204c <__aeabi_dsub+0x34c>)
 8001e9e:	0873      	lsrs	r3, r6, #1
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	400e      	ands	r6, r1
 8001ea6:	431e      	orrs	r6, r3
 8001ea8:	0851      	lsrs	r1, r2, #1
 8001eaa:	07d3      	lsls	r3, r2, #31
 8001eac:	2207      	movs	r2, #7
 8001eae:	431e      	orrs	r6, r3
 8001eb0:	4032      	ands	r2, r6
 8001eb2:	e795      	b.n	8001de0 <__aeabi_dsub+0xe0>
 8001eb4:	001e      	movs	r6, r3
 8001eb6:	4316      	orrs	r6, r2
 8001eb8:	d000      	beq.n	8001ebc <__aeabi_dsub+0x1bc>
 8001eba:	e745      	b.n	8001d48 <__aeabi_dsub+0x48>
 8001ebc:	e740      	b.n	8001d40 <__aeabi_dsub+0x40>
 8001ebe:	4b62      	ldr	r3, [pc, #392]	; (8002048 <__aeabi_dsub+0x348>)
 8001ec0:	429d      	cmp	r5, r3
 8001ec2:	d03a      	beq.n	8001f3a <__aeabi_dsub+0x23a>
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	4667      	mov	r7, ip
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	431f      	orrs	r7, r3
 8001ecc:	46bc      	mov	ip, r7
 8001ece:	2e38      	cmp	r6, #56	; 0x38
 8001ed0:	dd00      	ble.n	8001ed4 <__aeabi_dsub+0x1d4>
 8001ed2:	e0eb      	b.n	80020ac <__aeabi_dsub+0x3ac>
 8001ed4:	2e1f      	cmp	r6, #31
 8001ed6:	dc00      	bgt.n	8001eda <__aeabi_dsub+0x1da>
 8001ed8:	e13a      	b.n	8002150 <__aeabi_dsub+0x450>
 8001eda:	0033      	movs	r3, r6
 8001edc:	4667      	mov	r7, ip
 8001ede:	3b20      	subs	r3, #32
 8001ee0:	40df      	lsrs	r7, r3
 8001ee2:	003b      	movs	r3, r7
 8001ee4:	2e20      	cmp	r6, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dsub+0x1f4>
 8001ee8:	2740      	movs	r7, #64	; 0x40
 8001eea:	1bbf      	subs	r7, r7, r6
 8001eec:	4666      	mov	r6, ip
 8001eee:	40be      	lsls	r6, r7
 8001ef0:	4332      	orrs	r2, r6
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	4646      	mov	r6, r8
 8001ef6:	1e72      	subs	r2, r6, #1
 8001ef8:	4196      	sbcs	r6, r2
 8001efa:	4333      	orrs	r3, r6
 8001efc:	e0da      	b.n	80020b4 <__aeabi_dsub+0x3b4>
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x204>
 8001f02:	e214      	b.n	800232e <__aeabi_dsub+0x62e>
 8001f04:	4663      	mov	r3, ip
 8001f06:	4313      	orrs	r3, r2
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x20c>
 8001f0a:	e168      	b.n	80021de <__aeabi_dsub+0x4de>
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	074e      	lsls	r6, r1, #29
 8001f10:	08c0      	lsrs	r0, r0, #3
 8001f12:	08c9      	lsrs	r1, r1, #3
 8001f14:	031b      	lsls	r3, r3, #12
 8001f16:	4306      	orrs	r6, r0
 8001f18:	4219      	tst	r1, r3
 8001f1a:	d008      	beq.n	8001f2e <__aeabi_dsub+0x22e>
 8001f1c:	4660      	mov	r0, ip
 8001f1e:	08c0      	lsrs	r0, r0, #3
 8001f20:	4218      	tst	r0, r3
 8001f22:	d104      	bne.n	8001f2e <__aeabi_dsub+0x22e>
 8001f24:	4663      	mov	r3, ip
 8001f26:	0001      	movs	r1, r0
 8001f28:	08d2      	lsrs	r2, r2, #3
 8001f2a:	075e      	lsls	r6, r3, #29
 8001f2c:	4316      	orrs	r6, r2
 8001f2e:	00f3      	lsls	r3, r6, #3
 8001f30:	4699      	mov	r9, r3
 8001f32:	00c9      	lsls	r1, r1, #3
 8001f34:	0f72      	lsrs	r2, r6, #29
 8001f36:	4d44      	ldr	r5, [pc, #272]	; (8002048 <__aeabi_dsub+0x348>)
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	08de      	lsrs	r6, r3, #3
 8001f3e:	4b42      	ldr	r3, [pc, #264]	; (8002048 <__aeabi_dsub+0x348>)
 8001f40:	074f      	lsls	r7, r1, #29
 8001f42:	4337      	orrs	r7, r6
 8001f44:	08ca      	lsrs	r2, r1, #3
 8001f46:	429d      	cmp	r5, r3
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x24c>
 8001f4a:	e06e      	b.n	800202a <__aeabi_dsub+0x32a>
 8001f4c:	0312      	lsls	r2, r2, #12
 8001f4e:	056d      	lsls	r5, r5, #21
 8001f50:	0b12      	lsrs	r2, r2, #12
 8001f52:	0d6d      	lsrs	r5, r5, #21
 8001f54:	2100      	movs	r1, #0
 8001f56:	0312      	lsls	r2, r2, #12
 8001f58:	0b13      	lsrs	r3, r2, #12
 8001f5a:	0d0a      	lsrs	r2, r1, #20
 8001f5c:	0512      	lsls	r2, r2, #20
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <__aeabi_dsub+0x350>)
 8001f62:	052d      	lsls	r5, r5, #20
 8001f64:	4013      	ands	r3, r2
 8001f66:	432b      	orrs	r3, r5
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	07e4      	lsls	r4, r4, #31
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	4323      	orrs	r3, r4
 8001f70:	0038      	movs	r0, r7
 8001f72:	0019      	movs	r1, r3
 8001f74:	bc3c      	pop	{r2, r3, r4, r5}
 8001f76:	4690      	mov	r8, r2
 8001f78:	4699      	mov	r9, r3
 8001f7a:	46a2      	mov	sl, r4
 8001f7c:	46ab      	mov	fp, r5
 8001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f80:	4663      	mov	r3, ip
 8001f82:	4313      	orrs	r3, r2
 8001f84:	d011      	beq.n	8001faa <__aeabi_dsub+0x2aa>
 8001f86:	1e73      	subs	r3, r6, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d000      	beq.n	8001f8e <__aeabi_dsub+0x28e>
 8001f8c:	e107      	b.n	800219e <__aeabi_dsub+0x49e>
 8001f8e:	1886      	adds	r6, r0, r2
 8001f90:	4286      	cmp	r6, r0
 8001f92:	4180      	sbcs	r0, r0
 8001f94:	4461      	add	r1, ip
 8001f96:	4240      	negs	r0, r0
 8001f98:	1809      	adds	r1, r1, r0
 8001f9a:	2501      	movs	r5, #1
 8001f9c:	020b      	lsls	r3, r1, #8
 8001f9e:	d537      	bpl.n	8002010 <__aeabi_dsub+0x310>
 8001fa0:	2502      	movs	r5, #2
 8001fa2:	e77b      	b.n	8001e9c <__aeabi_dsub+0x19c>
 8001fa4:	003e      	movs	r6, r7
 8001fa6:	4661      	mov	r1, ip
 8001fa8:	4691      	mov	r9, r2
 8001faa:	0035      	movs	r5, r6
 8001fac:	e7c5      	b.n	8001f3a <__aeabi_dsub+0x23a>
 8001fae:	465c      	mov	r4, fp
 8001fb0:	2d00      	cmp	r5, #0
 8001fb2:	d000      	beq.n	8001fb6 <__aeabi_dsub+0x2b6>
 8001fb4:	e0e1      	b.n	800217a <__aeabi_dsub+0x47a>
 8001fb6:	000b      	movs	r3, r1
 8001fb8:	4303      	orrs	r3, r0
 8001fba:	d0f3      	beq.n	8001fa4 <__aeabi_dsub+0x2a4>
 8001fbc:	1c73      	adds	r3, r6, #1
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x2c2>
 8001fc0:	e1ac      	b.n	800231c <__aeabi_dsub+0x61c>
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <__aeabi_dsub+0x348>)
 8001fc4:	429f      	cmp	r7, r3
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dsub+0x2ca>
 8001fc8:	e13a      	b.n	8002240 <__aeabi_dsub+0x540>
 8001fca:	43f3      	mvns	r3, r6
 8001fcc:	2b38      	cmp	r3, #56	; 0x38
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x2d2>
 8001fd0:	e16f      	b.n	80022b2 <__aeabi_dsub+0x5b2>
 8001fd2:	2b1f      	cmp	r3, #31
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_dsub+0x2d8>
 8001fd6:	e18c      	b.n	80022f2 <__aeabi_dsub+0x5f2>
 8001fd8:	2520      	movs	r5, #32
 8001fda:	000e      	movs	r6, r1
 8001fdc:	1aed      	subs	r5, r5, r3
 8001fde:	40ae      	lsls	r6, r5
 8001fe0:	46b0      	mov	r8, r6
 8001fe2:	0006      	movs	r6, r0
 8001fe4:	46aa      	mov	sl, r5
 8001fe6:	40de      	lsrs	r6, r3
 8001fe8:	4645      	mov	r5, r8
 8001fea:	4335      	orrs	r5, r6
 8001fec:	002e      	movs	r6, r5
 8001fee:	4655      	mov	r5, sl
 8001ff0:	40d9      	lsrs	r1, r3
 8001ff2:	40a8      	lsls	r0, r5
 8001ff4:	4663      	mov	r3, ip
 8001ff6:	1e45      	subs	r5, r0, #1
 8001ff8:	41a8      	sbcs	r0, r5
 8001ffa:	1a5b      	subs	r3, r3, r1
 8001ffc:	469c      	mov	ip, r3
 8001ffe:	4330      	orrs	r0, r6
 8002000:	1a16      	subs	r6, r2, r0
 8002002:	42b2      	cmp	r2, r6
 8002004:	4192      	sbcs	r2, r2
 8002006:	4663      	mov	r3, ip
 8002008:	4252      	negs	r2, r2
 800200a:	1a99      	subs	r1, r3, r2
 800200c:	003d      	movs	r5, r7
 800200e:	e6b4      	b.n	8001d7a <__aeabi_dsub+0x7a>
 8002010:	2207      	movs	r2, #7
 8002012:	4032      	ands	r2, r6
 8002014:	2a00      	cmp	r2, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x31a>
 8002018:	e6e4      	b.n	8001de4 <__aeabi_dsub+0xe4>
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <__aeabi_dsub+0x348>)
 800201c:	08f6      	lsrs	r6, r6, #3
 800201e:	074f      	lsls	r7, r1, #29
 8002020:	4337      	orrs	r7, r6
 8002022:	08ca      	lsrs	r2, r1, #3
 8002024:	429d      	cmp	r5, r3
 8002026:	d000      	beq.n	800202a <__aeabi_dsub+0x32a>
 8002028:	e790      	b.n	8001f4c <__aeabi_dsub+0x24c>
 800202a:	003b      	movs	r3, r7
 800202c:	4313      	orrs	r3, r2
 800202e:	d100      	bne.n	8002032 <__aeabi_dsub+0x332>
 8002030:	e1a6      	b.n	8002380 <__aeabi_dsub+0x680>
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	031b      	lsls	r3, r3, #12
 8002036:	431a      	orrs	r2, r3
 8002038:	0312      	lsls	r2, r2, #12
 800203a:	0b12      	lsrs	r2, r2, #12
 800203c:	4d02      	ldr	r5, [pc, #8]	; (8002048 <__aeabi_dsub+0x348>)
 800203e:	e789      	b.n	8001f54 <__aeabi_dsub+0x254>
 8002040:	0015      	movs	r5, r2
 8002042:	2200      	movs	r2, #0
 8002044:	2700      	movs	r7, #0
 8002046:	e785      	b.n	8001f54 <__aeabi_dsub+0x254>
 8002048:	000007ff 	.word	0x000007ff
 800204c:	ff7fffff 	.word	0xff7fffff
 8002050:	800fffff 	.word	0x800fffff
 8002054:	2e00      	cmp	r6, #0
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x35a>
 8002058:	e0c7      	b.n	80021ea <__aeabi_dsub+0x4ea>
 800205a:	1c6b      	adds	r3, r5, #1
 800205c:	055e      	lsls	r6, r3, #21
 800205e:	0d76      	lsrs	r6, r6, #21
 8002060:	2e01      	cmp	r6, #1
 8002062:	dc00      	bgt.n	8002066 <__aeabi_dsub+0x366>
 8002064:	e0f0      	b.n	8002248 <__aeabi_dsub+0x548>
 8002066:	4dc8      	ldr	r5, [pc, #800]	; (8002388 <__aeabi_dsub+0x688>)
 8002068:	42ab      	cmp	r3, r5
 800206a:	d100      	bne.n	800206e <__aeabi_dsub+0x36e>
 800206c:	e0b9      	b.n	80021e2 <__aeabi_dsub+0x4e2>
 800206e:	1885      	adds	r5, r0, r2
 8002070:	000a      	movs	r2, r1
 8002072:	4285      	cmp	r5, r0
 8002074:	4189      	sbcs	r1, r1
 8002076:	4462      	add	r2, ip
 8002078:	4249      	negs	r1, r1
 800207a:	1851      	adds	r1, r2, r1
 800207c:	2207      	movs	r2, #7
 800207e:	07ce      	lsls	r6, r1, #31
 8002080:	086d      	lsrs	r5, r5, #1
 8002082:	432e      	orrs	r6, r5
 8002084:	0849      	lsrs	r1, r1, #1
 8002086:	4032      	ands	r2, r6
 8002088:	001d      	movs	r5, r3
 800208a:	e6a9      	b.n	8001de0 <__aeabi_dsub+0xe0>
 800208c:	49bf      	ldr	r1, [pc, #764]	; (800238c <__aeabi_dsub+0x68c>)
 800208e:	1aed      	subs	r5, r5, r3
 8002090:	4011      	ands	r1, r2
 8002092:	2207      	movs	r2, #7
 8002094:	4032      	ands	r2, r6
 8002096:	e6a3      	b.n	8001de0 <__aeabi_dsub+0xe0>
 8002098:	0032      	movs	r2, r6
 800209a:	3828      	subs	r0, #40	; 0x28
 800209c:	4082      	lsls	r2, r0
 800209e:	2600      	movs	r6, #0
 80020a0:	e686      	b.n	8001db0 <__aeabi_dsub+0xb0>
 80020a2:	0030      	movs	r0, r6
 80020a4:	f000 faa0 	bl	80025e8 <__clzsi2>
 80020a8:	3020      	adds	r0, #32
 80020aa:	e673      	b.n	8001d94 <__aeabi_dsub+0x94>
 80020ac:	4663      	mov	r3, ip
 80020ae:	4313      	orrs	r3, r2
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	4193      	sbcs	r3, r2
 80020b4:	1ac6      	subs	r6, r0, r3
 80020b6:	42b0      	cmp	r0, r6
 80020b8:	4180      	sbcs	r0, r0
 80020ba:	4240      	negs	r0, r0
 80020bc:	1a09      	subs	r1, r1, r0
 80020be:	e65c      	b.n	8001d7a <__aeabi_dsub+0x7a>
 80020c0:	000e      	movs	r6, r1
 80020c2:	4667      	mov	r7, ip
 80020c4:	4306      	orrs	r6, r0
 80020c6:	4317      	orrs	r7, r2
 80020c8:	2d00      	cmp	r5, #0
 80020ca:	d15e      	bne.n	800218a <__aeabi_dsub+0x48a>
 80020cc:	2e00      	cmp	r6, #0
 80020ce:	d000      	beq.n	80020d2 <__aeabi_dsub+0x3d2>
 80020d0:	e0f3      	b.n	80022ba <__aeabi_dsub+0x5ba>
 80020d2:	2f00      	cmp	r7, #0
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x3d8>
 80020d6:	e11e      	b.n	8002316 <__aeabi_dsub+0x616>
 80020d8:	465c      	mov	r4, fp
 80020da:	4661      	mov	r1, ip
 80020dc:	4691      	mov	r9, r2
 80020de:	e72c      	b.n	8001f3a <__aeabi_dsub+0x23a>
 80020e0:	4fa9      	ldr	r7, [pc, #676]	; (8002388 <__aeabi_dsub+0x688>)
 80020e2:	42be      	cmp	r6, r7
 80020e4:	d07b      	beq.n	80021de <__aeabi_dsub+0x4de>
 80020e6:	001e      	movs	r6, r3
 80020e8:	e6f1      	b.n	8001ece <__aeabi_dsub+0x1ce>
 80020ea:	0010      	movs	r0, r2
 80020ec:	3d1f      	subs	r5, #31
 80020ee:	40e8      	lsrs	r0, r5
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	d003      	beq.n	80020fc <__aeabi_dsub+0x3fc>
 80020f4:	2140      	movs	r1, #64	; 0x40
 80020f6:	1acb      	subs	r3, r1, r3
 80020f8:	409a      	lsls	r2, r3
 80020fa:	4316      	orrs	r6, r2
 80020fc:	1e73      	subs	r3, r6, #1
 80020fe:	419e      	sbcs	r6, r3
 8002100:	2207      	movs	r2, #7
 8002102:	4306      	orrs	r6, r0
 8002104:	4032      	ands	r2, r6
 8002106:	2100      	movs	r1, #0
 8002108:	2500      	movs	r5, #0
 800210a:	e783      	b.n	8002014 <__aeabi_dsub+0x314>
 800210c:	1a16      	subs	r6, r2, r0
 800210e:	4663      	mov	r3, ip
 8002110:	42b2      	cmp	r2, r6
 8002112:	4180      	sbcs	r0, r0
 8002114:	1a59      	subs	r1, r3, r1
 8002116:	4240      	negs	r0, r0
 8002118:	1a0b      	subs	r3, r1, r0
 800211a:	4698      	mov	r8, r3
 800211c:	465c      	mov	r4, fp
 800211e:	e632      	b.n	8001d86 <__aeabi_dsub+0x86>
 8002120:	2e1f      	cmp	r6, #31
 8002122:	dd00      	ble.n	8002126 <__aeabi_dsub+0x426>
 8002124:	e0ab      	b.n	800227e <__aeabi_dsub+0x57e>
 8002126:	2720      	movs	r7, #32
 8002128:	1bbb      	subs	r3, r7, r6
 800212a:	469a      	mov	sl, r3
 800212c:	4663      	mov	r3, ip
 800212e:	4657      	mov	r7, sl
 8002130:	40bb      	lsls	r3, r7
 8002132:	4699      	mov	r9, r3
 8002134:	0013      	movs	r3, r2
 8002136:	464f      	mov	r7, r9
 8002138:	40f3      	lsrs	r3, r6
 800213a:	431f      	orrs	r7, r3
 800213c:	003b      	movs	r3, r7
 800213e:	4657      	mov	r7, sl
 8002140:	40ba      	lsls	r2, r7
 8002142:	1e57      	subs	r7, r2, #1
 8002144:	41ba      	sbcs	r2, r7
 8002146:	4313      	orrs	r3, r2
 8002148:	4662      	mov	r2, ip
 800214a:	40f2      	lsrs	r2, r6
 800214c:	1889      	adds	r1, r1, r2
 800214e:	e698      	b.n	8001e82 <__aeabi_dsub+0x182>
 8002150:	2720      	movs	r7, #32
 8002152:	1bbb      	subs	r3, r7, r6
 8002154:	469a      	mov	sl, r3
 8002156:	4663      	mov	r3, ip
 8002158:	4657      	mov	r7, sl
 800215a:	40bb      	lsls	r3, r7
 800215c:	4699      	mov	r9, r3
 800215e:	0013      	movs	r3, r2
 8002160:	464f      	mov	r7, r9
 8002162:	40f3      	lsrs	r3, r6
 8002164:	431f      	orrs	r7, r3
 8002166:	003b      	movs	r3, r7
 8002168:	4657      	mov	r7, sl
 800216a:	40ba      	lsls	r2, r7
 800216c:	1e57      	subs	r7, r2, #1
 800216e:	41ba      	sbcs	r2, r7
 8002170:	4313      	orrs	r3, r2
 8002172:	4662      	mov	r2, ip
 8002174:	40f2      	lsrs	r2, r6
 8002176:	1a89      	subs	r1, r1, r2
 8002178:	e79c      	b.n	80020b4 <__aeabi_dsub+0x3b4>
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <__aeabi_dsub+0x688>)
 800217c:	429f      	cmp	r7, r3
 800217e:	d05f      	beq.n	8002240 <__aeabi_dsub+0x540>
 8002180:	2580      	movs	r5, #128	; 0x80
 8002182:	042d      	lsls	r5, r5, #16
 8002184:	4273      	negs	r3, r6
 8002186:	4329      	orrs	r1, r5
 8002188:	e720      	b.n	8001fcc <__aeabi_dsub+0x2cc>
 800218a:	2e00      	cmp	r6, #0
 800218c:	d10c      	bne.n	80021a8 <__aeabi_dsub+0x4a8>
 800218e:	2f00      	cmp	r7, #0
 8002190:	d100      	bne.n	8002194 <__aeabi_dsub+0x494>
 8002192:	e0d0      	b.n	8002336 <__aeabi_dsub+0x636>
 8002194:	465c      	mov	r4, fp
 8002196:	4661      	mov	r1, ip
 8002198:	4691      	mov	r9, r2
 800219a:	4d7b      	ldr	r5, [pc, #492]	; (8002388 <__aeabi_dsub+0x688>)
 800219c:	e6cd      	b.n	8001f3a <__aeabi_dsub+0x23a>
 800219e:	4f7a      	ldr	r7, [pc, #488]	; (8002388 <__aeabi_dsub+0x688>)
 80021a0:	42be      	cmp	r6, r7
 80021a2:	d01c      	beq.n	80021de <__aeabi_dsub+0x4de>
 80021a4:	001e      	movs	r6, r3
 80021a6:	e665      	b.n	8001e74 <__aeabi_dsub+0x174>
 80021a8:	2f00      	cmp	r7, #0
 80021aa:	d018      	beq.n	80021de <__aeabi_dsub+0x4de>
 80021ac:	08c0      	lsrs	r0, r0, #3
 80021ae:	074e      	lsls	r6, r1, #29
 80021b0:	4306      	orrs	r6, r0
 80021b2:	2080      	movs	r0, #128	; 0x80
 80021b4:	08c9      	lsrs	r1, r1, #3
 80021b6:	0300      	lsls	r0, r0, #12
 80021b8:	4201      	tst	r1, r0
 80021ba:	d008      	beq.n	80021ce <__aeabi_dsub+0x4ce>
 80021bc:	4663      	mov	r3, ip
 80021be:	08dc      	lsrs	r4, r3, #3
 80021c0:	4204      	tst	r4, r0
 80021c2:	d104      	bne.n	80021ce <__aeabi_dsub+0x4ce>
 80021c4:	0021      	movs	r1, r4
 80021c6:	46da      	mov	sl, fp
 80021c8:	08d2      	lsrs	r2, r2, #3
 80021ca:	075e      	lsls	r6, r3, #29
 80021cc:	4316      	orrs	r6, r2
 80021ce:	00f3      	lsls	r3, r6, #3
 80021d0:	4699      	mov	r9, r3
 80021d2:	2401      	movs	r4, #1
 80021d4:	4653      	mov	r3, sl
 80021d6:	00c9      	lsls	r1, r1, #3
 80021d8:	0f72      	lsrs	r2, r6, #29
 80021da:	4311      	orrs	r1, r2
 80021dc:	401c      	ands	r4, r3
 80021de:	4d6a      	ldr	r5, [pc, #424]	; (8002388 <__aeabi_dsub+0x688>)
 80021e0:	e6ab      	b.n	8001f3a <__aeabi_dsub+0x23a>
 80021e2:	001d      	movs	r5, r3
 80021e4:	2200      	movs	r2, #0
 80021e6:	2700      	movs	r7, #0
 80021e8:	e6b4      	b.n	8001f54 <__aeabi_dsub+0x254>
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	d159      	bne.n	80022a2 <__aeabi_dsub+0x5a2>
 80021ee:	000b      	movs	r3, r1
 80021f0:	4303      	orrs	r3, r0
 80021f2:	d100      	bne.n	80021f6 <__aeabi_dsub+0x4f6>
 80021f4:	e6d6      	b.n	8001fa4 <__aeabi_dsub+0x2a4>
 80021f6:	1c73      	adds	r3, r6, #1
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x4fc>
 80021fa:	e0b2      	b.n	8002362 <__aeabi_dsub+0x662>
 80021fc:	4b62      	ldr	r3, [pc, #392]	; (8002388 <__aeabi_dsub+0x688>)
 80021fe:	429f      	cmp	r7, r3
 8002200:	d01e      	beq.n	8002240 <__aeabi_dsub+0x540>
 8002202:	43f3      	mvns	r3, r6
 8002204:	2b38      	cmp	r3, #56	; 0x38
 8002206:	dc6f      	bgt.n	80022e8 <__aeabi_dsub+0x5e8>
 8002208:	2b1f      	cmp	r3, #31
 800220a:	dd00      	ble.n	800220e <__aeabi_dsub+0x50e>
 800220c:	e097      	b.n	800233e <__aeabi_dsub+0x63e>
 800220e:	2520      	movs	r5, #32
 8002210:	000e      	movs	r6, r1
 8002212:	1aed      	subs	r5, r5, r3
 8002214:	40ae      	lsls	r6, r5
 8002216:	46b0      	mov	r8, r6
 8002218:	0006      	movs	r6, r0
 800221a:	46aa      	mov	sl, r5
 800221c:	40de      	lsrs	r6, r3
 800221e:	4645      	mov	r5, r8
 8002220:	4335      	orrs	r5, r6
 8002222:	002e      	movs	r6, r5
 8002224:	4655      	mov	r5, sl
 8002226:	40a8      	lsls	r0, r5
 8002228:	40d9      	lsrs	r1, r3
 800222a:	1e45      	subs	r5, r0, #1
 800222c:	41a8      	sbcs	r0, r5
 800222e:	448c      	add	ip, r1
 8002230:	4306      	orrs	r6, r0
 8002232:	18b6      	adds	r6, r6, r2
 8002234:	4296      	cmp	r6, r2
 8002236:	4192      	sbcs	r2, r2
 8002238:	4251      	negs	r1, r2
 800223a:	4461      	add	r1, ip
 800223c:	003d      	movs	r5, r7
 800223e:	e625      	b.n	8001e8c <__aeabi_dsub+0x18c>
 8002240:	003d      	movs	r5, r7
 8002242:	4661      	mov	r1, ip
 8002244:	4691      	mov	r9, r2
 8002246:	e678      	b.n	8001f3a <__aeabi_dsub+0x23a>
 8002248:	000b      	movs	r3, r1
 800224a:	4303      	orrs	r3, r0
 800224c:	2d00      	cmp	r5, #0
 800224e:	d000      	beq.n	8002252 <__aeabi_dsub+0x552>
 8002250:	e655      	b.n	8001efe <__aeabi_dsub+0x1fe>
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f5      	beq.n	8002242 <__aeabi_dsub+0x542>
 8002256:	4663      	mov	r3, ip
 8002258:	4313      	orrs	r3, r2
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x55e>
 800225c:	e66d      	b.n	8001f3a <__aeabi_dsub+0x23a>
 800225e:	1886      	adds	r6, r0, r2
 8002260:	4286      	cmp	r6, r0
 8002262:	4180      	sbcs	r0, r0
 8002264:	4461      	add	r1, ip
 8002266:	4240      	negs	r0, r0
 8002268:	1809      	adds	r1, r1, r0
 800226a:	2200      	movs	r2, #0
 800226c:	020b      	lsls	r3, r1, #8
 800226e:	d400      	bmi.n	8002272 <__aeabi_dsub+0x572>
 8002270:	e6d0      	b.n	8002014 <__aeabi_dsub+0x314>
 8002272:	4b46      	ldr	r3, [pc, #280]	; (800238c <__aeabi_dsub+0x68c>)
 8002274:	3501      	adds	r5, #1
 8002276:	4019      	ands	r1, r3
 8002278:	e5b2      	b.n	8001de0 <__aeabi_dsub+0xe0>
 800227a:	46b1      	mov	r9, r6
 800227c:	e65d      	b.n	8001f3a <__aeabi_dsub+0x23a>
 800227e:	0033      	movs	r3, r6
 8002280:	4667      	mov	r7, ip
 8002282:	3b20      	subs	r3, #32
 8002284:	40df      	lsrs	r7, r3
 8002286:	003b      	movs	r3, r7
 8002288:	2e20      	cmp	r6, #32
 800228a:	d005      	beq.n	8002298 <__aeabi_dsub+0x598>
 800228c:	2740      	movs	r7, #64	; 0x40
 800228e:	1bbf      	subs	r7, r7, r6
 8002290:	4666      	mov	r6, ip
 8002292:	40be      	lsls	r6, r7
 8002294:	4332      	orrs	r2, r6
 8002296:	4690      	mov	r8, r2
 8002298:	4646      	mov	r6, r8
 800229a:	1e72      	subs	r2, r6, #1
 800229c:	4196      	sbcs	r6, r2
 800229e:	4333      	orrs	r3, r6
 80022a0:	e5ef      	b.n	8001e82 <__aeabi_dsub+0x182>
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <__aeabi_dsub+0x688>)
 80022a4:	429f      	cmp	r7, r3
 80022a6:	d0cb      	beq.n	8002240 <__aeabi_dsub+0x540>
 80022a8:	2580      	movs	r5, #128	; 0x80
 80022aa:	042d      	lsls	r5, r5, #16
 80022ac:	4273      	negs	r3, r6
 80022ae:	4329      	orrs	r1, r5
 80022b0:	e7a8      	b.n	8002204 <__aeabi_dsub+0x504>
 80022b2:	4308      	orrs	r0, r1
 80022b4:	1e41      	subs	r1, r0, #1
 80022b6:	4188      	sbcs	r0, r1
 80022b8:	e6a2      	b.n	8002000 <__aeabi_dsub+0x300>
 80022ba:	2f00      	cmp	r7, #0
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x5c0>
 80022be:	e63c      	b.n	8001f3a <__aeabi_dsub+0x23a>
 80022c0:	4663      	mov	r3, ip
 80022c2:	1a86      	subs	r6, r0, r2
 80022c4:	1acf      	subs	r7, r1, r3
 80022c6:	42b0      	cmp	r0, r6
 80022c8:	419b      	sbcs	r3, r3
 80022ca:	425b      	negs	r3, r3
 80022cc:	1afb      	subs	r3, r7, r3
 80022ce:	4698      	mov	r8, r3
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	d54e      	bpl.n	8002372 <__aeabi_dsub+0x672>
 80022d4:	1a16      	subs	r6, r2, r0
 80022d6:	4663      	mov	r3, ip
 80022d8:	42b2      	cmp	r2, r6
 80022da:	4192      	sbcs	r2, r2
 80022dc:	1a59      	subs	r1, r3, r1
 80022de:	4252      	negs	r2, r2
 80022e0:	1a89      	subs	r1, r1, r2
 80022e2:	465c      	mov	r4, fp
 80022e4:	2200      	movs	r2, #0
 80022e6:	e57b      	b.n	8001de0 <__aeabi_dsub+0xe0>
 80022e8:	4301      	orrs	r1, r0
 80022ea:	000e      	movs	r6, r1
 80022ec:	1e71      	subs	r1, r6, #1
 80022ee:	418e      	sbcs	r6, r1
 80022f0:	e79f      	b.n	8002232 <__aeabi_dsub+0x532>
 80022f2:	001d      	movs	r5, r3
 80022f4:	000e      	movs	r6, r1
 80022f6:	3d20      	subs	r5, #32
 80022f8:	40ee      	lsrs	r6, r5
 80022fa:	46b0      	mov	r8, r6
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d004      	beq.n	800230a <__aeabi_dsub+0x60a>
 8002300:	2540      	movs	r5, #64	; 0x40
 8002302:	1aeb      	subs	r3, r5, r3
 8002304:	4099      	lsls	r1, r3
 8002306:	4308      	orrs	r0, r1
 8002308:	4681      	mov	r9, r0
 800230a:	4648      	mov	r0, r9
 800230c:	4643      	mov	r3, r8
 800230e:	1e41      	subs	r1, r0, #1
 8002310:	4188      	sbcs	r0, r1
 8002312:	4318      	orrs	r0, r3
 8002314:	e674      	b.n	8002000 <__aeabi_dsub+0x300>
 8002316:	2200      	movs	r2, #0
 8002318:	2400      	movs	r4, #0
 800231a:	e617      	b.n	8001f4c <__aeabi_dsub+0x24c>
 800231c:	1a16      	subs	r6, r2, r0
 800231e:	4663      	mov	r3, ip
 8002320:	42b2      	cmp	r2, r6
 8002322:	4192      	sbcs	r2, r2
 8002324:	1a59      	subs	r1, r3, r1
 8002326:	4252      	negs	r2, r2
 8002328:	1a89      	subs	r1, r1, r2
 800232a:	003d      	movs	r5, r7
 800232c:	e525      	b.n	8001d7a <__aeabi_dsub+0x7a>
 800232e:	4661      	mov	r1, ip
 8002330:	4691      	mov	r9, r2
 8002332:	4d15      	ldr	r5, [pc, #84]	; (8002388 <__aeabi_dsub+0x688>)
 8002334:	e601      	b.n	8001f3a <__aeabi_dsub+0x23a>
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	2400      	movs	r4, #0
 800233a:	0312      	lsls	r2, r2, #12
 800233c:	e679      	b.n	8002032 <__aeabi_dsub+0x332>
 800233e:	001d      	movs	r5, r3
 8002340:	000e      	movs	r6, r1
 8002342:	3d20      	subs	r5, #32
 8002344:	40ee      	lsrs	r6, r5
 8002346:	46b0      	mov	r8, r6
 8002348:	2b20      	cmp	r3, #32
 800234a:	d004      	beq.n	8002356 <__aeabi_dsub+0x656>
 800234c:	2540      	movs	r5, #64	; 0x40
 800234e:	1aeb      	subs	r3, r5, r3
 8002350:	4099      	lsls	r1, r3
 8002352:	4308      	orrs	r0, r1
 8002354:	4681      	mov	r9, r0
 8002356:	464e      	mov	r6, r9
 8002358:	4643      	mov	r3, r8
 800235a:	1e71      	subs	r1, r6, #1
 800235c:	418e      	sbcs	r6, r1
 800235e:	431e      	orrs	r6, r3
 8002360:	e767      	b.n	8002232 <__aeabi_dsub+0x532>
 8002362:	1886      	adds	r6, r0, r2
 8002364:	4296      	cmp	r6, r2
 8002366:	419b      	sbcs	r3, r3
 8002368:	4461      	add	r1, ip
 800236a:	425b      	negs	r3, r3
 800236c:	18c9      	adds	r1, r1, r3
 800236e:	003d      	movs	r5, r7
 8002370:	e58c      	b.n	8001e8c <__aeabi_dsub+0x18c>
 8002372:	4647      	mov	r7, r8
 8002374:	4337      	orrs	r7, r6
 8002376:	d0ce      	beq.n	8002316 <__aeabi_dsub+0x616>
 8002378:	2207      	movs	r2, #7
 800237a:	4641      	mov	r1, r8
 800237c:	4032      	ands	r2, r6
 800237e:	e649      	b.n	8002014 <__aeabi_dsub+0x314>
 8002380:	2700      	movs	r7, #0
 8002382:	003a      	movs	r2, r7
 8002384:	e5e6      	b.n	8001f54 <__aeabi_dsub+0x254>
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	000007ff 	.word	0x000007ff
 800238c:	ff7fffff 	.word	0xff7fffff

08002390 <__aeabi_dcmpun>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	4e0c      	ldr	r6, [pc, #48]	; (80023c4 <__aeabi_dcmpun+0x34>)
 8002394:	030d      	lsls	r5, r1, #12
 8002396:	031c      	lsls	r4, r3, #12
 8002398:	0049      	lsls	r1, r1, #1
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	0b2d      	lsrs	r5, r5, #12
 800239e:	0d49      	lsrs	r1, r1, #21
 80023a0:	0b24      	lsrs	r4, r4, #12
 80023a2:	0d5b      	lsrs	r3, r3, #21
 80023a4:	42b1      	cmp	r1, r6
 80023a6:	d008      	beq.n	80023ba <__aeabi_dcmpun+0x2a>
 80023a8:	4906      	ldr	r1, [pc, #24]	; (80023c4 <__aeabi_dcmpun+0x34>)
 80023aa:	2000      	movs	r0, #0
 80023ac:	428b      	cmp	r3, r1
 80023ae:	d103      	bne.n	80023b8 <__aeabi_dcmpun+0x28>
 80023b0:	4314      	orrs	r4, r2
 80023b2:	0020      	movs	r0, r4
 80023b4:	1e44      	subs	r4, r0, #1
 80023b6:	41a0      	sbcs	r0, r4
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
 80023ba:	4305      	orrs	r5, r0
 80023bc:	2001      	movs	r0, #1
 80023be:	2d00      	cmp	r5, #0
 80023c0:	d1fa      	bne.n	80023b8 <__aeabi_dcmpun+0x28>
 80023c2:	e7f1      	b.n	80023a8 <__aeabi_dcmpun+0x18>
 80023c4:	000007ff 	.word	0x000007ff

080023c8 <__aeabi_i2d>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d02d      	beq.n	800242a <__aeabi_i2d+0x62>
 80023ce:	17c3      	asrs	r3, r0, #31
 80023d0:	18c5      	adds	r5, r0, r3
 80023d2:	405d      	eors	r5, r3
 80023d4:	0fc4      	lsrs	r4, r0, #31
 80023d6:	0028      	movs	r0, r5
 80023d8:	f000 f906 	bl	80025e8 <__clzsi2>
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <__aeabi_i2d+0x6c>)
 80023de:	1a1b      	subs	r3, r3, r0
 80023e0:	055b      	lsls	r3, r3, #21
 80023e2:	0d5b      	lsrs	r3, r3, #21
 80023e4:	280a      	cmp	r0, #10
 80023e6:	dd15      	ble.n	8002414 <__aeabi_i2d+0x4c>
 80023e8:	380b      	subs	r0, #11
 80023ea:	4085      	lsls	r5, r0
 80023ec:	2200      	movs	r2, #0
 80023ee:	032d      	lsls	r5, r5, #12
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	2100      	movs	r1, #0
 80023f4:	0010      	movs	r0, r2
 80023f6:	032d      	lsls	r5, r5, #12
 80023f8:	0d0a      	lsrs	r2, r1, #20
 80023fa:	0b2d      	lsrs	r5, r5, #12
 80023fc:	0512      	lsls	r2, r2, #20
 80023fe:	432a      	orrs	r2, r5
 8002400:	4d0d      	ldr	r5, [pc, #52]	; (8002438 <__aeabi_i2d+0x70>)
 8002402:	051b      	lsls	r3, r3, #20
 8002404:	402a      	ands	r2, r5
 8002406:	4313      	orrs	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	07e4      	lsls	r4, r4, #31
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	4323      	orrs	r3, r4
 8002410:	0019      	movs	r1, r3
 8002412:	bd70      	pop	{r4, r5, r6, pc}
 8002414:	0002      	movs	r2, r0
 8002416:	0029      	movs	r1, r5
 8002418:	3215      	adds	r2, #21
 800241a:	4091      	lsls	r1, r2
 800241c:	000a      	movs	r2, r1
 800241e:	210b      	movs	r1, #11
 8002420:	1a08      	subs	r0, r1, r0
 8002422:	40c5      	lsrs	r5, r0
 8002424:	032d      	lsls	r5, r5, #12
 8002426:	0b2d      	lsrs	r5, r5, #12
 8002428:	e7e3      	b.n	80023f2 <__aeabi_i2d+0x2a>
 800242a:	2400      	movs	r4, #0
 800242c:	2300      	movs	r3, #0
 800242e:	2500      	movs	r5, #0
 8002430:	2200      	movs	r2, #0
 8002432:	e7de      	b.n	80023f2 <__aeabi_i2d+0x2a>
 8002434:	0000041e 	.word	0x0000041e
 8002438:	800fffff 	.word	0x800fffff

0800243c <__aeabi_f2d>:
 800243c:	0041      	lsls	r1, r0, #1
 800243e:	0e09      	lsrs	r1, r1, #24
 8002440:	1c4b      	adds	r3, r1, #1
 8002442:	b570      	push	{r4, r5, r6, lr}
 8002444:	b2db      	uxtb	r3, r3
 8002446:	0246      	lsls	r6, r0, #9
 8002448:	0a75      	lsrs	r5, r6, #9
 800244a:	0fc4      	lsrs	r4, r0, #31
 800244c:	2b01      	cmp	r3, #1
 800244e:	dd14      	ble.n	800247a <__aeabi_f2d+0x3e>
 8002450:	23e0      	movs	r3, #224	; 0xe0
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	076d      	lsls	r5, r5, #29
 8002456:	0b36      	lsrs	r6, r6, #12
 8002458:	18cb      	adds	r3, r1, r3
 800245a:	2100      	movs	r1, #0
 800245c:	0d0a      	lsrs	r2, r1, #20
 800245e:	0028      	movs	r0, r5
 8002460:	0512      	lsls	r2, r2, #20
 8002462:	4d1c      	ldr	r5, [pc, #112]	; (80024d4 <__aeabi_f2d+0x98>)
 8002464:	4332      	orrs	r2, r6
 8002466:	055b      	lsls	r3, r3, #21
 8002468:	402a      	ands	r2, r5
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	4313      	orrs	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	07e4      	lsls	r4, r4, #31
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	4323      	orrs	r3, r4
 8002476:	0019      	movs	r1, r3
 8002478:	bd70      	pop	{r4, r5, r6, pc}
 800247a:	2900      	cmp	r1, #0
 800247c:	d114      	bne.n	80024a8 <__aeabi_f2d+0x6c>
 800247e:	2d00      	cmp	r5, #0
 8002480:	d01e      	beq.n	80024c0 <__aeabi_f2d+0x84>
 8002482:	0028      	movs	r0, r5
 8002484:	f000 f8b0 	bl	80025e8 <__clzsi2>
 8002488:	280a      	cmp	r0, #10
 800248a:	dc1c      	bgt.n	80024c6 <__aeabi_f2d+0x8a>
 800248c:	230b      	movs	r3, #11
 800248e:	002a      	movs	r2, r5
 8002490:	1a1b      	subs	r3, r3, r0
 8002492:	40da      	lsrs	r2, r3
 8002494:	0003      	movs	r3, r0
 8002496:	3315      	adds	r3, #21
 8002498:	409d      	lsls	r5, r3
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <__aeabi_f2d+0x9c>)
 800249c:	0312      	lsls	r2, r2, #12
 800249e:	1a1b      	subs	r3, r3, r0
 80024a0:	055b      	lsls	r3, r3, #21
 80024a2:	0b16      	lsrs	r6, r2, #12
 80024a4:	0d5b      	lsrs	r3, r3, #21
 80024a6:	e7d8      	b.n	800245a <__aeabi_f2d+0x1e>
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	d006      	beq.n	80024ba <__aeabi_f2d+0x7e>
 80024ac:	0b32      	lsrs	r2, r6, #12
 80024ae:	2680      	movs	r6, #128	; 0x80
 80024b0:	0336      	lsls	r6, r6, #12
 80024b2:	076d      	lsls	r5, r5, #29
 80024b4:	4316      	orrs	r6, r2
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <__aeabi_f2d+0xa0>)
 80024b8:	e7cf      	b.n	800245a <__aeabi_f2d+0x1e>
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <__aeabi_f2d+0xa0>)
 80024bc:	2600      	movs	r6, #0
 80024be:	e7cc      	b.n	800245a <__aeabi_f2d+0x1e>
 80024c0:	2300      	movs	r3, #0
 80024c2:	2600      	movs	r6, #0
 80024c4:	e7c9      	b.n	800245a <__aeabi_f2d+0x1e>
 80024c6:	0003      	movs	r3, r0
 80024c8:	002a      	movs	r2, r5
 80024ca:	3b0b      	subs	r3, #11
 80024cc:	409a      	lsls	r2, r3
 80024ce:	2500      	movs	r5, #0
 80024d0:	e7e3      	b.n	800249a <__aeabi_f2d+0x5e>
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	800fffff 	.word	0x800fffff
 80024d8:	00000389 	.word	0x00000389
 80024dc:	000007ff 	.word	0x000007ff

080024e0 <__aeabi_d2f>:
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	004c      	lsls	r4, r1, #1
 80024e4:	0d64      	lsrs	r4, r4, #21
 80024e6:	030b      	lsls	r3, r1, #12
 80024e8:	1c62      	adds	r2, r4, #1
 80024ea:	0a5b      	lsrs	r3, r3, #9
 80024ec:	0f46      	lsrs	r6, r0, #29
 80024ee:	0552      	lsls	r2, r2, #21
 80024f0:	0fc9      	lsrs	r1, r1, #31
 80024f2:	431e      	orrs	r6, r3
 80024f4:	00c5      	lsls	r5, r0, #3
 80024f6:	0d52      	lsrs	r2, r2, #21
 80024f8:	2a01      	cmp	r2, #1
 80024fa:	dd29      	ble.n	8002550 <__aeabi_d2f+0x70>
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <__aeabi_d2f+0xfc>)
 80024fe:	18e7      	adds	r7, r4, r3
 8002500:	2ffe      	cmp	r7, #254	; 0xfe
 8002502:	dc1c      	bgt.n	800253e <__aeabi_d2f+0x5e>
 8002504:	2f00      	cmp	r7, #0
 8002506:	dd3b      	ble.n	8002580 <__aeabi_d2f+0xa0>
 8002508:	0180      	lsls	r0, r0, #6
 800250a:	1e43      	subs	r3, r0, #1
 800250c:	4198      	sbcs	r0, r3
 800250e:	2207      	movs	r2, #7
 8002510:	00f3      	lsls	r3, r6, #3
 8002512:	0f6d      	lsrs	r5, r5, #29
 8002514:	4303      	orrs	r3, r0
 8002516:	432b      	orrs	r3, r5
 8002518:	401a      	ands	r2, r3
 800251a:	2a00      	cmp	r2, #0
 800251c:	d004      	beq.n	8002528 <__aeabi_d2f+0x48>
 800251e:	220f      	movs	r2, #15
 8002520:	401a      	ands	r2, r3
 8002522:	2a04      	cmp	r2, #4
 8002524:	d000      	beq.n	8002528 <__aeabi_d2f+0x48>
 8002526:	3304      	adds	r3, #4
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	04d2      	lsls	r2, r2, #19
 800252c:	401a      	ands	r2, r3
 800252e:	d024      	beq.n	800257a <__aeabi_d2f+0x9a>
 8002530:	3701      	adds	r7, #1
 8002532:	b2fa      	uxtb	r2, r7
 8002534:	2fff      	cmp	r7, #255	; 0xff
 8002536:	d002      	beq.n	800253e <__aeabi_d2f+0x5e>
 8002538:	019b      	lsls	r3, r3, #6
 800253a:	0a58      	lsrs	r0, r3, #9
 800253c:	e001      	b.n	8002542 <__aeabi_d2f+0x62>
 800253e:	22ff      	movs	r2, #255	; 0xff
 8002540:	2000      	movs	r0, #0
 8002542:	0240      	lsls	r0, r0, #9
 8002544:	05d2      	lsls	r2, r2, #23
 8002546:	0a40      	lsrs	r0, r0, #9
 8002548:	07c9      	lsls	r1, r1, #31
 800254a:	4310      	orrs	r0, r2
 800254c:	4308      	orrs	r0, r1
 800254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002550:	4335      	orrs	r5, r6
 8002552:	2c00      	cmp	r4, #0
 8002554:	d104      	bne.n	8002560 <__aeabi_d2f+0x80>
 8002556:	2d00      	cmp	r5, #0
 8002558:	d10a      	bne.n	8002570 <__aeabi_d2f+0x90>
 800255a:	2200      	movs	r2, #0
 800255c:	2000      	movs	r0, #0
 800255e:	e7f0      	b.n	8002542 <__aeabi_d2f+0x62>
 8002560:	2d00      	cmp	r5, #0
 8002562:	d0ec      	beq.n	800253e <__aeabi_d2f+0x5e>
 8002564:	2080      	movs	r0, #128	; 0x80
 8002566:	03c0      	lsls	r0, r0, #15
 8002568:	4330      	orrs	r0, r6
 800256a:	22ff      	movs	r2, #255	; 0xff
 800256c:	e7e9      	b.n	8002542 <__aeabi_d2f+0x62>
 800256e:	2400      	movs	r4, #0
 8002570:	2300      	movs	r3, #0
 8002572:	025b      	lsls	r3, r3, #9
 8002574:	0a58      	lsrs	r0, r3, #9
 8002576:	b2e2      	uxtb	r2, r4
 8002578:	e7e3      	b.n	8002542 <__aeabi_d2f+0x62>
 800257a:	08db      	lsrs	r3, r3, #3
 800257c:	003c      	movs	r4, r7
 800257e:	e7f8      	b.n	8002572 <__aeabi_d2f+0x92>
 8002580:	003b      	movs	r3, r7
 8002582:	3317      	adds	r3, #23
 8002584:	dbf3      	blt.n	800256e <__aeabi_d2f+0x8e>
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	4333      	orrs	r3, r6
 800258c:	261e      	movs	r6, #30
 800258e:	1bf6      	subs	r6, r6, r7
 8002590:	2e1f      	cmp	r6, #31
 8002592:	dd14      	ble.n	80025be <__aeabi_d2f+0xde>
 8002594:	2202      	movs	r2, #2
 8002596:	4252      	negs	r2, r2
 8002598:	1bd7      	subs	r7, r2, r7
 800259a:	001a      	movs	r2, r3
 800259c:	40fa      	lsrs	r2, r7
 800259e:	0017      	movs	r7, r2
 80025a0:	2e20      	cmp	r6, #32
 80025a2:	d004      	beq.n	80025ae <__aeabi_d2f+0xce>
 80025a4:	4a0e      	ldr	r2, [pc, #56]	; (80025e0 <__aeabi_d2f+0x100>)
 80025a6:	4694      	mov	ip, r2
 80025a8:	4464      	add	r4, ip
 80025aa:	40a3      	lsls	r3, r4
 80025ac:	431d      	orrs	r5, r3
 80025ae:	002b      	movs	r3, r5
 80025b0:	1e5d      	subs	r5, r3, #1
 80025b2:	41ab      	sbcs	r3, r5
 80025b4:	2207      	movs	r2, #7
 80025b6:	433b      	orrs	r3, r7
 80025b8:	401a      	ands	r2, r3
 80025ba:	2700      	movs	r7, #0
 80025bc:	e7ad      	b.n	800251a <__aeabi_d2f+0x3a>
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <__aeabi_d2f+0x104>)
 80025c0:	0028      	movs	r0, r5
 80025c2:	18a2      	adds	r2, r4, r2
 80025c4:	4095      	lsls	r5, r2
 80025c6:	4093      	lsls	r3, r2
 80025c8:	1e6c      	subs	r4, r5, #1
 80025ca:	41a5      	sbcs	r5, r4
 80025cc:	40f0      	lsrs	r0, r6
 80025ce:	2207      	movs	r2, #7
 80025d0:	432b      	orrs	r3, r5
 80025d2:	4303      	orrs	r3, r0
 80025d4:	401a      	ands	r2, r3
 80025d6:	2700      	movs	r7, #0
 80025d8:	e79f      	b.n	800251a <__aeabi_d2f+0x3a>
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	fffffc80 	.word	0xfffffc80
 80025e0:	fffffca2 	.word	0xfffffca2
 80025e4:	fffffc82 	.word	0xfffffc82

080025e8 <__clzsi2>:
 80025e8:	211c      	movs	r1, #28
 80025ea:	2301      	movs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	4298      	cmp	r0, r3
 80025f0:	d301      	bcc.n	80025f6 <__clzsi2+0xe>
 80025f2:	0c00      	lsrs	r0, r0, #16
 80025f4:	3910      	subs	r1, #16
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	4298      	cmp	r0, r3
 80025fa:	d301      	bcc.n	8002600 <__clzsi2+0x18>
 80025fc:	0a00      	lsrs	r0, r0, #8
 80025fe:	3908      	subs	r1, #8
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0x22>
 8002606:	0900      	lsrs	r0, r0, #4
 8002608:	3904      	subs	r1, #4
 800260a:	a202      	add	r2, pc, #8	; (adr r2, 8002614 <__clzsi2+0x2c>)
 800260c:	5c10      	ldrb	r0, [r2, r0]
 800260e:	1840      	adds	r0, r0, r1
 8002610:	4770      	bx	lr
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	02020304 	.word	0x02020304
 8002618:	01010101 	.word	0x01010101
	...

08002624 <__clzdi2>:
 8002624:	b510      	push	{r4, lr}
 8002626:	2900      	cmp	r1, #0
 8002628:	d103      	bne.n	8002632 <__clzdi2+0xe>
 800262a:	f7ff ffdd 	bl	80025e8 <__clzsi2>
 800262e:	3020      	adds	r0, #32
 8002630:	e002      	b.n	8002638 <__clzdi2+0x14>
 8002632:	1c08      	adds	r0, r1, #0
 8002634:	f7ff ffd8 	bl	80025e8 <__clzsi2>
 8002638:	bd10      	pop	{r4, pc}
 800263a:	46c0      	nop			; (mov r8, r8)

0800263c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	b08b      	sub	sp, #44	; 0x2c
 8002640:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002642:	f000 fc33 	bl	8002eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002646:	f000 fa6b 	bl	8002b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800264a:	f000 fb1b 	bl	8002c84 <MX_GPIO_Init>
  MX_I2C2_Init();
 800264e:	f000 fad9 	bl	8002c04 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t Main_ADDR = 0x68 << 1;
 8002652:	2114      	movs	r1, #20
 8002654:	187b      	adds	r3, r7, r1
 8002656:	22d0      	movs	r2, #208	; 0xd0
 8002658:	801a      	strh	r2, [r3, #0]

  HAL_StatusTypeDef ret = HAL_OK;
 800265a:	2017      	movs	r0, #23
 800265c:	183b      	adds	r3, r7, r0
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret2 = HAL_OK;
 8002662:	2613      	movs	r6, #19
 8002664:	19bb      	adds	r3, r7, r6
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret3 = HAL_OK;
 800266a:	2312      	movs	r3, #18
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret4 = HAL_OK;
 8002672:	2311      	movs	r3, #17
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret5 = HAL_OK;
 800267a:	2310      	movs	r3, #16
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret6 = HAL_OK;
 8002682:	220f      	movs	r2, #15
 8002684:	18bb      	adds	r3, r7, r2
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret7 = HAL_OK;
 800268a:	220e      	movs	r2, #14
 800268c:	18bb      	adds	r3, r7, r2
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret8 = HAL_OK;
 8002692:	220d      	movs	r2, #13
 8002694:	18bb      	adds	r3, r7, r2
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret9 = HAL_OK;
 800269a:	240c      	movs	r4, #12
 800269c:	193b      	adds	r3, r7, r4
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret10 = HAL_OK;
 80026a2:	250b      	movs	r5, #11
 80026a4:	197b      	adds	r3, r7, r5
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret11 = HAL_OK;
 80026aa:	250a      	movs	r5, #10
 80026ac:	197b      	adds	r3, r7, r5
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

  uint8_t deviceID;
  uint8_t pwr1 = 0x80;
 80026b2:	2508      	movs	r5, #8
 80026b4:	197b      	adds	r3, r7, r5
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	701a      	strb	r2, [r3, #0]
  uint8_t pwr1_2 = 0x01;
 80026ba:	1dfb      	adds	r3, r7, #7
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
//  uint8_t pwr2 = 0x38;
//  uint8_t pwr2_2 = 0x00;
  uint8_t rtDiv = 0x00;
 80026c0:	1dbb      	adds	r3, r7, #6
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
//  uint8_t config = 0x05;
//  uint8_t gyroConfig = 0x18;
  uint8_t accelConfig = 0x18;
 80026c6:	1d7b      	adds	r3, r7, #5
 80026c8:	2218      	movs	r2, #24
 80026ca:	701a      	strb	r2, [r3, #0]
  uint8_t accelConfig2 = 0x03;
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2203      	movs	r2, #3
 80026d0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // read who_am_i
	  ret = HAL_I2C_Mem_Read(&hi2c2, Main_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &deviceID, 1, HAL_MAX_DELAY);
 80026d2:	183c      	adds	r4, r7, r0
 80026d4:	000d      	movs	r5, r1
 80026d6:	197b      	adds	r3, r7, r5
 80026d8:	8819      	ldrh	r1, [r3, #0]
 80026da:	4863      	ldr	r0, [pc, #396]	; (8002868 <main+0x22c>)
 80026dc:	2301      	movs	r3, #1
 80026de:	425b      	negs	r3, r3
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	2301      	movs	r3, #1
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	2309      	movs	r3, #9
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2301      	movs	r3, #1
 80026ee:	2275      	movs	r2, #117	; 0x75
 80026f0:	f001 f85c 	bl	80037ac <HAL_I2C_Mem_Read>
 80026f4:	0003      	movs	r3, r0
 80026f6:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(delay);
 80026f8:	4b5c      	ldr	r3, [pc, #368]	; (800286c <main+0x230>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 fc45 	bl	8002f8c <HAL_Delay>

	  // reset IMU
	  ret2 = HAL_I2C_Mem_Write(&hi2c2, Main_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &pwr1, 1, HAL_MAX_DELAY);
 8002702:	19bc      	adds	r4, r7, r6
 8002704:	197b      	adds	r3, r7, r5
 8002706:	8819      	ldrh	r1, [r3, #0]
 8002708:	4857      	ldr	r0, [pc, #348]	; (8002868 <main+0x22c>)
 800270a:	2301      	movs	r3, #1
 800270c:	425b      	negs	r3, r3
 800270e:	9302      	str	r3, [sp, #8]
 8002710:	2301      	movs	r3, #1
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2608      	movs	r6, #8
 8002716:	19bb      	adds	r3, r7, r6
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2301      	movs	r3, #1
 800271c:	226b      	movs	r2, #107	; 0x6b
 800271e:	f000 ff17 	bl	8003550 <HAL_I2C_Mem_Write>
 8002722:	0003      	movs	r3, r0
 8002724:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(delay);
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <main+0x230>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 fc2e 	bl	8002f8c <HAL_Delay>

	  // enable temperature sensor and selects the clock source
	  ret11 = HAL_I2C_Mem_Write(&hi2c2, Main_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &pwr1_2, 1, HAL_MAX_DELAY);
 8002730:	210a      	movs	r1, #10
 8002732:	187c      	adds	r4, r7, r1
 8002734:	197b      	adds	r3, r7, r5
 8002736:	8819      	ldrh	r1, [r3, #0]
 8002738:	484b      	ldr	r0, [pc, #300]	; (8002868 <main+0x22c>)
 800273a:	2301      	movs	r3, #1
 800273c:	425b      	negs	r3, r3
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	2301      	movs	r3, #1
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2301      	movs	r3, #1
 800274a:	226b      	movs	r2, #107	; 0x6b
 800274c:	f000 ff00 	bl	8003550 <HAL_I2C_Mem_Write>
 8002750:	0003      	movs	r3, r0
 8002752:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(delay);
 8002754:	4b45      	ldr	r3, [pc, #276]	; (800286c <main+0x230>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fc17 	bl	8002f8c <HAL_Delay>
	  temp_sens =  326.8;
 800275e:	4b44      	ldr	r3, [pc, #272]	; (8002870 <main+0x234>)
 8002760:	4a44      	ldr	r2, [pc, #272]	; (8002874 <main+0x238>)
 8002762:	601a      	str	r2, [r3, #0]
	  // enable acc and gyro
//	  ret4 = HAL_I2C_Mem_Write(&hi2c2, Main_ADDR, PWR_MGMT_2, I2C_MEMADD_SIZE_8BIT, &pwr2_2, 1, HAL_MAX_DELAY);
//	  HAL_Delay(25);

	  // set sample rate to 1kHz and apply
	  ret5 = HAL_I2C_Mem_Write(&hi2c2, Main_ADDR, SMPLRT_DIV, I2C_MEMADD_SIZE_8BIT, &rtDiv, 1, HAL_MAX_DELAY);
 8002764:	2310      	movs	r3, #16
 8002766:	18fc      	adds	r4, r7, r3
 8002768:	197b      	adds	r3, r7, r5
 800276a:	8819      	ldrh	r1, [r3, #0]
 800276c:	483e      	ldr	r0, [pc, #248]	; (8002868 <main+0x22c>)
 800276e:	2301      	movs	r3, #1
 8002770:	425b      	negs	r3, r3
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	2301      	movs	r3, #1
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	1dbb      	adds	r3, r7, #6
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2301      	movs	r3, #1
 800277e:	2219      	movs	r2, #25
 8002780:	f000 fee6 	bl	8003550 <HAL_I2C_Mem_Write>
 8002784:	0003      	movs	r3, r0
 8002786:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(delay);
 8002788:	4b38      	ldr	r3, [pc, #224]	; (800286c <main+0x230>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fbfd 	bl	8002f8c <HAL_Delay>
	  // gryo full-scale range = 2000dps(0b11) -- sensitivity scale factor = 2,048 LSB/(dps)
//	  ret7 = HAL_I2C_Mem_Write(&hi2c2, Main_ADDR, GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &gyroConfig, 1, HAL_MAX_DELAY);
//	  HAL_Delay(25);
//
	  // accel full-scale range = 16g(0b11) -- sensitivity scale factor = 2,048 LSB/(dps)
	  ret8 = HAL_I2C_Mem_Write(&hi2c2, Main_ADDR, ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &accelConfig, 1, HAL_MAX_DELAY); // ACCEL full-scale range = 16g -- sensitivity scale facotr = 2,048 LSB/(dps)
 8002792:	220d      	movs	r2, #13
 8002794:	18bc      	adds	r4, r7, r2
 8002796:	197b      	adds	r3, r7, r5
 8002798:	8819      	ldrh	r1, [r3, #0]
 800279a:	4833      	ldr	r0, [pc, #204]	; (8002868 <main+0x22c>)
 800279c:	2301      	movs	r3, #1
 800279e:	425b      	negs	r3, r3
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	2301      	movs	r3, #1
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	1d7b      	adds	r3, r7, #5
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2301      	movs	r3, #1
 80027ac:	221c      	movs	r2, #28
 80027ae:	f000 fecf 	bl	8003550 <HAL_I2C_Mem_Write>
 80027b2:	0003      	movs	r3, r0
 80027b4:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(delay);
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <main+0x230>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 fbe6 	bl	8002f8c <HAL_Delay>
	  accel_sens = 2048.0;
 80027c0:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <main+0x23c>)
 80027c2:	228a      	movs	r2, #138	; 0x8a
 80027c4:	05d2      	lsls	r2, r2, #23
 80027c6:	601a      	str	r2, [r3, #0]

	  // set A_DLPF_CFG to 3 for accel configuration
	  ret9 = HAL_I2C_Mem_Write(&hi2c2, Main_ADDR, ACCEL_CONFIG2, I2C_MEMADD_SIZE_8BIT, &accelConfig2, 1, HAL_MAX_DELAY); // ACCEL FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80027c8:	240c      	movs	r4, #12
 80027ca:	193c      	adds	r4, r7, r4
 80027cc:	197b      	adds	r3, r7, r5
 80027ce:	8819      	ldrh	r1, [r3, #0]
 80027d0:	4825      	ldr	r0, [pc, #148]	; (8002868 <main+0x22c>)
 80027d2:	2301      	movs	r3, #1
 80027d4:	425b      	negs	r3, r3
 80027d6:	9302      	str	r3, [sp, #8]
 80027d8:	2301      	movs	r3, #1
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	221d      	movs	r2, #29
 80027e4:	f000 feb4 	bl	8003550 <HAL_I2C_Mem_Write>
 80027e8:	0003      	movs	r3, r0
 80027ea:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(delay);
 80027ec:	4b1f      	ldr	r3, [pc, #124]	; (800286c <main+0x230>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fbcb 	bl	8002f8c <HAL_Delay>
//
//	  ret10 = HAL_I2C_Mem_Write(&hi2c1, Main_ADDR, INT_ENABLE, I2C_MEMADD_SIZE_8BIT, &intEnable, 1, HAL_MAX_DELAY);
//	  HAL_Delay(25);j

	  while(1) {
		  if (ret == HAL_OK && ret2 == HAL_OK && ret3 == HAL_OK && ret4 == HAL_OK && ret5 == HAL_OK && ret6 == HAL_OK && ret7 == HAL_OK && ret8 == HAL_OK && ret9 == HAL_OK && ret10 == HAL_OK && ret11 == HAL_OK)
 80027f6:	2317      	movs	r3, #23
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1fa      	bne.n	80027f6 <main+0x1ba>
 8002800:	2313      	movs	r3, #19
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f5      	bne.n	80027f6 <main+0x1ba>
 800280a:	2312      	movs	r3, #18
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <main+0x1ba>
 8002814:	2311      	movs	r3, #17
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1eb      	bne.n	80027f6 <main+0x1ba>
 800281e:	2310      	movs	r3, #16
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e6      	bne.n	80027f6 <main+0x1ba>
 8002828:	230f      	movs	r3, #15
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e1      	bne.n	80027f6 <main+0x1ba>
 8002832:	230e      	movs	r3, #14
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1dc      	bne.n	80027f6 <main+0x1ba>
 800283c:	230d      	movs	r3, #13
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1d7      	bne.n	80027f6 <main+0x1ba>
 8002846:	230c      	movs	r3, #12
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1d2      	bne.n	80027f6 <main+0x1ba>
 8002850:	230b      	movs	r3, #11
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1cd      	bne.n	80027f6 <main+0x1ba>
 800285a:	230a      	movs	r3, #10
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1c8      	bne.n	80027f6 <main+0x1ba>
		  {

			while(i < (sizeof(accels) / sizeof(struct accelPacket))) {
 8002864:	e134      	b.n	8002ad0 <main+0x494>
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	200013b4 	.word	0x200013b4
 800286c:	20000000 	.word	0x20000000
 8002870:	20001400 	.word	0x20001400
 8002874:	43a36666 	.word	0x43a36666
 8002878:	2000140c 	.word	0x2000140c
				ret = HAL_I2C_Mem_Read(&hi2c2, Main_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, sizeof(data)/sizeof(uint8_t), HAL_MAX_DELAY);
 800287c:	2517      	movs	r5, #23
 800287e:	197c      	adds	r4, r7, r5
 8002880:	2314      	movs	r3, #20
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	8819      	ldrh	r1, [r3, #0]
 8002886:	4899      	ldr	r0, [pc, #612]	; (8002aec <main+0x4b0>)
 8002888:	2301      	movs	r3, #1
 800288a:	425b      	negs	r3, r3
 800288c:	9302      	str	r3, [sp, #8]
 800288e:	2306      	movs	r3, #6
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	4b97      	ldr	r3, [pc, #604]	; (8002af0 <main+0x4b4>)
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2301      	movs	r3, #1
 8002898:	223b      	movs	r2, #59	; 0x3b
 800289a:	f000 ff87 	bl	80037ac <HAL_I2C_Mem_Read>
 800289e:	0003      	movs	r3, r0
 80028a0:	7023      	strb	r3, [r4, #0]
				if (ret != HAL_OK){
 80028a2:	197b      	adds	r3, r7, r5
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d000      	beq.n	80028ac <main+0x270>
 80028aa:	e11a      	b.n	8002ae2 <main+0x4a6>
					break;
				}
				if ((data[0] & 0x80) != 0){
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <main+0x4b4>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b25b      	sxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da08      	bge.n	80028c8 <main+0x28c>
					accX = -1;
 80028b6:	4b8f      	ldr	r3, [pc, #572]	; (8002af4 <main+0x4b8>)
 80028b8:	4a8f      	ldr	r2, [pc, #572]	; (8002af8 <main+0x4bc>)
 80028ba:	601a      	str	r2, [r3, #0]
					data[0] = (data[0] ^ 0xFF) + 1;
 80028bc:	4b8c      	ldr	r3, [pc, #560]	; (8002af0 <main+0x4b4>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	425b      	negs	r3, r3
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b8a      	ldr	r3, [pc, #552]	; (8002af0 <main+0x4b4>)
 80028c6:	701a      	strb	r2, [r3, #0]
				}
				if ((data[2] & 0x80) != 0){
 80028c8:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <main+0x4b4>)
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da08      	bge.n	80028e4 <main+0x2a8>
					accY = -1;
 80028d2:	4b8a      	ldr	r3, [pc, #552]	; (8002afc <main+0x4c0>)
 80028d4:	4a88      	ldr	r2, [pc, #544]	; (8002af8 <main+0x4bc>)
 80028d6:	601a      	str	r2, [r3, #0]
					data[2] = (data[2] ^ 0xFF) + 1;
 80028d8:	4b85      	ldr	r3, [pc, #532]	; (8002af0 <main+0x4b4>)
 80028da:	789b      	ldrb	r3, [r3, #2]
 80028dc:	425b      	negs	r3, r3
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b83      	ldr	r3, [pc, #524]	; (8002af0 <main+0x4b4>)
 80028e2:	709a      	strb	r2, [r3, #2]
				}
				if ((data[4] & 0x80) != 0){
 80028e4:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <main+0x4b4>)
 80028e6:	791b      	ldrb	r3, [r3, #4]
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da08      	bge.n	8002900 <main+0x2c4>
					accZ = -1;
 80028ee:	4b84      	ldr	r3, [pc, #528]	; (8002b00 <main+0x4c4>)
 80028f0:	4a81      	ldr	r2, [pc, #516]	; (8002af8 <main+0x4bc>)
 80028f2:	601a      	str	r2, [r3, #0]
					data[4] = (data[4] ^ 0xFF) + 1;
 80028f4:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <main+0x4b4>)
 80028f6:	791b      	ldrb	r3, [r3, #4]
 80028f8:	425b      	negs	r3, r3
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <main+0x4b4>)
 80028fe:	711a      	strb	r2, [r3, #4]
				}
				accXraw = (uint16_t) (data[0] << 8 | data[1]);
 8002900:	4b7b      	ldr	r3, [pc, #492]	; (8002af0 <main+0x4b4>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	b21a      	sxth	r2, r3
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <main+0x4b4>)
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b21b      	sxth	r3, r3
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <main+0x4c8>)
 8002916:	801a      	strh	r2, [r3, #0]
				accYraw = (uint16_t) (data[2] << 8 | data[3]);
 8002918:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <main+0x4b4>)
 800291a:	789b      	ldrb	r3, [r3, #2]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	b21a      	sxth	r2, r3
 8002920:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <main+0x4b4>)
 8002922:	78db      	ldrb	r3, [r3, #3]
 8002924:	b21b      	sxth	r3, r3
 8002926:	4313      	orrs	r3, r2
 8002928:	b21b      	sxth	r3, r3
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <main+0x4cc>)
 800292e:	801a      	strh	r2, [r3, #0]
				accZraw = (uint16_t) (data[4] << 8 | data[5]);
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <main+0x4b4>)
 8002932:	791b      	ldrb	r3, [r3, #4]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	b21a      	sxth	r2, r3
 8002938:	4b6d      	ldr	r3, [pc, #436]	; (8002af0 <main+0x4b4>)
 800293a:	795b      	ldrb	r3, [r3, #5]
 800293c:	b21b      	sxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b21b      	sxth	r3, r3
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b71      	ldr	r3, [pc, #452]	; (8002b0c <main+0x4d0>)
 8002946:	801a      	strh	r2, [r3, #0]
				accX *= accXraw / accel_sens;
 8002948:	4b6e      	ldr	r3, [pc, #440]	; (8002b04 <main+0x4c8>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	0018      	movs	r0, r3
 800294e:	f7fd fff5 	bl	800093c <__aeabi_i2f>
 8002952:	1c02      	adds	r2, r0, #0
 8002954:	4b6e      	ldr	r3, [pc, #440]	; (8002b10 <main+0x4d4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1c19      	adds	r1, r3, #0
 800295a:	1c10      	adds	r0, r2, #0
 800295c:	f7fd fdaa 	bl	80004b4 <__aeabi_fdiv>
 8002960:	1c03      	adds	r3, r0, #0
 8002962:	1c1a      	adds	r2, r3, #0
 8002964:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <main+0x4b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1c19      	adds	r1, r3, #0
 800296a:	1c10      	adds	r0, r2, #0
 800296c:	f7fd feb4 	bl	80006d8 <__aeabi_fmul>
 8002970:	1c03      	adds	r3, r0, #0
 8002972:	1c1a      	adds	r2, r3, #0
 8002974:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <main+0x4b8>)
 8002976:	601a      	str	r2, [r3, #0]
				accY *= accYraw / accel_sens;
 8002978:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <main+0x4cc>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	0018      	movs	r0, r3
 800297e:	f7fd ffdd 	bl	800093c <__aeabi_i2f>
 8002982:	1c02      	adds	r2, r0, #0
 8002984:	4b62      	ldr	r3, [pc, #392]	; (8002b10 <main+0x4d4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c19      	adds	r1, r3, #0
 800298a:	1c10      	adds	r0, r2, #0
 800298c:	f7fd fd92 	bl	80004b4 <__aeabi_fdiv>
 8002990:	1c03      	adds	r3, r0, #0
 8002992:	1c1a      	adds	r2, r3, #0
 8002994:	4b59      	ldr	r3, [pc, #356]	; (8002afc <main+0x4c0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	1c19      	adds	r1, r3, #0
 800299a:	1c10      	adds	r0, r2, #0
 800299c:	f7fd fe9c 	bl	80006d8 <__aeabi_fmul>
 80029a0:	1c03      	adds	r3, r0, #0
 80029a2:	1c1a      	adds	r2, r3, #0
 80029a4:	4b55      	ldr	r3, [pc, #340]	; (8002afc <main+0x4c0>)
 80029a6:	601a      	str	r2, [r3, #0]
				accZ *= accZraw / accel_sens;
 80029a8:	4b58      	ldr	r3, [pc, #352]	; (8002b0c <main+0x4d0>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7fd ffc5 	bl	800093c <__aeabi_i2f>
 80029b2:	1c02      	adds	r2, r0, #0
 80029b4:	4b56      	ldr	r3, [pc, #344]	; (8002b10 <main+0x4d4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1c19      	adds	r1, r3, #0
 80029ba:	1c10      	adds	r0, r2, #0
 80029bc:	f7fd fd7a 	bl	80004b4 <__aeabi_fdiv>
 80029c0:	1c03      	adds	r3, r0, #0
 80029c2:	1c1a      	adds	r2, r3, #0
 80029c4:	4b4e      	ldr	r3, [pc, #312]	; (8002b00 <main+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1c19      	adds	r1, r3, #0
 80029ca:	1c10      	adds	r0, r2, #0
 80029cc:	f7fd fe84 	bl	80006d8 <__aeabi_fmul>
 80029d0:	1c03      	adds	r3, r0, #0
 80029d2:	1c1a      	adds	r2, r3, #0
 80029d4:	4b4a      	ldr	r3, [pc, #296]	; (8002b00 <main+0x4c4>)
 80029d6:	601a      	str	r2, [r3, #0]
				mag = sqrt((pow(accX, 2) + pow(accY, 2) + pow(accZ, 2)));
 80029d8:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <main+0x4b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	1c18      	adds	r0, r3, #0
 80029de:	f7ff fd2d 	bl	800243c <__aeabi_f2d>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2480      	movs	r4, #128	; 0x80
 80029e6:	05e4      	lsls	r4, r4, #23
 80029e8:	001a      	movs	r2, r3
 80029ea:	0023      	movs	r3, r4
 80029ec:	f002 fa30 	bl	8004e50 <pow>
 80029f0:	0005      	movs	r5, r0
 80029f2:	000e      	movs	r6, r1
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <main+0x4c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	1c18      	adds	r0, r3, #0
 80029fa:	f7ff fd1f 	bl	800243c <__aeabi_f2d>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2480      	movs	r4, #128	; 0x80
 8002a02:	05e4      	lsls	r4, r4, #23
 8002a04:	001a      	movs	r2, r3
 8002a06:	0023      	movs	r3, r4
 8002a08:	f002 fa22 	bl	8004e50 <pow>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	000c      	movs	r4, r1
 8002a10:	001a      	movs	r2, r3
 8002a12:	0023      	movs	r3, r4
 8002a14:	0028      	movs	r0, r5
 8002a16:	0031      	movs	r1, r6
 8002a18:	f7fd ffda 	bl	80009d0 <__aeabi_dadd>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	000c      	movs	r4, r1
 8002a20:	001d      	movs	r5, r3
 8002a22:	0026      	movs	r6, r4
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <main+0x4c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	1c18      	adds	r0, r3, #0
 8002a2a:	f7ff fd07 	bl	800243c <__aeabi_f2d>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2480      	movs	r4, #128	; 0x80
 8002a32:	05e4      	lsls	r4, r4, #23
 8002a34:	001a      	movs	r2, r3
 8002a36:	0023      	movs	r3, r4
 8002a38:	f002 fa0a 	bl	8004e50 <pow>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	000c      	movs	r4, r1
 8002a40:	001a      	movs	r2, r3
 8002a42:	0023      	movs	r3, r4
 8002a44:	0028      	movs	r0, r5
 8002a46:	0031      	movs	r1, r6
 8002a48:	f7fd ffc2 	bl	80009d0 <__aeabi_dadd>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	000c      	movs	r4, r1
 8002a50:	0018      	movs	r0, r3
 8002a52:	0021      	movs	r1, r4
 8002a54:	f002 fb92 	bl	800517c <sqrt>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	000c      	movs	r4, r1
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	0021      	movs	r1, r4
 8002a60:	f7ff fd3e 	bl	80024e0 <__aeabi_d2f>
 8002a64:	1c02      	adds	r2, r0, #0
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <main+0x4d8>)
 8002a68:	601a      	str	r2, [r3, #0]
//				mags[i] = mag;
				accels[i].accX = accX;
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <main+0x4dc>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <main+0x4b8>)
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <main+0x4e0>)
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	50d1      	str	r1, [r2, r3]
				accels[i].accY = accY;
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <main+0x4dc>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <main+0x4c0>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4926      	ldr	r1, [pc, #152]	; (8002b1c <main+0x4e0>)
 8002a82:	0103      	lsls	r3, r0, #4
 8002a84:	18cb      	adds	r3, r1, r3
 8002a86:	3304      	adds	r3, #4
 8002a88:	601a      	str	r2, [r3, #0]
				accels[i].accZ = accZ;
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <main+0x4dc>)
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <main+0x4c4>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4922      	ldr	r1, [pc, #136]	; (8002b1c <main+0x4e0>)
 8002a94:	0103      	lsls	r3, r0, #4
 8002a96:	18cb      	adds	r3, r1, r3
 8002a98:	3308      	adds	r3, #8
 8002a9a:	601a      	str	r2, [r3, #0]
				accels[i].mag = mag;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <main+0x4dc>)
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <main+0x4d8>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	491d      	ldr	r1, [pc, #116]	; (8002b1c <main+0x4e0>)
 8002aa6:	0103      	lsls	r3, r0, #4
 8002aa8:	18cb      	adds	r3, r1, r3
 8002aaa:	330c      	adds	r3, #12
 8002aac:	601a      	str	r2, [r3, #0]

				accX = 1;
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <main+0x4b8>)
 8002ab0:	22fe      	movs	r2, #254	; 0xfe
 8002ab2:	0592      	lsls	r2, r2, #22
 8002ab4:	601a      	str	r2, [r3, #0]
				accY = 1;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <main+0x4c0>)
 8002ab8:	22fe      	movs	r2, #254	; 0xfe
 8002aba:	0592      	lsls	r2, r2, #22
 8002abc:	601a      	str	r2, [r3, #0]
				accZ = 1;
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <main+0x4c4>)
 8002ac0:	22fe      	movs	r2, #254	; 0xfe
 8002ac2:	0592      	lsls	r2, r2, #22
 8002ac4:	601a      	str	r2, [r3, #0]
				i++;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <main+0x4dc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <main+0x4dc>)
 8002ace:	601a      	str	r2, [r3, #0]
			while(i < (sizeof(accels) / sizeof(struct accelPacket))) {
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <main+0x4dc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	232c      	movs	r3, #44	; 0x2c
 8002ad8:	33ff      	adds	r3, #255	; 0xff
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d800      	bhi.n	8002ae0 <main+0x4a4>
 8002ade:	e6cd      	b.n	800287c <main+0x240>
 8002ae0:	e000      	b.n	8002ae4 <main+0x4a8>
					break;
 8002ae2:	46c0      	nop			; (mov r8, r8)
			}
			i = 0;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <main+0x4dc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
		  if (ret == HAL_OK && ret2 == HAL_OK && ret3 == HAL_OK && ret4 == HAL_OK && ret5 == HAL_OK && ret6 == HAL_OK && ret7 == HAL_OK && ret8 == HAL_OK && ret9 == HAL_OK && ret10 == HAL_OK && ret11 == HAL_OK)
 8002aea:	e684      	b.n	80027f6 <main+0x1ba>
 8002aec:	200013b4 	.word	0x200013b4
 8002af0:	20001414 	.word	0x20001414
 8002af4:	20000004 	.word	0x20000004
 8002af8:	bf800000 	.word	0xbf800000
 8002afc:	20000008 	.word	0x20000008
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	20001366 	.word	0x20001366
 8002b08:	2000141c 	.word	0x2000141c
 8002b0c:	20001424 	.word	0x20001424
 8002b10:	2000140c 	.word	0x2000140c
 8002b14:	20001420 	.word	0x20001420
 8002b18:	200000a0 	.word	0x200000a0
 8002b1c:	200000a4 	.word	0x200000a4

08002b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b09d      	sub	sp, #116	; 0x74
 8002b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b26:	2438      	movs	r4, #56	; 0x38
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	2338      	movs	r3, #56	; 0x38
 8002b2e:	001a      	movs	r2, r3
 8002b30:	2100      	movs	r1, #0
 8002b32:	f002 f985 	bl	8004e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b36:	2324      	movs	r3, #36	; 0x24
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	2314      	movs	r3, #20
 8002b3e:	001a      	movs	r2, r3
 8002b40:	2100      	movs	r1, #0
 8002b42:	f002 f97d 	bl	8004e40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b46:	003b      	movs	r3, r7
 8002b48:	0018      	movs	r0, r3
 8002b4a:	2324      	movs	r3, #36	; 0x24
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f002 f976 	bl	8004e40 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b54:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <SystemClock_Config+0xdc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <SystemClock_Config+0xe0>)
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <SystemClock_Config+0xdc>)
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0109      	lsls	r1, r1, #4
 8002b62:	430a      	orrs	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b66:	0021      	movs	r1, r4
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2201      	movs	r2, #1
 8002b72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2210      	movs	r2, #16
 8002b78:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	2200      	movs	r2, #0
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	0412      	lsls	r2, r2, #16
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b94:	187b      	adds	r3, r7, r1
 8002b96:	0018      	movs	r0, r3
 8002b98:	f001 fa12 	bl	8003fc0 <HAL_RCC_OscConfig>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d001      	beq.n	8002ba4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002ba0:	f000 f8ae 	bl	8002d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba4:	2124      	movs	r1, #36	; 0x24
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	220f      	movs	r2, #15
 8002baa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bc4:	187b      	adds	r3, r7, r1
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f001 fdc1 	bl	8004750 <HAL_RCC_ClockConfig>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002bd2:	f000 f895 	bl	8002d00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bd6:	003b      	movs	r3, r7
 8002bd8:	2208      	movs	r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bdc:	003b      	movs	r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be2:	003b      	movs	r3, r7
 8002be4:	0018      	movs	r0, r3
 8002be6:	f001 ff9d 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d001      	beq.n	8002bf2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002bee:	f000 f887 	bl	8002d00 <Error_Handler>
  }
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b01d      	add	sp, #116	; 0x74
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	ffffe7ff 	.word	0xffffe7ff

08002c04 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <MX_I2C2_Init+0x78>)
 8002c0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <MX_I2C2_Init+0x7c>)
 8002c12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c14:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 fbef 	bl	8003424 <HAL_I2C_Init>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d001      	beq.n	8002c4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c4a:	f000 f859 	bl	8002d00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c50:	2100      	movs	r1, #0
 8002c52:	0018      	movs	r0, r3
 8002c54:	f001 f91c 	bl	8003e90 <HAL_I2CEx_ConfigAnalogFilter>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c5c:	f000 f850 	bl	8002d00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <MX_I2C2_Init+0x74>)
 8002c62:	2100      	movs	r1, #0
 8002c64:	0018      	movs	r0, r3
 8002c66:	f001 f95f 	bl	8003f28 <HAL_I2CEx_ConfigDigitalFilter>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c6e:	f000 f847 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200013b4 	.word	0x200013b4
 8002c7c:	40005800 	.word	0x40005800
 8002c80:	00303d5b 	.word	0x00303d5b

08002c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8a:	240c      	movs	r4, #12
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	0018      	movs	r0, r3
 8002c90:	2314      	movs	r3, #20
 8002c92:	001a      	movs	r2, r3
 8002c94:	2100      	movs	r1, #0
 8002c96:	f002 f8d3 	bl	8004e40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <MX_GPIO_Init+0x70>)
 8002c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <MX_GPIO_Init+0x70>)
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <MX_GPIO_Init+0x70>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <MX_GPIO_Init+0x70>)
 8002cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_GPIO_Init+0x70>)
 8002cb8:	2102      	movs	r1, #2
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <MX_GPIO_Init+0x70>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	0192      	lsls	r2, r2, #6
 8002cd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <MX_GPIO_Init+0x74>)
 8002cd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8002cde:	193b      	adds	r3, r7, r4
 8002ce0:	4a06      	ldr	r2, [pc, #24]	; (8002cfc <MX_GPIO_Init+0x78>)
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	f000 fa27 	bl	8003138 <HAL_GPIO_Init>

}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b009      	add	sp, #36	; 0x24
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	10110000 	.word	0x10110000
 8002cfc:	50000800 	.word	0x50000800

08002d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <Error_Handler+0x6>

08002d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_MspInit+0x24>)
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_MspInit+0x24>)
 8002d12:	2101      	movs	r1, #1
 8002d14:	430a      	orrs	r2, r1
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <HAL_MspInit+0x24>)
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_MspInit+0x24>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0549      	lsls	r1, r1, #21
 8002d22:	430a      	orrs	r2, r1
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	2314      	movs	r3, #20
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	2314      	movs	r3, #20
 8002d40:	001a      	movs	r2, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	f002 f87c 	bl	8004e40 <memset>
  if(hi2c->Instance==I2C1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <HAL_I2C_MspInit+0xe0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d12a      	bne.n	8002da8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d56:	4b2f      	ldr	r3, [pc, #188]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002d58:	2102      	movs	r1, #2
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d5e:	4b2d      	ldr	r3, [pc, #180]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	2202      	movs	r2, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d6a:	2114      	movs	r1, #20
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	22c0      	movs	r2, #192	; 0xc0
 8002d70:	0092      	lsls	r2, r2, #2
 8002d72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2212      	movs	r2, #18
 8002d78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	2203      	movs	r2, #3
 8002d84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	2204      	movs	r2, #4
 8002d8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_I2C_MspInit+0xe8>)
 8002d90:	0019      	movs	r1, r3
 8002d92:	0010      	movs	r0, r2
 8002d94:	f000 f9d0 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	0389      	lsls	r1, r1, #14
 8002da2:	430a      	orrs	r2, r1
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002da6:	e02e      	b.n	8002e06 <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1b      	ldr	r2, [pc, #108]	; (8002e1c <HAL_I2C_MspInit+0xec>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d129      	bne.n	8002e06 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db2:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002db8:	2102      	movs	r1, #2
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dca:	2114      	movs	r1, #20
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	22c0      	movs	r2, #192	; 0xc0
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2212      	movs	r2, #18
 8002dd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2201      	movs	r2, #1
 8002dde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2203      	movs	r2, #3
 8002de4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2206      	movs	r2, #6
 8002dea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_I2C_MspInit+0xe8>)
 8002df0:	0019      	movs	r1, r3
 8002df2:	0010      	movs	r0, r2
 8002df4:	f000 f9a0 	bl	8003138 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_I2C_MspInit+0xe4>)
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	03c9      	lsls	r1, r1, #15
 8002e02:	430a      	orrs	r2, r1
 8002e04:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b00a      	add	sp, #40	; 0x28
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	40005400 	.word	0x40005400
 8002e14:	40021000 	.word	0x40021000
 8002e18:	50000400 	.word	0x50000400
 8002e1c:	40005800 	.word	0x40005800

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <NMI_Handler+0x4>

08002e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <HardFault_Handler+0x4>

08002e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e44:	f000 f886 	bl	8002f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002e58:	480d      	ldr	r0, [pc, #52]	; (8002e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e5c:	480d      	ldr	r0, [pc, #52]	; (8002e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e5e:	490e      	ldr	r1, [pc, #56]	; (8002e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <LoopForever+0xe>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e64:	e002      	b.n	8002e6c <LoopCopyDataInit>

08002e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6a:	3304      	adds	r3, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e70:	d3f9      	bcc.n	8002e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e74:	4c0b      	ldr	r4, [pc, #44]	; (8002ea4 <LoopForever+0x16>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e78:	e001      	b.n	8002e7e <LoopFillZerobss>

08002e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e7c:	3204      	adds	r2, #4

08002e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e80:	d3fb      	bcc.n	8002e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e82:	f7ff ffe4 	bl	8002e4e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e86:	f001 ffb7 	bl	8004df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8a:	f7ff fbd7 	bl	800263c <main>

08002e8e <LoopForever>:

LoopForever:
    b LoopForever
 8002e8e:	e7fe      	b.n	8002e8e <LoopForever>
  ldr   r0, =_estack
 8002e90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e98:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002e9c:	08006160 	.word	0x08006160
  ldr r2, =_sbss
 8002ea0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002ea4:	2000142c 	.word	0x2000142c

08002ea8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea8:	e7fe      	b.n	8002ea8 <ADC1_COMP_IRQHandler>
	...

08002eac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eb2:	1dfb      	adds	r3, r7, #7
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_Init+0x3c>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_Init+0x3c>)
 8002ebe:	2140      	movs	r1, #64	; 0x40
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f000 f811 	bl	8002eec <HAL_InitTick>
 8002eca:	1e03      	subs	r3, r0, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e001      	b.n	8002eda <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ed6:	f7ff ff17 	bl	8002d08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	781b      	ldrb	r3, [r3, #0]
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	40022000 	.word	0x40022000

08002eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_InitTick+0x5c>)
 8002ef6:	681c      	ldr	r4, [r3, #0]
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_InitTick+0x60>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	0019      	movs	r1, r3
 8002efe:	23fa      	movs	r3, #250	; 0xfa
 8002f00:	0098      	lsls	r0, r3, #2
 8002f02:	f7fd f901 	bl	8000108 <__udivsi3>
 8002f06:	0003      	movs	r3, r0
 8002f08:	0019      	movs	r1, r3
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f7fd f8fc 	bl	8000108 <__udivsi3>
 8002f10:	0003      	movs	r3, r0
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 f903 	bl	800311e <HAL_SYSTICK_Config>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e00f      	b.n	8002f40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d80b      	bhi.n	8002f3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	425b      	negs	r3, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 f8e0 	bl	80030f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_InitTick+0x64>)
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b003      	add	sp, #12
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	20000010 	.word	0x20000010
 8002f4c:	20000018 	.word	0x20000018
 8002f50:	20000014 	.word	0x20000014

08002f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_IncTick+0x1c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_IncTick+0x20>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	18d2      	adds	r2, r2, r3
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_IncTick+0x20>)
 8002f66:	601a      	str	r2, [r3, #0]
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000018 	.word	0x20000018
 8002f74:	20001428 	.word	0x20001428

08002f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <HAL_GetTick+0x10>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	20001428 	.word	0x20001428

08002f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f94:	f7ff fff0 	bl	8002f78 <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	d005      	beq.n	8002fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_Delay+0x40>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	001a      	movs	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	189b      	adds	r3, r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	f7ff ffe0 	bl	8002f78 <HAL_GetTick>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d8f7      	bhi.n	8002fb4 <HAL_Delay+0x28>
  {
  }
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b004      	add	sp, #16
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000018 	.word	0x20000018

08002fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	1dfb      	adds	r3, r7, #7
 8002fdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	1dfb      	adds	r3, r7, #7
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fe4:	d828      	bhi.n	8003038 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fe6:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <__NVIC_SetPriority+0xd4>)
 8002fe8:	1dfb      	adds	r3, r7, #7
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	33c0      	adds	r3, #192	; 0xc0
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	589b      	ldr	r3, [r3, r2]
 8002ff6:	1dfa      	adds	r2, r7, #7
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	400a      	ands	r2, r1
 8003000:	00d2      	lsls	r2, r2, #3
 8003002:	21ff      	movs	r1, #255	; 0xff
 8003004:	4091      	lsls	r1, r2
 8003006:	000a      	movs	r2, r1
 8003008:	43d2      	mvns	r2, r2
 800300a:	401a      	ands	r2, r3
 800300c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	22ff      	movs	r2, #255	; 0xff
 8003014:	401a      	ands	r2, r3
 8003016:	1dfb      	adds	r3, r7, #7
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	0018      	movs	r0, r3
 800301c:	2303      	movs	r3, #3
 800301e:	4003      	ands	r3, r0
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003024:	481f      	ldr	r0, [pc, #124]	; (80030a4 <__NVIC_SetPriority+0xd4>)
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b25b      	sxtb	r3, r3
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	430a      	orrs	r2, r1
 8003030:	33c0      	adds	r3, #192	; 0xc0
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003036:	e031      	b.n	800309c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <__NVIC_SetPriority+0xd8>)
 800303a:	1dfb      	adds	r3, r7, #7
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	0019      	movs	r1, r3
 8003040:	230f      	movs	r3, #15
 8003042:	400b      	ands	r3, r1
 8003044:	3b08      	subs	r3, #8
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3306      	adds	r3, #6
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	18d3      	adds	r3, r2, r3
 800304e:	3304      	adds	r3, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1dfa      	adds	r2, r7, #7
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	0011      	movs	r1, r2
 8003058:	2203      	movs	r2, #3
 800305a:	400a      	ands	r2, r1
 800305c:	00d2      	lsls	r2, r2, #3
 800305e:	21ff      	movs	r1, #255	; 0xff
 8003060:	4091      	lsls	r1, r2
 8003062:	000a      	movs	r2, r1
 8003064:	43d2      	mvns	r2, r2
 8003066:	401a      	ands	r2, r3
 8003068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	22ff      	movs	r2, #255	; 0xff
 8003070:	401a      	ands	r2, r3
 8003072:	1dfb      	adds	r3, r7, #7
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	0018      	movs	r0, r3
 8003078:	2303      	movs	r3, #3
 800307a:	4003      	ands	r3, r0
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003080:	4809      	ldr	r0, [pc, #36]	; (80030a8 <__NVIC_SetPriority+0xd8>)
 8003082:	1dfb      	adds	r3, r7, #7
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	001c      	movs	r4, r3
 8003088:	230f      	movs	r3, #15
 800308a:	4023      	ands	r3, r4
 800308c:	3b08      	subs	r3, #8
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	430a      	orrs	r2, r1
 8003092:	3306      	adds	r3, #6
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	18c3      	adds	r3, r0, r3
 8003098:	3304      	adds	r3, #4
 800309a:	601a      	str	r2, [r3, #0]
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b003      	add	sp, #12
 80030a2:	bd90      	pop	{r4, r7, pc}
 80030a4:	e000e100 	.word	0xe000e100
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <SysTick_Config+0x40>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030be:	2301      	movs	r3, #1
 80030c0:	e010      	b.n	80030e4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <SysTick_Config+0x44>)
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	3a01      	subs	r2, #1
 80030c8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ca:	2301      	movs	r3, #1
 80030cc:	425b      	negs	r3, r3
 80030ce:	2103      	movs	r1, #3
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff ff7d 	bl	8002fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <SysTick_Config+0x44>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <SysTick_Config+0x44>)
 80030de:	2207      	movs	r2, #7
 80030e0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	00ffffff 	.word	0x00ffffff
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	210f      	movs	r1, #15
 8003100:	187b      	adds	r3, r7, r1
 8003102:	1c02      	adds	r2, r0, #0
 8003104:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	187b      	adds	r3, r7, r1
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff ff5d 	bl	8002fd0 <__NVIC_SetPriority>
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b004      	add	sp, #16
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff ffbf 	bl	80030ac <SysTick_Config>
 800312e:	0003      	movs	r3, r0
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800314e:	e14f      	b.n	80033f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2101      	movs	r1, #1
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4091      	lsls	r1, r2
 800315a:	000a      	movs	r2, r1
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d100      	bne.n	8003168 <HAL_GPIO_Init+0x30>
 8003166:	e140      	b.n	80033ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d00b      	beq.n	8003188 <HAL_GPIO_Init+0x50>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b02      	cmp	r3, #2
 8003176:	d007      	beq.n	8003188 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800317c:	2b11      	cmp	r3, #17
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b12      	cmp	r3, #18
 8003186:	d130      	bne.n	80031ea <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	409a      	lsls	r2, r3
 8003196:	0013      	movs	r3, r2
 8003198:	43da      	mvns	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	409a      	lsls	r2, r3
 80031aa:	0013      	movs	r3, r2
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031be:	2201      	movs	r2, #1
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	43da      	mvns	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	2201      	movs	r2, #1
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	409a      	lsls	r2, r3
 80031f8:	0013      	movs	r3, r2
 80031fa:	43da      	mvns	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	0013      	movs	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0xf2>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b12      	cmp	r3, #18
 8003228:	d123      	bne.n	8003272 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	08da      	lsrs	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3208      	adds	r2, #8
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	58d3      	ldr	r3, [r2, r3]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2207      	movs	r2, #7
 800323c:	4013      	ands	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	409a      	lsls	r2, r3
 8003244:	0013      	movs	r3, r2
 8003246:	43da      	mvns	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2107      	movs	r1, #7
 8003256:	400b      	ands	r3, r1
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	409a      	lsls	r2, r3
 800325c:	0013      	movs	r3, r2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	6939      	ldr	r1, [r7, #16]
 8003270:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	409a      	lsls	r2, r3
 8003280:	0013      	movs	r3, r2
 8003282:	43da      	mvns	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2203      	movs	r2, #3
 8003290:	401a      	ands	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	409a      	lsls	r2, r3
 8003298:	0013      	movs	r3, r2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	055b      	lsls	r3, r3, #21
 80032ae:	4013      	ands	r3, r2
 80032b0:	d100      	bne.n	80032b4 <HAL_GPIO_Init+0x17c>
 80032b2:	e09a      	b.n	80033ea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b4:	4b54      	ldr	r3, [pc, #336]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 80032b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_GPIO_Init+0x2d0>)
 80032ba:	2101      	movs	r1, #1
 80032bc:	430a      	orrs	r2, r1
 80032be:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c0:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_GPIO_Init+0x2d4>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3302      	adds	r3, #2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	589b      	ldr	r3, [r3, r2]
 80032cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2203      	movs	r2, #3
 80032d2:	4013      	ands	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	220f      	movs	r2, #15
 80032d8:	409a      	lsls	r2, r3
 80032da:	0013      	movs	r3, r2
 80032dc:	43da      	mvns	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	23a0      	movs	r3, #160	; 0xa0
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_Init+0x1ea>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a47      	ldr	r2, [pc, #284]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0x1e6>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a46      	ldr	r2, [pc, #280]	; (8003414 <HAL_GPIO_Init+0x2dc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_Init+0x1e2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a45      	ldr	r2, [pc, #276]	; (8003418 <HAL_GPIO_Init+0x2e0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_Init+0x1de>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a44      	ldr	r2, [pc, #272]	; (800341c <HAL_GPIO_Init+0x2e4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_Init+0x1da>
 800330e:	2305      	movs	r3, #5
 8003310:	e008      	b.n	8003324 <HAL_GPIO_Init+0x1ec>
 8003312:	2306      	movs	r3, #6
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x1ec>
 8003316:	2303      	movs	r3, #3
 8003318:	e004      	b.n	8003324 <HAL_GPIO_Init+0x1ec>
 800331a:	2302      	movs	r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_Init+0x1ec>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_GPIO_Init+0x1ec>
 8003322:	2300      	movs	r3, #0
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	2103      	movs	r1, #3
 8003328:	400a      	ands	r2, r1
 800332a:	0092      	lsls	r2, r2, #2
 800332c:	4093      	lsls	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003334:	4935      	ldr	r1, [pc, #212]	; (800340c <HAL_GPIO_Init+0x2d4>)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003342:	4b37      	ldr	r3, [pc, #220]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	43da      	mvns	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	025b      	lsls	r3, r3, #9
 800335a:	4013      	ands	r3, r2
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003366:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	43da      	mvns	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	029b      	lsls	r3, r3, #10
 8003384:	4013      	ands	r3, r2
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43da      	mvns	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	035b      	lsls	r3, r3, #13
 80033ae:	4013      	ands	r3, r2
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033ba:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	039b      	lsls	r3, r3, #14
 80033d8:	4013      	ands	r3, r2
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3301      	adds	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	40da      	lsrs	r2, r3
 80033f8:	1e13      	subs	r3, r2, #0
 80033fa:	d000      	beq.n	80033fe <HAL_GPIO_Init+0x2c6>
 80033fc:	e6a8      	b.n	8003150 <HAL_GPIO_Init+0x18>
  }
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b006      	add	sp, #24
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	40021000 	.word	0x40021000
 800340c:	40010000 	.word	0x40010000
 8003410:	50000400 	.word	0x50000400
 8003414:	50000800 	.word	0x50000800
 8003418:	50000c00 	.word	0x50000c00
 800341c:	50001c00 	.word	0x50001c00
 8003420:	40010400 	.word	0x40010400

08003424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e082      	b.n	800353c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2241      	movs	r2, #65	; 0x41
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff fc6f 	bl	8002d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2241      	movs	r2, #65	; 0x41
 8003456:	2124      	movs	r1, #36	; 0x24
 8003458:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	438a      	bics	r2, r1
 8003468:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4934      	ldr	r1, [pc, #208]	; (8003544 <HAL_I2C_Init+0x120>)
 8003474:	400a      	ands	r2, r1
 8003476:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4931      	ldr	r1, [pc, #196]	; (8003548 <HAL_I2C_Init+0x124>)
 8003484:	400a      	ands	r2, r1
 8003486:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d108      	bne.n	80034a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	0209      	lsls	r1, r1, #8
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e007      	b.n	80034b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2184      	movs	r1, #132	; 0x84
 80034ac:	0209      	lsls	r1, r1, #8
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d104      	bne.n	80034c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	491f      	ldr	r1, [pc, #124]	; (800354c <HAL_I2C_Init+0x128>)
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	491a      	ldr	r1, [pc, #104]	; (8003548 <HAL_I2C_Init+0x124>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	0011      	movs	r1, r2
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	021a      	lsls	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69d9      	ldr	r1, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2101      	movs	r1, #1
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2241      	movs	r2, #65	; 0x41
 8003528:	2120      	movs	r1, #32
 800352a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2242      	movs	r2, #66	; 0x42
 8003536:	2100      	movs	r1, #0
 8003538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}
 8003544:	f0ffffff 	.word	0xf0ffffff
 8003548:	ffff7fff 	.word	0xffff7fff
 800354c:	02008000 	.word	0x02008000

08003550 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b089      	sub	sp, #36	; 0x24
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	000c      	movs	r4, r1
 800355a:	0010      	movs	r0, r2
 800355c:	0019      	movs	r1, r3
 800355e:	230a      	movs	r3, #10
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	1c22      	adds	r2, r4, #0
 8003564:	801a      	strh	r2, [r3, #0]
 8003566:	2308      	movs	r3, #8
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	1c02      	adds	r2, r0, #0
 800356c:	801a      	strh	r2, [r3, #0]
 800356e:	1dbb      	adds	r3, r7, #6
 8003570:	1c0a      	adds	r2, r1, #0
 8003572:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2241      	movs	r2, #65	; 0x41
 8003578:	5c9b      	ldrb	r3, [r3, r2]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b20      	cmp	r3, #32
 800357e:	d000      	beq.n	8003582 <HAL_I2C_Mem_Write+0x32>
 8003580:	e10c      	b.n	800379c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_I2C_Mem_Write+0x42>
 8003588:	232c      	movs	r3, #44	; 0x2c
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0ff      	b.n	800379e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	5c9b      	ldrb	r3, [r3, r2]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_I2C_Mem_Write+0x5c>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0f8      	b.n	800379e <HAL_I2C_Mem_Write+0x24e>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	2101      	movs	r1, #1
 80035b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035b4:	f7ff fce0 	bl	8002f78 <HAL_GetTick>
 80035b8:	0003      	movs	r3, r0
 80035ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	0219      	lsls	r1, r3, #8
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2319      	movs	r3, #25
 80035c8:	2201      	movs	r2, #1
 80035ca:	f000 fb0b 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0e3      	b.n	800379e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2241      	movs	r2, #65	; 0x41
 80035da:	2121      	movs	r1, #33	; 0x21
 80035dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2242      	movs	r2, #66	; 0x42
 80035e2:	2140      	movs	r1, #64	; 0x40
 80035e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	222c      	movs	r2, #44	; 0x2c
 80035f6:	18ba      	adds	r2, r7, r2
 80035f8:	8812      	ldrh	r2, [r2, #0]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003602:	1dbb      	adds	r3, r7, #6
 8003604:	881c      	ldrh	r4, [r3, #0]
 8003606:	2308      	movs	r3, #8
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	230a      	movs	r3, #10
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	8819      	ldrh	r1, [r3, #0]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	0023      	movs	r3, r4
 800361e:	f000 f9f9 	bl	8003a14 <I2C_RequestMemoryWrite>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d005      	beq.n	8003632 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2240      	movs	r2, #64	; 0x40
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0b5      	b.n	800379e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	2bff      	cmp	r3, #255	; 0xff
 800363a:	d911      	bls.n	8003660 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	22ff      	movs	r2, #255	; 0xff
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	b2da      	uxtb	r2, r3
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	045c      	lsls	r4, r3, #17
 800364c:	230a      	movs	r3, #10
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	8819      	ldrh	r1, [r3, #0]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	2300      	movs	r3, #0
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	0023      	movs	r3, r4
 800365a:	f000 fbe3 	bl	8003e24 <I2C_TransferConfig>
 800365e:	e012      	b.n	8003686 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	b2da      	uxtb	r2, r3
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	049c      	lsls	r4, r3, #18
 8003674:	230a      	movs	r3, #10
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	8819      	ldrh	r1, [r3, #0]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	0023      	movs	r3, r4
 8003682:	f000 fbcf 	bl	8003e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	0018      	movs	r0, r3
 800368e:	f000 fae8 	bl	8003c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e081      	b.n	800379e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d03a      	beq.n	800374a <HAL_I2C_Mem_Write+0x1fa>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d136      	bne.n	800374a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	0013      	movs	r3, r2
 80036e6:	2200      	movs	r2, #0
 80036e8:	2180      	movs	r1, #128	; 0x80
 80036ea:	f000 fa7b 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80036ee:	1e03      	subs	r3, r0, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e053      	b.n	800379e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2bff      	cmp	r3, #255	; 0xff
 80036fe:	d911      	bls.n	8003724 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	b2da      	uxtb	r2, r3
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	045c      	lsls	r4, r3, #17
 8003710:	230a      	movs	r3, #10
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	8819      	ldrh	r1, [r3, #0]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	2300      	movs	r3, #0
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	0023      	movs	r3, r4
 800371e:	f000 fb81 	bl	8003e24 <I2C_TransferConfig>
 8003722:	e012      	b.n	800374a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	b2da      	uxtb	r2, r3
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	049c      	lsls	r4, r3, #18
 8003738:	230a      	movs	r3, #10
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	8819      	ldrh	r1, [r3, #0]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	0023      	movs	r3, r4
 8003746:	f000 fb6d 	bl	8003e24 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d198      	bne.n	8003686 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	0018      	movs	r0, r3
 800375c:	f000 fac0 	bl	8003ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003760:	1e03      	subs	r3, r0, #0
 8003762:	d001      	beq.n	8003768 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e01a      	b.n	800379e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2220      	movs	r2, #32
 800376e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_I2C_Mem_Write+0x258>)
 800377c:	400a      	ands	r2, r1
 800377e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2241      	movs	r2, #65	; 0x41
 8003784:	2120      	movs	r1, #32
 8003786:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2242      	movs	r2, #66	; 0x42
 800378c:	2100      	movs	r1, #0
 800378e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2240      	movs	r2, #64	; 0x40
 8003794:	2100      	movs	r1, #0
 8003796:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b007      	add	sp, #28
 80037a4:	bd90      	pop	{r4, r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	fe00e800 	.word	0xfe00e800

080037ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	000c      	movs	r4, r1
 80037b6:	0010      	movs	r0, r2
 80037b8:	0019      	movs	r1, r3
 80037ba:	230a      	movs	r3, #10
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	1c22      	adds	r2, r4, #0
 80037c0:	801a      	strh	r2, [r3, #0]
 80037c2:	2308      	movs	r3, #8
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	1c02      	adds	r2, r0, #0
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	1c0a      	adds	r2, r1, #0
 80037ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2241      	movs	r2, #65	; 0x41
 80037d4:	5c9b      	ldrb	r3, [r3, r2]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d000      	beq.n	80037de <HAL_I2C_Mem_Read+0x32>
 80037dc:	e110      	b.n	8003a00 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <HAL_I2C_Mem_Read+0x42>
 80037e4:	232c      	movs	r3, #44	; 0x2c
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e103      	b.n	8003a02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	5c9b      	ldrb	r3, [r3, r2]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_I2C_Mem_Read+0x5c>
 8003804:	2302      	movs	r3, #2
 8003806:	e0fc      	b.n	8003a02 <HAL_I2C_Mem_Read+0x256>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003810:	f7ff fbb2 	bl	8002f78 <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	0219      	lsls	r1, r3, #8
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2319      	movs	r3, #25
 8003824:	2201      	movs	r2, #1
 8003826:	f000 f9dd 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0e7      	b.n	8003a02 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2241      	movs	r2, #65	; 0x41
 8003836:	2122      	movs	r1, #34	; 0x22
 8003838:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2242      	movs	r2, #66	; 0x42
 800383e:	2140      	movs	r1, #64	; 0x40
 8003840:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	222c      	movs	r2, #44	; 0x2c
 8003852:	18ba      	adds	r2, r7, r2
 8003854:	8812      	ldrh	r2, [r2, #0]
 8003856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800385e:	1dbb      	adds	r3, r7, #6
 8003860:	881c      	ldrh	r4, [r3, #0]
 8003862:	2308      	movs	r3, #8
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	881a      	ldrh	r2, [r3, #0]
 8003868:	230a      	movs	r3, #10
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	8819      	ldrh	r1, [r3, #0]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	0023      	movs	r3, r4
 800387a:	f000 f92f 	bl	8003adc <I2C_RequestMemoryRead>
 800387e:	1e03      	subs	r3, r0, #0
 8003880:	d005      	beq.n	800388e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2240      	movs	r2, #64	; 0x40
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0b9      	b.n	8003a02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2bff      	cmp	r3, #255	; 0xff
 8003896:	d911      	bls.n	80038bc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	22ff      	movs	r2, #255	; 0xff
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	045c      	lsls	r4, r3, #17
 80038a8:	230a      	movs	r3, #10
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	8819      	ldrh	r1, [r3, #0]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	4b56      	ldr	r3, [pc, #344]	; (8003a0c <HAL_I2C_Mem_Read+0x260>)
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	0023      	movs	r3, r4
 80038b6:	f000 fab5 	bl	8003e24 <I2C_TransferConfig>
 80038ba:	e012      	b.n	80038e2 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	049c      	lsls	r4, r3, #18
 80038d0:	230a      	movs	r3, #10
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	8819      	ldrh	r1, [r3, #0]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_I2C_Mem_Read+0x260>)
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	0023      	movs	r3, r4
 80038de:	f000 faa1 	bl	8003e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	0013      	movs	r3, r2
 80038ec:	2200      	movs	r2, #0
 80038ee:	2104      	movs	r1, #4
 80038f0:	f000 f978 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e082      	b.n	8003a02 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03a      	beq.n	80039ae <HAL_I2C_Mem_Read+0x202>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	d136      	bne.n	80039ae <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	0013      	movs	r3, r2
 800394a:	2200      	movs	r2, #0
 800394c:	2180      	movs	r1, #128	; 0x80
 800394e:	f000 f949 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e053      	b.n	8003a02 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2bff      	cmp	r3, #255	; 0xff
 8003962:	d911      	bls.n	8003988 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	045c      	lsls	r4, r3, #17
 8003974:	230a      	movs	r3, #10
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	8819      	ldrh	r1, [r3, #0]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	2300      	movs	r3, #0
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	0023      	movs	r3, r4
 8003982:	f000 fa4f 	bl	8003e24 <I2C_TransferConfig>
 8003986:	e012      	b.n	80039ae <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003996:	b2da      	uxtb	r2, r3
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	049c      	lsls	r4, r3, #18
 800399c:	230a      	movs	r3, #10
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	8819      	ldrh	r1, [r3, #0]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	2300      	movs	r3, #0
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	0023      	movs	r3, r4
 80039aa:	f000 fa3b 	bl	8003e24 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d194      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 f98e 	bl	8003ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e01a      	b.n	8003a02 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2220      	movs	r2, #32
 80039d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	490c      	ldr	r1, [pc, #48]	; (8003a10 <HAL_I2C_Mem_Read+0x264>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2241      	movs	r2, #65	; 0x41
 80039e8:	2120      	movs	r1, #32
 80039ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2242      	movs	r2, #66	; 0x42
 80039f0:	2100      	movs	r1, #0
 80039f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2240      	movs	r2, #64	; 0x40
 80039f8:	2100      	movs	r1, #0
 80039fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b007      	add	sp, #28
 8003a08:	bd90      	pop	{r4, r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	80002400 	.word	0x80002400
 8003a10:	fe00e800 	.word	0xfe00e800

08003a14 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	000c      	movs	r4, r1
 8003a1e:	0010      	movs	r0, r2
 8003a20:	0019      	movs	r1, r3
 8003a22:	250a      	movs	r5, #10
 8003a24:	197b      	adds	r3, r7, r5
 8003a26:	1c22      	adds	r2, r4, #0
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	1c02      	adds	r2, r0, #0
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	1dbb      	adds	r3, r7, #6
 8003a34:	1c0a      	adds	r2, r1, #0
 8003a36:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a38:	1dbb      	adds	r3, r7, #6
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	045c      	lsls	r4, r3, #17
 8003a42:	197b      	adds	r3, r7, r5
 8003a44:	8819      	ldrh	r1, [r3, #0]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <I2C_RequestMemoryWrite+0xc4>)
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	0023      	movs	r3, r4
 8003a4e:	f000 f9e9 	bl	8003e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	6a39      	ldr	r1, [r7, #32]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 f902 	bl	8003c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e033      	b.n	8003ace <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a66:	1dbb      	adds	r3, r7, #6
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6e:	2308      	movs	r3, #8
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a7c:	e019      	b.n	8003ab2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a7e:	2308      	movs	r3, #8
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	6a39      	ldr	r1, [r7, #32]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 f8e3 	bl	8003c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a9c:	1e03      	subs	r3, r0, #0
 8003a9e:	d001      	beq.n	8003aa4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e014      	b.n	8003ace <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	0013      	movs	r3, r2
 8003abc:	2200      	movs	r2, #0
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	f000 f890 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d001      	beq.n	8003acc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b004      	add	sp, #16
 8003ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	80002000 	.word	0x80002000

08003adc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b5b0      	push	{r4, r5, r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	000c      	movs	r4, r1
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	250a      	movs	r5, #10
 8003aec:	197b      	adds	r3, r7, r5
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	2308      	movs	r3, #8
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b00:	1dbb      	adds	r3, r7, #6
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	197b      	adds	r3, r7, r5
 8003b08:	8819      	ldrh	r1, [r3, #0]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <I2C_RequestMemoryRead+0xc0>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	f000 f987 	bl	8003e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6a39      	ldr	r1, [r7, #32]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 f8a0 	bl	8003c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b22:	1e03      	subs	r3, r0, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e033      	b.n	8003b92 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b2a:	1dbb      	adds	r3, r7, #6
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b32:	2308      	movs	r3, #8
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b40:	e019      	b.n	8003b76 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b42:	2308      	movs	r3, #8
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f881 	bl	8003c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d001      	beq.n	8003b68 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e014      	b.n	8003b92 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b68:	2308      	movs	r3, #8
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a3a      	ldr	r2, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	0013      	movs	r3, r2
 8003b80:	2200      	movs	r2, #0
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	f000 f82e 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b004      	add	sp, #16
 8003b98:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	80002000 	.word	0x80002000

08003ba0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d103      	bne.n	8003bbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d007      	beq.n	8003bdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	619a      	str	r2, [r3, #24]
  }
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	1dfb      	adds	r3, r7, #7
 8003bf2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf4:	e021      	b.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	d01e      	beq.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfc:	f7ff f9bc 	bl	8002f78 <HAL_GetTick>
 8003c00:	0002      	movs	r2, r0
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d302      	bcc.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d113      	bne.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	2220      	movs	r2, #32
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2241      	movs	r2, #65	; 0x41
 8003c22:	2120      	movs	r1, #32
 8003c24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2242      	movs	r2, #66	; 0x42
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00f      	b.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	425a      	negs	r2, r3
 8003c4a:	4153      	adcs	r3, r2
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	001a      	movs	r2, r3
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0ce      	beq.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b004      	add	sp, #16
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c6e:	e02b      	b.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 f86e 	bl	8003d58 <I2C_IsAcknowledgeFailed>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e029      	b.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3301      	adds	r3, #1
 8003c88:	d01e      	beq.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7ff f975 	bl	8002f78 <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d113      	bne.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2241      	movs	r2, #65	; 0x41
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2242      	movs	r2, #66	; 0x42
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e007      	b.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d1cc      	bne.n	8003c70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b004      	add	sp, #16
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cec:	e028      	b.n	8003d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 f82f 	bl	8003d58 <I2C_IsAcknowledgeFailed>
 8003cfa:	1e03      	subs	r3, r0, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e026      	b.n	8003d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7ff f939 	bl	8002f78 <HAL_GetTick>
 8003d06:	0002      	movs	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d113      	bne.n	8003d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2241      	movs	r2, #65	; 0x41
 8003d28:	2120      	movs	r1, #32
 8003d2a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2242      	movs	r2, #66	; 0x42
 8003d30:	2100      	movs	r1, #0
 8003d32:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2240      	movs	r2, #64	; 0x40
 8003d38:	2100      	movs	r1, #0
 8003d3a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e007      	b.n	8003d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2220      	movs	r2, #32
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d1cf      	bne.n	8003cee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b004      	add	sp, #16
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d151      	bne.n	8003e16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d72:	e021      	b.n	8003db8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	3301      	adds	r3, #1
 8003d78:	d01e      	beq.n	8003db8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7ff f8fd 	bl	8002f78 <HAL_GetTick>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_IsAcknowledgeFailed+0x38>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d113      	bne.n	8003db8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	2220      	movs	r2, #32
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2241      	movs	r2, #65	; 0x41
 8003da0:	2120      	movs	r1, #32
 8003da2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2242      	movs	r2, #66	; 0x42
 8003da8:	2100      	movs	r1, #0
 8003daa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2240      	movs	r2, #64	; 0x40
 8003db0:	2100      	movs	r1, #0
 8003db2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e02f      	b.n	8003e18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d1d6      	bne.n	8003d74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2210      	movs	r2, #16
 8003dcc:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff fee1 	bl	8003ba0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	490d      	ldr	r1, [pc, #52]	; (8003e20 <I2C_IsAcknowledgeFailed+0xc8>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	2204      	movs	r2, #4
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2241      	movs	r2, #65	; 0x41
 8003dfe:	2120      	movs	r1, #32
 8003e00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2242      	movs	r2, #66	; 0x42
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	fe00e800 	.word	0xfe00e800

08003e24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	0008      	movs	r0, r1
 8003e2e:	0011      	movs	r1, r2
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	240a      	movs	r4, #10
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	1c02      	adds	r2, r0, #0
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	2009      	movs	r0, #9
 8003e3c:	183b      	adds	r3, r7, r0
 8003e3e:	1c0a      	adds	r2, r1, #0
 8003e40:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	6a3a      	ldr	r2, [r7, #32]
 8003e4a:	0d51      	lsrs	r1, r2, #21
 8003e4c:	2280      	movs	r2, #128	; 0x80
 8003e4e:	00d2      	lsls	r2, r2, #3
 8003e50:	400a      	ands	r2, r1
 8003e52:	490e      	ldr	r1, [pc, #56]	; (8003e8c <I2C_TransferConfig+0x68>)
 8003e54:	430a      	orrs	r2, r1
 8003e56:	43d2      	mvns	r2, r2
 8003e58:	401a      	ands	r2, r3
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	193b      	adds	r3, r7, r4
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	059b      	lsls	r3, r3, #22
 8003e62:	0d9a      	lsrs	r2, r3, #22
 8003e64:	183b      	adds	r3, r7, r0
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	0418      	lsls	r0, r3, #16
 8003e6a:	23ff      	movs	r3, #255	; 0xff
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	4003      	ands	r3, r0
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b005      	add	sp, #20
 8003e88:	bd90      	pop	{r4, r7, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	03ff63ff 	.word	0x03ff63ff

08003e90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2241      	movs	r2, #65	; 0x41
 8003e9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d138      	bne.n	8003f18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2240      	movs	r2, #64	; 0x40
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e032      	b.n	8003f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2240      	movs	r2, #64	; 0x40
 8003eb8:	2101      	movs	r1, #1
 8003eba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2241      	movs	r2, #65	; 0x41
 8003ec0:	2124      	movs	r1, #36	; 0x24
 8003ec2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2101      	movs	r1, #1
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4911      	ldr	r1, [pc, #68]	; (8003f24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6819      	ldr	r1, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2101      	movs	r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2241      	movs	r2, #65	; 0x41
 8003f08:	2120      	movs	r1, #32
 8003f0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b002      	add	sp, #8
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	ffffefff 	.word	0xffffefff

08003f28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2241      	movs	r2, #65	; 0x41
 8003f36:	5c9b      	ldrb	r3, [r3, r2]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d139      	bne.n	8003fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2240      	movs	r2, #64	; 0x40
 8003f42:	5c9b      	ldrb	r3, [r3, r2]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e033      	b.n	8003fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2240      	movs	r2, #64	; 0x40
 8003f50:	2101      	movs	r1, #1
 8003f52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2241      	movs	r2, #65	; 0x41
 8003f58:	2124      	movs	r1, #36	; 0x24
 8003f5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2101      	movs	r1, #1
 8003f68:	438a      	bics	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2101      	movs	r1, #1
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2241      	movs	r2, #65	; 0x41
 8003fa2:	2120      	movs	r1, #32
 8003fa4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2240      	movs	r2, #64	; 0x40
 8003faa:	2100      	movs	r1, #0
 8003fac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b004      	add	sp, #16
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	fffff0ff 	.word	0xfffff0ff

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b5b0      	push	{r4, r5, r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f000 fbb4 	bl	800473c <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd4:	4bc3      	ldr	r3, [pc, #780]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	220c      	movs	r2, #12
 8003fda:	4013      	ands	r3, r2
 8003fdc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fde:	4bc1      	ldr	r3, [pc, #772]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	025b      	lsls	r3, r3, #9
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x36>
 8003ff4:	e07e      	b.n	80040f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d007      	beq.n	800400c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d112      	bne.n	8004028 <HAL_RCC_OscConfig+0x68>
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	025b      	lsls	r3, r3, #9
 8004008:	429a      	cmp	r2, r3
 800400a:	d10d      	bne.n	8004028 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	4bb5      	ldr	r3, [pc, #724]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	029b      	lsls	r3, r3, #10
 8004014:	4013      	ands	r3, r2
 8004016:	d100      	bne.n	800401a <HAL_RCC_OscConfig+0x5a>
 8004018:	e06b      	b.n	80040f2 <HAL_RCC_OscConfig+0x132>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d167      	bne.n	80040f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f000 fb8a 	bl	800473c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	025b      	lsls	r3, r3, #9
 8004030:	429a      	cmp	r2, r3
 8004032:	d107      	bne.n	8004044 <HAL_RCC_OscConfig+0x84>
 8004034:	4bab      	ldr	r3, [pc, #684]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4baa      	ldr	r3, [pc, #680]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800403a:	2180      	movs	r1, #128	; 0x80
 800403c:	0249      	lsls	r1, r1, #9
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e027      	b.n	8004094 <HAL_RCC_OscConfig+0xd4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	23a0      	movs	r3, #160	; 0xa0
 800404a:	02db      	lsls	r3, r3, #11
 800404c:	429a      	cmp	r2, r3
 800404e:	d10e      	bne.n	800406e <HAL_RCC_OscConfig+0xae>
 8004050:	4ba4      	ldr	r3, [pc, #656]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4ba3      	ldr	r3, [pc, #652]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	02c9      	lsls	r1, r1, #11
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	4ba1      	ldr	r3, [pc, #644]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4ba0      	ldr	r3, [pc, #640]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004064:	2180      	movs	r1, #128	; 0x80
 8004066:	0249      	lsls	r1, r1, #9
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e012      	b.n	8004094 <HAL_RCC_OscConfig+0xd4>
 800406e:	4b9d      	ldr	r3, [pc, #628]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b9c      	ldr	r3, [pc, #624]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004074:	499c      	ldr	r1, [pc, #624]	; (80042e8 <HAL_RCC_OscConfig+0x328>)
 8004076:	400a      	ands	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	4b9a      	ldr	r3, [pc, #616]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	4013      	ands	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4b96      	ldr	r3, [pc, #600]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b95      	ldr	r3, [pc, #596]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800408e:	4997      	ldr	r1, [pc, #604]	; (80042ec <HAL_RCC_OscConfig+0x32c>)
 8004090:	400a      	ands	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fe ff6c 	bl	8002f78 <HAL_GetTick>
 80040a0:	0003      	movs	r3, r0
 80040a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040a4:	e009      	b.n	80040ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a6:	f7fe ff67 	bl	8002f78 <HAL_GetTick>
 80040aa:	0002      	movs	r2, r0
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b64      	cmp	r3, #100	; 0x64
 80040b2:	d902      	bls.n	80040ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	f000 fb41 	bl	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040ba:	4b8a      	ldr	r3, [pc, #552]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	029b      	lsls	r3, r3, #10
 80040c2:	4013      	ands	r3, r2
 80040c4:	d0ef      	beq.n	80040a6 <HAL_RCC_OscConfig+0xe6>
 80040c6:	e015      	b.n	80040f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fe ff56 	bl	8002f78 <HAL_GetTick>
 80040cc:	0003      	movs	r3, r0
 80040ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d2:	f7fe ff51 	bl	8002f78 <HAL_GetTick>
 80040d6:	0002      	movs	r2, r0
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b64      	cmp	r3, #100	; 0x64
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e32b      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040e4:	4b7f      	ldr	r3, [pc, #508]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	029b      	lsls	r3, r3, #10
 80040ec:	4013      	ands	r3, r2
 80040ee:	d1f0      	bne.n	80040d2 <HAL_RCC_OscConfig+0x112>
 80040f0:	e000      	b.n	80040f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2202      	movs	r2, #2
 80040fa:	4013      	ands	r3, r2
 80040fc:	d100      	bne.n	8004100 <HAL_RCC_OscConfig+0x140>
 80040fe:	e08c      	b.n	800421a <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d005      	beq.n	8004118 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d13f      	bne.n	8004192 <HAL_RCC_OscConfig+0x1d2>
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d13c      	bne.n	8004192 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004118:	4b72      	ldr	r3, [pc, #456]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2204      	movs	r2, #4
 800411e:	4013      	ands	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_RCC_OscConfig+0x16c>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e307      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412c:	4b6d      	ldr	r3, [pc, #436]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a6f      	ldr	r2, [pc, #444]	; (80042f0 <HAL_RCC_OscConfig+0x330>)
 8004132:	4013      	ands	r3, r2
 8004134:	0019      	movs	r1, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	021a      	lsls	r2, r3, #8
 800413c:	4b69      	ldr	r3, [pc, #420]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004142:	4b68      	ldr	r3, [pc, #416]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2209      	movs	r2, #9
 8004148:	4393      	bics	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	4b65      	ldr	r3, [pc, #404]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004154:	f000 fc44 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8004158:	0001      	movs	r1, r0
 800415a:	4b62      	ldr	r3, [pc, #392]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	220f      	movs	r2, #15
 8004162:	4013      	ands	r3, r2
 8004164:	4a63      	ldr	r2, [pc, #396]	; (80042f4 <HAL_RCC_OscConfig+0x334>)
 8004166:	5cd3      	ldrb	r3, [r2, r3]
 8004168:	000a      	movs	r2, r1
 800416a:	40da      	lsrs	r2, r3
 800416c:	4b62      	ldr	r3, [pc, #392]	; (80042f8 <HAL_RCC_OscConfig+0x338>)
 800416e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004170:	4b62      	ldr	r3, [pc, #392]	; (80042fc <HAL_RCC_OscConfig+0x33c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2513      	movs	r5, #19
 8004176:	197c      	adds	r4, r7, r5
 8004178:	0018      	movs	r0, r3
 800417a:	f7fe feb7 	bl	8002eec <HAL_InitTick>
 800417e:	0003      	movs	r3, r0
 8004180:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004182:	197b      	adds	r3, r7, r5
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d047      	beq.n	800421a <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 800418a:	2313      	movs	r3, #19
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	e2d4      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d027      	beq.n	80041e8 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004198:	4b52      	ldr	r3, [pc, #328]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2209      	movs	r2, #9
 800419e:	4393      	bics	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	4b50      	ldr	r3, [pc, #320]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fe fee5 	bl	8002f78 <HAL_GetTick>
 80041ae:	0003      	movs	r3, r0
 80041b0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b4:	f7fe fee0 	bl	8002f78 <HAL_GetTick>
 80041b8:	0002      	movs	r2, r0
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e2ba      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2204      	movs	r2, #4
 80041cc:	4013      	ands	r3, r2
 80041ce:	d0f1      	beq.n	80041b4 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a46      	ldr	r2, [pc, #280]	; (80042f0 <HAL_RCC_OscConfig+0x330>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	4b40      	ldr	r3, [pc, #256]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	e018      	b.n	800421a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e8:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fec0 	bl	8002f78 <HAL_GetTick>
 80041f8:	0003      	movs	r3, r0
 80041fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fe febb 	bl	8002f78 <HAL_GetTick>
 8004202:	0002      	movs	r2, r0
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e295      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2204      	movs	r2, #4
 8004216:	4013      	ands	r3, r2
 8004218:	d1f1      	bne.n	80041fe <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2210      	movs	r2, #16
 8004220:	4013      	ands	r3, r2
 8004222:	d100      	bne.n	8004226 <HAL_RCC_OscConfig+0x266>
 8004224:	e0a3      	b.n	800436e <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d141      	bne.n	80042b0 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800422c:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4013      	ands	r3, r2
 8004236:	d005      	beq.n	8004244 <HAL_RCC_OscConfig+0x284>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e27b      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a2d      	ldr	r2, [pc, #180]	; (8004300 <HAL_RCC_OscConfig+0x340>)
 800424a:	4013      	ands	r3, r2
 800424c:	0019      	movs	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004258:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	0a19      	lsrs	r1, r3, #8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	061a      	lsls	r2, r3, #24
 8004266:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	0b5b      	lsrs	r3, r3, #13
 8004272:	3301      	adds	r3, #1
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	0212      	lsls	r2, r2, #8
 8004278:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	210f      	movs	r1, #15
 8004282:	400b      	ands	r3, r1
 8004284:	491b      	ldr	r1, [pc, #108]	; (80042f4 <HAL_RCC_OscConfig+0x334>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800428a:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <HAL_RCC_OscConfig+0x338>)
 800428c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800428e:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <HAL_RCC_OscConfig+0x33c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2513      	movs	r5, #19
 8004294:	197c      	adds	r4, r7, r5
 8004296:	0018      	movs	r0, r3
 8004298:	f7fe fe28 	bl	8002eec <HAL_InitTick>
 800429c:	0003      	movs	r3, r0
 800429e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80042a0:	197b      	adds	r3, r7, r5
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d062      	beq.n	800436e <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 80042a8:	2313      	movs	r3, #19
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	e245      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d040      	beq.n	800433a <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_OscConfig+0x324>)
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	0049      	lsls	r1, r1, #1
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fe fe57 	bl	8002f78 <HAL_GetTick>
 80042ca:	0003      	movs	r3, r0
 80042cc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042ce:	e019      	b.n	8004304 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042d0:	f7fe fe52 	bl	8002f78 <HAL_GetTick>
 80042d4:	0002      	movs	r2, r0
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d912      	bls.n	8004304 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e22c      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	40021000 	.word	0x40021000
 80042e8:	fffeffff 	.word	0xfffeffff
 80042ec:	fffbffff 	.word	0xfffbffff
 80042f0:	ffffe0ff 	.word	0xffffe0ff
 80042f4:	080060e8 	.word	0x080060e8
 80042f8:	20000010 	.word	0x20000010
 80042fc:	20000014 	.word	0x20000014
 8004300:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004304:	4bc6      	ldr	r3, [pc, #792]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4013      	ands	r3, r2
 800430e:	d0df      	beq.n	80042d0 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004310:	4bc3      	ldr	r3, [pc, #780]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4ac3      	ldr	r2, [pc, #780]	; (8004624 <HAL_RCC_OscConfig+0x664>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800431e:	4bc0      	ldr	r3, [pc, #768]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004324:	4bbe      	ldr	r3, [pc, #760]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	0a19      	lsrs	r1, r3, #8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	061a      	lsls	r2, r3, #24
 8004332:	4bbb      	ldr	r3, [pc, #748]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	e019      	b.n	800436e <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800433a:	4bb9      	ldr	r3, [pc, #740]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4bb8      	ldr	r3, [pc, #736]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004340:	49b9      	ldr	r1, [pc, #740]	; (8004628 <HAL_RCC_OscConfig+0x668>)
 8004342:	400a      	ands	r2, r1
 8004344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004346:	f7fe fe17 	bl	8002f78 <HAL_GetTick>
 800434a:	0003      	movs	r3, r0
 800434c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004350:	f7fe fe12 	bl	8002f78 <HAL_GetTick>
 8004354:	0002      	movs	r2, r0
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1ec      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004362:	4baf      	ldr	r3, [pc, #700]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4013      	ands	r3, r2
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2208      	movs	r2, #8
 8004374:	4013      	ands	r3, r2
 8004376:	d036      	beq.n	80043e6 <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d019      	beq.n	80043b4 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004380:	4ba7      	ldr	r3, [pc, #668]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004384:	4ba6      	ldr	r3, [pc, #664]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004386:	2101      	movs	r1, #1
 8004388:	430a      	orrs	r2, r1
 800438a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438c:	f7fe fdf4 	bl	8002f78 <HAL_GetTick>
 8004390:	0003      	movs	r3, r0
 8004392:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004396:	f7fe fdef 	bl	8002f78 <HAL_GetTick>
 800439a:	0002      	movs	r2, r0
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1c9      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043a8:	4b9d      	ldr	r3, [pc, #628]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80043aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ac:	2202      	movs	r2, #2
 80043ae:	4013      	ands	r3, r2
 80043b0:	d0f1      	beq.n	8004396 <HAL_RCC_OscConfig+0x3d6>
 80043b2:	e018      	b.n	80043e6 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b4:	4b9a      	ldr	r3, [pc, #616]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80043b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043b8:	4b99      	ldr	r3, [pc, #612]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80043ba:	2101      	movs	r1, #1
 80043bc:	438a      	bics	r2, r1
 80043be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c0:	f7fe fdda 	bl	8002f78 <HAL_GetTick>
 80043c4:	0003      	movs	r3, r0
 80043c6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fe fdd5 	bl	8002f78 <HAL_GetTick>
 80043ce:	0002      	movs	r2, r0
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e1af      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043dc:	4b90      	ldr	r3, [pc, #576]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	2202      	movs	r2, #2
 80043e2:	4013      	ands	r3, r2
 80043e4:	d1f1      	bne.n	80043ca <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2204      	movs	r2, #4
 80043ec:	4013      	ands	r3, r2
 80043ee:	d100      	bne.n	80043f2 <HAL_RCC_OscConfig+0x432>
 80043f0:	e0af      	b.n	8004552 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f2:	2327      	movs	r3, #39	; 0x27
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	2200      	movs	r2, #0
 80043f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fa:	4b89      	ldr	r3, [pc, #548]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80043fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	055b      	lsls	r3, r3, #21
 8004402:	4013      	ands	r3, r2
 8004404:	d10a      	bne.n	800441c <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004406:	4b86      	ldr	r3, [pc, #536]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	4b85      	ldr	r3, [pc, #532]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 800440c:	2180      	movs	r1, #128	; 0x80
 800440e:	0549      	lsls	r1, r1, #21
 8004410:	430a      	orrs	r2, r1
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004414:	2327      	movs	r3, #39	; 0x27
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	4b83      	ldr	r3, [pc, #524]	; (800462c <HAL_RCC_OscConfig+0x66c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4013      	ands	r3, r2
 8004426:	d11a      	bne.n	800445e <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004428:	4b80      	ldr	r3, [pc, #512]	; (800462c <HAL_RCC_OscConfig+0x66c>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b7f      	ldr	r3, [pc, #508]	; (800462c <HAL_RCC_OscConfig+0x66c>)
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	0049      	lsls	r1, r1, #1
 8004432:	430a      	orrs	r2, r1
 8004434:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004436:	f7fe fd9f 	bl	8002f78 <HAL_GetTick>
 800443a:	0003      	movs	r3, r0
 800443c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004440:	f7fe fd9a 	bl	8002f78 <HAL_GetTick>
 8004444:	0002      	movs	r2, r0
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e174      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004452:	4b76      	ldr	r3, [pc, #472]	; (800462c <HAL_RCC_OscConfig+0x66c>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	4013      	ands	r3, r2
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	429a      	cmp	r2, r3
 8004468:	d107      	bne.n	800447a <HAL_RCC_OscConfig+0x4ba>
 800446a:	4b6d      	ldr	r3, [pc, #436]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 800446c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800446e:	4b6c      	ldr	r3, [pc, #432]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	0049      	lsls	r1, r1, #1
 8004474:	430a      	orrs	r2, r1
 8004476:	651a      	str	r2, [r3, #80]	; 0x50
 8004478:	e031      	b.n	80044de <HAL_RCC_OscConfig+0x51e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
 8004482:	4b67      	ldr	r3, [pc, #412]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004486:	4b66      	ldr	r3, [pc, #408]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004488:	4967      	ldr	r1, [pc, #412]	; (8004628 <HAL_RCC_OscConfig+0x668>)
 800448a:	400a      	ands	r2, r1
 800448c:	651a      	str	r2, [r3, #80]	; 0x50
 800448e:	4b64      	ldr	r3, [pc, #400]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004492:	4b63      	ldr	r3, [pc, #396]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004494:	4966      	ldr	r1, [pc, #408]	; (8004630 <HAL_RCC_OscConfig+0x670>)
 8004496:	400a      	ands	r2, r1
 8004498:	651a      	str	r2, [r3, #80]	; 0x50
 800449a:	e020      	b.n	80044de <HAL_RCC_OscConfig+0x51e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	23a0      	movs	r3, #160	; 0xa0
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d10e      	bne.n	80044c6 <HAL_RCC_OscConfig+0x506>
 80044a8:	4b5d      	ldr	r3, [pc, #372]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80044aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ac:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	00c9      	lsls	r1, r1, #3
 80044b2:	430a      	orrs	r2, r1
 80044b4:	651a      	str	r2, [r3, #80]	; 0x50
 80044b6:	4b5a      	ldr	r3, [pc, #360]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80044b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ba:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	0049      	lsls	r1, r1, #1
 80044c0:	430a      	orrs	r2, r1
 80044c2:	651a      	str	r2, [r3, #80]	; 0x50
 80044c4:	e00b      	b.n	80044de <HAL_RCC_OscConfig+0x51e>
 80044c6:	4b56      	ldr	r3, [pc, #344]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80044c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ca:	4b55      	ldr	r3, [pc, #340]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80044cc:	4956      	ldr	r1, [pc, #344]	; (8004628 <HAL_RCC_OscConfig+0x668>)
 80044ce:	400a      	ands	r2, r1
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50
 80044d2:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80044d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d6:	4b52      	ldr	r3, [pc, #328]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80044d8:	4955      	ldr	r1, [pc, #340]	; (8004630 <HAL_RCC_OscConfig+0x670>)
 80044da:	400a      	ands	r2, r1
 80044dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d015      	beq.n	8004512 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f7fe fd47 	bl	8002f78 <HAL_GetTick>
 80044ea:	0003      	movs	r3, r0
 80044ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044ee:	e009      	b.n	8004504 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f7fe fd42 	bl	8002f78 <HAL_GetTick>
 80044f4:	0002      	movs	r2, r0
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	4a4e      	ldr	r2, [pc, #312]	; (8004634 <HAL_RCC_OscConfig+0x674>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e11b      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004504:	4b46      	ldr	r3, [pc, #280]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4013      	ands	r3, r2
 800450e:	d0ef      	beq.n	80044f0 <HAL_RCC_OscConfig+0x530>
 8004510:	e014      	b.n	800453c <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004512:	f7fe fd31 	bl	8002f78 <HAL_GetTick>
 8004516:	0003      	movs	r3, r0
 8004518:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800451a:	e009      	b.n	8004530 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fe fd2c 	bl	8002f78 <HAL_GetTick>
 8004520:	0002      	movs	r2, r0
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	4a43      	ldr	r2, [pc, #268]	; (8004634 <HAL_RCC_OscConfig+0x674>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e105      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4013      	ands	r3, r2
 800453a:	d1ef      	bne.n	800451c <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800453c:	2327      	movs	r3, #39	; 0x27
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d105      	bne.n	8004552 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454a:	4b35      	ldr	r3, [pc, #212]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 800454c:	493a      	ldr	r1, [pc, #232]	; (8004638 <HAL_RCC_OscConfig+0x678>)
 800454e:	400a      	ands	r2, r1
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2220      	movs	r2, #32
 8004558:	4013      	ands	r3, r2
 800455a:	d049      	beq.n	80045f0 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d026      	beq.n	80045b2 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004564:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 800456a:	2101      	movs	r1, #1
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004574:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004576:	2101      	movs	r1, #1
 8004578:	430a      	orrs	r2, r1
 800457a:	635a      	str	r2, [r3, #52]	; 0x34
 800457c:	4b2f      	ldr	r3, [pc, #188]	; (800463c <HAL_RCC_OscConfig+0x67c>)
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	4b2e      	ldr	r3, [pc, #184]	; (800463c <HAL_RCC_OscConfig+0x67c>)
 8004582:	2180      	movs	r1, #128	; 0x80
 8004584:	0189      	lsls	r1, r1, #6
 8004586:	430a      	orrs	r2, r1
 8004588:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fe fcf5 	bl	8002f78 <HAL_GetTick>
 800458e:	0003      	movs	r3, r0
 8004590:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004594:	f7fe fcf0 	bl	8002f78 <HAL_GetTick>
 8004598:	0002      	movs	r2, r0
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0ca      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2202      	movs	r2, #2
 80045ac:	4013      	ands	r3, r2
 80045ae:	d0f1      	beq.n	8004594 <HAL_RCC_OscConfig+0x5d4>
 80045b0:	e01e      	b.n	80045f0 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80045b8:	2101      	movs	r1, #1
 80045ba:	438a      	bics	r2, r1
 80045bc:	609a      	str	r2, [r3, #8]
 80045be:	4b1f      	ldr	r3, [pc, #124]	; (800463c <HAL_RCC_OscConfig+0x67c>)
 80045c0:	6a1a      	ldr	r2, [r3, #32]
 80045c2:	4b1e      	ldr	r3, [pc, #120]	; (800463c <HAL_RCC_OscConfig+0x67c>)
 80045c4:	491e      	ldr	r1, [pc, #120]	; (8004640 <HAL_RCC_OscConfig+0x680>)
 80045c6:	400a      	ands	r2, r1
 80045c8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7fe fcd5 	bl	8002f78 <HAL_GetTick>
 80045ce:	0003      	movs	r3, r0
 80045d0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d4:	f7fe fcd0 	bl	8002f78 <HAL_GetTick>
 80045d8:	0002      	movs	r2, r0
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e0aa      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045e6:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2202      	movs	r2, #2
 80045ec:	4013      	ands	r3, r2
 80045ee:	d1f1      	bne.n	80045d4 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d100      	bne.n	80045fa <HAL_RCC_OscConfig+0x63a>
 80045f8:	e09f      	b.n	800473a <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	d100      	bne.n	8004602 <HAL_RCC_OscConfig+0x642>
 8004600:	e078      	b.n	80046f4 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	2b02      	cmp	r3, #2
 8004608:	d159      	bne.n	80046be <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <HAL_RCC_OscConfig+0x660>)
 8004610:	490c      	ldr	r1, [pc, #48]	; (8004644 <HAL_RCC_OscConfig+0x684>)
 8004612:	400a      	ands	r2, r1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe fcaf 	bl	8002f78 <HAL_GetTick>
 800461a:	0003      	movs	r3, r0
 800461c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800461e:	e01c      	b.n	800465a <HAL_RCC_OscConfig+0x69a>
 8004620:	40021000 	.word	0x40021000
 8004624:	ffff1fff 	.word	0xffff1fff
 8004628:	fffffeff 	.word	0xfffffeff
 800462c:	40007000 	.word	0x40007000
 8004630:	fffffbff 	.word	0xfffffbff
 8004634:	00001388 	.word	0x00001388
 8004638:	efffffff 	.word	0xefffffff
 800463c:	40010000 	.word	0x40010000
 8004640:	ffffdfff 	.word	0xffffdfff
 8004644:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004648:	f7fe fc96 	bl	8002f78 <HAL_GetTick>
 800464c:	0002      	movs	r2, r0
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e070      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	049b      	lsls	r3, r3, #18
 8004662:	4013      	ands	r3, r2
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4a37      	ldr	r2, [pc, #220]	; (8004748 <HAL_RCC_OscConfig+0x788>)
 800466c:	4013      	ands	r3, r2
 800466e:	0019      	movs	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	431a      	orrs	r2, r3
 8004680:	4b30      	ldr	r3, [pc, #192]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 8004682:	430a      	orrs	r2, r1
 8004684:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004686:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	0449      	lsls	r1, r1, #17
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fe fc70 	bl	8002f78 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469e:	f7fe fc6b 	bl	8002f78 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e045      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046b0:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	049b      	lsls	r3, r3, #18
 80046b8:	4013      	ands	r3, r2
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x6de>
 80046bc:	e03d      	b.n	800473a <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046be:	4b21      	ldr	r3, [pc, #132]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 80046c4:	4921      	ldr	r1, [pc, #132]	; (800474c <HAL_RCC_OscConfig+0x78c>)
 80046c6:	400a      	ands	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fe fc55 	bl	8002f78 <HAL_GetTick>
 80046ce:	0003      	movs	r3, r0
 80046d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fe fc50 	bl	8002f78 <HAL_GetTick>
 80046d8:	0002      	movs	r2, r0
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e02a      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	049b      	lsls	r3, r3, #18
 80046ee:	4013      	ands	r3, r2
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x714>
 80046f2:	e022      	b.n	800473a <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e01d      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_RCC_OscConfig+0x784>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	025b      	lsls	r3, r3, #9
 800470c:	401a      	ands	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	429a      	cmp	r2, r3
 8004714:	d10f      	bne.n	8004736 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	23f0      	movs	r3, #240	; 0xf0
 800471a:	039b      	lsls	r3, r3, #14
 800471c:	401a      	ands	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d107      	bne.n	8004736 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	23c0      	movs	r3, #192	; 0xc0
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	401a      	ands	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d001      	beq.n	800473a <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b00a      	add	sp, #40	; 0x28
 8004742:	bdb0      	pop	{r4, r5, r7, pc}
 8004744:	40021000 	.word	0x40021000
 8004748:	ff02ffff 	.word	0xff02ffff
 800474c:	feffffff 	.word	0xfeffffff

08004750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b5b0      	push	{r4, r5, r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e129      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b96      	ldr	r3, [pc, #600]	; (80049c0 <HAL_RCC_ClockConfig+0x270>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2201      	movs	r2, #1
 800476a:	4013      	ands	r3, r2
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d91e      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b93      	ldr	r3, [pc, #588]	; (80049c0 <HAL_RCC_ClockConfig+0x270>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2201      	movs	r2, #1
 8004778:	4393      	bics	r3, r2
 800477a:	0019      	movs	r1, r3
 800477c:	4b90      	ldr	r3, [pc, #576]	; (80049c0 <HAL_RCC_ClockConfig+0x270>)
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004784:	f7fe fbf8 	bl	8002f78 <HAL_GetTick>
 8004788:	0003      	movs	r3, r0
 800478a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478c:	e009      	b.n	80047a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478e:	f7fe fbf3 	bl	8002f78 <HAL_GetTick>
 8004792:	0002      	movs	r2, r0
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	4a8a      	ldr	r2, [pc, #552]	; (80049c4 <HAL_RCC_ClockConfig+0x274>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e10a      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b87      	ldr	r3, [pc, #540]	; (80049c0 <HAL_RCC_ClockConfig+0x270>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	4013      	ands	r3, r2
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1ee      	bne.n	800478e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2202      	movs	r2, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ba:	4b83      	ldr	r3, [pc, #524]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	22f0      	movs	r2, #240	; 0xf0
 80047c0:	4393      	bics	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	4b7f      	ldr	r3, [pc, #508]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 80047ca:	430a      	orrs	r2, r1
 80047cc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	4013      	ands	r3, r2
 80047d6:	d100      	bne.n	80047da <HAL_RCC_ClockConfig+0x8a>
 80047d8:	e089      	b.n	80048ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047e2:	4b79      	ldr	r3, [pc, #484]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	029b      	lsls	r3, r3, #10
 80047ea:	4013      	ands	r3, r2
 80047ec:	d120      	bne.n	8004830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0e2      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047fa:	4b73      	ldr	r3, [pc, #460]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	049b      	lsls	r3, r3, #18
 8004802:	4013      	ands	r3, r2
 8004804:	d114      	bne.n	8004830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0d6      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d106      	bne.n	8004820 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004812:	4b6d      	ldr	r3, [pc, #436]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2204      	movs	r2, #4
 8004818:	4013      	ands	r3, r2
 800481a:	d109      	bne.n	8004830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0cb      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004820:	4b69      	ldr	r3, [pc, #420]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4013      	ands	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0c3      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004830:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2203      	movs	r2, #3
 8004836:	4393      	bics	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4b62      	ldr	r3, [pc, #392]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004840:	430a      	orrs	r2, r1
 8004842:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004844:	f7fe fb98 	bl	8002f78 <HAL_GetTick>
 8004848:	0003      	movs	r3, r0
 800484a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d111      	bne.n	8004878 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004854:	e009      	b.n	800486a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004856:	f7fe fb8f 	bl	8002f78 <HAL_GetTick>
 800485a:	0002      	movs	r2, r0
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_RCC_ClockConfig+0x274>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e0a6      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800486a:	4b57      	ldr	r3, [pc, #348]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	220c      	movs	r2, #12
 8004870:	4013      	ands	r3, r2
 8004872:	2b08      	cmp	r3, #8
 8004874:	d1ef      	bne.n	8004856 <HAL_RCC_ClockConfig+0x106>
 8004876:	e03a      	b.n	80048ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d111      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004880:	e009      	b.n	8004896 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004882:	f7fe fb79 	bl	8002f78 <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	4a4d      	ldr	r2, [pc, #308]	; (80049c4 <HAL_RCC_ClockConfig+0x274>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e090      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004896:	4b4c      	ldr	r3, [pc, #304]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	220c      	movs	r2, #12
 800489c:	4013      	ands	r3, r2
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d1ef      	bne.n	8004882 <HAL_RCC_ClockConfig+0x132>
 80048a2:	e024      	b.n	80048ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d11b      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ac:	e009      	b.n	80048c2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ae:	f7fe fb63 	bl	8002f78 <HAL_GetTick>
 80048b2:	0002      	movs	r2, r0
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	4a42      	ldr	r2, [pc, #264]	; (80049c4 <HAL_RCC_ClockConfig+0x274>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e07a      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	220c      	movs	r2, #12
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d1ef      	bne.n	80048ae <HAL_RCC_ClockConfig+0x15e>
 80048ce:	e00e      	b.n	80048ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d0:	f7fe fb52 	bl	8002f78 <HAL_GetTick>
 80048d4:	0002      	movs	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a3a      	ldr	r2, [pc, #232]	; (80049c4 <HAL_RCC_ClockConfig+0x274>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e069      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80048e4:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	220c      	movs	r2, #12
 80048ea:	4013      	ands	r3, r2
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ee:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <HAL_RCC_ClockConfig+0x270>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d21e      	bcs.n	800493a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fc:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <HAL_RCC_ClockConfig+0x270>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2201      	movs	r2, #1
 8004902:	4393      	bics	r3, r2
 8004904:	0019      	movs	r1, r3
 8004906:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <HAL_RCC_ClockConfig+0x270>)
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800490e:	f7fe fb33 	bl	8002f78 <HAL_GetTick>
 8004912:	0003      	movs	r3, r0
 8004914:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	e009      	b.n	800492c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004918:	f7fe fb2e 	bl	8002f78 <HAL_GetTick>
 800491c:	0002      	movs	r2, r0
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	4a28      	ldr	r2, [pc, #160]	; (80049c4 <HAL_RCC_ClockConfig+0x274>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d901      	bls.n	800492c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e045      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCC_ClockConfig+0x270>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2201      	movs	r2, #1
 8004932:	4013      	ands	r3, r2
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d1ee      	bne.n	8004918 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2204      	movs	r2, #4
 8004940:	4013      	ands	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004944:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4a20      	ldr	r2, [pc, #128]	; (80049cc <HAL_RCC_ClockConfig+0x27c>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004954:	430a      	orrs	r2, r1
 8004956:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2208      	movs	r2, #8
 800495e:	4013      	ands	r3, r2
 8004960:	d00a      	beq.n	8004978 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_RCC_ClockConfig+0x280>)
 8004968:	4013      	ands	r3, r2
 800496a:	0019      	movs	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	00da      	lsls	r2, r3, #3
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004978:	f000 f832 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 800497c:	0001      	movs	r1, r0
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <HAL_RCC_ClockConfig+0x278>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	220f      	movs	r2, #15
 8004986:	4013      	ands	r3, r2
 8004988:	4a12      	ldr	r2, [pc, #72]	; (80049d4 <HAL_RCC_ClockConfig+0x284>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	000a      	movs	r2, r1
 800498e:	40da      	lsrs	r2, r3
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_RCC_ClockConfig+0x288>)
 8004992:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004994:	4b11      	ldr	r3, [pc, #68]	; (80049dc <HAL_RCC_ClockConfig+0x28c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	250b      	movs	r5, #11
 800499a:	197c      	adds	r4, r7, r5
 800499c:	0018      	movs	r0, r3
 800499e:	f7fe faa5 	bl	8002eec <HAL_InitTick>
 80049a2:	0003      	movs	r3, r0
 80049a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80049a6:	197b      	adds	r3, r7, r5
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 80049ae:	230b      	movs	r3, #11
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	e000      	b.n	80049b8 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b004      	add	sp, #16
 80049be:	bdb0      	pop	{r4, r5, r7, pc}
 80049c0:	40022000 	.word	0x40022000
 80049c4:	00001388 	.word	0x00001388
 80049c8:	40021000 	.word	0x40021000
 80049cc:	fffff8ff 	.word	0xfffff8ff
 80049d0:	ffffc7ff 	.word	0xffffc7ff
 80049d4:	080060e8 	.word	0x080060e8
 80049d8:	20000010 	.word	0x20000010
 80049dc:	20000014 	.word	0x20000014

080049e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	b08f      	sub	sp, #60	; 0x3c
 80049e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80049e6:	4b4a      	ldr	r3, [pc, #296]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x130>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ee:	230c      	movs	r3, #12
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d00f      	beq.n	8004a16 <HAL_RCC_GetSysClockFreq+0x36>
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d010      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x3c>
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d000      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x20>
 80049fe:	e073      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a00:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2210      	movs	r2, #16
 8004a06:	4013      	ands	r3, r2
 8004a08:	d002      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004a0a:	4b42      	ldr	r3, [pc, #264]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004a0e:	e079      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8004a10:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a14:	e076      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a16:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a1a:	e073      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	0c9a      	lsrs	r2, r3, #18
 8004a20:	230f      	movs	r3, #15
 8004a22:	401a      	ands	r2, r3
 8004a24:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x140>)
 8004a26:	5c9b      	ldrb	r3, [r3, r2]
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	0d9a      	lsrs	r2, r3, #22
 8004a2e:	2303      	movs	r3, #3
 8004a30:	4013      	ands	r3, r2
 8004a32:	3301      	adds	r3, #1
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a36:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	025b      	lsls	r3, r3, #9
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d019      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	4a34      	ldr	r2, [pc, #208]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	69b8      	ldr	r0, [r7, #24]
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	f7fb fc43 	bl	80002dc <__aeabi_lmul>
 8004a56:	0003      	movs	r3, r0
 8004a58:	000c      	movs	r4, r1
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	0021      	movs	r1, r4
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f7fb fc17 	bl	800029c <__aeabi_uldivmod>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	000c      	movs	r4, r1
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
 8004a74:	e035      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a76:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d019      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	68b8      	ldr	r0, [r7, #8]
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	f7fb fc24 	bl	80002dc <__aeabi_lmul>
 8004a94:	0003      	movs	r3, r0
 8004a96:	000c      	movs	r4, r1
 8004a98:	0018      	movs	r0, r3
 8004a9a:	0021      	movs	r1, r4
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f7fb fbf8 	bl	800029c <__aeabi_uldivmod>
 8004aac:	0003      	movs	r3, r0
 8004aae:	000c      	movs	r4, r1
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab2:	e016      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	0019      	movs	r1, r3
 8004abc:	4a16      	ldr	r2, [pc, #88]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x138>)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f7fb fc0c 	bl	80002dc <__aeabi_lmul>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	000c      	movs	r4, r1
 8004ac8:	0018      	movs	r0, r3
 8004aca:	0021      	movs	r1, r4
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	001d      	movs	r5, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	001e      	movs	r6, r3
 8004ad4:	002a      	movs	r2, r5
 8004ad6:	0033      	movs	r3, r6
 8004ad8:	f7fb fbe0 	bl	800029c <__aeabi_uldivmod>
 8004adc:	0003      	movs	r3, r0
 8004ade:	000c      	movs	r4, r1
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ae6:	e00d      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x130>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	0b5b      	lsrs	r3, r3, #13
 8004aee:	2207      	movs	r2, #7
 8004af0:	4013      	ands	r3, r2
 8004af2:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	3301      	adds	r3, #1
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	0212      	lsls	r2, r2, #8
 8004afc:	409a      	lsls	r2, r3
 8004afe:	0013      	movs	r3, r2
 8004b00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b00f      	add	sp, #60	; 0x3c
 8004b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	40021000 	.word	0x40021000
 8004b14:	003d0900 	.word	0x003d0900
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200
 8004b20:	080060f8 	.word	0x080060f8

08004b24 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004b2c:	2317      	movs	r3, #23
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d106      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	4013      	ands	r3, r2
 8004b48:	d100      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004b4a:	e0d9      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4c:	4b9c      	ldr	r3, [pc, #624]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	055b      	lsls	r3, r3, #21
 8004b54:	4013      	ands	r3, r2
 8004b56:	d10a      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b58:	4b99      	ldr	r3, [pc, #612]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5c:	4b98      	ldr	r3, [pc, #608]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b5e:	2180      	movs	r1, #128	; 0x80
 8004b60:	0549      	lsls	r1, r1, #21
 8004b62:	430a      	orrs	r2, r1
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004b66:	2317      	movs	r3, #23
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6e:	4b95      	ldr	r3, [pc, #596]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	4013      	ands	r3, r2
 8004b78:	d11a      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b7a:	4b92      	ldr	r3, [pc, #584]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b91      	ldr	r3, [pc, #580]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	0049      	lsls	r1, r1, #1
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b88:	f7fe f9f6 	bl	8002f78 <HAL_GetTick>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	e008      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b92:	f7fe f9f1 	bl	8002f78 <HAL_GetTick>
 8004b96:	0002      	movs	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b64      	cmp	r3, #100	; 0x64
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e108      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	4b87      	ldr	r3, [pc, #540]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4013      	ands	r3, r2
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004bb0:	4b83      	ldr	r3, [pc, #524]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	23c0      	movs	r3, #192	; 0xc0
 8004bb6:	039b      	lsls	r3, r3, #14
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	23c0      	movs	r3, #192	; 0xc0
 8004bc2:	039b      	lsls	r3, r3, #14
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d107      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	23c0      	movs	r3, #192	; 0xc0
 8004bd2:	039b      	lsls	r3, r3, #14
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d013      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	23c0      	movs	r3, #192	; 0xc0
 8004be2:	029b      	lsls	r3, r3, #10
 8004be4:	401a      	ands	r2, r3
 8004be6:	23c0      	movs	r3, #192	; 0xc0
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d10a      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bee:	4b74      	ldr	r3, [pc, #464]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	029b      	lsls	r3, r3, #10
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0d8      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004c04:	4b6e      	ldr	r3, [pc, #440]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c08:	23c0      	movs	r3, #192	; 0xc0
 8004c0a:	029b      	lsls	r3, r3, #10
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d049      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	23c0      	movs	r3, #192	; 0xc0
 8004c1c:	029b      	lsls	r3, r3, #10
 8004c1e:	4013      	ands	r3, r2
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d004      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d10d      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	23c0      	movs	r3, #192	; 0xc0
 8004c36:	029b      	lsls	r3, r3, #10
 8004c38:	4013      	ands	r3, r2
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d034      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d02e      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004c4c:	4b5c      	ldr	r3, [pc, #368]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	4a5d      	ldr	r2, [pc, #372]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c56:	4b5a      	ldr	r3, [pc, #360]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c5a:	4b59      	ldr	r3, [pc, #356]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	0309      	lsls	r1, r1, #12
 8004c60:	430a      	orrs	r2, r1
 8004c62:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c64:	4b56      	ldr	r3, [pc, #344]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c68:	4b55      	ldr	r3, [pc, #340]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c6a:	4958      	ldr	r1, [pc, #352]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004c6c:	400a      	ands	r2, r1
 8004c6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004c70:	4b53      	ldr	r3, [pc, #332]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d014      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe f97a 	bl	8002f78 <HAL_GetTick>
 8004c84:	0003      	movs	r3, r0
 8004c86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c88:	e009      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fe f975 	bl	8002f78 <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	4a4e      	ldr	r2, [pc, #312]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e08b      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c9e:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d0ef      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	23c0      	movs	r3, #192	; 0xc0
 8004cb0:	029b      	lsls	r3, r3, #10
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	23c0      	movs	r3, #192	; 0xc0
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004cbc:	4b40      	ldr	r3, [pc, #256]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a44      	ldr	r2, [pc, #272]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	23c0      	movs	r3, #192	; 0xc0
 8004ccc:	039b      	lsls	r3, r3, #14
 8004cce:	401a      	ands	r2, r3
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	4b3a      	ldr	r3, [pc, #232]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	23c0      	movs	r3, #192	; 0xc0
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cea:	2317      	movs	r3, #23
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf4:	4b32      	ldr	r3, [pc, #200]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cfa:	4937      	ldr	r1, [pc, #220]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d0a:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	2203      	movs	r2, #3
 8004d10:	4393      	bics	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	4b29      	ldr	r3, [pc, #164]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2202      	movs	r2, #2
 8004d24:	4013      	ands	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	220c      	movs	r2, #12
 8004d2e:	4393      	bics	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2204      	movs	r2, #4
 8004d42:	4013      	ands	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d46:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	0019      	movs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d56:	430a      	orrs	r2, r1
 8004d58:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	4013      	ands	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d64:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d74:	430a      	orrs	r2, r1
 8004d76:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2240      	movs	r2, #64	; 0x40
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d86:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d92:	430a      	orrs	r2, r1
 8004d94:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2280      	movs	r2, #128	; 0x80
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da4:	4a10      	ldr	r2, [pc, #64]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004db0:	430a      	orrs	r2, r1
 8004db2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b006      	add	sp, #24
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	fffcffff 	.word	0xfffcffff
 8004dcc:	fff7ffff 	.word	0xfff7ffff
 8004dd0:	00001388 	.word	0x00001388
 8004dd4:	ffcfffff 	.word	0xffcfffff
 8004dd8:	efffffff 	.word	0xefffffff
 8004ddc:	fffff3ff 	.word	0xfffff3ff
 8004de0:	ffffcfff 	.word	0xffffcfff
 8004de4:	fbffffff 	.word	0xfbffffff
 8004de8:	fff3ffff 	.word	0xfff3ffff

08004dec <__errno>:
 8004dec:	4b01      	ldr	r3, [pc, #4]	; (8004df4 <__errno+0x8>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	4770      	bx	lr
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	2000001c 	.word	0x2000001c

08004df8 <__libc_init_array>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	2600      	movs	r6, #0
 8004dfc:	4d0c      	ldr	r5, [pc, #48]	; (8004e30 <__libc_init_array+0x38>)
 8004dfe:	4c0d      	ldr	r4, [pc, #52]	; (8004e34 <__libc_init_array+0x3c>)
 8004e00:	1b64      	subs	r4, r4, r5
 8004e02:	10a4      	asrs	r4, r4, #2
 8004e04:	42a6      	cmp	r6, r4
 8004e06:	d109      	bne.n	8004e1c <__libc_init_array+0x24>
 8004e08:	2600      	movs	r6, #0
 8004e0a:	f001 f8c1 	bl	8005f90 <_init>
 8004e0e:	4d0a      	ldr	r5, [pc, #40]	; (8004e38 <__libc_init_array+0x40>)
 8004e10:	4c0a      	ldr	r4, [pc, #40]	; (8004e3c <__libc_init_array+0x44>)
 8004e12:	1b64      	subs	r4, r4, r5
 8004e14:	10a4      	asrs	r4, r4, #2
 8004e16:	42a6      	cmp	r6, r4
 8004e18:	d105      	bne.n	8004e26 <__libc_init_array+0x2e>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	00b3      	lsls	r3, r6, #2
 8004e1e:	58eb      	ldr	r3, [r5, r3]
 8004e20:	4798      	blx	r3
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7ee      	b.n	8004e04 <__libc_init_array+0xc>
 8004e26:	00b3      	lsls	r3, r6, #2
 8004e28:	58eb      	ldr	r3, [r5, r3]
 8004e2a:	4798      	blx	r3
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	e7f2      	b.n	8004e16 <__libc_init_array+0x1e>
 8004e30:	08006158 	.word	0x08006158
 8004e34:	08006158 	.word	0x08006158
 8004e38:	08006158 	.word	0x08006158
 8004e3c:	0800615c 	.word	0x0800615c

08004e40 <memset>:
 8004e40:	0003      	movs	r3, r0
 8004e42:	1812      	adds	r2, r2, r0
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d100      	bne.n	8004e4a <memset+0xa>
 8004e48:	4770      	bx	lr
 8004e4a:	7019      	strb	r1, [r3, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	e7f9      	b.n	8004e44 <memset+0x4>

08004e50 <pow>:
 8004e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e52:	2400      	movs	r4, #0
 8004e54:	b091      	sub	sp, #68	; 0x44
 8004e56:	001f      	movs	r7, r3
 8004e58:	9000      	str	r0, [sp, #0]
 8004e5a:	9101      	str	r1, [sp, #4]
 8004e5c:	0016      	movs	r6, r2
 8004e5e:	f000 f9e7 	bl	8005230 <__ieee754_pow>
 8004e62:	4bbe      	ldr	r3, [pc, #760]	; (800515c <pow+0x30c>)
 8004e64:	9002      	str	r0, [sp, #8]
 8004e66:	9103      	str	r1, [sp, #12]
 8004e68:	571c      	ldrsb	r4, [r3, r4]
 8004e6a:	1c63      	adds	r3, r4, #1
 8004e6c:	d100      	bne.n	8004e70 <pow+0x20>
 8004e6e:	e0d4      	b.n	800501a <pow+0x1ca>
 8004e70:	0032      	movs	r2, r6
 8004e72:	003b      	movs	r3, r7
 8004e74:	0030      	movs	r0, r6
 8004e76:	0039      	movs	r1, r7
 8004e78:	f7fd fa8a 	bl	8002390 <__aeabi_dcmpun>
 8004e7c:	1e05      	subs	r5, r0, #0
 8004e7e:	d000      	beq.n	8004e82 <pow+0x32>
 8004e80:	e0cb      	b.n	800501a <pow+0x1ca>
 8004e82:	9a00      	ldr	r2, [sp, #0]
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	0010      	movs	r0, r2
 8004e88:	0019      	movs	r1, r3
 8004e8a:	f7fd fa81 	bl	8002390 <__aeabi_dcmpun>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	9005      	str	r0, [sp, #20]
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d01e      	beq.n	8004ed4 <pow+0x84>
 8004e96:	2300      	movs	r3, #0
 8004e98:	0030      	movs	r0, r6
 8004e9a:	0039      	movs	r1, r7
 8004e9c:	f7fb f9d0 	bl	8000240 <__aeabi_dcmpeq>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d100      	bne.n	8004ea6 <pow+0x56>
 8004ea4:	e0b9      	b.n	800501a <pow+0x1ca>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	9306      	str	r3, [sp, #24]
 8004eaa:	4bad      	ldr	r3, [pc, #692]	; (8005160 <pow+0x310>)
 8004eac:	950e      	str	r5, [sp, #56]	; 0x38
 8004eae:	9307      	str	r3, [sp, #28]
 8004eb0:	9a00      	ldr	r2, [sp, #0]
 8004eb2:	9b01      	ldr	r3, [sp, #4]
 8004eb4:	9208      	str	r2, [sp, #32]
 8004eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4baa      	ldr	r3, [pc, #680]	; (8005164 <pow+0x314>)
 8004ebc:	960a      	str	r6, [sp, #40]	; 0x28
 8004ebe:	970b      	str	r7, [sp, #44]	; 0x2c
 8004ec0:	920c      	str	r2, [sp, #48]	; 0x30
 8004ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8004ec4:	2c02      	cmp	r4, #2
 8004ec6:	d033      	beq.n	8004f30 <pow+0xe0>
 8004ec8:	a806      	add	r0, sp, #24
 8004eca:	f000 ff65 	bl	8005d98 <matherr>
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d125      	bne.n	8004f1e <pow+0xce>
 8004ed2:	e059      	b.n	8004f88 <pow+0x138>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9800      	ldr	r0, [sp, #0]
 8004ed8:	9901      	ldr	r1, [sp, #4]
 8004eda:	f7fb f9b1 	bl	8000240 <__aeabi_dcmpeq>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d057      	beq.n	8004f92 <pow+0x142>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	0030      	movs	r0, r6
 8004ee8:	0039      	movs	r1, r7
 8004eea:	f7fb f9a9 	bl	8000240 <__aeabi_dcmpeq>
 8004eee:	1e05      	subs	r5, r0, #0
 8004ef0:	d021      	beq.n	8004f36 <pow+0xe6>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	9306      	str	r3, [sp, #24]
 8004ef6:	4b9a      	ldr	r3, [pc, #616]	; (8005160 <pow+0x310>)
 8004ef8:	960a      	str	r6, [sp, #40]	; 0x28
 8004efa:	970b      	str	r7, [sp, #44]	; 0x2c
 8004efc:	9307      	str	r3, [sp, #28]
 8004efe:	9b05      	ldr	r3, [sp, #20]
 8004f00:	930e      	str	r3, [sp, #56]	; 0x38
 8004f02:	9a00      	ldr	r2, [sp, #0]
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	9208      	str	r2, [sp, #32]
 8004f08:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	920c      	str	r2, [sp, #48]	; 0x30
 8004f10:	930d      	str	r3, [sp, #52]	; 0x34
 8004f12:	2c00      	cmp	r4, #0
 8004f14:	d0d8      	beq.n	8004ec8 <pow+0x78>
 8004f16:	2200      	movs	r2, #0
 8004f18:	4b92      	ldr	r3, [pc, #584]	; (8005164 <pow+0x314>)
 8004f1a:	920c      	str	r2, [sp, #48]	; 0x30
 8004f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8004f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <pow+0xe0>
 8004f26:	f7ff ff61 	bl	8004dec <__errno>
 8004f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	6003      	str	r3, [r0, #0]
 8004f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004f34:	e06f      	b.n	8005016 <pow+0x1c6>
 8004f36:	0030      	movs	r0, r6
 8004f38:	0039      	movs	r1, r7
 8004f3a:	f000 ff25 	bl	8005d88 <finite>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d06b      	beq.n	800501a <pow+0x1ca>
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	0030      	movs	r0, r6
 8004f48:	0039      	movs	r1, r7
 8004f4a:	f7fb f97f 	bl	800024c <__aeabi_dcmplt>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d063      	beq.n	800501a <pow+0x1ca>
 8004f52:	2301      	movs	r3, #1
 8004f54:	9306      	str	r3, [sp, #24]
 8004f56:	4b82      	ldr	r3, [pc, #520]	; (8005160 <pow+0x310>)
 8004f58:	950e      	str	r5, [sp, #56]	; 0x38
 8004f5a:	9307      	str	r3, [sp, #28]
 8004f5c:	9b00      	ldr	r3, [sp, #0]
 8004f5e:	9c01      	ldr	r4, [sp, #4]
 8004f60:	9308      	str	r3, [sp, #32]
 8004f62:	9409      	str	r4, [sp, #36]	; 0x24
 8004f64:	4b7d      	ldr	r3, [pc, #500]	; (800515c <pow+0x30c>)
 8004f66:	960a      	str	r6, [sp, #40]	; 0x28
 8004f68:	970b      	str	r7, [sp, #44]	; 0x2c
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b25b      	sxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <pow+0x12c>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2400      	movs	r4, #0
 8004f76:	930c      	str	r3, [sp, #48]	; 0x30
 8004f78:	940d      	str	r4, [sp, #52]	; 0x34
 8004f7a:	e7a5      	b.n	8004ec8 <pow+0x78>
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	497a      	ldr	r1, [pc, #488]	; (8005168 <pow+0x318>)
 8004f80:	900c      	str	r0, [sp, #48]	; 0x30
 8004f82:	910d      	str	r1, [sp, #52]	; 0x34
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d19f      	bne.n	8004ec8 <pow+0x78>
 8004f88:	f7ff ff30 	bl	8004dec <__errno>
 8004f8c:	2321      	movs	r3, #33	; 0x21
 8004f8e:	6003      	str	r3, [r0, #0]
 8004f90:	e7c5      	b.n	8004f1e <pow+0xce>
 8004f92:	9802      	ldr	r0, [sp, #8]
 8004f94:	9903      	ldr	r1, [sp, #12]
 8004f96:	f000 fef7 	bl	8005d88 <finite>
 8004f9a:	9005      	str	r0, [sp, #20]
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d000      	beq.n	8004fa2 <pow+0x152>
 8004fa0:	e0a5      	b.n	80050ee <pow+0x29e>
 8004fa2:	9800      	ldr	r0, [sp, #0]
 8004fa4:	9901      	ldr	r1, [sp, #4]
 8004fa6:	f000 feef 	bl	8005d88 <finite>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d100      	bne.n	8004fb0 <pow+0x160>
 8004fae:	e09e      	b.n	80050ee <pow+0x29e>
 8004fb0:	0030      	movs	r0, r6
 8004fb2:	0039      	movs	r1, r7
 8004fb4:	f000 fee8 	bl	8005d88 <finite>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d100      	bne.n	8004fbe <pow+0x16e>
 8004fbc:	e097      	b.n	80050ee <pow+0x29e>
 8004fbe:	2500      	movs	r5, #0
 8004fc0:	4b66      	ldr	r3, [pc, #408]	; (800515c <pow+0x30c>)
 8004fc2:	ac06      	add	r4, sp, #24
 8004fc4:	575d      	ldrsb	r5, [r3, r5]
 8004fc6:	9a02      	ldr	r2, [sp, #8]
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	0019      	movs	r1, r3
 8004fcc:	0010      	movs	r0, r2
 8004fce:	f7fd f9df 	bl	8002390 <__aeabi_dcmpun>
 8004fd2:	4b63      	ldr	r3, [pc, #396]	; (8005160 <pow+0x310>)
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d031      	beq.n	800503c <pow+0x1ec>
 8004fd8:	2201      	movs	r2, #1
 8004fda:	6063      	str	r3, [r4, #4]
 8004fdc:	9b05      	ldr	r3, [sp, #20]
 8004fde:	9206      	str	r2, [sp, #24]
 8004fe0:	6223      	str	r3, [r4, #32]
 8004fe2:	6126      	str	r6, [r4, #16]
 8004fe4:	6167      	str	r7, [r4, #20]
 8004fe6:	9a00      	ldr	r2, [sp, #0]
 8004fe8:	9b01      	ldr	r3, [sp, #4]
 8004fea:	60a2      	str	r2, [r4, #8]
 8004fec:	60e3      	str	r3, [r4, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	d115      	bne.n	8005022 <pow+0x1d2>
 8004ff6:	61a2      	str	r2, [r4, #24]
 8004ff8:	61e3      	str	r3, [r4, #28]
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	f000 fecc 	bl	8005d98 <matherr>
 8005000:	2800      	cmp	r0, #0
 8005002:	d016      	beq.n	8005032 <pow+0x1e2>
 8005004:	6a23      	ldr	r3, [r4, #32]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <pow+0x1c2>
 800500a:	f7ff feef 	bl	8004dec <__errno>
 800500e:	6a23      	ldr	r3, [r4, #32]
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	69a3      	ldr	r3, [r4, #24]
 8005014:	69e4      	ldr	r4, [r4, #28]
 8005016:	9302      	str	r3, [sp, #8]
 8005018:	9403      	str	r4, [sp, #12]
 800501a:	9802      	ldr	r0, [sp, #8]
 800501c:	9903      	ldr	r1, [sp, #12]
 800501e:	b011      	add	sp, #68	; 0x44
 8005020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005022:	0010      	movs	r0, r2
 8005024:	0019      	movs	r1, r3
 8005026:	f7fb ffef 	bl	8001008 <__aeabi_ddiv>
 800502a:	61a0      	str	r0, [r4, #24]
 800502c:	61e1      	str	r1, [r4, #28]
 800502e:	2d02      	cmp	r5, #2
 8005030:	d1e3      	bne.n	8004ffa <pow+0x1aa>
 8005032:	f7ff fedb 	bl	8004dec <__errno>
 8005036:	2321      	movs	r3, #33	; 0x21
 8005038:	6003      	str	r3, [r0, #0]
 800503a:	e7e3      	b.n	8005004 <pow+0x1b4>
 800503c:	2203      	movs	r2, #3
 800503e:	6126      	str	r6, [r4, #16]
 8005040:	6167      	str	r7, [r4, #20]
 8005042:	9206      	str	r2, [sp, #24]
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	6220      	str	r0, [r4, #32]
 8005048:	9a00      	ldr	r2, [sp, #0]
 800504a:	9b01      	ldr	r3, [sp, #4]
 800504c:	0030      	movs	r0, r6
 800504e:	60a2      	str	r2, [r4, #8]
 8005050:	60e3      	str	r3, [r4, #12]
 8005052:	0039      	movs	r1, r7
 8005054:	2200      	movs	r2, #0
 8005056:	4b45      	ldr	r3, [pc, #276]	; (800516c <pow+0x31c>)
 8005058:	f7fc fbe0 	bl	800181c <__aeabi_dmul>
 800505c:	0006      	movs	r6, r0
 800505e:	000f      	movs	r7, r1
 8005060:	2d00      	cmp	r5, #0
 8005062:	d124      	bne.n	80050ae <pow+0x25e>
 8005064:	9800      	ldr	r0, [sp, #0]
 8005066:	9901      	ldr	r1, [sp, #4]
 8005068:	22e0      	movs	r2, #224	; 0xe0
 800506a:	4b41      	ldr	r3, [pc, #260]	; (8005170 <pow+0x320>)
 800506c:	0612      	lsls	r2, r2, #24
 800506e:	61a2      	str	r2, [r4, #24]
 8005070:	61e3      	str	r3, [r4, #28]
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	f7fb f8e9 	bl	800024c <__aeabi_dcmplt>
 800507a:	2800      	cmp	r0, #0
 800507c:	d030      	beq.n	80050e0 <pow+0x290>
 800507e:	0030      	movs	r0, r6
 8005080:	0039      	movs	r1, r7
 8005082:	f000 fe91 	bl	8005da8 <rint>
 8005086:	0032      	movs	r2, r6
 8005088:	003b      	movs	r3, r7
 800508a:	f7fb f8d9 	bl	8000240 <__aeabi_dcmpeq>
 800508e:	2800      	cmp	r0, #0
 8005090:	d104      	bne.n	800509c <pow+0x24c>
 8005092:	22e0      	movs	r2, #224	; 0xe0
 8005094:	4b37      	ldr	r3, [pc, #220]	; (8005174 <pow+0x324>)
 8005096:	0612      	lsls	r2, r2, #24
 8005098:	61a2      	str	r2, [r4, #24]
 800509a:	61e3      	str	r3, [r4, #28]
 800509c:	4b2f      	ldr	r3, [pc, #188]	; (800515c <pow+0x30c>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b25b      	sxtb	r3, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d11c      	bne.n	80050e0 <pow+0x290>
 80050a6:	f7ff fea1 	bl	8004dec <__errno>
 80050aa:	2322      	movs	r3, #34	; 0x22
 80050ac:	e7c4      	b.n	8005038 <pow+0x1e8>
 80050ae:	2200      	movs	r2, #0
 80050b0:	9800      	ldr	r0, [sp, #0]
 80050b2:	9901      	ldr	r1, [sp, #4]
 80050b4:	4b30      	ldr	r3, [pc, #192]	; (8005178 <pow+0x328>)
 80050b6:	61a2      	str	r2, [r4, #24]
 80050b8:	61e3      	str	r3, [r4, #28]
 80050ba:	2200      	movs	r2, #0
 80050bc:	2300      	movs	r3, #0
 80050be:	f7fb f8c5 	bl	800024c <__aeabi_dcmplt>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d0ea      	beq.n	800509c <pow+0x24c>
 80050c6:	0030      	movs	r0, r6
 80050c8:	0039      	movs	r1, r7
 80050ca:	f000 fe6d 	bl	8005da8 <rint>
 80050ce:	0032      	movs	r2, r6
 80050d0:	003b      	movs	r3, r7
 80050d2:	f7fb f8b5 	bl	8000240 <__aeabi_dcmpeq>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d1e0      	bne.n	800509c <pow+0x24c>
 80050da:	2200      	movs	r2, #0
 80050dc:	4b22      	ldr	r3, [pc, #136]	; (8005168 <pow+0x318>)
 80050de:	e7db      	b.n	8005098 <pow+0x248>
 80050e0:	0020      	movs	r0, r4
 80050e2:	f000 fe59 	bl	8005d98 <matherr>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d000      	beq.n	80050ec <pow+0x29c>
 80050ea:	e78b      	b.n	8005004 <pow+0x1b4>
 80050ec:	e7db      	b.n	80050a6 <pow+0x256>
 80050ee:	2200      	movs	r2, #0
 80050f0:	9802      	ldr	r0, [sp, #8]
 80050f2:	9903      	ldr	r1, [sp, #12]
 80050f4:	2300      	movs	r3, #0
 80050f6:	f7fb f8a3 	bl	8000240 <__aeabi_dcmpeq>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d100      	bne.n	8005100 <pow+0x2b0>
 80050fe:	e78c      	b.n	800501a <pow+0x1ca>
 8005100:	9800      	ldr	r0, [sp, #0]
 8005102:	9901      	ldr	r1, [sp, #4]
 8005104:	f000 fe40 	bl	8005d88 <finite>
 8005108:	2800      	cmp	r0, #0
 800510a:	d100      	bne.n	800510e <pow+0x2be>
 800510c:	e785      	b.n	800501a <pow+0x1ca>
 800510e:	0030      	movs	r0, r6
 8005110:	0039      	movs	r1, r7
 8005112:	f000 fe39 	bl	8005d88 <finite>
 8005116:	2800      	cmp	r0, #0
 8005118:	d100      	bne.n	800511c <pow+0x2cc>
 800511a:	e77e      	b.n	800501a <pow+0x1ca>
 800511c:	2304      	movs	r3, #4
 800511e:	9306      	str	r3, [sp, #24]
 8005120:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <pow+0x310>)
 8005122:	960a      	str	r6, [sp, #40]	; 0x28
 8005124:	970b      	str	r7, [sp, #44]	; 0x2c
 8005126:	9307      	str	r3, [sp, #28]
 8005128:	2300      	movs	r3, #0
 800512a:	930e      	str	r3, [sp, #56]	; 0x38
 800512c:	9b00      	ldr	r3, [sp, #0]
 800512e:	9c01      	ldr	r4, [sp, #4]
 8005130:	9308      	str	r3, [sp, #32]
 8005132:	9409      	str	r4, [sp, #36]	; 0x24
 8005134:	2300      	movs	r3, #0
 8005136:	2400      	movs	r4, #0
 8005138:	930c      	str	r3, [sp, #48]	; 0x30
 800513a:	940d      	str	r4, [sp, #52]	; 0x34
 800513c:	4b07      	ldr	r3, [pc, #28]	; (800515c <pow+0x30c>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	b25b      	sxtb	r3, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d103      	bne.n	800514e <pow+0x2fe>
 8005146:	f7ff fe51 	bl	8004dec <__errno>
 800514a:	2322      	movs	r3, #34	; 0x22
 800514c:	e71f      	b.n	8004f8e <pow+0x13e>
 800514e:	a806      	add	r0, sp, #24
 8005150:	f000 fe22 	bl	8005d98 <matherr>
 8005154:	2800      	cmp	r0, #0
 8005156:	d000      	beq.n	800515a <pow+0x30a>
 8005158:	e6e1      	b.n	8004f1e <pow+0xce>
 800515a:	e7f4      	b.n	8005146 <pow+0x2f6>
 800515c:	20000080 	.word	0x20000080
 8005160:	08006101 	.word	0x08006101
 8005164:	3ff00000 	.word	0x3ff00000
 8005168:	fff00000 	.word	0xfff00000
 800516c:	3fe00000 	.word	0x3fe00000
 8005170:	47efffff 	.word	0x47efffff
 8005174:	c7efffff 	.word	0xc7efffff
 8005178:	7ff00000 	.word	0x7ff00000

0800517c <sqrt>:
 800517c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517e:	b08f      	sub	sp, #60	; 0x3c
 8005180:	0004      	movs	r4, r0
 8005182:	000d      	movs	r5, r1
 8005184:	f000 fd4a 	bl	8005c1c <__ieee754_sqrt>
 8005188:	4b27      	ldr	r3, [pc, #156]	; (8005228 <sqrt+0xac>)
 800518a:	9000      	str	r0, [sp, #0]
 800518c:	9101      	str	r1, [sp, #4]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	b25b      	sxtb	r3, r3
 8005192:	9302      	str	r3, [sp, #8]
 8005194:	3301      	adds	r3, #1
 8005196:	d033      	beq.n	8005200 <sqrt+0x84>
 8005198:	0022      	movs	r2, r4
 800519a:	002b      	movs	r3, r5
 800519c:	0020      	movs	r0, r4
 800519e:	0029      	movs	r1, r5
 80051a0:	f7fd f8f6 	bl	8002390 <__aeabi_dcmpun>
 80051a4:	9003      	str	r0, [sp, #12]
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d12a      	bne.n	8005200 <sqrt+0x84>
 80051aa:	2600      	movs	r6, #0
 80051ac:	2700      	movs	r7, #0
 80051ae:	0032      	movs	r2, r6
 80051b0:	003b      	movs	r3, r7
 80051b2:	0020      	movs	r0, r4
 80051b4:	0029      	movs	r1, r5
 80051b6:	f7fb f849 	bl	800024c <__aeabi_dcmplt>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d020      	beq.n	8005200 <sqrt+0x84>
 80051be:	2301      	movs	r3, #1
 80051c0:	9304      	str	r3, [sp, #16]
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <sqrt+0xb0>)
 80051c4:	9408      	str	r4, [sp, #32]
 80051c6:	9509      	str	r5, [sp, #36]	; 0x24
 80051c8:	9305      	str	r3, [sp, #20]
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	9406      	str	r4, [sp, #24]
 80051ce:	9507      	str	r5, [sp, #28]
 80051d0:	930c      	str	r3, [sp, #48]	; 0x30
 80051d2:	9b02      	ldr	r3, [sp, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d117      	bne.n	8005208 <sqrt+0x8c>
 80051d8:	960a      	str	r6, [sp, #40]	; 0x28
 80051da:	970b      	str	r7, [sp, #44]	; 0x2c
 80051dc:	a804      	add	r0, sp, #16
 80051de:	f000 fddb 	bl	8005d98 <matherr>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d01b      	beq.n	800521e <sqrt+0xa2>
 80051e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051e8:	9302      	str	r3, [sp, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d004      	beq.n	80051f8 <sqrt+0x7c>
 80051ee:	f7ff fdfd 	bl	8004dec <__errno>
 80051f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051f4:	9302      	str	r3, [sp, #8]
 80051f6:	6003      	str	r3, [r0, #0]
 80051f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	9401      	str	r4, [sp, #4]
 8005200:	9800      	ldr	r0, [sp, #0]
 8005202:	9901      	ldr	r1, [sp, #4]
 8005204:	b00f      	add	sp, #60	; 0x3c
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005208:	003b      	movs	r3, r7
 800520a:	0032      	movs	r2, r6
 800520c:	0030      	movs	r0, r6
 800520e:	0039      	movs	r1, r7
 8005210:	f7fb fefa 	bl	8001008 <__aeabi_ddiv>
 8005214:	9b02      	ldr	r3, [sp, #8]
 8005216:	900a      	str	r0, [sp, #40]	; 0x28
 8005218:	910b      	str	r1, [sp, #44]	; 0x2c
 800521a:	2b02      	cmp	r3, #2
 800521c:	d1de      	bne.n	80051dc <sqrt+0x60>
 800521e:	f7ff fde5 	bl	8004dec <__errno>
 8005222:	2321      	movs	r3, #33	; 0x21
 8005224:	6003      	str	r3, [r0, #0]
 8005226:	e7de      	b.n	80051e6 <sqrt+0x6a>
 8005228:	20000080 	.word	0x20000080
 800522c:	08006105 	.word	0x08006105

08005230 <__ieee754_pow>:
 8005230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005232:	b095      	sub	sp, #84	; 0x54
 8005234:	9202      	str	r2, [sp, #8]
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	9b03      	ldr	r3, [sp, #12]
 800523a:	000e      	movs	r6, r1
 800523c:	9902      	ldr	r1, [sp, #8]
 800523e:	005d      	lsls	r5, r3, #1
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	000b      	movs	r3, r1
 8005244:	086d      	lsrs	r5, r5, #1
 8005246:	0007      	movs	r7, r0
 8005248:	432b      	orrs	r3, r5
 800524a:	d101      	bne.n	8005250 <__ieee754_pow+0x20>
 800524c:	f000 fcad 	bl	8005baa <__ieee754_pow+0x97a>
 8005250:	4b7e      	ldr	r3, [pc, #504]	; (800544c <__ieee754_pow+0x21c>)
 8005252:	0074      	lsls	r4, r6, #1
 8005254:	9608      	str	r6, [sp, #32]
 8005256:	9000      	str	r0, [sp, #0]
 8005258:	0864      	lsrs	r4, r4, #1
 800525a:	469c      	mov	ip, r3
 800525c:	429c      	cmp	r4, r3
 800525e:	dc0b      	bgt.n	8005278 <__ieee754_pow+0x48>
 8005260:	d104      	bne.n	800526c <__ieee754_pow+0x3c>
 8005262:	2800      	cmp	r0, #0
 8005264:	d108      	bne.n	8005278 <__ieee754_pow+0x48>
 8005266:	42a5      	cmp	r5, r4
 8005268:	dc0c      	bgt.n	8005284 <__ieee754_pow+0x54>
 800526a:	e001      	b.n	8005270 <__ieee754_pow+0x40>
 800526c:	429d      	cmp	r5, r3
 800526e:	dc03      	bgt.n	8005278 <__ieee754_pow+0x48>
 8005270:	4565      	cmp	r5, ip
 8005272:	d10d      	bne.n	8005290 <__ieee754_pow+0x60>
 8005274:	2900      	cmp	r1, #0
 8005276:	d00b      	beq.n	8005290 <__ieee754_pow+0x60>
 8005278:	4b75      	ldr	r3, [pc, #468]	; (8005450 <__ieee754_pow+0x220>)
 800527a:	18e4      	adds	r4, r4, r3
 800527c:	4327      	orrs	r7, r4
 800527e:	d101      	bne.n	8005284 <__ieee754_pow+0x54>
 8005280:	f000 fc93 	bl	8005baa <__ieee754_pow+0x97a>
 8005284:	4873      	ldr	r0, [pc, #460]	; (8005454 <__ieee754_pow+0x224>)
 8005286:	f000 fd89 	bl	8005d9c <nan>
 800528a:	9000      	str	r0, [sp, #0]
 800528c:	9101      	str	r1, [sp, #4]
 800528e:	e061      	b.n	8005354 <__ieee754_pow+0x124>
 8005290:	2300      	movs	r3, #0
 8005292:	9306      	str	r3, [sp, #24]
 8005294:	2e00      	cmp	r6, #0
 8005296:	da17      	bge.n	80052c8 <__ieee754_pow+0x98>
 8005298:	4a6f      	ldr	r2, [pc, #444]	; (8005458 <__ieee754_pow+0x228>)
 800529a:	4295      	cmp	r5, r2
 800529c:	dc4d      	bgt.n	800533a <__ieee754_pow+0x10a>
 800529e:	4a6f      	ldr	r2, [pc, #444]	; (800545c <__ieee754_pow+0x22c>)
 80052a0:	4295      	cmp	r5, r2
 80052a2:	dd11      	ble.n	80052c8 <__ieee754_pow+0x98>
 80052a4:	4b6e      	ldr	r3, [pc, #440]	; (8005460 <__ieee754_pow+0x230>)
 80052a6:	152a      	asrs	r2, r5, #20
 80052a8:	18d2      	adds	r2, r2, r3
 80052aa:	2a14      	cmp	r2, #20
 80052ac:	dd25      	ble.n	80052fa <__ieee754_pow+0xca>
 80052ae:	2034      	movs	r0, #52	; 0x34
 80052b0:	1a82      	subs	r2, r0, r2
 80052b2:	9802      	ldr	r0, [sp, #8]
 80052b4:	40d0      	lsrs	r0, r2
 80052b6:	0003      	movs	r3, r0
 80052b8:	4093      	lsls	r3, r2
 80052ba:	428b      	cmp	r3, r1
 80052bc:	d104      	bne.n	80052c8 <__ieee754_pow+0x98>
 80052be:	2201      	movs	r2, #1
 80052c0:	4010      	ands	r0, r2
 80052c2:	1892      	adds	r2, r2, r2
 80052c4:	1a13      	subs	r3, r2, r0
 80052c6:	9306      	str	r3, [sp, #24]
 80052c8:	2900      	cmp	r1, #0
 80052ca:	d15e      	bne.n	800538a <__ieee754_pow+0x15a>
 80052cc:	4565      	cmp	r5, ip
 80052ce:	d123      	bne.n	8005318 <__ieee754_pow+0xe8>
 80052d0:	4b5f      	ldr	r3, [pc, #380]	; (8005450 <__ieee754_pow+0x220>)
 80052d2:	18e3      	adds	r3, r4, r3
 80052d4:	431f      	orrs	r7, r3
 80052d6:	d101      	bne.n	80052dc <__ieee754_pow+0xac>
 80052d8:	f000 fc67 	bl	8005baa <__ieee754_pow+0x97a>
 80052dc:	4b5f      	ldr	r3, [pc, #380]	; (800545c <__ieee754_pow+0x22c>)
 80052de:	429c      	cmp	r4, r3
 80052e0:	dd2d      	ble.n	800533e <__ieee754_pow+0x10e>
 80052e2:	9b02      	ldr	r3, [sp, #8]
 80052e4:	9c03      	ldr	r4, [sp, #12]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	9401      	str	r4, [sp, #4]
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	da31      	bge.n	8005354 <__ieee754_pow+0x124>
 80052f0:	2300      	movs	r3, #0
 80052f2:	2400      	movs	r4, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	9401      	str	r4, [sp, #4]
 80052f8:	e02c      	b.n	8005354 <__ieee754_pow+0x124>
 80052fa:	2900      	cmp	r1, #0
 80052fc:	d145      	bne.n	800538a <__ieee754_pow+0x15a>
 80052fe:	2314      	movs	r3, #20
 8005300:	1a9a      	subs	r2, r3, r2
 8005302:	002b      	movs	r3, r5
 8005304:	4113      	asrs	r3, r2
 8005306:	0019      	movs	r1, r3
 8005308:	4091      	lsls	r1, r2
 800530a:	42a9      	cmp	r1, r5
 800530c:	d104      	bne.n	8005318 <__ieee754_pow+0xe8>
 800530e:	2201      	movs	r2, #1
 8005310:	4013      	ands	r3, r2
 8005312:	1892      	adds	r2, r2, r2
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	9306      	str	r3, [sp, #24]
 8005318:	4b52      	ldr	r3, [pc, #328]	; (8005464 <__ieee754_pow+0x234>)
 800531a:	429d      	cmp	r5, r3
 800531c:	d11e      	bne.n	800535c <__ieee754_pow+0x12c>
 800531e:	0038      	movs	r0, r7
 8005320:	0031      	movs	r1, r6
 8005322:	9b04      	ldr	r3, [sp, #16]
 8005324:	9000      	str	r0, [sp, #0]
 8005326:	9101      	str	r1, [sp, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	da13      	bge.n	8005354 <__ieee754_pow+0x124>
 800532c:	003a      	movs	r2, r7
 800532e:	0033      	movs	r3, r6
 8005330:	2000      	movs	r0, #0
 8005332:	494c      	ldr	r1, [pc, #304]	; (8005464 <__ieee754_pow+0x234>)
 8005334:	f7fb fe68 	bl	8001008 <__aeabi_ddiv>
 8005338:	e7a7      	b.n	800528a <__ieee754_pow+0x5a>
 800533a:	2302      	movs	r3, #2
 800533c:	e7c3      	b.n	80052c6 <__ieee754_pow+0x96>
 800533e:	9b04      	ldr	r3, [sp, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	dad5      	bge.n	80052f0 <__ieee754_pow+0xc0>
 8005344:	2280      	movs	r2, #128	; 0x80
 8005346:	0612      	lsls	r2, r2, #24
 8005348:	4694      	mov	ip, r2
 800534a:	9b02      	ldr	r3, [sp, #8]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	4463      	add	r3, ip
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	9800      	ldr	r0, [sp, #0]
 8005356:	9901      	ldr	r1, [sp, #4]
 8005358:	b015      	add	sp, #84	; 0x54
 800535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	9a04      	ldr	r2, [sp, #16]
 8005360:	05db      	lsls	r3, r3, #23
 8005362:	429a      	cmp	r2, r3
 8005364:	d106      	bne.n	8005374 <__ieee754_pow+0x144>
 8005366:	003a      	movs	r2, r7
 8005368:	0033      	movs	r3, r6
 800536a:	0038      	movs	r0, r7
 800536c:	0031      	movs	r1, r6
 800536e:	f7fc fa55 	bl	800181c <__aeabi_dmul>
 8005372:	e78a      	b.n	800528a <__ieee754_pow+0x5a>
 8005374:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <__ieee754_pow+0x238>)
 8005376:	9a04      	ldr	r2, [sp, #16]
 8005378:	429a      	cmp	r2, r3
 800537a:	d106      	bne.n	800538a <__ieee754_pow+0x15a>
 800537c:	2e00      	cmp	r6, #0
 800537e:	db04      	blt.n	800538a <__ieee754_pow+0x15a>
 8005380:	0038      	movs	r0, r7
 8005382:	0031      	movs	r1, r6
 8005384:	f000 fc4a 	bl	8005c1c <__ieee754_sqrt>
 8005388:	e77f      	b.n	800528a <__ieee754_pow+0x5a>
 800538a:	0038      	movs	r0, r7
 800538c:	0031      	movs	r1, r6
 800538e:	f000 fcf7 	bl	8005d80 <fabs>
 8005392:	9000      	str	r0, [sp, #0]
 8005394:	9101      	str	r1, [sp, #4]
 8005396:	2f00      	cmp	r7, #0
 8005398:	d12e      	bne.n	80053f8 <__ieee754_pow+0x1c8>
 800539a:	2c00      	cmp	r4, #0
 800539c:	d004      	beq.n	80053a8 <__ieee754_pow+0x178>
 800539e:	4a31      	ldr	r2, [pc, #196]	; (8005464 <__ieee754_pow+0x234>)
 80053a0:	00b3      	lsls	r3, r6, #2
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d127      	bne.n	80053f8 <__ieee754_pow+0x1c8>
 80053a8:	9b04      	ldr	r3, [sp, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da07      	bge.n	80053be <__ieee754_pow+0x18e>
 80053ae:	9a00      	ldr	r2, [sp, #0]
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	2000      	movs	r0, #0
 80053b4:	492b      	ldr	r1, [pc, #172]	; (8005464 <__ieee754_pow+0x234>)
 80053b6:	f7fb fe27 	bl	8001008 <__aeabi_ddiv>
 80053ba:	9000      	str	r0, [sp, #0]
 80053bc:	9101      	str	r1, [sp, #4]
 80053be:	9b08      	ldr	r3, [sp, #32]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	dac7      	bge.n	8005354 <__ieee754_pow+0x124>
 80053c4:	4b22      	ldr	r3, [pc, #136]	; (8005450 <__ieee754_pow+0x220>)
 80053c6:	18e4      	adds	r4, r4, r3
 80053c8:	9b06      	ldr	r3, [sp, #24]
 80053ca:	431c      	orrs	r4, r3
 80053cc:	d108      	bne.n	80053e0 <__ieee754_pow+0x1b0>
 80053ce:	9a00      	ldr	r2, [sp, #0]
 80053d0:	9b01      	ldr	r3, [sp, #4]
 80053d2:	0010      	movs	r0, r2
 80053d4:	0019      	movs	r1, r3
 80053d6:	f7fc fc93 	bl	8001d00 <__aeabi_dsub>
 80053da:	0002      	movs	r2, r0
 80053dc:	000b      	movs	r3, r1
 80053de:	e7a9      	b.n	8005334 <__ieee754_pow+0x104>
 80053e0:	9b06      	ldr	r3, [sp, #24]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d1b6      	bne.n	8005354 <__ieee754_pow+0x124>
 80053e6:	9800      	ldr	r0, [sp, #0]
 80053e8:	2180      	movs	r1, #128	; 0x80
 80053ea:	0002      	movs	r2, r0
 80053ec:	9801      	ldr	r0, [sp, #4]
 80053ee:	0609      	lsls	r1, r1, #24
 80053f0:	1843      	adds	r3, r0, r1
 80053f2:	9200      	str	r2, [sp, #0]
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	e7ad      	b.n	8005354 <__ieee754_pow+0x124>
 80053f8:	0ff3      	lsrs	r3, r6, #31
 80053fa:	3b01      	subs	r3, #1
 80053fc:	9310      	str	r3, [sp, #64]	; 0x40
 80053fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005400:	9b06      	ldr	r3, [sp, #24]
 8005402:	4313      	orrs	r3, r2
 8005404:	d104      	bne.n	8005410 <__ieee754_pow+0x1e0>
 8005406:	003a      	movs	r2, r7
 8005408:	0033      	movs	r3, r6
 800540a:	0038      	movs	r0, r7
 800540c:	0031      	movs	r1, r6
 800540e:	e7e2      	b.n	80053d6 <__ieee754_pow+0x1a6>
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <__ieee754_pow+0x23c>)
 8005412:	429d      	cmp	r5, r3
 8005414:	dc00      	bgt.n	8005418 <__ieee754_pow+0x1e8>
 8005416:	e0f7      	b.n	8005608 <__ieee754_pow+0x3d8>
 8005418:	4b15      	ldr	r3, [pc, #84]	; (8005470 <__ieee754_pow+0x240>)
 800541a:	429d      	cmp	r5, r3
 800541c:	dd0b      	ble.n	8005436 <__ieee754_pow+0x206>
 800541e:	4b0f      	ldr	r3, [pc, #60]	; (800545c <__ieee754_pow+0x22c>)
 8005420:	429c      	cmp	r4, r3
 8005422:	dc0e      	bgt.n	8005442 <__ieee754_pow+0x212>
 8005424:	9b04      	ldr	r3, [sp, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	db00      	blt.n	800542c <__ieee754_pow+0x1fc>
 800542a:	e761      	b.n	80052f0 <__ieee754_pow+0xc0>
 800542c:	4a11      	ldr	r2, [pc, #68]	; (8005474 <__ieee754_pow+0x244>)
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <__ieee754_pow+0x248>)
 8005430:	0010      	movs	r0, r2
 8005432:	0019      	movs	r1, r3
 8005434:	e79b      	b.n	800536e <__ieee754_pow+0x13e>
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <__ieee754_pow+0x24c>)
 8005438:	429c      	cmp	r4, r3
 800543a:	ddf3      	ble.n	8005424 <__ieee754_pow+0x1f4>
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <__ieee754_pow+0x234>)
 800543e:	429c      	cmp	r4, r3
 8005440:	dd1e      	ble.n	8005480 <__ieee754_pow+0x250>
 8005442:	9b04      	ldr	r3, [sp, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	dcf1      	bgt.n	800542c <__ieee754_pow+0x1fc>
 8005448:	e752      	b.n	80052f0 <__ieee754_pow+0xc0>
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	7ff00000 	.word	0x7ff00000
 8005450:	c0100000 	.word	0xc0100000
 8005454:	08006109 	.word	0x08006109
 8005458:	433fffff 	.word	0x433fffff
 800545c:	3fefffff 	.word	0x3fefffff
 8005460:	fffffc01 	.word	0xfffffc01
 8005464:	3ff00000 	.word	0x3ff00000
 8005468:	3fe00000 	.word	0x3fe00000
 800546c:	41e00000 	.word	0x41e00000
 8005470:	43f00000 	.word	0x43f00000
 8005474:	8800759c 	.word	0x8800759c
 8005478:	7e37e43c 	.word	0x7e37e43c
 800547c:	3feffffe 	.word	0x3feffffe
 8005480:	2200      	movs	r2, #0
 8005482:	9800      	ldr	r0, [sp, #0]
 8005484:	9901      	ldr	r1, [sp, #4]
 8005486:	4b52      	ldr	r3, [pc, #328]	; (80055d0 <__ieee754_pow+0x3a0>)
 8005488:	f7fc fc3a 	bl	8001d00 <__aeabi_dsub>
 800548c:	22c0      	movs	r2, #192	; 0xc0
 800548e:	4b51      	ldr	r3, [pc, #324]	; (80055d4 <__ieee754_pow+0x3a4>)
 8005490:	05d2      	lsls	r2, r2, #23
 8005492:	0006      	movs	r6, r0
 8005494:	000f      	movs	r7, r1
 8005496:	f7fc f9c1 	bl	800181c <__aeabi_dmul>
 800549a:	4a4f      	ldr	r2, [pc, #316]	; (80055d8 <__ieee754_pow+0x3a8>)
 800549c:	9000      	str	r0, [sp, #0]
 800549e:	9101      	str	r1, [sp, #4]
 80054a0:	4b4e      	ldr	r3, [pc, #312]	; (80055dc <__ieee754_pow+0x3ac>)
 80054a2:	0030      	movs	r0, r6
 80054a4:	0039      	movs	r1, r7
 80054a6:	f7fc f9b9 	bl	800181c <__aeabi_dmul>
 80054aa:	2200      	movs	r2, #0
 80054ac:	9004      	str	r0, [sp, #16]
 80054ae:	9105      	str	r1, [sp, #20]
 80054b0:	4b4b      	ldr	r3, [pc, #300]	; (80055e0 <__ieee754_pow+0x3b0>)
 80054b2:	0030      	movs	r0, r6
 80054b4:	0039      	movs	r1, r7
 80054b6:	f7fc f9b1 	bl	800181c <__aeabi_dmul>
 80054ba:	0002      	movs	r2, r0
 80054bc:	000b      	movs	r3, r1
 80054be:	4849      	ldr	r0, [pc, #292]	; (80055e4 <__ieee754_pow+0x3b4>)
 80054c0:	4949      	ldr	r1, [pc, #292]	; (80055e8 <__ieee754_pow+0x3b8>)
 80054c2:	f7fc fc1d 	bl	8001d00 <__aeabi_dsub>
 80054c6:	0032      	movs	r2, r6
 80054c8:	003b      	movs	r3, r7
 80054ca:	f7fc f9a7 	bl	800181c <__aeabi_dmul>
 80054ce:	0002      	movs	r2, r0
 80054d0:	000b      	movs	r3, r1
 80054d2:	2000      	movs	r0, #0
 80054d4:	4945      	ldr	r1, [pc, #276]	; (80055ec <__ieee754_pow+0x3bc>)
 80054d6:	f7fc fc13 	bl	8001d00 <__aeabi_dsub>
 80054da:	0032      	movs	r2, r6
 80054dc:	0004      	movs	r4, r0
 80054de:	000d      	movs	r5, r1
 80054e0:	003b      	movs	r3, r7
 80054e2:	0030      	movs	r0, r6
 80054e4:	0039      	movs	r1, r7
 80054e6:	f7fc f999 	bl	800181c <__aeabi_dmul>
 80054ea:	0002      	movs	r2, r0
 80054ec:	000b      	movs	r3, r1
 80054ee:	0020      	movs	r0, r4
 80054f0:	0029      	movs	r1, r5
 80054f2:	f7fc f993 	bl	800181c <__aeabi_dmul>
 80054f6:	4a3e      	ldr	r2, [pc, #248]	; (80055f0 <__ieee754_pow+0x3c0>)
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <__ieee754_pow+0x3a4>)
 80054fa:	f7fc f98f 	bl	800181c <__aeabi_dmul>
 80054fe:	0002      	movs	r2, r0
 8005500:	000b      	movs	r3, r1
 8005502:	9804      	ldr	r0, [sp, #16]
 8005504:	9905      	ldr	r1, [sp, #20]
 8005506:	f7fc fbfb 	bl	8001d00 <__aeabi_dsub>
 800550a:	0002      	movs	r2, r0
 800550c:	000b      	movs	r3, r1
 800550e:	0004      	movs	r4, r0
 8005510:	000d      	movs	r5, r1
 8005512:	9800      	ldr	r0, [sp, #0]
 8005514:	9901      	ldr	r1, [sp, #4]
 8005516:	f7fb fa5b 	bl	80009d0 <__aeabi_dadd>
 800551a:	9a00      	ldr	r2, [sp, #0]
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	2000      	movs	r0, #0
 8005520:	9004      	str	r0, [sp, #16]
 8005522:	9105      	str	r1, [sp, #20]
 8005524:	f7fc fbec 	bl	8001d00 <__aeabi_dsub>
 8005528:	0002      	movs	r2, r0
 800552a:	000b      	movs	r3, r1
 800552c:	0020      	movs	r0, r4
 800552e:	0029      	movs	r1, r5
 8005530:	f7fc fbe6 	bl	8001d00 <__aeabi_dsub>
 8005534:	9b06      	ldr	r3, [sp, #24]
 8005536:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005538:	3b01      	subs	r3, #1
 800553a:	0006      	movs	r6, r0
 800553c:	000f      	movs	r7, r1
 800553e:	4313      	orrs	r3, r2
 8005540:	d000      	beq.n	8005544 <__ieee754_pow+0x314>
 8005542:	e1de      	b.n	8005902 <__ieee754_pow+0x6d2>
 8005544:	2300      	movs	r3, #0
 8005546:	4c2b      	ldr	r4, [pc, #172]	; (80055f4 <__ieee754_pow+0x3c4>)
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	9401      	str	r4, [sp, #4]
 800554c:	9c02      	ldr	r4, [sp, #8]
 800554e:	9d03      	ldr	r5, [sp, #12]
 8005550:	9802      	ldr	r0, [sp, #8]
 8005552:	9903      	ldr	r1, [sp, #12]
 8005554:	2400      	movs	r4, #0
 8005556:	002b      	movs	r3, r5
 8005558:	0022      	movs	r2, r4
 800555a:	f7fc fbd1 	bl	8001d00 <__aeabi_dsub>
 800555e:	9a04      	ldr	r2, [sp, #16]
 8005560:	9b05      	ldr	r3, [sp, #20]
 8005562:	f7fc f95b 	bl	800181c <__aeabi_dmul>
 8005566:	9a02      	ldr	r2, [sp, #8]
 8005568:	9b03      	ldr	r3, [sp, #12]
 800556a:	9006      	str	r0, [sp, #24]
 800556c:	9107      	str	r1, [sp, #28]
 800556e:	0030      	movs	r0, r6
 8005570:	0039      	movs	r1, r7
 8005572:	f7fc f953 	bl	800181c <__aeabi_dmul>
 8005576:	0002      	movs	r2, r0
 8005578:	000b      	movs	r3, r1
 800557a:	9806      	ldr	r0, [sp, #24]
 800557c:	9907      	ldr	r1, [sp, #28]
 800557e:	f7fb fa27 	bl	80009d0 <__aeabi_dadd>
 8005582:	0022      	movs	r2, r4
 8005584:	002b      	movs	r3, r5
 8005586:	9006      	str	r0, [sp, #24]
 8005588:	9107      	str	r1, [sp, #28]
 800558a:	9804      	ldr	r0, [sp, #16]
 800558c:	9905      	ldr	r1, [sp, #20]
 800558e:	f7fc f945 	bl	800181c <__aeabi_dmul>
 8005592:	0006      	movs	r6, r0
 8005594:	000f      	movs	r7, r1
 8005596:	000b      	movs	r3, r1
 8005598:	0002      	movs	r2, r0
 800559a:	9806      	ldr	r0, [sp, #24]
 800559c:	9907      	ldr	r1, [sp, #28]
 800559e:	9604      	str	r6, [sp, #16]
 80055a0:	9705      	str	r7, [sp, #20]
 80055a2:	f7fb fa15 	bl	80009d0 <__aeabi_dadd>
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <__ieee754_pow+0x3c8>)
 80055a8:	0005      	movs	r5, r0
 80055aa:	000c      	movs	r4, r1
 80055ac:	9108      	str	r1, [sp, #32]
 80055ae:	4299      	cmp	r1, r3
 80055b0:	dc00      	bgt.n	80055b4 <__ieee754_pow+0x384>
 80055b2:	e2d8      	b.n	8005b66 <__ieee754_pow+0x936>
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <__ieee754_pow+0x3cc>)
 80055b6:	18cb      	adds	r3, r1, r3
 80055b8:	4303      	orrs	r3, r0
 80055ba:	d100      	bne.n	80055be <__ieee754_pow+0x38e>
 80055bc:	e1da      	b.n	8005974 <__ieee754_pow+0x744>
 80055be:	9800      	ldr	r0, [sp, #0]
 80055c0:	9901      	ldr	r1, [sp, #4]
 80055c2:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <__ieee754_pow+0x3d0>)
 80055c4:	4b0f      	ldr	r3, [pc, #60]	; (8005604 <__ieee754_pow+0x3d4>)
 80055c6:	f7fc f929 	bl	800181c <__aeabi_dmul>
 80055ca:	4a0d      	ldr	r2, [pc, #52]	; (8005600 <__ieee754_pow+0x3d0>)
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <__ieee754_pow+0x3d4>)
 80055ce:	e6ce      	b.n	800536e <__ieee754_pow+0x13e>
 80055d0:	3ff00000 	.word	0x3ff00000
 80055d4:	3ff71547 	.word	0x3ff71547
 80055d8:	f85ddf44 	.word	0xf85ddf44
 80055dc:	3e54ae0b 	.word	0x3e54ae0b
 80055e0:	3fd00000 	.word	0x3fd00000
 80055e4:	55555555 	.word	0x55555555
 80055e8:	3fd55555 	.word	0x3fd55555
 80055ec:	3fe00000 	.word	0x3fe00000
 80055f0:	652b82fe 	.word	0x652b82fe
 80055f4:	bff00000 	.word	0xbff00000
 80055f8:	408fffff 	.word	0x408fffff
 80055fc:	bf700000 	.word	0xbf700000
 8005600:	8800759c 	.word	0x8800759c
 8005604:	7e37e43c 	.word	0x7e37e43c
 8005608:	4bbf      	ldr	r3, [pc, #764]	; (8005908 <__ieee754_pow+0x6d8>)
 800560a:	2200      	movs	r2, #0
 800560c:	429c      	cmp	r4, r3
 800560e:	dc0a      	bgt.n	8005626 <__ieee754_pow+0x3f6>
 8005610:	9800      	ldr	r0, [sp, #0]
 8005612:	9901      	ldr	r1, [sp, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	4bbd      	ldr	r3, [pc, #756]	; (800590c <__ieee754_pow+0x6dc>)
 8005618:	f7fc f900 	bl	800181c <__aeabi_dmul>
 800561c:	2235      	movs	r2, #53	; 0x35
 800561e:	9000      	str	r0, [sp, #0]
 8005620:	9101      	str	r1, [sp, #4]
 8005622:	9c01      	ldr	r4, [sp, #4]
 8005624:	4252      	negs	r2, r2
 8005626:	49ba      	ldr	r1, [pc, #744]	; (8005910 <__ieee754_pow+0x6e0>)
 8005628:	1523      	asrs	r3, r4, #20
 800562a:	185b      	adds	r3, r3, r1
 800562c:	189b      	adds	r3, r3, r2
 800562e:	0324      	lsls	r4, r4, #12
 8005630:	4db8      	ldr	r5, [pc, #736]	; (8005914 <__ieee754_pow+0x6e4>)
 8005632:	4ab9      	ldr	r2, [pc, #740]	; (8005918 <__ieee754_pow+0x6e8>)
 8005634:	930d      	str	r3, [sp, #52]	; 0x34
 8005636:	0b23      	lsrs	r3, r4, #12
 8005638:	431d      	orrs	r5, r3
 800563a:	2400      	movs	r4, #0
 800563c:	4293      	cmp	r3, r2
 800563e:	dd09      	ble.n	8005654 <__ieee754_pow+0x424>
 8005640:	4ab6      	ldr	r2, [pc, #728]	; (800591c <__ieee754_pow+0x6ec>)
 8005642:	3401      	adds	r4, #1
 8005644:	4293      	cmp	r3, r2
 8005646:	dd05      	ble.n	8005654 <__ieee754_pow+0x424>
 8005648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800564a:	191b      	adds	r3, r3, r4
 800564c:	2400      	movs	r4, #0
 800564e:	930d      	str	r3, [sp, #52]	; 0x34
 8005650:	4bb3      	ldr	r3, [pc, #716]	; (8005920 <__ieee754_pow+0x6f0>)
 8005652:	18ed      	adds	r5, r5, r3
 8005654:	9800      	ldr	r0, [sp, #0]
 8005656:	9901      	ldr	r1, [sp, #4]
 8005658:	0029      	movs	r1, r5
 800565a:	00e3      	lsls	r3, r4, #3
 800565c:	9311      	str	r3, [sp, #68]	; 0x44
 800565e:	4bb1      	ldr	r3, [pc, #708]	; (8005924 <__ieee754_pow+0x6f4>)
 8005660:	00e2      	lsls	r2, r4, #3
 8005662:	189b      	adds	r3, r3, r2
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	900e      	str	r0, [sp, #56]	; 0x38
 800566a:	910f      	str	r1, [sp, #60]	; 0x3c
 800566c:	920a      	str	r2, [sp, #40]	; 0x28
 800566e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005670:	f7fc fb46 	bl	8001d00 <__aeabi_dsub>
 8005674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005678:	0006      	movs	r6, r0
 800567a:	000f      	movs	r7, r1
 800567c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800567e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005680:	f7fb f9a6 	bl	80009d0 <__aeabi_dadd>
 8005684:	0002      	movs	r2, r0
 8005686:	000b      	movs	r3, r1
 8005688:	2000      	movs	r0, #0
 800568a:	49a2      	ldr	r1, [pc, #648]	; (8005914 <__ieee754_pow+0x6e4>)
 800568c:	f7fb fcbc 	bl	8001008 <__aeabi_ddiv>
 8005690:	9012      	str	r0, [sp, #72]	; 0x48
 8005692:	9113      	str	r1, [sp, #76]	; 0x4c
 8005694:	0002      	movs	r2, r0
 8005696:	000b      	movs	r3, r1
 8005698:	0030      	movs	r0, r6
 800569a:	0039      	movs	r1, r7
 800569c:	f7fc f8be 	bl	800181c <__aeabi_dmul>
 80056a0:	9008      	str	r0, [sp, #32]
 80056a2:	9109      	str	r1, [sp, #36]	; 0x24
 80056a4:	9a08      	ldr	r2, [sp, #32]
 80056a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	9204      	str	r2, [sp, #16]
 80056ac:	9305      	str	r3, [sp, #20]
 80056ae:	2300      	movs	r3, #0
 80056b0:	0589      	lsls	r1, r1, #22
 80056b2:	106d      	asrs	r5, r5, #1
 80056b4:	430d      	orrs	r5, r1
 80056b6:	2180      	movs	r1, #128	; 0x80
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	9a04      	ldr	r2, [sp, #16]
 80056bc:	9b05      	ldr	r3, [sp, #20]
 80056be:	9200      	str	r2, [sp, #0]
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	0309      	lsls	r1, r1, #12
 80056c6:	186d      	adds	r5, r5, r1
 80056c8:	04a4      	lsls	r4, r4, #18
 80056ca:	192b      	adds	r3, r5, r4
 80056cc:	9800      	ldr	r0, [sp, #0]
 80056ce:	9901      	ldr	r1, [sp, #4]
 80056d0:	0014      	movs	r4, r2
 80056d2:	001d      	movs	r5, r3
 80056d4:	f7fc f8a2 	bl	800181c <__aeabi_dmul>
 80056d8:	0002      	movs	r2, r0
 80056da:	000b      	movs	r3, r1
 80056dc:	0030      	movs	r0, r6
 80056de:	0039      	movs	r1, r7
 80056e0:	f7fc fb0e 	bl	8001d00 <__aeabi_dsub>
 80056e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056e8:	0006      	movs	r6, r0
 80056ea:	000f      	movs	r7, r1
 80056ec:	0020      	movs	r0, r4
 80056ee:	0029      	movs	r1, r5
 80056f0:	f7fc fb06 	bl	8001d00 <__aeabi_dsub>
 80056f4:	0002      	movs	r2, r0
 80056f6:	000b      	movs	r3, r1
 80056f8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80056fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056fc:	f7fc fb00 	bl	8001d00 <__aeabi_dsub>
 8005700:	9a00      	ldr	r2, [sp, #0]
 8005702:	9b01      	ldr	r3, [sp, #4]
 8005704:	f7fc f88a 	bl	800181c <__aeabi_dmul>
 8005708:	0002      	movs	r2, r0
 800570a:	000b      	movs	r3, r1
 800570c:	0030      	movs	r0, r6
 800570e:	0039      	movs	r1, r7
 8005710:	f7fc faf6 	bl	8001d00 <__aeabi_dsub>
 8005714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005718:	f7fc f880 	bl	800181c <__aeabi_dmul>
 800571c:	9a08      	ldr	r2, [sp, #32]
 800571e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005720:	900a      	str	r0, [sp, #40]	; 0x28
 8005722:	910b      	str	r1, [sp, #44]	; 0x2c
 8005724:	0010      	movs	r0, r2
 8005726:	0019      	movs	r1, r3
 8005728:	f7fc f878 	bl	800181c <__aeabi_dmul>
 800572c:	0006      	movs	r6, r0
 800572e:	000f      	movs	r7, r1
 8005730:	4a7d      	ldr	r2, [pc, #500]	; (8005928 <__ieee754_pow+0x6f8>)
 8005732:	4b7e      	ldr	r3, [pc, #504]	; (800592c <__ieee754_pow+0x6fc>)
 8005734:	f7fc f872 	bl	800181c <__aeabi_dmul>
 8005738:	4a7d      	ldr	r2, [pc, #500]	; (8005930 <__ieee754_pow+0x700>)
 800573a:	4b7e      	ldr	r3, [pc, #504]	; (8005934 <__ieee754_pow+0x704>)
 800573c:	f7fb f948 	bl	80009d0 <__aeabi_dadd>
 8005740:	0032      	movs	r2, r6
 8005742:	003b      	movs	r3, r7
 8005744:	f7fc f86a 	bl	800181c <__aeabi_dmul>
 8005748:	4a7b      	ldr	r2, [pc, #492]	; (8005938 <__ieee754_pow+0x708>)
 800574a:	4b7c      	ldr	r3, [pc, #496]	; (800593c <__ieee754_pow+0x70c>)
 800574c:	f7fb f940 	bl	80009d0 <__aeabi_dadd>
 8005750:	0032      	movs	r2, r6
 8005752:	003b      	movs	r3, r7
 8005754:	f7fc f862 	bl	800181c <__aeabi_dmul>
 8005758:	4a79      	ldr	r2, [pc, #484]	; (8005940 <__ieee754_pow+0x710>)
 800575a:	4b7a      	ldr	r3, [pc, #488]	; (8005944 <__ieee754_pow+0x714>)
 800575c:	f7fb f938 	bl	80009d0 <__aeabi_dadd>
 8005760:	0032      	movs	r2, r6
 8005762:	003b      	movs	r3, r7
 8005764:	f7fc f85a 	bl	800181c <__aeabi_dmul>
 8005768:	4a77      	ldr	r2, [pc, #476]	; (8005948 <__ieee754_pow+0x718>)
 800576a:	4b78      	ldr	r3, [pc, #480]	; (800594c <__ieee754_pow+0x71c>)
 800576c:	f7fb f930 	bl	80009d0 <__aeabi_dadd>
 8005770:	0032      	movs	r2, r6
 8005772:	003b      	movs	r3, r7
 8005774:	f7fc f852 	bl	800181c <__aeabi_dmul>
 8005778:	4a75      	ldr	r2, [pc, #468]	; (8005950 <__ieee754_pow+0x720>)
 800577a:	4b76      	ldr	r3, [pc, #472]	; (8005954 <__ieee754_pow+0x724>)
 800577c:	f7fb f928 	bl	80009d0 <__aeabi_dadd>
 8005780:	0032      	movs	r2, r6
 8005782:	0004      	movs	r4, r0
 8005784:	000d      	movs	r5, r1
 8005786:	003b      	movs	r3, r7
 8005788:	0030      	movs	r0, r6
 800578a:	0039      	movs	r1, r7
 800578c:	f7fc f846 	bl	800181c <__aeabi_dmul>
 8005790:	0002      	movs	r2, r0
 8005792:	000b      	movs	r3, r1
 8005794:	0020      	movs	r0, r4
 8005796:	0029      	movs	r1, r5
 8005798:	f7fc f840 	bl	800181c <__aeabi_dmul>
 800579c:	9a00      	ldr	r2, [sp, #0]
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	0004      	movs	r4, r0
 80057a2:	000d      	movs	r5, r1
 80057a4:	9808      	ldr	r0, [sp, #32]
 80057a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057a8:	f7fb f912 	bl	80009d0 <__aeabi_dadd>
 80057ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057b0:	f7fc f834 	bl	800181c <__aeabi_dmul>
 80057b4:	0022      	movs	r2, r4
 80057b6:	002b      	movs	r3, r5
 80057b8:	f7fb f90a 	bl	80009d0 <__aeabi_dadd>
 80057bc:	9a00      	ldr	r2, [sp, #0]
 80057be:	9b01      	ldr	r3, [sp, #4]
 80057c0:	900e      	str	r0, [sp, #56]	; 0x38
 80057c2:	910f      	str	r1, [sp, #60]	; 0x3c
 80057c4:	0010      	movs	r0, r2
 80057c6:	0019      	movs	r1, r3
 80057c8:	f7fc f828 	bl	800181c <__aeabi_dmul>
 80057cc:	2200      	movs	r2, #0
 80057ce:	4b62      	ldr	r3, [pc, #392]	; (8005958 <__ieee754_pow+0x728>)
 80057d0:	0004      	movs	r4, r0
 80057d2:	000d      	movs	r5, r1
 80057d4:	f7fb f8fc 	bl	80009d0 <__aeabi_dadd>
 80057d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057dc:	f7fb f8f8 	bl	80009d0 <__aeabi_dadd>
 80057e0:	9e04      	ldr	r6, [sp, #16]
 80057e2:	000f      	movs	r7, r1
 80057e4:	0032      	movs	r2, r6
 80057e6:	000b      	movs	r3, r1
 80057e8:	9800      	ldr	r0, [sp, #0]
 80057ea:	9901      	ldr	r1, [sp, #4]
 80057ec:	f7fc f816 	bl	800181c <__aeabi_dmul>
 80057f0:	2200      	movs	r2, #0
 80057f2:	9000      	str	r0, [sp, #0]
 80057f4:	9101      	str	r1, [sp, #4]
 80057f6:	4b58      	ldr	r3, [pc, #352]	; (8005958 <__ieee754_pow+0x728>)
 80057f8:	0030      	movs	r0, r6
 80057fa:	0039      	movs	r1, r7
 80057fc:	f7fc fa80 	bl	8001d00 <__aeabi_dsub>
 8005800:	0022      	movs	r2, r4
 8005802:	002b      	movs	r3, r5
 8005804:	f7fc fa7c 	bl	8001d00 <__aeabi_dsub>
 8005808:	0002      	movs	r2, r0
 800580a:	000b      	movs	r3, r1
 800580c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800580e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005810:	f7fc fa76 	bl	8001d00 <__aeabi_dsub>
 8005814:	9a08      	ldr	r2, [sp, #32]
 8005816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005818:	f7fc f800 	bl	800181c <__aeabi_dmul>
 800581c:	0032      	movs	r2, r6
 800581e:	0004      	movs	r4, r0
 8005820:	000d      	movs	r5, r1
 8005822:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005826:	003b      	movs	r3, r7
 8005828:	f7fb fff8 	bl	800181c <__aeabi_dmul>
 800582c:	0002      	movs	r2, r0
 800582e:	000b      	movs	r3, r1
 8005830:	0020      	movs	r0, r4
 8005832:	0029      	movs	r1, r5
 8005834:	f7fb f8cc 	bl	80009d0 <__aeabi_dadd>
 8005838:	0004      	movs	r4, r0
 800583a:	000d      	movs	r5, r1
 800583c:	0002      	movs	r2, r0
 800583e:	000b      	movs	r3, r1
 8005840:	9800      	ldr	r0, [sp, #0]
 8005842:	9901      	ldr	r1, [sp, #4]
 8005844:	f7fb f8c4 	bl	80009d0 <__aeabi_dadd>
 8005848:	22e0      	movs	r2, #224	; 0xe0
 800584a:	9e04      	ldr	r6, [sp, #16]
 800584c:	0612      	lsls	r2, r2, #24
 800584e:	4b43      	ldr	r3, [pc, #268]	; (800595c <__ieee754_pow+0x72c>)
 8005850:	0030      	movs	r0, r6
 8005852:	000f      	movs	r7, r1
 8005854:	f7fb ffe2 	bl	800181c <__aeabi_dmul>
 8005858:	9008      	str	r0, [sp, #32]
 800585a:	9109      	str	r1, [sp, #36]	; 0x24
 800585c:	9a00      	ldr	r2, [sp, #0]
 800585e:	9b01      	ldr	r3, [sp, #4]
 8005860:	0030      	movs	r0, r6
 8005862:	0039      	movs	r1, r7
 8005864:	f7fc fa4c 	bl	8001d00 <__aeabi_dsub>
 8005868:	0002      	movs	r2, r0
 800586a:	000b      	movs	r3, r1
 800586c:	0020      	movs	r0, r4
 800586e:	0029      	movs	r1, r5
 8005870:	f7fc fa46 	bl	8001d00 <__aeabi_dsub>
 8005874:	4a3a      	ldr	r2, [pc, #232]	; (8005960 <__ieee754_pow+0x730>)
 8005876:	4b39      	ldr	r3, [pc, #228]	; (800595c <__ieee754_pow+0x72c>)
 8005878:	f7fb ffd0 	bl	800181c <__aeabi_dmul>
 800587c:	4a39      	ldr	r2, [pc, #228]	; (8005964 <__ieee754_pow+0x734>)
 800587e:	0004      	movs	r4, r0
 8005880:	000d      	movs	r5, r1
 8005882:	4b39      	ldr	r3, [pc, #228]	; (8005968 <__ieee754_pow+0x738>)
 8005884:	0030      	movs	r0, r6
 8005886:	0039      	movs	r1, r7
 8005888:	f7fb ffc8 	bl	800181c <__aeabi_dmul>
 800588c:	0002      	movs	r2, r0
 800588e:	000b      	movs	r3, r1
 8005890:	0020      	movs	r0, r4
 8005892:	0029      	movs	r1, r5
 8005894:	f7fb f89c 	bl	80009d0 <__aeabi_dadd>
 8005898:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800589a:	4b34      	ldr	r3, [pc, #208]	; (800596c <__ieee754_pow+0x73c>)
 800589c:	189b      	adds	r3, r3, r2
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f7fb f895 	bl	80009d0 <__aeabi_dadd>
 80058a6:	9000      	str	r0, [sp, #0]
 80058a8:	9101      	str	r1, [sp, #4]
 80058aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80058ac:	f7fc fd8c 	bl	80023c8 <__aeabi_i2d>
 80058b0:	0004      	movs	r4, r0
 80058b2:	000d      	movs	r5, r1
 80058b4:	9808      	ldr	r0, [sp, #32]
 80058b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058ba:	4b2d      	ldr	r3, [pc, #180]	; (8005970 <__ieee754_pow+0x740>)
 80058bc:	189b      	adds	r3, r3, r2
 80058be:	681e      	ldr	r6, [r3, #0]
 80058c0:	685f      	ldr	r7, [r3, #4]
 80058c2:	9a00      	ldr	r2, [sp, #0]
 80058c4:	9b01      	ldr	r3, [sp, #4]
 80058c6:	f7fb f883 	bl	80009d0 <__aeabi_dadd>
 80058ca:	0032      	movs	r2, r6
 80058cc:	003b      	movs	r3, r7
 80058ce:	f7fb f87f 	bl	80009d0 <__aeabi_dadd>
 80058d2:	0022      	movs	r2, r4
 80058d4:	002b      	movs	r3, r5
 80058d6:	f7fb f87b 	bl	80009d0 <__aeabi_dadd>
 80058da:	9804      	ldr	r0, [sp, #16]
 80058dc:	0022      	movs	r2, r4
 80058de:	002b      	movs	r3, r5
 80058e0:	9004      	str	r0, [sp, #16]
 80058e2:	9105      	str	r1, [sp, #20]
 80058e4:	f7fc fa0c 	bl	8001d00 <__aeabi_dsub>
 80058e8:	0032      	movs	r2, r6
 80058ea:	003b      	movs	r3, r7
 80058ec:	f7fc fa08 	bl	8001d00 <__aeabi_dsub>
 80058f0:	9a08      	ldr	r2, [sp, #32]
 80058f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f4:	f7fc fa04 	bl	8001d00 <__aeabi_dsub>
 80058f8:	0002      	movs	r2, r0
 80058fa:	000b      	movs	r3, r1
 80058fc:	9800      	ldr	r0, [sp, #0]
 80058fe:	9901      	ldr	r1, [sp, #4]
 8005900:	e616      	b.n	8005530 <__ieee754_pow+0x300>
 8005902:	2300      	movs	r3, #0
 8005904:	4c03      	ldr	r4, [pc, #12]	; (8005914 <__ieee754_pow+0x6e4>)
 8005906:	e61f      	b.n	8005548 <__ieee754_pow+0x318>
 8005908:	000fffff 	.word	0x000fffff
 800590c:	43400000 	.word	0x43400000
 8005910:	fffffc01 	.word	0xfffffc01
 8005914:	3ff00000 	.word	0x3ff00000
 8005918:	0003988e 	.word	0x0003988e
 800591c:	000bb679 	.word	0x000bb679
 8005920:	fff00000 	.word	0xfff00000
 8005924:	08006110 	.word	0x08006110
 8005928:	4a454eef 	.word	0x4a454eef
 800592c:	3fca7e28 	.word	0x3fca7e28
 8005930:	93c9db65 	.word	0x93c9db65
 8005934:	3fcd864a 	.word	0x3fcd864a
 8005938:	a91d4101 	.word	0xa91d4101
 800593c:	3fd17460 	.word	0x3fd17460
 8005940:	518f264d 	.word	0x518f264d
 8005944:	3fd55555 	.word	0x3fd55555
 8005948:	db6fabff 	.word	0xdb6fabff
 800594c:	3fdb6db6 	.word	0x3fdb6db6
 8005950:	33333303 	.word	0x33333303
 8005954:	3fe33333 	.word	0x3fe33333
 8005958:	40080000 	.word	0x40080000
 800595c:	3feec709 	.word	0x3feec709
 8005960:	dc3a03fd 	.word	0xdc3a03fd
 8005964:	145b01f5 	.word	0x145b01f5
 8005968:	be3e2fe0 	.word	0xbe3e2fe0
 800596c:	08006130 	.word	0x08006130
 8005970:	08006120 	.word	0x08006120
 8005974:	4a8f      	ldr	r2, [pc, #572]	; (8005bb4 <__ieee754_pow+0x984>)
 8005976:	4b90      	ldr	r3, [pc, #576]	; (8005bb8 <__ieee754_pow+0x988>)
 8005978:	9806      	ldr	r0, [sp, #24]
 800597a:	9907      	ldr	r1, [sp, #28]
 800597c:	f7fb f828 	bl	80009d0 <__aeabi_dadd>
 8005980:	0032      	movs	r2, r6
 8005982:	9002      	str	r0, [sp, #8]
 8005984:	9103      	str	r1, [sp, #12]
 8005986:	003b      	movs	r3, r7
 8005988:	0028      	movs	r0, r5
 800598a:	0021      	movs	r1, r4
 800598c:	f7fc f9b8 	bl	8001d00 <__aeabi_dsub>
 8005990:	0002      	movs	r2, r0
 8005992:	000b      	movs	r3, r1
 8005994:	9802      	ldr	r0, [sp, #8]
 8005996:	9903      	ldr	r1, [sp, #12]
 8005998:	f7fa fc6c 	bl	8000274 <__aeabi_dcmpgt>
 800599c:	2800      	cmp	r0, #0
 800599e:	d000      	beq.n	80059a2 <__ieee754_pow+0x772>
 80059a0:	e60d      	b.n	80055be <__ieee754_pow+0x38e>
 80059a2:	2100      	movs	r1, #0
 80059a4:	4a85      	ldr	r2, [pc, #532]	; (8005bbc <__ieee754_pow+0x98c>)
 80059a6:	0063      	lsls	r3, r4, #1
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	9102      	str	r1, [sp, #8]
 80059ac:	4293      	cmp	r3, r2
 80059ae:	dd25      	ble.n	80059fc <__ieee754_pow+0x7cc>
 80059b0:	4a83      	ldr	r2, [pc, #524]	; (8005bc0 <__ieee754_pow+0x990>)
 80059b2:	151b      	asrs	r3, r3, #20
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	2280      	movs	r2, #128	; 0x80
 80059b8:	0352      	lsls	r2, r2, #13
 80059ba:	4694      	mov	ip, r2
 80059bc:	411a      	asrs	r2, r3
 80059be:	1914      	adds	r4, r2, r4
 80059c0:	0060      	lsls	r0, r4, #1
 80059c2:	4b80      	ldr	r3, [pc, #512]	; (8005bc4 <__ieee754_pow+0x994>)
 80059c4:	0d40      	lsrs	r0, r0, #21
 80059c6:	4d80      	ldr	r5, [pc, #512]	; (8005bc8 <__ieee754_pow+0x998>)
 80059c8:	18c0      	adds	r0, r0, r3
 80059ca:	4105      	asrs	r5, r0
 80059cc:	0021      	movs	r1, r4
 80059ce:	43a9      	bics	r1, r5
 80059d0:	000b      	movs	r3, r1
 80059d2:	4661      	mov	r1, ip
 80059d4:	0324      	lsls	r4, r4, #12
 80059d6:	0b24      	lsrs	r4, r4, #12
 80059d8:	4321      	orrs	r1, r4
 80059da:	2414      	movs	r4, #20
 80059dc:	1a20      	subs	r0, r4, r0
 80059de:	4101      	asrs	r1, r0
 80059e0:	9102      	str	r1, [sp, #8]
 80059e2:	9908      	ldr	r1, [sp, #32]
 80059e4:	2200      	movs	r2, #0
 80059e6:	2900      	cmp	r1, #0
 80059e8:	da02      	bge.n	80059f0 <__ieee754_pow+0x7c0>
 80059ea:	9902      	ldr	r1, [sp, #8]
 80059ec:	4249      	negs	r1, r1
 80059ee:	9102      	str	r1, [sp, #8]
 80059f0:	0030      	movs	r0, r6
 80059f2:	0039      	movs	r1, r7
 80059f4:	f7fc f984 	bl	8001d00 <__aeabi_dsub>
 80059f8:	9004      	str	r0, [sp, #16]
 80059fa:	9105      	str	r1, [sp, #20]
 80059fc:	9a06      	ldr	r2, [sp, #24]
 80059fe:	9b07      	ldr	r3, [sp, #28]
 8005a00:	9804      	ldr	r0, [sp, #16]
 8005a02:	9905      	ldr	r1, [sp, #20]
 8005a04:	2600      	movs	r6, #0
 8005a06:	f7fa ffe3 	bl	80009d0 <__aeabi_dadd>
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	4b6f      	ldr	r3, [pc, #444]	; (8005bcc <__ieee754_pow+0x99c>)
 8005a0e:	0030      	movs	r0, r6
 8005a10:	000f      	movs	r7, r1
 8005a12:	f7fb ff03 	bl	800181c <__aeabi_dmul>
 8005a16:	9a04      	ldr	r2, [sp, #16]
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	9008      	str	r0, [sp, #32]
 8005a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8005a1e:	0030      	movs	r0, r6
 8005a20:	0039      	movs	r1, r7
 8005a22:	f7fc f96d 	bl	8001d00 <__aeabi_dsub>
 8005a26:	0002      	movs	r2, r0
 8005a28:	000b      	movs	r3, r1
 8005a2a:	9806      	ldr	r0, [sp, #24]
 8005a2c:	9907      	ldr	r1, [sp, #28]
 8005a2e:	f7fc f967 	bl	8001d00 <__aeabi_dsub>
 8005a32:	4a67      	ldr	r2, [pc, #412]	; (8005bd0 <__ieee754_pow+0x9a0>)
 8005a34:	4b67      	ldr	r3, [pc, #412]	; (8005bd4 <__ieee754_pow+0x9a4>)
 8005a36:	f7fb fef1 	bl	800181c <__aeabi_dmul>
 8005a3a:	4a67      	ldr	r2, [pc, #412]	; (8005bd8 <__ieee754_pow+0x9a8>)
 8005a3c:	0004      	movs	r4, r0
 8005a3e:	000d      	movs	r5, r1
 8005a40:	4b66      	ldr	r3, [pc, #408]	; (8005bdc <__ieee754_pow+0x9ac>)
 8005a42:	0030      	movs	r0, r6
 8005a44:	0039      	movs	r1, r7
 8005a46:	f7fb fee9 	bl	800181c <__aeabi_dmul>
 8005a4a:	0002      	movs	r2, r0
 8005a4c:	000b      	movs	r3, r1
 8005a4e:	0020      	movs	r0, r4
 8005a50:	0029      	movs	r1, r5
 8005a52:	f7fa ffbd 	bl	80009d0 <__aeabi_dadd>
 8005a56:	0004      	movs	r4, r0
 8005a58:	000d      	movs	r5, r1
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	000b      	movs	r3, r1
 8005a5e:	9808      	ldr	r0, [sp, #32]
 8005a60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a62:	f7fa ffb5 	bl	80009d0 <__aeabi_dadd>
 8005a66:	9a08      	ldr	r2, [sp, #32]
 8005a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6a:	0006      	movs	r6, r0
 8005a6c:	000f      	movs	r7, r1
 8005a6e:	f7fc f947 	bl	8001d00 <__aeabi_dsub>
 8005a72:	0002      	movs	r2, r0
 8005a74:	000b      	movs	r3, r1
 8005a76:	0020      	movs	r0, r4
 8005a78:	0029      	movs	r1, r5
 8005a7a:	f7fc f941 	bl	8001d00 <__aeabi_dsub>
 8005a7e:	0032      	movs	r2, r6
 8005a80:	9004      	str	r0, [sp, #16]
 8005a82:	9105      	str	r1, [sp, #20]
 8005a84:	003b      	movs	r3, r7
 8005a86:	0030      	movs	r0, r6
 8005a88:	0039      	movs	r1, r7
 8005a8a:	f7fb fec7 	bl	800181c <__aeabi_dmul>
 8005a8e:	0004      	movs	r4, r0
 8005a90:	000d      	movs	r5, r1
 8005a92:	4a53      	ldr	r2, [pc, #332]	; (8005be0 <__ieee754_pow+0x9b0>)
 8005a94:	4b53      	ldr	r3, [pc, #332]	; (8005be4 <__ieee754_pow+0x9b4>)
 8005a96:	f7fb fec1 	bl	800181c <__aeabi_dmul>
 8005a9a:	4a53      	ldr	r2, [pc, #332]	; (8005be8 <__ieee754_pow+0x9b8>)
 8005a9c:	4b53      	ldr	r3, [pc, #332]	; (8005bec <__ieee754_pow+0x9bc>)
 8005a9e:	f7fc f92f 	bl	8001d00 <__aeabi_dsub>
 8005aa2:	0022      	movs	r2, r4
 8005aa4:	002b      	movs	r3, r5
 8005aa6:	f7fb feb9 	bl	800181c <__aeabi_dmul>
 8005aaa:	4a51      	ldr	r2, [pc, #324]	; (8005bf0 <__ieee754_pow+0x9c0>)
 8005aac:	4b51      	ldr	r3, [pc, #324]	; (8005bf4 <__ieee754_pow+0x9c4>)
 8005aae:	f7fa ff8f 	bl	80009d0 <__aeabi_dadd>
 8005ab2:	0022      	movs	r2, r4
 8005ab4:	002b      	movs	r3, r5
 8005ab6:	f7fb feb1 	bl	800181c <__aeabi_dmul>
 8005aba:	4a4f      	ldr	r2, [pc, #316]	; (8005bf8 <__ieee754_pow+0x9c8>)
 8005abc:	4b4f      	ldr	r3, [pc, #316]	; (8005bfc <__ieee754_pow+0x9cc>)
 8005abe:	f7fc f91f 	bl	8001d00 <__aeabi_dsub>
 8005ac2:	0022      	movs	r2, r4
 8005ac4:	002b      	movs	r3, r5
 8005ac6:	f7fb fea9 	bl	800181c <__aeabi_dmul>
 8005aca:	4a4d      	ldr	r2, [pc, #308]	; (8005c00 <__ieee754_pow+0x9d0>)
 8005acc:	4b4d      	ldr	r3, [pc, #308]	; (8005c04 <__ieee754_pow+0x9d4>)
 8005ace:	f7fa ff7f 	bl	80009d0 <__aeabi_dadd>
 8005ad2:	0022      	movs	r2, r4
 8005ad4:	002b      	movs	r3, r5
 8005ad6:	f7fb fea1 	bl	800181c <__aeabi_dmul>
 8005ada:	0002      	movs	r2, r0
 8005adc:	000b      	movs	r3, r1
 8005ade:	0030      	movs	r0, r6
 8005ae0:	0039      	movs	r1, r7
 8005ae2:	f7fc f90d 	bl	8001d00 <__aeabi_dsub>
 8005ae6:	0004      	movs	r4, r0
 8005ae8:	000d      	movs	r5, r1
 8005aea:	0002      	movs	r2, r0
 8005aec:	000b      	movs	r3, r1
 8005aee:	0030      	movs	r0, r6
 8005af0:	0039      	movs	r1, r7
 8005af2:	f7fb fe93 	bl	800181c <__aeabi_dmul>
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	9006      	str	r0, [sp, #24]
 8005afa:	9107      	str	r1, [sp, #28]
 8005afc:	2200      	movs	r2, #0
 8005afe:	05db      	lsls	r3, r3, #23
 8005b00:	0020      	movs	r0, r4
 8005b02:	0029      	movs	r1, r5
 8005b04:	f7fc f8fc 	bl	8001d00 <__aeabi_dsub>
 8005b08:	0002      	movs	r2, r0
 8005b0a:	000b      	movs	r3, r1
 8005b0c:	9806      	ldr	r0, [sp, #24]
 8005b0e:	9907      	ldr	r1, [sp, #28]
 8005b10:	f7fb fa7a 	bl	8001008 <__aeabi_ddiv>
 8005b14:	9a04      	ldr	r2, [sp, #16]
 8005b16:	9b05      	ldr	r3, [sp, #20]
 8005b18:	0004      	movs	r4, r0
 8005b1a:	000d      	movs	r5, r1
 8005b1c:	0030      	movs	r0, r6
 8005b1e:	0039      	movs	r1, r7
 8005b20:	f7fb fe7c 	bl	800181c <__aeabi_dmul>
 8005b24:	9a04      	ldr	r2, [sp, #16]
 8005b26:	9b05      	ldr	r3, [sp, #20]
 8005b28:	f7fa ff52 	bl	80009d0 <__aeabi_dadd>
 8005b2c:	0002      	movs	r2, r0
 8005b2e:	000b      	movs	r3, r1
 8005b30:	0020      	movs	r0, r4
 8005b32:	0029      	movs	r1, r5
 8005b34:	f7fc f8e4 	bl	8001d00 <__aeabi_dsub>
 8005b38:	0032      	movs	r2, r6
 8005b3a:	003b      	movs	r3, r7
 8005b3c:	f7fc f8e0 	bl	8001d00 <__aeabi_dsub>
 8005b40:	0002      	movs	r2, r0
 8005b42:	000b      	movs	r3, r1
 8005b44:	2000      	movs	r0, #0
 8005b46:	4930      	ldr	r1, [pc, #192]	; (8005c08 <__ieee754_pow+0x9d8>)
 8005b48:	f7fc f8da 	bl	8001d00 <__aeabi_dsub>
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	051b      	lsls	r3, r3, #20
 8005b50:	185b      	adds	r3, r3, r1
 8005b52:	151a      	asrs	r2, r3, #20
 8005b54:	2a00      	cmp	r2, #0
 8005b56:	dc26      	bgt.n	8005ba6 <__ieee754_pow+0x976>
 8005b58:	9a02      	ldr	r2, [sp, #8]
 8005b5a:	f000 f9ad 	bl	8005eb8 <scalbn>
 8005b5e:	9a00      	ldr	r2, [sp, #0]
 8005b60:	9b01      	ldr	r3, [sp, #4]
 8005b62:	f7ff fc04 	bl	800536e <__ieee754_pow+0x13e>
 8005b66:	4a29      	ldr	r2, [pc, #164]	; (8005c0c <__ieee754_pow+0x9dc>)
 8005b68:	004b      	lsls	r3, r1, #1
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	dc00      	bgt.n	8005b72 <__ieee754_pow+0x942>
 8005b70:	e717      	b.n	80059a2 <__ieee754_pow+0x772>
 8005b72:	4b27      	ldr	r3, [pc, #156]	; (8005c10 <__ieee754_pow+0x9e0>)
 8005b74:	18cb      	adds	r3, r1, r3
 8005b76:	4303      	orrs	r3, r0
 8005b78:	d009      	beq.n	8005b8e <__ieee754_pow+0x95e>
 8005b7a:	9800      	ldr	r0, [sp, #0]
 8005b7c:	9901      	ldr	r1, [sp, #4]
 8005b7e:	4a25      	ldr	r2, [pc, #148]	; (8005c14 <__ieee754_pow+0x9e4>)
 8005b80:	4b25      	ldr	r3, [pc, #148]	; (8005c18 <__ieee754_pow+0x9e8>)
 8005b82:	f7fb fe4b 	bl	800181c <__aeabi_dmul>
 8005b86:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <__ieee754_pow+0x9e4>)
 8005b88:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <__ieee754_pow+0x9e8>)
 8005b8a:	f7ff fbf0 	bl	800536e <__ieee754_pow+0x13e>
 8005b8e:	0032      	movs	r2, r6
 8005b90:	003b      	movs	r3, r7
 8005b92:	f7fc f8b5 	bl	8001d00 <__aeabi_dsub>
 8005b96:	9a06      	ldr	r2, [sp, #24]
 8005b98:	9b07      	ldr	r3, [sp, #28]
 8005b9a:	f7fa fb75 	bl	8000288 <__aeabi_dcmpge>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d100      	bne.n	8005ba4 <__ieee754_pow+0x974>
 8005ba2:	e6fe      	b.n	80059a2 <__ieee754_pow+0x772>
 8005ba4:	e7e9      	b.n	8005b7a <__ieee754_pow+0x94a>
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	e7d9      	b.n	8005b5e <__ieee754_pow+0x92e>
 8005baa:	2300      	movs	r3, #0
 8005bac:	4c16      	ldr	r4, [pc, #88]	; (8005c08 <__ieee754_pow+0x9d8>)
 8005bae:	f7ff fba1 	bl	80052f4 <__ieee754_pow+0xc4>
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	652b82fe 	.word	0x652b82fe
 8005bb8:	3c971547 	.word	0x3c971547
 8005bbc:	3fe00000 	.word	0x3fe00000
 8005bc0:	fffffc02 	.word	0xfffffc02
 8005bc4:	fffffc01 	.word	0xfffffc01
 8005bc8:	000fffff 	.word	0x000fffff
 8005bcc:	3fe62e43 	.word	0x3fe62e43
 8005bd0:	fefa39ef 	.word	0xfefa39ef
 8005bd4:	3fe62e42 	.word	0x3fe62e42
 8005bd8:	0ca86c39 	.word	0x0ca86c39
 8005bdc:	be205c61 	.word	0xbe205c61
 8005be0:	72bea4d0 	.word	0x72bea4d0
 8005be4:	3e663769 	.word	0x3e663769
 8005be8:	c5d26bf1 	.word	0xc5d26bf1
 8005bec:	3ebbbd41 	.word	0x3ebbbd41
 8005bf0:	af25de2c 	.word	0xaf25de2c
 8005bf4:	3f11566a 	.word	0x3f11566a
 8005bf8:	16bebd93 	.word	0x16bebd93
 8005bfc:	3f66c16c 	.word	0x3f66c16c
 8005c00:	5555553e 	.word	0x5555553e
 8005c04:	3fc55555 	.word	0x3fc55555
 8005c08:	3ff00000 	.word	0x3ff00000
 8005c0c:	4090cbff 	.word	0x4090cbff
 8005c10:	3f6f3400 	.word	0x3f6f3400
 8005c14:	c2f8f359 	.word	0xc2f8f359
 8005c18:	01a56e1f 	.word	0x01a56e1f

08005c1c <__ieee754_sqrt>:
 8005c1c:	4b55      	ldr	r3, [pc, #340]	; (8005d74 <__ieee754_sqrt+0x158>)
 8005c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c20:	001a      	movs	r2, r3
 8005c22:	0005      	movs	r5, r0
 8005c24:	000c      	movs	r4, r1
 8005c26:	400a      	ands	r2, r1
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d10f      	bne.n	8005c4c <__ieee754_sqrt+0x30>
 8005c2c:	0002      	movs	r2, r0
 8005c2e:	000b      	movs	r3, r1
 8005c30:	f7fb fdf4 	bl	800181c <__aeabi_dmul>
 8005c34:	0002      	movs	r2, r0
 8005c36:	000b      	movs	r3, r1
 8005c38:	0028      	movs	r0, r5
 8005c3a:	0021      	movs	r1, r4
 8005c3c:	f7fa fec8 	bl	80009d0 <__aeabi_dadd>
 8005c40:	0005      	movs	r5, r0
 8005c42:	000c      	movs	r4, r1
 8005c44:	0028      	movs	r0, r5
 8005c46:	0021      	movs	r1, r4
 8005c48:	b003      	add	sp, #12
 8005c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c4c:	0002      	movs	r2, r0
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	dc10      	bgt.n	8005c74 <__ieee754_sqrt+0x58>
 8005c52:	004b      	lsls	r3, r1, #1
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	4303      	orrs	r3, r0
 8005c58:	d0f4      	beq.n	8005c44 <__ieee754_sqrt+0x28>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	4281      	cmp	r1, r0
 8005c5e:	d100      	bne.n	8005c62 <__ieee754_sqrt+0x46>
 8005c60:	e07f      	b.n	8005d62 <__ieee754_sqrt+0x146>
 8005c62:	000b      	movs	r3, r1
 8005c64:	0028      	movs	r0, r5
 8005c66:	f7fc f84b 	bl	8001d00 <__aeabi_dsub>
 8005c6a:	0002      	movs	r2, r0
 8005c6c:	000b      	movs	r3, r1
 8005c6e:	f7fb f9cb 	bl	8001008 <__aeabi_ddiv>
 8005c72:	e7e5      	b.n	8005c40 <__ieee754_sqrt+0x24>
 8005c74:	1508      	asrs	r0, r1, #20
 8005c76:	d074      	beq.n	8005d62 <__ieee754_sqrt+0x146>
 8005c78:	4b3f      	ldr	r3, [pc, #252]	; (8005d78 <__ieee754_sqrt+0x15c>)
 8005c7a:	0309      	lsls	r1, r1, #12
 8005c7c:	18c0      	adds	r0, r0, r3
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	0b09      	lsrs	r1, r1, #12
 8005c82:	035b      	lsls	r3, r3, #13
 8005c84:	4319      	orrs	r1, r3
 8005c86:	07c3      	lsls	r3, r0, #31
 8005c88:	d503      	bpl.n	8005c92 <__ieee754_sqrt+0x76>
 8005c8a:	0fd3      	lsrs	r3, r2, #31
 8005c8c:	0049      	lsls	r1, r1, #1
 8005c8e:	18c9      	adds	r1, r1, r3
 8005c90:	0052      	lsls	r2, r2, #1
 8005c92:	2400      	movs	r4, #0
 8005c94:	1043      	asrs	r3, r0, #1
 8005c96:	0049      	lsls	r1, r1, #1
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	2580      	movs	r5, #128	; 0x80
 8005c9c:	0fd3      	lsrs	r3, r2, #31
 8005c9e:	18cb      	adds	r3, r1, r3
 8005ca0:	0020      	movs	r0, r4
 8005ca2:	2116      	movs	r1, #22
 8005ca4:	0052      	lsls	r2, r2, #1
 8005ca6:	03ad      	lsls	r5, r5, #14
 8005ca8:	1946      	adds	r6, r0, r5
 8005caa:	429e      	cmp	r6, r3
 8005cac:	dc02      	bgt.n	8005cb4 <__ieee754_sqrt+0x98>
 8005cae:	1970      	adds	r0, r6, r5
 8005cb0:	1b9b      	subs	r3, r3, r6
 8005cb2:	1964      	adds	r4, r4, r5
 8005cb4:	0fd6      	lsrs	r6, r2, #31
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	3901      	subs	r1, #1
 8005cba:	199b      	adds	r3, r3, r6
 8005cbc:	0052      	lsls	r2, r2, #1
 8005cbe:	086d      	lsrs	r5, r5, #1
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d1f1      	bne.n	8005ca8 <__ieee754_sqrt+0x8c>
 8005cc4:	2520      	movs	r5, #32
 8005cc6:	2680      	movs	r6, #128	; 0x80
 8005cc8:	46ac      	mov	ip, r5
 8005cca:	9100      	str	r1, [sp, #0]
 8005ccc:	0636      	lsls	r6, r6, #24
 8005cce:	9d00      	ldr	r5, [sp, #0]
 8005cd0:	1977      	adds	r7, r6, r5
 8005cd2:	4283      	cmp	r3, r0
 8005cd4:	dc02      	bgt.n	8005cdc <__ieee754_sqrt+0xc0>
 8005cd6:	d112      	bne.n	8005cfe <__ieee754_sqrt+0xe2>
 8005cd8:	4297      	cmp	r7, r2
 8005cda:	d810      	bhi.n	8005cfe <__ieee754_sqrt+0xe2>
 8005cdc:	19bd      	adds	r5, r7, r6
 8005cde:	9500      	str	r5, [sp, #0]
 8005ce0:	0005      	movs	r5, r0
 8005ce2:	2f00      	cmp	r7, #0
 8005ce4:	da03      	bge.n	8005cee <__ieee754_sqrt+0xd2>
 8005ce6:	9d00      	ldr	r5, [sp, #0]
 8005ce8:	43ed      	mvns	r5, r5
 8005cea:	0fed      	lsrs	r5, r5, #31
 8005cec:	1945      	adds	r5, r0, r5
 8005cee:	1a1b      	subs	r3, r3, r0
 8005cf0:	42ba      	cmp	r2, r7
 8005cf2:	4180      	sbcs	r0, r0
 8005cf4:	4240      	negs	r0, r0
 8005cf6:	1a1b      	subs	r3, r3, r0
 8005cf8:	0028      	movs	r0, r5
 8005cfa:	1bd2      	subs	r2, r2, r7
 8005cfc:	1989      	adds	r1, r1, r6
 8005cfe:	0fd5      	lsrs	r5, r2, #31
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	18eb      	adds	r3, r5, r3
 8005d04:	2501      	movs	r5, #1
 8005d06:	426d      	negs	r5, r5
 8005d08:	44ac      	add	ip, r5
 8005d0a:	4665      	mov	r5, ip
 8005d0c:	0052      	lsls	r2, r2, #1
 8005d0e:	0876      	lsrs	r6, r6, #1
 8005d10:	2d00      	cmp	r5, #0
 8005d12:	d1dc      	bne.n	8005cce <__ieee754_sqrt+0xb2>
 8005d14:	4313      	orrs	r3, r2
 8005d16:	d003      	beq.n	8005d20 <__ieee754_sqrt+0x104>
 8005d18:	1c4b      	adds	r3, r1, #1
 8005d1a:	d127      	bne.n	8005d6c <__ieee754_sqrt+0x150>
 8005d1c:	4661      	mov	r1, ip
 8005d1e:	3401      	adds	r4, #1
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <__ieee754_sqrt+0x160>)
 8005d22:	1060      	asrs	r0, r4, #1
 8005d24:	18c0      	adds	r0, r0, r3
 8005d26:	0849      	lsrs	r1, r1, #1
 8005d28:	07e3      	lsls	r3, r4, #31
 8005d2a:	d502      	bpl.n	8005d32 <__ieee754_sqrt+0x116>
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	061b      	lsls	r3, r3, #24
 8005d30:	4319      	orrs	r1, r3
 8005d32:	9b01      	ldr	r3, [sp, #4]
 8005d34:	000d      	movs	r5, r1
 8005d36:	051c      	lsls	r4, r3, #20
 8005d38:	1823      	adds	r3, r4, r0
 8005d3a:	001c      	movs	r4, r3
 8005d3c:	e782      	b.n	8005c44 <__ieee754_sqrt+0x28>
 8005d3e:	0ad1      	lsrs	r1, r2, #11
 8005d40:	3b15      	subs	r3, #21
 8005d42:	0552      	lsls	r2, r2, #21
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d0fa      	beq.n	8005d3e <__ieee754_sqrt+0x122>
 8005d48:	2480      	movs	r4, #128	; 0x80
 8005d4a:	0364      	lsls	r4, r4, #13
 8005d4c:	4221      	tst	r1, r4
 8005d4e:	d00a      	beq.n	8005d66 <__ieee754_sqrt+0x14a>
 8005d50:	2420      	movs	r4, #32
 8005d52:	0016      	movs	r6, r2
 8005d54:	1a24      	subs	r4, r4, r0
 8005d56:	40e6      	lsrs	r6, r4
 8005d58:	1e45      	subs	r5, r0, #1
 8005d5a:	4082      	lsls	r2, r0
 8005d5c:	4331      	orrs	r1, r6
 8005d5e:	1b58      	subs	r0, r3, r5
 8005d60:	e78a      	b.n	8005c78 <__ieee754_sqrt+0x5c>
 8005d62:	2300      	movs	r3, #0
 8005d64:	e7ee      	b.n	8005d44 <__ieee754_sqrt+0x128>
 8005d66:	0049      	lsls	r1, r1, #1
 8005d68:	3001      	adds	r0, #1
 8005d6a:	e7ef      	b.n	8005d4c <__ieee754_sqrt+0x130>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	3101      	adds	r1, #1
 8005d70:	4399      	bics	r1, r3
 8005d72:	e7d5      	b.n	8005d20 <__ieee754_sqrt+0x104>
 8005d74:	7ff00000 	.word	0x7ff00000
 8005d78:	fffffc01 	.word	0xfffffc01
 8005d7c:	3fe00000 	.word	0x3fe00000

08005d80 <fabs>:
 8005d80:	0049      	lsls	r1, r1, #1
 8005d82:	084b      	lsrs	r3, r1, #1
 8005d84:	0019      	movs	r1, r3
 8005d86:	4770      	bx	lr

08005d88 <finite>:
 8005d88:	0048      	lsls	r0, r1, #1
 8005d8a:	4b02      	ldr	r3, [pc, #8]	; (8005d94 <finite+0xc>)
 8005d8c:	0840      	lsrs	r0, r0, #1
 8005d8e:	18c0      	adds	r0, r0, r3
 8005d90:	0fc0      	lsrs	r0, r0, #31
 8005d92:	4770      	bx	lr
 8005d94:	80100000 	.word	0x80100000

08005d98 <matherr>:
 8005d98:	2000      	movs	r0, #0
 8005d9a:	4770      	bx	lr

08005d9c <nan>:
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	4901      	ldr	r1, [pc, #4]	; (8005da4 <nan+0x8>)
 8005da0:	4770      	bx	lr
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	7ff80000 	.word	0x7ff80000

08005da8 <rint>:
 8005da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005daa:	004a      	lsls	r2, r1, #1
 8005dac:	4e3e      	ldr	r6, [pc, #248]	; (8005ea8 <rint+0x100>)
 8005dae:	0d52      	lsrs	r2, r2, #21
 8005db0:	b085      	sub	sp, #20
 8005db2:	1996      	adds	r6, r2, r6
 8005db4:	000d      	movs	r5, r1
 8005db6:	9101      	str	r1, [sp, #4]
 8005db8:	0003      	movs	r3, r0
 8005dba:	0fcc      	lsrs	r4, r1, #31
 8005dbc:	2e13      	cmp	r6, #19
 8005dbe:	dc57      	bgt.n	8005e70 <rint+0xc8>
 8005dc0:	2e00      	cmp	r6, #0
 8005dc2:	da2a      	bge.n	8005e1a <rint+0x72>
 8005dc4:	004a      	lsls	r2, r1, #1
 8005dc6:	0852      	lsrs	r2, r2, #1
 8005dc8:	4302      	orrs	r2, r0
 8005dca:	d024      	beq.n	8005e16 <rint+0x6e>
 8005dcc:	030a      	lsls	r2, r1, #12
 8005dce:	0b12      	lsrs	r2, r2, #12
 8005dd0:	4302      	orrs	r2, r0
 8005dd2:	4253      	negs	r3, r2
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	2280      	movs	r2, #128	; 0x80
 8005dd8:	0c4d      	lsrs	r5, r1, #17
 8005dda:	0312      	lsls	r2, r2, #12
 8005ddc:	0b1b      	lsrs	r3, r3, #12
 8005dde:	4013      	ands	r3, r2
 8005de0:	046d      	lsls	r5, r5, #17
 8005de2:	432b      	orrs	r3, r5
 8005de4:	0019      	movs	r1, r3
 8005de6:	4b31      	ldr	r3, [pc, #196]	; (8005eac <rint+0x104>)
 8005de8:	00e2      	lsls	r2, r4, #3
 8005dea:	189b      	adds	r3, r3, r2
 8005dec:	681e      	ldr	r6, [r3, #0]
 8005dee:	685f      	ldr	r7, [r3, #4]
 8005df0:	0002      	movs	r2, r0
 8005df2:	000b      	movs	r3, r1
 8005df4:	0030      	movs	r0, r6
 8005df6:	0039      	movs	r1, r7
 8005df8:	f7fa fdea 	bl	80009d0 <__aeabi_dadd>
 8005dfc:	9002      	str	r0, [sp, #8]
 8005dfe:	9103      	str	r1, [sp, #12]
 8005e00:	9802      	ldr	r0, [sp, #8]
 8005e02:	9903      	ldr	r1, [sp, #12]
 8005e04:	003b      	movs	r3, r7
 8005e06:	0032      	movs	r2, r6
 8005e08:	f7fb ff7a 	bl	8001d00 <__aeabi_dsub>
 8005e0c:	004b      	lsls	r3, r1, #1
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	07e4      	lsls	r4, r4, #31
 8005e12:	4323      	orrs	r3, r4
 8005e14:	0019      	movs	r1, r3
 8005e16:	b005      	add	sp, #20
 8005e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e1a:	4a25      	ldr	r2, [pc, #148]	; (8005eb0 <rint+0x108>)
 8005e1c:	4132      	asrs	r2, r6
 8005e1e:	0017      	movs	r7, r2
 8005e20:	400f      	ands	r7, r1
 8005e22:	4307      	orrs	r7, r0
 8005e24:	d0f7      	beq.n	8005e16 <rint+0x6e>
 8005e26:	0852      	lsrs	r2, r2, #1
 8005e28:	0011      	movs	r1, r2
 8005e2a:	4029      	ands	r1, r5
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	d00a      	beq.n	8005e46 <rint+0x9e>
 8005e30:	2300      	movs	r3, #0
 8005e32:	2e13      	cmp	r6, #19
 8005e34:	d101      	bne.n	8005e3a <rint+0x92>
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	061b      	lsls	r3, r3, #24
 8005e3a:	2780      	movs	r7, #128	; 0x80
 8005e3c:	02ff      	lsls	r7, r7, #11
 8005e3e:	4137      	asrs	r7, r6
 8005e40:	4395      	bics	r5, r2
 8005e42:	432f      	orrs	r7, r5
 8005e44:	9701      	str	r7, [sp, #4]
 8005e46:	9901      	ldr	r1, [sp, #4]
 8005e48:	001a      	movs	r2, r3
 8005e4a:	000b      	movs	r3, r1
 8005e4c:	4917      	ldr	r1, [pc, #92]	; (8005eac <rint+0x104>)
 8005e4e:	00e4      	lsls	r4, r4, #3
 8005e50:	190c      	adds	r4, r1, r4
 8005e52:	6865      	ldr	r5, [r4, #4]
 8005e54:	6824      	ldr	r4, [r4, #0]
 8005e56:	0020      	movs	r0, r4
 8005e58:	0029      	movs	r1, r5
 8005e5a:	f7fa fdb9 	bl	80009d0 <__aeabi_dadd>
 8005e5e:	9002      	str	r0, [sp, #8]
 8005e60:	9103      	str	r1, [sp, #12]
 8005e62:	9802      	ldr	r0, [sp, #8]
 8005e64:	9903      	ldr	r1, [sp, #12]
 8005e66:	0022      	movs	r2, r4
 8005e68:	002b      	movs	r3, r5
 8005e6a:	f7fb ff49 	bl	8001d00 <__aeabi_dsub>
 8005e6e:	e7d2      	b.n	8005e16 <rint+0x6e>
 8005e70:	2e33      	cmp	r6, #51	; 0x33
 8005e72:	dd08      	ble.n	8005e86 <rint+0xde>
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	429e      	cmp	r6, r3
 8005e7a:	d1cc      	bne.n	8005e16 <rint+0x6e>
 8005e7c:	0002      	movs	r2, r0
 8005e7e:	000b      	movs	r3, r1
 8005e80:	f7fa fda6 	bl	80009d0 <__aeabi_dadd>
 8005e84:	e7c7      	b.n	8005e16 <rint+0x6e>
 8005e86:	2601      	movs	r6, #1
 8005e88:	4d0a      	ldr	r5, [pc, #40]	; (8005eb4 <rint+0x10c>)
 8005e8a:	4276      	negs	r6, r6
 8005e8c:	1952      	adds	r2, r2, r5
 8005e8e:	40d6      	lsrs	r6, r2
 8005e90:	4206      	tst	r6, r0
 8005e92:	d0c0      	beq.n	8005e16 <rint+0x6e>
 8005e94:	0876      	lsrs	r6, r6, #1
 8005e96:	4206      	tst	r6, r0
 8005e98:	d0d5      	beq.n	8005e46 <rint+0x9e>
 8005e9a:	2180      	movs	r1, #128	; 0x80
 8005e9c:	05c9      	lsls	r1, r1, #23
 8005e9e:	4111      	asrs	r1, r2
 8005ea0:	43b3      	bics	r3, r6
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	e7cf      	b.n	8005e46 <rint+0x9e>
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	fffffc01 	.word	0xfffffc01
 8005eac:	08006140 	.word	0x08006140
 8005eb0:	000fffff 	.word	0x000fffff
 8005eb4:	fffffbed 	.word	0xfffffbed

08005eb8 <scalbn>:
 8005eb8:	004b      	lsls	r3, r1, #1
 8005eba:	b570      	push	{r4, r5, r6, lr}
 8005ebc:	0d5b      	lsrs	r3, r3, #21
 8005ebe:	0014      	movs	r4, r2
 8005ec0:	000a      	movs	r2, r1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10d      	bne.n	8005ee2 <scalbn+0x2a>
 8005ec6:	004b      	lsls	r3, r1, #1
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	4303      	orrs	r3, r0
 8005ecc:	d010      	beq.n	8005ef0 <scalbn+0x38>
 8005ece:	4b21      	ldr	r3, [pc, #132]	; (8005f54 <scalbn+0x9c>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f7fb fca3 	bl	800181c <__aeabi_dmul>
 8005ed6:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <scalbn+0xa0>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	da0a      	bge.n	8005ef2 <scalbn+0x3a>
 8005edc:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <scalbn+0xa4>)
 8005ede:	4b20      	ldr	r3, [pc, #128]	; (8005f60 <scalbn+0xa8>)
 8005ee0:	e017      	b.n	8005f12 <scalbn+0x5a>
 8005ee2:	4d20      	ldr	r5, [pc, #128]	; (8005f64 <scalbn+0xac>)
 8005ee4:	42ab      	cmp	r3, r5
 8005ee6:	d108      	bne.n	8005efa <scalbn+0x42>
 8005ee8:	0002      	movs	r2, r0
 8005eea:	000b      	movs	r3, r1
 8005eec:	f7fa fd70 	bl	80009d0 <__aeabi_dadd>
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	000a      	movs	r2, r1
 8005ef4:	004b      	lsls	r3, r1, #1
 8005ef6:	0d5b      	lsrs	r3, r3, #21
 8005ef8:	3b36      	subs	r3, #54	; 0x36
 8005efa:	4d1b      	ldr	r5, [pc, #108]	; (8005f68 <scalbn+0xb0>)
 8005efc:	18e3      	adds	r3, r4, r3
 8005efe:	42ab      	cmp	r3, r5
 8005f00:	dd0a      	ble.n	8005f18 <scalbn+0x60>
 8005f02:	0002      	movs	r2, r0
 8005f04:	000b      	movs	r3, r1
 8005f06:	4819      	ldr	r0, [pc, #100]	; (8005f6c <scalbn+0xb4>)
 8005f08:	4919      	ldr	r1, [pc, #100]	; (8005f70 <scalbn+0xb8>)
 8005f0a:	f000 f839 	bl	8005f80 <copysign>
 8005f0e:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <scalbn+0xb4>)
 8005f10:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <scalbn+0xb8>)
 8005f12:	f7fb fc83 	bl	800181c <__aeabi_dmul>
 8005f16:	e7eb      	b.n	8005ef0 <scalbn+0x38>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	dd05      	ble.n	8005f28 <scalbn+0x70>
 8005f1c:	4c15      	ldr	r4, [pc, #84]	; (8005f74 <scalbn+0xbc>)
 8005f1e:	051b      	lsls	r3, r3, #20
 8005f20:	4022      	ands	r2, r4
 8005f22:	431a      	orrs	r2, r3
 8005f24:	0011      	movs	r1, r2
 8005f26:	e7e3      	b.n	8005ef0 <scalbn+0x38>
 8005f28:	001d      	movs	r5, r3
 8005f2a:	3535      	adds	r5, #53	; 0x35
 8005f2c:	da09      	bge.n	8005f42 <scalbn+0x8a>
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <scalbn+0xc0>)
 8005f30:	0002      	movs	r2, r0
 8005f32:	429c      	cmp	r4, r3
 8005f34:	dce6      	bgt.n	8005f04 <scalbn+0x4c>
 8005f36:	000b      	movs	r3, r1
 8005f38:	4808      	ldr	r0, [pc, #32]	; (8005f5c <scalbn+0xa4>)
 8005f3a:	4909      	ldr	r1, [pc, #36]	; (8005f60 <scalbn+0xa8>)
 8005f3c:	f000 f820 	bl	8005f80 <copysign>
 8005f40:	e7cc      	b.n	8005edc <scalbn+0x24>
 8005f42:	4c0c      	ldr	r4, [pc, #48]	; (8005f74 <scalbn+0xbc>)
 8005f44:	3336      	adds	r3, #54	; 0x36
 8005f46:	4022      	ands	r2, r4
 8005f48:	051b      	lsls	r3, r3, #20
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	0019      	movs	r1, r3
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <scalbn+0xc4>)
 8005f52:	e7de      	b.n	8005f12 <scalbn+0x5a>
 8005f54:	43500000 	.word	0x43500000
 8005f58:	ffff3cb0 	.word	0xffff3cb0
 8005f5c:	c2f8f359 	.word	0xc2f8f359
 8005f60:	01a56e1f 	.word	0x01a56e1f
 8005f64:	000007ff 	.word	0x000007ff
 8005f68:	000007fe 	.word	0x000007fe
 8005f6c:	8800759c 	.word	0x8800759c
 8005f70:	7e37e43c 	.word	0x7e37e43c
 8005f74:	800fffff 	.word	0x800fffff
 8005f78:	0000c350 	.word	0x0000c350
 8005f7c:	3c900000 	.word	0x3c900000

08005f80 <copysign>:
 8005f80:	b530      	push	{r4, r5, lr}
 8005f82:	004a      	lsls	r2, r1, #1
 8005f84:	0fdb      	lsrs	r3, r3, #31
 8005f86:	07db      	lsls	r3, r3, #31
 8005f88:	0852      	lsrs	r2, r2, #1
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	0011      	movs	r1, r2
 8005f8e:	bd30      	pop	{r4, r5, pc}

08005f90 <_init>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr

08005f9c <_fini>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr
