
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002884  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800298c  0800298c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002994  08002994  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800299c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080029a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080029a8  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a34e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018fe  00000000  00000000  0002a382  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000848  00000000  00000000  0002bc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  0002c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013fa6  00000000  00000000  0002cc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d3f  00000000  00000000  00040bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077acd  00000000  00000000  0004892d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c03fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd4  00000000  00000000  000c0478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800292c 	.word	0x0800292c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800292c 	.word	0x0800292c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <ICM20602_GPIO_SPI_Initialization>:
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef SPI_InitStruct = {0};

void ICM20602_GPIO_SPI_Initialization(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
//	SPI_HandleTypeDef SPI_InitStruct = {0};

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	0018      	movs	r0, r3
 8000496:	2314      	movs	r3, #20
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f002 fa3e 	bl	800291c <memset>
	/* Peripheral clock enable -- done in main.c */
//	APB2_GRP1_EnableClock(APB2_GRP1_PERIPH_SPI1);
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80004a0:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <ICM20602_GPIO_SPI_Initialization+0xcc>)
 80004a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a4:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <ICM20602_GPIO_SPI_Initialization+0xcc>)
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	0149      	lsls	r1, r1, #5
 80004aa:	430a      	orrs	r2, r1
 80004ac:	635a      	str	r2, [r3, #52]	; 0x34

//	AHB1_GRP1_EnableClock(AHB1_GRP1_PERIPH_GPIOA);
//	AHB1_GRP1_EnableClock(AHB1_GRP1_PERIPH_GPIOC);
	RCC->IOPENR |= RCC_IOPENR_IOPAEN | RCC_IOPENR_IOPBEN | RCC_IOPENR_IOPCEN;
 80004ae:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <ICM20602_GPIO_SPI_Initialization+0xcc>)
 80004b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <ICM20602_GPIO_SPI_Initialization+0xcc>)
 80004b4:	2107      	movs	r1, #7
 80004b6:	430a      	orrs	r2, r1
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/

	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	22e0      	movs	r2, #224	; 0xe0
 80004be:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2202      	movs	r2, #2
 80004c4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2203      	movs	r2, #3
 80004ca:	60da      	str	r2, [r3, #12]
//	GPIO_InitStruct.OutputType = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	1d3a      	adds	r2, r7, #4
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fbef 	bl	8000cc4 <HAL_GPIO_Init>

	HAL_MspInit();
 80004e6:	f000 f9bf 	bl	8000868 <HAL_MspInit>
	SPI_InitStruct.Instance = SPI2;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 80004ec:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <ICM20602_GPIO_SPI_Initialization+0xd4>)
 80004ee:	601a      	str	r2, [r3, #0]
	HAL_SPI_MspInit(&SPI_InitStruct);
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 f9cc 	bl	8000890 <HAL_SPI_MspInit>
	SPI_InitStruct.Init.Direction = SPI_DIRECTION_2LINES;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
	SPI_InitStruct.Init.Mode = SPI_MODE_MASTER;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 8000500:	2282      	movs	r2, #130	; 0x82
 8000502:	0052      	lsls	r2, r2, #1
 8000504:	605a      	str	r2, [r3, #4]
	SPI_InitStruct.Init.DataSize = SPI_DATASIZE_8BIT;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
	SPI_InitStruct.Init.CLKPolarity = SPI_POLARITY_LOW;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
	SPI_InitStruct.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 8000514:	2201      	movs	r2, #1
 8000516:	615a      	str	r2, [r3, #20]
	SPI_InitStruct.Init.NSS = SPI_NSS_SOFT;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	619a      	str	r2, [r3, #24]
	SPI_InitStruct.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 8000522:	2210      	movs	r2, #16
 8000524:	61da      	str	r2, [r3, #28]
	SPI_InitStruct.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
	SPI_InitStruct.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 800052e:	2200      	movs	r2, #0
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
	SPI_InitStruct.Init.CRCPolynomial = 7;
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 8000534:	2207      	movs	r2, #7
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
	SPI_InitStruct.State = HAL_SPI_STATE_READY;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 800053a:	2251      	movs	r2, #81	; 0x51
 800053c:	2101      	movs	r1, #1
 800053e:	5499      	strb	r1, [r3, r2]
	if (HAL_SPI_Init(&SPI_InitStruct) != HAL_OK)
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <ICM20602_GPIO_SPI_Initialization+0xd0>)
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fc80 	bl	8001e48 <HAL_SPI_Init>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <ICM20602_GPIO_SPI_Initialization+0xc4>
	  {
	    Error_Handler();
 800054c:	f000 f988 	bl	8000860 <Error_Handler>

//	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
//	__HAL_SPI_ENABLE(SPI_InitStruct);

//	CHIP_DESELECT(ICM20602);
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b006      	add	sp, #24
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000
 800055c:	20000028 	.word	0x20000028
 8000560:	40003800 	.word	0x40003800

08000564 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	0002      	movs	r2, r0
 800056c:	1dfb      	adds	r3, r7, #7
 800056e:	701a      	strb	r2, [r3, #0]
	while((SPI2->SR & SPI_SR_TXE) == RESET);
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <SPI1_SendByte+0x38>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	2202      	movs	r2, #2
 8000578:	4013      	ands	r3, r2
 800057a:	d0fa      	beq.n	8000572 <SPI1_SendByte+0xe>
//	uint8_t dataAry[4] = {0xa0, 0xa2, 0xa4, 0xa6};
	unsigned char returnVal;

//	HAL_SPI_Transmit(&SPI_InitStruct, &data, sizeof(unsigned char), pow(2, 32) - 1);
	HAL_SPI_TransmitReceive(&SPI_InitStruct, &data, &returnVal, sizeof(data)/sizeof(uint8_t), (uint32_t) (pow(2, 32) - 1));
 800057c:	230f      	movs	r3, #15
 800057e:	18fa      	adds	r2, r7, r3
 8000580:	1df9      	adds	r1, r7, #7
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <SPI1_SendByte+0x3c>)
 8000584:	2301      	movs	r3, #1
 8000586:	425b      	negs	r3, r3
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	f001 fcf0 	bl	8001f70 <HAL_SPI_TransmitReceive>

//	unsigned char returnVal;
//	while((SPI1->SR & SPI_SR_RXNE) == 1);
//	HAL_SPI_Receive(&SPI_InitStruct, &returnVal, sizeof(unsigned char), pow(2, 32) - 1);
//	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	0018      	movs	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40003800 	.word	0x40003800
 80005a0:	20000028 	.word	0x20000028

080005a4 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	0002      	movs	r2, r0
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	701a      	strb	r2, [r3, #0]
	uint8_t val;

//	CHIP_SELECT(ICM20602);
	val = SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	4252      	negs	r2, r2
 80005b8:	4313      	orrs	r3, r2
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	250f      	movs	r5, #15
 80005be:	197c      	adds	r4, r7, r5
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff ffcf 	bl	8000564 <SPI1_SendByte>
 80005c6:	0003      	movs	r3, r0
 80005c8:	7023      	strb	r3, [r4, #0]
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80005ca:	197c      	adds	r4, r7, r5
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff ffc9 	bl	8000564 <SPI1_SendByte>
 80005d2:	0003      	movs	r3, r0
 80005d4:	7023      	strb	r3, [r4, #0]
//	CHIP_DESELECT(ICM20602);

	return val;
 80005d6:	197b      	adds	r3, r7, r5
 80005d8:	781b      	ldrb	r3, [r3, #0]
}
 80005da:	0018      	movs	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	b004      	add	sp, #16
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}

080005e2 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80005e2:	b590      	push	{r4, r7, lr}
 80005e4:	b085      	sub	sp, #20
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	603a      	str	r2, [r7, #0]
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	1c02      	adds	r2, r0, #0
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	1dbb      	adds	r3, r7, #6
 80005f2:	1c0a      	adds	r2, r1, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	unsigned int i = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]

//	CHIP_SELECT(ICM20602);
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	4252      	negs	r2, r2
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff ffac 	bl	8000564 <SPI1_SendByte>
	while(i < len)
 800060c:	e009      	b.n	8000622 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	60fa      	str	r2, [r7, #12]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	18d4      	adds	r4, r2, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffa3 	bl	8000564 <SPI1_SendByte>
 800061e:	0003      	movs	r3, r0
 8000620:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d3f0      	bcc.n	800060e <ICM20602_Readbytes+0x2c>
	}
//	CHIP_DESELECT(ICM20602);
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b005      	add	sp, #20
 8000632:	bd90      	pop	{r4, r7, pc}

08000634 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800063a:	230f      	movs	r3, #15
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8000642:	2308      	movs	r3, #8
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0018      	movs	r0, r3
 8000648:	2306      	movs	r3, #6
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f002 f965 	bl	800291c <memset>
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8000652:	003b      	movs	r3, r7
 8000654:	0018      	movs	r0, r3
 8000656:	2306      	movs	r3, #6
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 f95e 	bl	800291c <memset>

	ICM20602_GPIO_SPI_Initialization();
 8000660:	f7ff ff14 	bl	800048c <ICM20602_GPIO_SPI_Initialization>

	// check WHO_AM_I (0x75)
	while(1){
		who_am_i = ICM20602_Readbyte(WHO_AM_I);
 8000664:	230f      	movs	r3, #15
 8000666:	18fc      	adds	r4, r7, r3
 8000668:	2075      	movs	r0, #117	; 0x75
 800066a:	f7ff ff9b 	bl	80005a4 <ICM20602_Readbyte>
 800066e:	0003      	movs	r3, r0
 8000670:	7023      	strb	r3, [r4, #0]
 8000672:	e7f7      	b.n	8000664 <ICM20602_Initialization+0x30>

08000674 <ICM20602_Get3AxisAccRawData>:
	gyro[1] = ((data[2] << 8) | data[3]);
	gyro[2] = ((data[4] << 8) | data[5]);
}

void ICM20602_Get3AxisAccRawData(short* accel)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(ACCEL_XOUT_H, 6, data);
 800067c:	2008      	movs	r0, #8
 800067e:	0004      	movs	r4, r0
 8000680:	183b      	adds	r3, r7, r0
 8000682:	001a      	movs	r2, r3
 8000684:	2106      	movs	r1, #6
 8000686:	203b      	movs	r0, #59	; 0x3b
 8000688:	f7ff ffab 	bl	80005e2 <ICM20602_Readbytes>

	accel[0] = ((data[0] << 8) | data[1]);
 800068c:	0020      	movs	r0, r4
 800068e:	183b      	adds	r3, r7, r0
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b21a      	sxth	r2, r3
 8000696:	183b      	adds	r3, r7, r0
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	b21b      	sxth	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b21a      	sxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	801a      	strh	r2, [r3, #0]
	accel[1] = ((data[2] << 8) | data[3]);
 80006a4:	183b      	adds	r3, r7, r0
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b219      	sxth	r1, r3
 80006ac:	183b      	adds	r3, r7, r0
 80006ae:	78db      	ldrb	r3, [r3, #3]
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3302      	adds	r3, #2
 80006b6:	430a      	orrs	r2, r1
 80006b8:	b212      	sxth	r2, r2
 80006ba:	801a      	strh	r2, [r3, #0]
	accel[2] = ((data[4] << 8) | data[5]);
 80006bc:	183b      	adds	r3, r7, r0
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	b219      	sxth	r1, r3
 80006c4:	183b      	adds	r3, r7, r0
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3304      	adds	r3, #4
 80006ce:	430a      	orrs	r2, r1
 80006d0:	b212      	sxth	r2, r2
 80006d2:	801a      	strh	r2, [r3, #0]
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b005      	add	sp, #20
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e2:	f000 f9cb 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e6:	f000 f813 	bl	8000710 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_SPI1_Init();
  MX_USART1_Init();
 80006ea:	f000 f88b 	bl	8000804 <MX_USART1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int device_ID;
  short accelData[3] = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	0018      	movs	r0, r3
 80006f2:	2306      	movs	r3, #6
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f002 f910 	bl	800291c <memset>
  device_ID = ICM20602_Initialization();
 80006fc:	f7ff ff9a 	bl	8000634 <ICM20602_Initialization>
 8000700:	0003      	movs	r3, r0
 8000702:	60fb      	str	r3, [r7, #12]
  while(1) {
	  ICM20602_Get3AxisAccRawData(accelData);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ffb4 	bl	8000674 <ICM20602_Get3AxisAccRawData>
 800070c:	e7fa      	b.n	8000704 <main+0x28>
	...

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b09d      	sub	sp, #116	; 0x74
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	2438      	movs	r4, #56	; 0x38
 8000718:	193b      	adds	r3, r7, r4
 800071a:	0018      	movs	r0, r3
 800071c:	2338      	movs	r3, #56	; 0x38
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f002 f8fb 	bl	800291c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000726:	2324      	movs	r3, #36	; 0x24
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	0018      	movs	r0, r3
 800072c:	2314      	movs	r3, #20
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f002 f8f3 	bl	800291c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000736:	003b      	movs	r3, r7
 8000738:	0018      	movs	r0, r3
 800073a:	2324      	movs	r3, #36	; 0x24
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f002 f8ec 	bl	800291c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <SystemClock_Config+0xe8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <SystemClock_Config+0xec>)
 800074a:	401a      	ands	r2, r3
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <SystemClock_Config+0xe8>)
 800074e:	2180      	movs	r1, #128	; 0x80
 8000750:	0109      	lsls	r1, r1, #4
 8000752:	430a      	orrs	r2, r1
 8000754:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000756:	0021      	movs	r1, r4
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2210      	movs	r2, #16
 800075c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2201      	movs	r2, #1
 8000762:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	22a0      	movs	r2, #160	; 0xa0
 800076e:	0212      	lsls	r2, r2, #8
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	187b      	adds	r3, r7, r1
 800077a:	0018      	movs	r0, r3
 800077c:	f000 fc18 	bl	8000fb0 <HAL_RCC_OscConfig>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000784:	f000 f86c 	bl	8000860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	2124      	movs	r1, #36	; 0x24
 800078a:	187b      	adds	r3, r7, r1
 800078c:	220f      	movs	r2, #15
 800078e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2100      	movs	r1, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 ffc7 	bl	8001740 <HAL_RCC_ClockConfig>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007b6:	f000 f853 	bl	8000860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007c0:	003b      	movs	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c6:	003b      	movs	r3, r7
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 f9d9 	bl	8001b80 <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007d2:	f000 f845 	bl	8000860 <Error_Handler>
  }

  RCC->IOPENR |= RCC_IOPENR_IOPAEN | RCC_IOPENR_IOPBEN;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <SystemClock_Config+0xf0>)
 80007d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <SystemClock_Config+0xf0>)
 80007dc:	2103      	movs	r1, #3
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
//  RCC->AHBENR |= RCC_AHBENR_CRCEN;
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <SystemClock_Config+0xf0>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <SystemClock_Config+0xf0>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	0149      	lsls	r1, r1, #5
 80007ec:	430a      	orrs	r2, r1
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b01d      	add	sp, #116	; 0x74
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	40007000 	.word	0x40007000
 80007fc:	ffffe7ff 	.word	0xffffe7ff
 8000800:	40021000 	.word	0x40021000

08000804 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_USART1_Init+0x54>)
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <MX_USART1_Init+0x58>)
 800080c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_USART1_Init+0x54>)
 8000810:	22e1      	movs	r2, #225	; 0xe1
 8000812:	0252      	lsls	r2, r2, #9
 8000814:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART1_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART1_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_USART1_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART1_Init+0x54>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_USART1_Init+0x54>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_2EDGE;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART1_Init+0x54>)
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	0092      	lsls	r2, r2, #2
 800083a:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART1_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <MX_USART1_Init+0x54>)
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fe23 	bl	8002490 <HAL_USART_Init>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_USART1_Init+0x4e>
  {
    Error_Handler();
 800084e:	f000 f807 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000080 	.word	0x20000080
 800085c:	40013800 	.word	0x40013800

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000866:	e7fe      	b.n	8000866 <Error_Handler+0x6>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_MspInit+0x24>)
 800086e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x24>)
 8000872:	2101      	movs	r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <HAL_MspInit+0x24>)
 800087a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_MspInit+0x24>)
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	0549      	lsls	r1, r1, #21
 8000882:	430a      	orrs	r2, r1
 8000884:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	230c      	movs	r3, #12
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	0018      	movs	r0, r3
 800089e:	2314      	movs	r3, #20
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f002 f83a 	bl	800291c <memset>
  if(hspi->Instance==SPI2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a18      	ldr	r2, [pc, #96]	; (8000910 <HAL_SPI_MspInit+0x80>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d129      	bne.n	8000906 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_SPI_MspInit+0x84>)
 80008b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_SPI_MspInit+0x84>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	01c9      	lsls	r1, r1, #7
 80008bc:	430a      	orrs	r2, r1
 80008be:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_SPI_MspInit+0x84>)
 80008c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_SPI_MspInit+0x84>)
 80008c6:	2102      	movs	r1, #2
 80008c8:	430a      	orrs	r2, r1
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_SPI_MspInit+0x84>)
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	2202      	movs	r2, #2
 80008d2:	4013      	ands	r3, r2
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008d8:	210c      	movs	r1, #12
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	22e0      	movs	r2, #224	; 0xe0
 80008de:	0212      	lsls	r2, r2, #8
 80008e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2202      	movs	r2, #2
 80008e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2203      	movs	r2, #3
 80008f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_SPI_MspInit+0x88>)
 80008fe:	0019      	movs	r1, r3
 8000900:	0010      	movs	r0, r2
 8000902:	f000 f9df 	bl	8000cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b008      	add	sp, #32
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40003800 	.word	0x40003800
 8000914:	40021000 	.word	0x40021000
 8000918:	50000400 	.word	0x50000400

0800091c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b08b      	sub	sp, #44	; 0x2c
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	2314      	movs	r3, #20
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	0018      	movs	r0, r3
 800092a:	2314      	movs	r3, #20
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f001 fff4 	bl	800291c <memset>
  if(husart->Instance==USART1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <HAL_USART_MspInit+0xc8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d14d      	bne.n	80009da <HAL_USART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <HAL_USART_MspInit+0xcc>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <HAL_USART_MspInit+0xcc>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	01c9      	lsls	r1, r1, #7
 8000948:	430a      	orrs	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <HAL_USART_MspInit+0xcc>)
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <HAL_USART_MspInit+0xcc>)
 8000952:	2101      	movs	r1, #1
 8000954:	430a      	orrs	r2, r1
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <HAL_USART_MspInit+0xcc>)
 800095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095c:	2201      	movs	r2, #1
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <HAL_USART_MspInit+0xcc>)
 8000966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <HAL_USART_MspInit+0xcc>)
 800096a:	2102      	movs	r1, #2
 800096c:	430a      	orrs	r2, r1
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_USART_MspInit+0xcc>)
 8000972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000974:	2202      	movs	r2, #2
 8000976:	4013      	ands	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800097c:	2114      	movs	r1, #20
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	0052      	lsls	r2, r2, #1
 8000984:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	000c      	movs	r4, r1
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2202      	movs	r2, #2
 800098c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2203      	movs	r2, #3
 8000998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2204      	movs	r2, #4
 800099e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	193a      	adds	r2, r7, r4
 80009a2:	23a0      	movs	r3, #160	; 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 f98b 	bl	8000cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ae:	0021      	movs	r1, r4
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	22c0      	movs	r2, #192	; 0xc0
 80009b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2203      	movs	r2, #3
 80009c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_USART_MspInit+0xd0>)
 80009d2:	0019      	movs	r1, r3
 80009d4:	0010      	movs	r0, r2
 80009d6:	f000 f975 	bl	8000cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b00b      	add	sp, #44	; 0x2c
 80009e0:	bd90      	pop	{r4, r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40013800 	.word	0x40013800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	50000400 	.word	0x50000400

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f886 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490e      	ldr	r1, [pc, #56]	; (8000a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a52:	f7ff ffe4 	bl	8000a1e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f001 ff3d 	bl	80028d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fe3f 	bl	80006dc <main>

08000a5e <LoopForever>:

LoopForever:
    b LoopForever
 8000a5e:	e7fe      	b.n	8000a5e <LoopForever>
  ldr   r0, =_estack
 8000a60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a6c:	0800299c 	.word	0x0800299c
  ldr r2, =_sbss
 8000a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a74:	200000d4 	.word	0x200000d4

08000a78 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_COMP_IRQHandler>
	...

08000a7c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x3c>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_Init+0x3c>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	430a      	orrs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 f811 	bl	8000abc <HAL_InitTick>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	e001      	b.n	8000aaa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa6:	f7ff fedf 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_InitTick+0x5c>)
 8000ac6:	681c      	ldr	r4, [r3, #0]
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_InitTick+0x60>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	0019      	movs	r1, r3
 8000ace:	23fa      	movs	r3, #250	; 0xfa
 8000ad0:	0098      	lsls	r0, r3, #2
 8000ad2:	f7ff fb19 	bl	8000108 <__udivsi3>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	0019      	movs	r1, r3
 8000ada:	0020      	movs	r0, r4
 8000adc:	f7ff fb14 	bl	8000108 <__udivsi3>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f8e1 	bl	8000caa <HAL_SYSTICK_Config>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e00f      	b.n	8000b10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d80b      	bhi.n	8000b0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	2301      	movs	r3, #1
 8000afa:	425b      	negs	r3, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f8be 	bl	8000c80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_InitTick+0x64>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b003      	add	sp, #12
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x1c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x20>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	18d2      	adds	r2, r2, r3
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_IncTick+0x20>)
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000008 	.word	0x20000008
 8000b44:	200000d0 	.word	0x200000d0

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <HAL_GetTick+0x10>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	200000d0 	.word	0x200000d0

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0002      	movs	r2, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b70:	d828      	bhi.n	8000bc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <__NVIC_SetPriority+0xd4>)
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	33c0      	adds	r3, #192	; 0xc0
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	589b      	ldr	r3, [r3, r2]
 8000b82:	1dfa      	adds	r2, r7, #7
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	0011      	movs	r1, r2
 8000b88:	2203      	movs	r2, #3
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	21ff      	movs	r1, #255	; 0xff
 8000b90:	4091      	lsls	r1, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	43d2      	mvns	r2, r2
 8000b96:	401a      	ands	r2, r3
 8000b98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2303      	movs	r3, #3
 8000baa:	4003      	ands	r3, r0
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	481f      	ldr	r0, [pc, #124]	; (8000c30 <__NVIC_SetPriority+0xd4>)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	33c0      	adds	r3, #192	; 0xc0
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bc2:	e031      	b.n	8000c28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <__NVIC_SetPriority+0xd8>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0019      	movs	r1, r3
 8000bcc:	230f      	movs	r3, #15
 8000bce:	400b      	ands	r3, r1
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3306      	adds	r3, #6
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	3304      	adds	r3, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1dfa      	adds	r2, r7, #7
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0011      	movs	r1, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	400a      	ands	r2, r1
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	21ff      	movs	r1, #255	; 0xff
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	2303      	movs	r3, #3
 8000c06:	4003      	ands	r3, r0
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <__NVIC_SetPriority+0xd8>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	001c      	movs	r4, r3
 8000c14:	230f      	movs	r3, #15
 8000c16:	4023      	ands	r3, r4
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	3306      	adds	r3, #6
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	18c3      	adds	r3, r0, r3
 8000c24:	3304      	adds	r3, #4
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <SysTick_Config+0x40>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d901      	bls.n	8000c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e010      	b.n	8000c70 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <SysTick_Config+0x44>)
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	3a01      	subs	r2, #1
 8000c54:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c56:	2301      	movs	r3, #1
 8000c58:	425b      	negs	r3, r3
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ff7d 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SysTick_Config+0x44>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x44>)
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	00ffffff 	.word	0x00ffffff
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff5d 	bl	8000b5c <__NVIC_SetPriority>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ffbf 	bl	8000c38 <SysTick_Config>
 8000cba:	0003      	movs	r3, r0
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cda:	e14f      	b.n	8000f7c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d100      	bne.n	8000cf4 <HAL_GPIO_Init+0x30>
 8000cf2:	e140      	b.n	8000f76 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d00b      	beq.n	8000d14 <HAL_GPIO_Init+0x50>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d007      	beq.n	8000d14 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d08:	2b11      	cmp	r3, #17
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b12      	cmp	r3, #18
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	409a      	lsls	r2, r3
 8000d22:	0013      	movs	r3, r2
 8000d24:	43da      	mvns	r2, r3
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	409a      	lsls	r2, r3
 8000d36:	0013      	movs	r3, r2
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	43da      	mvns	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	2201      	movs	r2, #1
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0xf2>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d123      	bne.n	8000dfe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	58d3      	ldr	r3, [r2, r3]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	4013      	ands	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	691a      	ldr	r2, [r3, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2107      	movs	r1, #7
 8000de2:	400b      	ands	r3, r1
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	6939      	ldr	r1, [r7, #16]
 8000dfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	055b      	lsls	r3, r3, #21
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d100      	bne.n	8000e40 <HAL_GPIO_Init+0x17c>
 8000e3e:	e09a      	b.n	8000f76 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e40:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <HAL_GPIO_Init+0x2d0>)
 8000e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e44:	4b53      	ldr	r3, [pc, #332]	; (8000f94 <HAL_GPIO_Init+0x2d0>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4c:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <HAL_GPIO_Init+0x2d4>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	589b      	ldr	r3, [r3, r2]
 8000e58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x1ea>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a47      	ldr	r2, [pc, #284]	; (8000f9c <HAL_GPIO_Init+0x2d8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x1e6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <HAL_GPIO_Init+0x2dc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x1e2>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <HAL_GPIO_Init+0x2e0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x1de>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a44      	ldr	r2, [pc, #272]	; (8000fa8 <HAL_GPIO_Init+0x2e4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x1da>
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	e008      	b.n	8000eb0 <HAL_GPIO_Init+0x1ec>
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x1ec>
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x1ec>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x1ec>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x1ec>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec0:	4935      	ldr	r1, [pc, #212]	; (8000f98 <HAL_GPIO_Init+0x2d4>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	025b      	lsls	r3, r3, #9
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ef8:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4013      	ands	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f22:	4b22      	ldr	r3, [pc, #136]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	035b      	lsls	r3, r3, #13
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43da      	mvns	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	039b      	lsls	r3, r3, #14
 8000f64:	4013      	ands	r3, r2
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_GPIO_Init+0x2e8>)
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	40da      	lsrs	r2, r3
 8000f84:	1e13      	subs	r3, r2, #0
 8000f86:	d000      	beq.n	8000f8a <HAL_GPIO_Init+0x2c6>
 8000f88:	e6a8      	b.n	8000cdc <HAL_GPIO_Init+0x18>
  }
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b006      	add	sp, #24
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	50000400 	.word	0x50000400
 8000fa0:	50000800 	.word	0x50000800
 8000fa4:	50000c00 	.word	0x50000c00
 8000fa8:	50001c00 	.word	0x50001c00
 8000fac:	40010400 	.word	0x40010400

08000fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f000 fbb4 	bl	800172c <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc4:	4bc3      	ldr	r3, [pc, #780]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	220c      	movs	r2, #12
 8000fca:	4013      	ands	r3, r2
 8000fcc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fce:	4bc1      	ldr	r3, [pc, #772]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	025b      	lsls	r3, r3, #9
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x36>
 8000fe4:	e07e      	b.n	80010e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d007      	beq.n	8000ffc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d112      	bne.n	8001018 <HAL_RCC_OscConfig+0x68>
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	025b      	lsls	r3, r3, #9
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d10d      	bne.n	8001018 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	4bb5      	ldr	r3, [pc, #724]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	029b      	lsls	r3, r3, #10
 8001004:	4013      	ands	r3, r2
 8001006:	d100      	bne.n	800100a <HAL_RCC_OscConfig+0x5a>
 8001008:	e06b      	b.n	80010e2 <HAL_RCC_OscConfig+0x132>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d167      	bne.n	80010e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	f000 fb8a 	bl	800172c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	025b      	lsls	r3, r3, #9
 8001020:	429a      	cmp	r2, r3
 8001022:	d107      	bne.n	8001034 <HAL_RCC_OscConfig+0x84>
 8001024:	4bab      	ldr	r3, [pc, #684]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4baa      	ldr	r3, [pc, #680]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0249      	lsls	r1, r1, #9
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e027      	b.n	8001084 <HAL_RCC_OscConfig+0xd4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	23a0      	movs	r3, #160	; 0xa0
 800103a:	02db      	lsls	r3, r3, #11
 800103c:	429a      	cmp	r2, r3
 800103e:	d10e      	bne.n	800105e <HAL_RCC_OscConfig+0xae>
 8001040:	4ba4      	ldr	r3, [pc, #656]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4ba3      	ldr	r3, [pc, #652]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	02c9      	lsls	r1, r1, #11
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	4ba1      	ldr	r3, [pc, #644]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4ba0      	ldr	r3, [pc, #640]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	0249      	lsls	r1, r1, #9
 8001058:	430a      	orrs	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e012      	b.n	8001084 <HAL_RCC_OscConfig+0xd4>
 800105e:	4b9d      	ldr	r3, [pc, #628]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b9c      	ldr	r3, [pc, #624]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001064:	499c      	ldr	r1, [pc, #624]	; (80012d8 <HAL_RCC_OscConfig+0x328>)
 8001066:	400a      	ands	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	4b9a      	ldr	r3, [pc, #616]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	025b      	lsls	r3, r3, #9
 8001072:	4013      	ands	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4b96      	ldr	r3, [pc, #600]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b95      	ldr	r3, [pc, #596]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800107e:	4997      	ldr	r1, [pc, #604]	; (80012dc <HAL_RCC_OscConfig+0x32c>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d015      	beq.n	80010b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fd5c 	bl	8000b48 <HAL_GetTick>
 8001090:	0003      	movs	r3, r0
 8001092:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001094:	e009      	b.n	80010aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001096:	f7ff fd57 	bl	8000b48 <HAL_GetTick>
 800109a:	0002      	movs	r2, r0
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b64      	cmp	r3, #100	; 0x64
 80010a2:	d902      	bls.n	80010aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	f000 fb41 	bl	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010aa:	4b8a      	ldr	r3, [pc, #552]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	029b      	lsls	r3, r3, #10
 80010b2:	4013      	ands	r3, r2
 80010b4:	d0ef      	beq.n	8001096 <HAL_RCC_OscConfig+0xe6>
 80010b6:	e015      	b.n	80010e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fd46 	bl	8000b48 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c2:	f7ff fd41 	bl	8000b48 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	; 0x64
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e32b      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010d4:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	029b      	lsls	r3, r3, #10
 80010dc:	4013      	ands	r3, r2
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x112>
 80010e0:	e000      	b.n	80010e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d100      	bne.n	80010f0 <HAL_RCC_OscConfig+0x140>
 80010ee:	e08c      	b.n	800120a <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	2b0c      	cmp	r3, #12
 8001100:	d13f      	bne.n	8001182 <HAL_RCC_OscConfig+0x1d2>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d13c      	bne.n	8001182 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001108:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2204      	movs	r2, #4
 800110e:	4013      	ands	r3, r2
 8001110:	d004      	beq.n	800111c <HAL_RCC_OscConfig+0x16c>
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e307      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b6d      	ldr	r3, [pc, #436]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a6f      	ldr	r2, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x330>)
 8001122:	4013      	ands	r3, r2
 8001124:	0019      	movs	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	021a      	lsls	r2, r3, #8
 800112c:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800112e:	430a      	orrs	r2, r1
 8001130:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001132:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2209      	movs	r2, #9
 8001138:	4393      	bics	r3, r2
 800113a:	0019      	movs	r1, r3
 800113c:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001144:	f000 fc44 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 8001148:	0001      	movs	r1, r0
 800114a:	4b62      	ldr	r3, [pc, #392]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	220f      	movs	r2, #15
 8001152:	4013      	ands	r3, r2
 8001154:	4a63      	ldr	r2, [pc, #396]	; (80012e4 <HAL_RCC_OscConfig+0x334>)
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	000a      	movs	r2, r1
 800115a:	40da      	lsrs	r2, r3
 800115c:	4b62      	ldr	r3, [pc, #392]	; (80012e8 <HAL_RCC_OscConfig+0x338>)
 800115e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <HAL_RCC_OscConfig+0x33c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2513      	movs	r5, #19
 8001166:	197c      	adds	r4, r7, r5
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff fca7 	bl	8000abc <HAL_InitTick>
 800116e:	0003      	movs	r3, r0
 8001170:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001172:	197b      	adds	r3, r7, r5
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d047      	beq.n	800120a <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 800117a:	2313      	movs	r3, #19
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	e2d4      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d027      	beq.n	80011d8 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001188:	4b52      	ldr	r3, [pc, #328]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2209      	movs	r2, #9
 800118e:	4393      	bics	r3, r2
 8001190:	0019      	movs	r1, r3
 8001192:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fcd5 	bl	8000b48 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a4:	f7ff fcd0 	bl	8000b48 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e2ba      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2204      	movs	r2, #4
 80011bc:	4013      	ands	r3, r2
 80011be:	d0f1      	beq.n	80011a4 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c0:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_RCC_OscConfig+0x330>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	0019      	movs	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	021a      	lsls	r2, r3, #8
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	e018      	b.n	800120a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d8:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80011de:	2101      	movs	r1, #1
 80011e0:	438a      	bics	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fcb0 	bl	8000b48 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fcab 	bl	8000b48 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e295      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2204      	movs	r2, #4
 8001206:	4013      	ands	r3, r2
 8001208:	d1f1      	bne.n	80011ee <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2210      	movs	r2, #16
 8001210:	4013      	ands	r3, r2
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x266>
 8001214:	e0a3      	b.n	800135e <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d141      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4013      	ands	r3, r2
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x284>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e27b      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <HAL_RCC_OscConfig+0x340>)
 800123a:	4013      	ands	r3, r2
 800123c:	0019      	movs	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	0a19      	lsrs	r1, r3, #8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	061a      	lsls	r2, r3, #24
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	0b5b      	lsrs	r3, r3, #13
 8001262:	3301      	adds	r3, #1
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0212      	lsls	r2, r2, #8
 8001268:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	210f      	movs	r1, #15
 8001272:	400b      	ands	r3, r1
 8001274:	491b      	ldr	r1, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x334>)
 8001276:	5ccb      	ldrb	r3, [r1, r3]
 8001278:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_RCC_OscConfig+0x338>)
 800127c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_OscConfig+0x33c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2513      	movs	r5, #19
 8001284:	197c      	adds	r4, r7, r5
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff fc18 	bl	8000abc <HAL_InitTick>
 800128c:	0003      	movs	r3, r0
 800128e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001290:	197b      	adds	r3, r7, r5
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d062      	beq.n	800135e <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8001298:	2313      	movs	r3, #19
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	e245      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d040      	beq.n	800132a <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_RCC_OscConfig+0x324>)
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	0049      	lsls	r1, r1, #1
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fc47 	bl	8000b48 <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012be:	e019      	b.n	80012f4 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc42 	bl	8000b48 <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d912      	bls.n	80012f4 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e22c      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	40021000 	.word	0x40021000
 80012d8:	fffeffff 	.word	0xfffeffff
 80012dc:	fffbffff 	.word	0xfffbffff
 80012e0:	ffffe0ff 	.word	0xffffe0ff
 80012e4:	08002944 	.word	0x08002944
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004
 80012f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012f4:	4bc6      	ldr	r3, [pc, #792]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4013      	ands	r3, r2
 80012fe:	d0df      	beq.n	80012c0 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001300:	4bc3      	ldr	r3, [pc, #780]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4ac3      	ldr	r2, [pc, #780]	; (8001614 <HAL_RCC_OscConfig+0x664>)
 8001306:	4013      	ands	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130e:	4bc0      	ldr	r3, [pc, #768]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001310:	430a      	orrs	r2, r1
 8001312:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001314:	4bbe      	ldr	r3, [pc, #760]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	0a19      	lsrs	r1, r3, #8
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	061a      	lsls	r2, r3, #24
 8001322:	4bbb      	ldr	r3, [pc, #748]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001324:	430a      	orrs	r2, r1
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	e019      	b.n	800135e <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800132a:	4bb9      	ldr	r3, [pc, #740]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4bb8      	ldr	r3, [pc, #736]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001330:	49b9      	ldr	r1, [pc, #740]	; (8001618 <HAL_RCC_OscConfig+0x668>)
 8001332:	400a      	ands	r2, r1
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fc07 	bl	8000b48 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001340:	f7ff fc02 	bl	8000b48 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1ec      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001352:	4baf      	ldr	r3, [pc, #700]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2208      	movs	r2, #8
 8001364:	4013      	ands	r3, r2
 8001366:	d036      	beq.n	80013d6 <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d019      	beq.n	80013a4 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001370:	4ba7      	ldr	r3, [pc, #668]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001374:	4ba6      	ldr	r3, [pc, #664]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001376:	2101      	movs	r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fbe4 	bl	8000b48 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fbdf 	bl	8000b48 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1c9      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001398:	4b9d      	ldr	r3, [pc, #628]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 800139a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139c:	2202      	movs	r2, #2
 800139e:	4013      	ands	r3, r2
 80013a0:	d0f1      	beq.n	8001386 <HAL_RCC_OscConfig+0x3d6>
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a4:	4b9a      	ldr	r3, [pc, #616]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80013a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a8:	4b99      	ldr	r3, [pc, #612]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	438a      	bics	r2, r1
 80013ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fbca 	bl	8000b48 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fbc5 	bl	8000b48 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1af      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013cc:	4b90      	ldr	r3, [pc, #576]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80013ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d1f1      	bne.n	80013ba <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_OscConfig+0x432>
 80013e0:	e0af      	b.n	8001542 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	2327      	movs	r3, #39	; 0x27
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ea:	4b89      	ldr	r3, [pc, #548]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80013ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	055b      	lsls	r3, r3, #21
 80013f2:	4013      	ands	r3, r2
 80013f4:	d10a      	bne.n	800140c <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b86      	ldr	r3, [pc, #536]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80013f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013fa:	4b85      	ldr	r3, [pc, #532]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	0549      	lsls	r1, r1, #21
 8001400:	430a      	orrs	r2, r1
 8001402:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001404:	2327      	movs	r3, #39	; 0x27
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b83      	ldr	r3, [pc, #524]	; (800161c <HAL_RCC_OscConfig+0x66c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4013      	ands	r3, r2
 8001416:	d11a      	bne.n	800144e <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001418:	4b80      	ldr	r3, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x66c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b7f      	ldr	r3, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x66c>)
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	0049      	lsls	r1, r1, #1
 8001422:	430a      	orrs	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb8f 	bl	8000b48 <HAL_GetTick>
 800142a:	0003      	movs	r3, r0
 800142c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001430:	f7ff fb8a 	bl	8000b48 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e174      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x66c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4013      	ands	r3, r2
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	429a      	cmp	r2, r3
 8001458:	d107      	bne.n	800146a <HAL_RCC_OscConfig+0x4ba>
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 800145c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800145e:	4b6c      	ldr	r3, [pc, #432]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0049      	lsls	r1, r1, #1
 8001464:	430a      	orrs	r2, r1
 8001466:	651a      	str	r2, [r3, #80]	; 0x50
 8001468:	e031      	b.n	80014ce <HAL_RCC_OscConfig+0x51e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x4dc>
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001476:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001478:	4967      	ldr	r1, [pc, #412]	; (8001618 <HAL_RCC_OscConfig+0x668>)
 800147a:	400a      	ands	r2, r1
 800147c:	651a      	str	r2, [r3, #80]	; 0x50
 800147e:	4b64      	ldr	r3, [pc, #400]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001484:	4966      	ldr	r1, [pc, #408]	; (8001620 <HAL_RCC_OscConfig+0x670>)
 8001486:	400a      	ands	r2, r1
 8001488:	651a      	str	r2, [r3, #80]	; 0x50
 800148a:	e020      	b.n	80014ce <HAL_RCC_OscConfig+0x51e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	23a0      	movs	r3, #160	; 0xa0
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	429a      	cmp	r2, r3
 8001496:	d10e      	bne.n	80014b6 <HAL_RCC_OscConfig+0x506>
 8001498:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 800149a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800149c:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	00c9      	lsls	r1, r1, #3
 80014a2:	430a      	orrs	r2, r1
 80014a4:	651a      	str	r2, [r3, #80]	; 0x50
 80014a6:	4b5a      	ldr	r3, [pc, #360]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80014a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014aa:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0049      	lsls	r1, r1, #1
 80014b0:	430a      	orrs	r2, r1
 80014b2:	651a      	str	r2, [r3, #80]	; 0x50
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x51e>
 80014b6:	4b56      	ldr	r3, [pc, #344]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80014b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80014bc:	4956      	ldr	r1, [pc, #344]	; (8001618 <HAL_RCC_OscConfig+0x668>)
 80014be:	400a      	ands	r2, r1
 80014c0:	651a      	str	r2, [r3, #80]	; 0x50
 80014c2:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80014c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c6:	4b52      	ldr	r3, [pc, #328]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80014c8:	4955      	ldr	r1, [pc, #340]	; (8001620 <HAL_RCC_OscConfig+0x670>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb37 	bl	8000b48 <HAL_GetTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014de:	e009      	b.n	80014f4 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb32 	bl	8000b48 <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	4a4e      	ldr	r2, [pc, #312]	; (8001624 <HAL_RCC_OscConfig+0x674>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e11b      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014f4:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80014f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	d0ef      	beq.n	80014e0 <HAL_RCC_OscConfig+0x530>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fb21 	bl	8000b48 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800150a:	e009      	b.n	8001520 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fb1c 	bl	8000b48 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a43      	ldr	r2, [pc, #268]	; (8001624 <HAL_RCC_OscConfig+0x674>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e105      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001520:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d1ef      	bne.n	800150c <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800152c:	2327      	movs	r3, #39	; 0x27
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d105      	bne.n	8001542 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800153a:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 800153c:	493a      	ldr	r1, [pc, #232]	; (8001628 <HAL_RCC_OscConfig+0x678>)
 800153e:	400a      	ands	r2, r1
 8001540:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2220      	movs	r2, #32
 8001548:	4013      	ands	r3, r2
 800154a:	d049      	beq.n	80015e0 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d026      	beq.n	80015a2 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 800155a:	2101      	movs	r1, #1
 800155c:	430a      	orrs	r2, r1
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001564:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001566:	2101      	movs	r1, #1
 8001568:	430a      	orrs	r2, r1
 800156a:	635a      	str	r2, [r3, #52]	; 0x34
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_RCC_OscConfig+0x67c>)
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <HAL_RCC_OscConfig+0x67c>)
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	0189      	lsls	r1, r1, #6
 8001576:	430a      	orrs	r2, r1
 8001578:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fae5 	bl	8000b48 <HAL_GetTick>
 800157e:	0003      	movs	r3, r0
 8001580:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001584:	f7ff fae0 	bl	8000b48 <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0ca      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2202      	movs	r2, #2
 800159c:	4013      	ands	r3, r2
 800159e:	d0f1      	beq.n	8001584 <HAL_RCC_OscConfig+0x5d4>
 80015a0:	e01e      	b.n	80015e0 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	438a      	bics	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCC_OscConfig+0x67c>)
 80015b0:	6a1a      	ldr	r2, [r3, #32]
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <HAL_RCC_OscConfig+0x67c>)
 80015b4:	491e      	ldr	r1, [pc, #120]	; (8001630 <HAL_RCC_OscConfig+0x680>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fac5 	bl	8000b48 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c4:	f7ff fac0 	bl	8000b48 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0aa      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d1f1      	bne.n	80015c4 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x63a>
 80015e8:	e09f      	b.n	800172a <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x642>
 80015f0:	e078      	b.n	80016e4 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d159      	bne.n	80016ae <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_RCC_OscConfig+0x660>)
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x684>)
 8001602:	400a      	ands	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fa9f 	bl	8000b48 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800160e:	e01c      	b.n	800164a <HAL_RCC_OscConfig+0x69a>
 8001610:	40021000 	.word	0x40021000
 8001614:	ffff1fff 	.word	0xffff1fff
 8001618:	fffffeff 	.word	0xfffffeff
 800161c:	40007000 	.word	0x40007000
 8001620:	fffffbff 	.word	0xfffffbff
 8001624:	00001388 	.word	0x00001388
 8001628:	efffffff 	.word	0xefffffff
 800162c:	40010000 	.word	0x40010000
 8001630:	ffffdfff 	.word	0xffffdfff
 8001634:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fa86 	bl	8000b48 <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e070      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	049b      	lsls	r3, r3, #18
 8001652:	4013      	ands	r3, r2
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	4a37      	ldr	r2, [pc, #220]	; (8001738 <HAL_RCC_OscConfig+0x788>)
 800165c:	4013      	ands	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166e:	431a      	orrs	r2, r3
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 8001672:	430a      	orrs	r2, r1
 8001674:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	0449      	lsls	r1, r1, #17
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fa60 	bl	8000b48 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fa5b 	bl	8000b48 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e045      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	049b      	lsls	r3, r3, #18
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x6de>
 80016ac:	e03d      	b.n	800172a <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 80016b4:	4921      	ldr	r1, [pc, #132]	; (800173c <HAL_RCC_OscConfig+0x78c>)
 80016b6:	400a      	ands	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fa45 	bl	8000b48 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fa40 	bl	8000b48 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e02a      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	049b      	lsls	r3, r3, #18
 80016de:	4013      	ands	r3, r2
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x714>
 80016e2:	e022      	b.n	800172a <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e01d      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_RCC_OscConfig+0x784>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	401a      	ands	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d10f      	bne.n	8001726 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	23f0      	movs	r3, #240	; 0xf0
 800170a:	039b      	lsls	r3, r3, #14
 800170c:	401a      	ands	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	23c0      	movs	r3, #192	; 0xc0
 800171a:	041b      	lsls	r3, r3, #16
 800171c:	401a      	ands	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b00a      	add	sp, #40	; 0x28
 8001732:	bdb0      	pop	{r4, r5, r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	ff02ffff 	.word	0xff02ffff
 800173c:	feffffff 	.word	0xfeffffff

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e129      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b96      	ldr	r3, [pc, #600]	; (80019b0 <HAL_RCC_ClockConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	4013      	ands	r3, r2
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d91e      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b93      	ldr	r3, [pc, #588]	; (80019b0 <HAL_RCC_ClockConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2201      	movs	r2, #1
 8001768:	4393      	bics	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	4b90      	ldr	r3, [pc, #576]	; (80019b0 <HAL_RCC_ClockConfig+0x270>)
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001774:	f7ff f9e8 	bl	8000b48 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177c:	e009      	b.n	8001792 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177e:	f7ff f9e3 	bl	8000b48 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a8a      	ldr	r2, [pc, #552]	; (80019b4 <HAL_RCC_ClockConfig+0x274>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e10a      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b87      	ldr	r3, [pc, #540]	; (80019b0 <HAL_RCC_ClockConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4013      	ands	r3, r2
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017aa:	4b83      	ldr	r3, [pc, #524]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	22f0      	movs	r2, #240	; 0xf0
 80017b0:	4393      	bics	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	4b7f      	ldr	r3, [pc, #508]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	d100      	bne.n	80017ca <HAL_RCC_ClockConfig+0x8a>
 80017c8:	e089      	b.n	80018de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017d2:	4b79      	ldr	r3, [pc, #484]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	029b      	lsls	r3, r3, #10
 80017da:	4013      	ands	r3, r2
 80017dc:	d120      	bne.n	8001820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0e2      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ea:	4b73      	ldr	r3, [pc, #460]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	049b      	lsls	r3, r3, #18
 80017f2:	4013      	ands	r3, r2
 80017f4:	d114      	bne.n	8001820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0d6      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d106      	bne.n	8001810 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	d109      	bne.n	8001820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0cb      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001810:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0c3      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001820:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2203      	movs	r2, #3
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff f988 	bl	8000b48 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d111      	bne.n	8001868 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001844:	e009      	b.n	800185a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001846:	f7ff f97f 	bl	8000b48 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_RCC_ClockConfig+0x274>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e0a6      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800185a:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	220c      	movs	r2, #12
 8001860:	4013      	ands	r3, r2
 8001862:	2b08      	cmp	r3, #8
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_ClockConfig+0x106>
 8001866:	e03a      	b.n	80018de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d111      	bne.n	8001894 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001870:	e009      	b.n	8001886 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001872:	f7ff f969 	bl	8000b48 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	4a4d      	ldr	r2, [pc, #308]	; (80019b4 <HAL_RCC_ClockConfig+0x274>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e090      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001886:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	220c      	movs	r2, #12
 800188c:	4013      	ands	r3, r2
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d1ef      	bne.n	8001872 <HAL_RCC_ClockConfig+0x132>
 8001892:	e024      	b.n	80018de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d11b      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800189c:	e009      	b.n	80018b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189e:	f7ff f953 	bl	8000b48 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <HAL_RCC_ClockConfig+0x274>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e07a      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b2:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	220c      	movs	r2, #12
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d1ef      	bne.n	800189e <HAL_RCC_ClockConfig+0x15e>
 80018be:	e00e      	b.n	80018de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c0:	f7ff f942 	bl	8000b48 <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <HAL_RCC_ClockConfig+0x274>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e069      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	220c      	movs	r2, #12
 80018da:	4013      	ands	r3, r2
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_ClockConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d21e      	bcs.n	800192a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <HAL_RCC_ClockConfig+0x270>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4393      	bics	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_RCC_ClockConfig+0x270>)
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018fe:	f7ff f923 	bl	8000b48 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	e009      	b.n	800191c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7ff f91e 	bl	8000b48 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <HAL_RCC_ClockConfig+0x274>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e045      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_ClockConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d1ee      	bne.n	8001908 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2204      	movs	r2, #4
 8001930:	4013      	ands	r3, r2
 8001932:	d009      	beq.n	8001948 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a20      	ldr	r2, [pc, #128]	; (80019bc <HAL_RCC_ClockConfig+0x27c>)
 800193a:	4013      	ands	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001944:	430a      	orrs	r2, r1
 8001946:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2208      	movs	r2, #8
 800194e:	4013      	ands	r3, r2
 8001950:	d00a      	beq.n	8001968 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	4a1a      	ldr	r2, [pc, #104]	; (80019c0 <HAL_RCC_ClockConfig+0x280>)
 8001958:	4013      	ands	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	00da      	lsls	r2, r3, #3
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001968:	f000 f832 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 800196c:	0001      	movs	r1, r0
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_RCC_ClockConfig+0x278>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	220f      	movs	r2, #15
 8001976:	4013      	ands	r3, r2
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_RCC_ClockConfig+0x284>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	000a      	movs	r2, r1
 800197e:	40da      	lsrs	r2, r3
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_RCC_ClockConfig+0x288>)
 8001982:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_RCC_ClockConfig+0x28c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	250b      	movs	r5, #11
 800198a:	197c      	adds	r4, r7, r5
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff f895 	bl	8000abc <HAL_InitTick>
 8001992:	0003      	movs	r3, r0
 8001994:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001996:	197b      	adds	r3, r7, r5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800199e:	230b      	movs	r3, #11
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b004      	add	sp, #16
 80019ae:	bdb0      	pop	{r4, r5, r7, pc}
 80019b0:	40022000 	.word	0x40022000
 80019b4:	00001388 	.word	0x00001388
 80019b8:	40021000 	.word	0x40021000
 80019bc:	fffff8ff 	.word	0xfffff8ff
 80019c0:	ffffc7ff 	.word	0xffffc7ff
 80019c4:	08002944 	.word	0x08002944
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	b08f      	sub	sp, #60	; 0x3c
 80019d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x130>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019de:	230c      	movs	r3, #12
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d00f      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x36>
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d010      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x3c>
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d000      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x20>
 80019ee:	e073      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x130>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2210      	movs	r2, #16
 80019f6:	4013      	ands	r3, r2
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80019fa:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x134>)
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80019fe:	e079      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001a00:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a04:	e076      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a0a:	e073      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	0c9a      	lsrs	r2, r3, #18
 8001a10:	230f      	movs	r3, #15
 8001a12:	401a      	ands	r2, r3
 8001a14:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1c:	0d9a      	lsrs	r2, r3, #22
 8001a1e:	2303      	movs	r3, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	3301      	adds	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x130>)
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	025b      	lsls	r3, r3, #9
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d019      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	69b8      	ldr	r0, [r7, #24]
 8001a40:	69f9      	ldr	r1, [r7, #28]
 8001a42:	f7fe fc0d 	bl	8000260 <__aeabi_lmul>
 8001a46:	0003      	movs	r3, r0
 8001a48:	000c      	movs	r4, r1
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f7fe fbe1 	bl	8000220 <__aeabi_uldivmod>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	000c      	movs	r4, r1
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
 8001a64:	e035      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x130>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d019      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x134>)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	68b8      	ldr	r0, [r7, #8]
 8001a7e:	68f9      	ldr	r1, [r7, #12]
 8001a80:	f7fe fbee 	bl	8000260 <__aeabi_lmul>
 8001a84:	0003      	movs	r3, r0
 8001a86:	000c      	movs	r4, r1
 8001a88:	0018      	movs	r0, r3
 8001a8a:	0021      	movs	r1, r4
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f7fe fbc2 	bl	8000220 <__aeabi_uldivmod>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	000c      	movs	r4, r1
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa2:	e016      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	0019      	movs	r1, r3
 8001aac:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f7fe fbd6 	bl	8000260 <__aeabi_lmul>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	000c      	movs	r4, r1
 8001ab8:	0018      	movs	r0, r3
 8001aba:	0021      	movs	r1, r4
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	001d      	movs	r5, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	001e      	movs	r6, r3
 8001ac4:	002a      	movs	r2, r5
 8001ac6:	0033      	movs	r3, r6
 8001ac8:	f7fe fbaa 	bl	8000220 <__aeabi_uldivmod>
 8001acc:	0003      	movs	r3, r0
 8001ace:	000c      	movs	r4, r1
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ad6:	e00d      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x130>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0b5b      	lsrs	r3, r3, #13
 8001ade:	2207      	movs	r2, #7
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	0212      	lsls	r2, r2, #8
 8001aec:	409a      	lsls	r2, r3
 8001aee:	0013      	movs	r3, r2
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001af2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b00f      	add	sp, #60	; 0x3c
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	40021000 	.word	0x40021000
 8001b04:	003d0900 	.word	0x003d0900
 8001b08:	00f42400 	.word	0x00f42400
 8001b0c:	007a1200 	.word	0x007a1200
 8001b10:	0800295c 	.word	0x0800295c

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff2 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b30:	0001      	movs	r1, r0
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	2207      	movs	r2, #7
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	40d9      	lsrs	r1, r3
 8001b42:	000b      	movs	r3, r1
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08002954 	.word	0x08002954

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b58:	f7ff ffdc 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b5c:	0001      	movs	r1, r0
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	2207      	movs	r2, #7
 8001b66:	4013      	ands	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	40d9      	lsrs	r1, r3
 8001b6e:	000b      	movs	r3, r1
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	08002954 	.word	0x08002954

08001b80 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001b88:	2317      	movs	r3, #23
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2220      	movs	r2, #32
 8001b96:	4013      	ands	r3, r2
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d100      	bne.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001ba6:	e0d9      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba8:	4b9c      	ldr	r3, [pc, #624]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	055b      	lsls	r3, r3, #21
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d10a      	bne.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b99      	ldr	r3, [pc, #612]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bb8:	4b98      	ldr	r3, [pc, #608]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	0549      	lsls	r1, r1, #21
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bc2:	2317      	movs	r3, #23
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b95      	ldr	r3, [pc, #596]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d11a      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b91      	ldr	r3, [pc, #580]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	0049      	lsls	r1, r1, #1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be4:	f7fe ffb0 	bl	8000b48 <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	e008      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bee:	f7fe ffab 	bl	8000b48 <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e108      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	4b87      	ldr	r3, [pc, #540]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c0c:	4b83      	ldr	r3, [pc, #524]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	23c0      	movs	r3, #192	; 0xc0
 8001c12:	039b      	lsls	r3, r3, #14
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	23c0      	movs	r3, #192	; 0xc0
 8001c1e:	039b      	lsls	r3, r3, #14
 8001c20:	4013      	ands	r3, r2
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d107      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	23c0      	movs	r3, #192	; 0xc0
 8001c2e:	039b      	lsls	r3, r3, #14
 8001c30:	4013      	ands	r3, r2
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d013      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	401a      	ands	r2, r3
 8001c42:	23c0      	movs	r3, #192	; 0xc0
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d10a      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c4a:	4b74      	ldr	r3, [pc, #464]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	029b      	lsls	r3, r3, #10
 8001c52:	401a      	ands	r2, r3
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0d8      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001c60:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c64:	23c0      	movs	r3, #192	; 0xc0
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d049      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	029b      	lsls	r3, r3, #10
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d004      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2220      	movs	r2, #32
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	23c0      	movs	r3, #192	; 0xc0
 8001c92:	029b      	lsls	r3, r3, #10
 8001c94:	4013      	ands	r3, r2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d034      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d02e      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ca8:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cac:	4a5d      	ldr	r2, [pc, #372]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cb2:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cb6:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0309      	lsls	r1, r1, #12
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc0:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc4:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cc6:	4958      	ldr	r1, [pc, #352]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d014      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff34 	bl	8000b48 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ce4:	e009      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7fe ff2f 	bl	8000b48 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a4e      	ldr	r2, [pc, #312]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e08b      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cfa:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d0ef      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	029b      	lsls	r3, r3, #10
 8001d0e:	401a      	ands	r2, r3
 8001d10:	23c0      	movs	r3, #192	; 0xc0
 8001d12:	029b      	lsls	r3, r3, #10
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d10c      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001d18:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a44      	ldr	r2, [pc, #272]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	23c0      	movs	r3, #192	; 0xc0
 8001d28:	039b      	lsls	r3, r3, #14
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d34:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	23c0      	movs	r3, #192	; 0xc0
 8001d3c:	029b      	lsls	r3, r3, #10
 8001d3e:	401a      	ands	r2, r3
 8001d40:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d42:	430a      	orrs	r2, r1
 8001d44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d46:	2317      	movs	r3, #23
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d54:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d56:	4937      	ldr	r1, [pc, #220]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	4b29      	ldr	r3, [pc, #164]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d76:	430a      	orrs	r2, r1
 8001d78:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	220c      	movs	r2, #12
 8001d8a:	4393      	bics	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d94:	430a      	orrs	r2, r1
 8001d96:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d009      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2208      	movs	r2, #8
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2240      	movs	r2, #64	; 0x40
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dee:	430a      	orrs	r2, r1
 8001df0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b006      	add	sp, #24
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40007000 	.word	0x40007000
 8001e24:	fffcffff 	.word	0xfffcffff
 8001e28:	fff7ffff 	.word	0xfff7ffff
 8001e2c:	00001388 	.word	0x00001388
 8001e30:	ffcfffff 	.word	0xffcfffff
 8001e34:	efffffff 	.word	0xefffffff
 8001e38:	fffff3ff 	.word	0xfffff3ff
 8001e3c:	ffffcfff 	.word	0xffffcfff
 8001e40:	fbffffff 	.word	0xfbffffff
 8001e44:	fff3ffff 	.word	0xfff3ffff

08001e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e083      	b.n	8001f62 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	2382      	movs	r3, #130	; 0x82
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d009      	beq.n	8001e82 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	61da      	str	r2, [r3, #28]
 8001e74:	e005      	b.n	8001e82 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2251      	movs	r2, #81	; 0x51
 8001e8c:	5c9b      	ldrb	r3, [r3, r2]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d107      	bne.n	8001ea4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2250      	movs	r2, #80	; 0x50
 8001e98:	2100      	movs	r1, #0
 8001e9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7fe fcf6 	bl	8000890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2251      	movs	r2, #81	; 0x51
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	438a      	bics	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	2382      	movs	r3, #130	; 0x82
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6899      	ldr	r1, [r3, #8]
 8001eca:	2384      	movs	r3, #132	; 0x84
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	400b      	ands	r3, r1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	400b      	ands	r3, r1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	2101      	movs	r1, #1
 8001eee:	400b      	ands	r3, r1
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6999      	ldr	r1, [r3, #24]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	400b      	ands	r3, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2138      	movs	r1, #56	; 0x38
 8001f04:	400b      	ands	r3, r1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	400b      	ands	r3, r1
 8001f10:	431a      	orrs	r2, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	019b      	lsls	r3, r3, #6
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2210      	movs	r2, #16
 8001f38:	401a      	ands	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <HAL_SPI_Init+0x124>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2251      	movs	r2, #81	; 0x51
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	fffff7ff 	.word	0xfffff7ff

08001f70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	1cbb      	adds	r3, r7, #2
 8001f80:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f82:	2301      	movs	r3, #1
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f86:	232b      	movs	r3, #43	; 0x2b
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2250      	movs	r2, #80	; 0x50
 8001f92:	5c9b      	ldrb	r3, [r3, r2]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x2c>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e1a1      	b.n	80022e0 <HAL_SPI_TransmitReceive+0x370>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2250      	movs	r2, #80	; 0x50
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa4:	f7fe fdd0 	bl	8000b48 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fac:	2023      	movs	r0, #35	; 0x23
 8001fae:	183b      	adds	r3, r7, r0
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	2151      	movs	r1, #81	; 0x51
 8001fb4:	5c52      	ldrb	r2, [r2, r1]
 8001fb6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fbe:	231a      	movs	r3, #26
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	1cba      	adds	r2, r7, #2
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fc8:	183b      	adds	r3, r7, r0
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d012      	beq.n	8001ff6 <HAL_SPI_TransmitReceive+0x86>
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	2382      	movs	r3, #130	; 0x82
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d108      	bne.n	8001fec <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d104      	bne.n	8001fec <HAL_SPI_TransmitReceive+0x7c>
 8001fe2:	2323      	movs	r3, #35	; 0x23
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d004      	beq.n	8001ff6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8001fec:	232b      	movs	r3, #43	; 0x2b
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ff4:	e169      	b.n	80022ca <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_SPI_TransmitReceive+0x9a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_SPI_TransmitReceive+0x9a>
 8002002:	1cbb      	adds	r3, r7, #2
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800200a:	232b      	movs	r3, #43	; 0x2b
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
    goto error;
 8002012:	e15a      	b.n	80022ca <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2251      	movs	r2, #81	; 0x51
 8002018:	5c9b      	ldrb	r3, [r3, r2]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b04      	cmp	r3, #4
 800201e:	d003      	beq.n	8002028 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2251      	movs	r2, #81	; 0x51
 8002024:	2105      	movs	r1, #5
 8002026:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1cba      	adds	r2, r7, #2
 8002038:	8812      	ldrh	r2, [r2, #0]
 800203a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1cba      	adds	r2, r7, #2
 8002040:	8812      	ldrh	r2, [r2, #0]
 8002042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1cba      	adds	r2, r7, #2
 800204e:	8812      	ldrh	r2, [r2, #0]
 8002050:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1cba      	adds	r2, r7, #2
 8002056:	8812      	ldrh	r2, [r2, #0]
 8002058:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	4013      	ands	r3, r2
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d007      	beq.n	8002084 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	429a      	cmp	r2, r3
 800208e:	d000      	beq.n	8002092 <HAL_SPI_TransmitReceive+0x122>
 8002090:	e07a      	b.n	8002188 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_SPI_TransmitReceive+0x134>
 800209a:	231a      	movs	r3, #26
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d166      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	881a      	ldrh	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	1c9a      	adds	r2, r3, #2
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020c8:	e053      	b.n	8002172 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2202      	movs	r2, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d11b      	bne.n	8002110 <HAL_SPI_TransmitReceive+0x1a0>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d016      	beq.n	8002110 <HAL_SPI_TransmitReceive+0x1a0>
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d113      	bne.n	8002110 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	881a      	ldrh	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	1c9a      	adds	r2, r3, #2
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2201      	movs	r2, #1
 8002118:	4013      	ands	r3, r2
 800211a:	2b01      	cmp	r3, #1
 800211c:	d119      	bne.n	8002152 <HAL_SPI_TransmitReceive+0x1e2>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d014      	beq.n	8002152 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	b292      	uxth	r2, r2
 8002134:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	1c9a      	adds	r2, r3, #2
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800214e:	2301      	movs	r3, #1
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002152:	f7fe fcf9 	bl	8000b48 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800215e:	429a      	cmp	r2, r3
 8002160:	d807      	bhi.n	8002172 <HAL_SPI_TransmitReceive+0x202>
 8002162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002164:	3301      	adds	r3, #1
 8002166:	d004      	beq.n	8002172 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 8002168:	232b      	movs	r3, #43	; 0x2b
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	2203      	movs	r2, #3
 800216e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002170:	e0ab      	b.n	80022ca <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1a6      	bne.n	80020ca <HAL_SPI_TransmitReceive+0x15a>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1a1      	bne.n	80020ca <HAL_SPI_TransmitReceive+0x15a>
 8002186:	e07f      	b.n	8002288 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_SPI_TransmitReceive+0x22c>
 8002190:	231a      	movs	r3, #26
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d000      	beq.n	800219c <HAL_SPI_TransmitReceive+0x22c>
 800219a:	e06b      	b.n	8002274 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	330c      	adds	r3, #12
 80021a6:	7812      	ldrb	r2, [r2, #0]
 80021a8:	701a      	strb	r2, [r3, #0]
//      SPI2->DR = (*hspi->pTxBuffPtr);
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021c2:	e057      	b.n	8002274 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2202      	movs	r2, #2
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d11c      	bne.n	800220c <HAL_SPI_TransmitReceive+0x29c>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d017      	beq.n	800220c <HAL_SPI_TransmitReceive+0x29c>
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d114      	bne.n	800220c <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	330c      	adds	r3, #12
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2201      	movs	r2, #1
 8002214:	4013      	ands	r3, r2
 8002216:	2b01      	cmp	r3, #1
 8002218:	d119      	bne.n	800224e <HAL_SPI_TransmitReceive+0x2de>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d014      	beq.n	800224e <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800224a:	2301      	movs	r3, #1
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800224e:	f7fe fc7b 	bl	8000b48 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800225a:	429a      	cmp	r2, r3
 800225c:	d802      	bhi.n	8002264 <HAL_SPI_TransmitReceive+0x2f4>
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	3301      	adds	r3, #1
 8002262:	d102      	bne.n	800226a <HAL_SPI_TransmitReceive+0x2fa>
 8002264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002266:	2b00      	cmp	r3, #0
 8002268:	d104      	bne.n	8002274 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800226a:	232b      	movs	r3, #43	; 0x2b
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
        goto error;
 8002272:	e02a      	b.n	80022ca <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1a2      	bne.n	80021c4 <HAL_SPI_TransmitReceive+0x254>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d19d      	bne.n	80021c4 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	0018      	movs	r0, r3
 8002290:	f000 f8b8 	bl	8002404 <SPI_EndRxTxTransaction>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d007      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 8002298:	232b      	movs	r3, #43	; 0x2b
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022a6:	e010      	b.n	80022ca <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	e000      	b.n	80022ca <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80022c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2251      	movs	r2, #81	; 0x51
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2250      	movs	r2, #80	; 0x50
 80022d6:	2100      	movs	r1, #0
 80022d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022da:	232b      	movs	r3, #43	; 0x2b
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	781b      	ldrb	r3, [r3, #0]
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b00c      	add	sp, #48	; 0x30
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022f8:	f7fe fc26 	bl	8000b48 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	18d3      	adds	r3, r2, r3
 8002306:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002308:	f7fe fc1e 	bl	8000b48 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	015b      	lsls	r3, r3, #5
 8002316:	0d1b      	lsrs	r3, r3, #20
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	4353      	muls	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800231e:	e058      	b.n	80023d2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	d055      	beq.n	80023d2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002326:	f7fe fc0f 	bl	8000b48 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	429a      	cmp	r2, r3
 8002334:	d902      	bls.n	800233c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d142      	bne.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	21e0      	movs	r1, #224	; 0xe0
 8002348:	438a      	bics	r2, r1
 800234a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	2382      	movs	r3, #130	; 0x82
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	429a      	cmp	r2, r3
 8002356:	d113      	bne.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	429a      	cmp	r2, r3
 8002362:	d005      	beq.n	8002370 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	019b      	lsls	r3, r3, #6
 8002388:	429a      	cmp	r2, r3
 800238a:	d110      	bne.n	80023ae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	491a      	ldr	r1, [pc, #104]	; (8002400 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002398:	400a      	ands	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0189      	lsls	r1, r1, #6
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2251      	movs	r2, #81	; 0x51
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2250      	movs	r2, #80	; 0x50
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e017      	b.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	4013      	ands	r3, r2
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	425a      	negs	r2, r3
 80023e2:	4153      	adcs	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	001a      	movs	r2, r3
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d197      	bne.n	8002320 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b008      	add	sp, #32
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	20000000 	.word	0x20000000
 8002400:	ffffdfff 	.word	0xffffdfff

08002404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <SPI_EndRxTxTransaction+0x84>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	491d      	ldr	r1, [pc, #116]	; (800248c <SPI_EndRxTxTransaction+0x88>)
 8002416:	0018      	movs	r0, r3
 8002418:	f7fd fe76 	bl	8000108 <__udivsi3>
 800241c:	0003      	movs	r3, r0
 800241e:	001a      	movs	r2, r3
 8002420:	0013      	movs	r3, r2
 8002422:	015b      	lsls	r3, r3, #5
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	189b      	adds	r3, r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	2382      	movs	r3, #130	; 0x82
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	429a      	cmp	r2, r3
 8002438:	d112      	bne.n	8002460 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	0013      	movs	r3, r2
 8002444:	2200      	movs	r2, #0
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	f7ff ff4e 	bl	80022e8 <SPI_WaitFlagStateUntilTimeout>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d016      	beq.n	800247e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	2220      	movs	r2, #32
 8002456:	431a      	orrs	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e00f      	b.n	8002480 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3b01      	subs	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	4013      	ands	r3, r2
 8002476:	2b80      	cmp	r3, #128	; 0x80
 8002478:	d0f2      	beq.n	8002460 <SPI_EndRxTxTransaction+0x5c>
 800247a:	e000      	b.n	800247e <SPI_EndRxTxTransaction+0x7a>
        break;
 800247c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b006      	add	sp, #24
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000000 	.word	0x20000000
 800248c:	016e3600 	.word	0x016e3600

08002490 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e03f      	b.n	8002522 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2249      	movs	r2, #73	; 0x49
 80024a6:	5c9b      	ldrb	r3, [r3, r2]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d107      	bne.n	80024be <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2248      	movs	r2, #72	; 0x48
 80024b2:	2100      	movs	r1, #0
 80024b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe fa2f 	bl	800091c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2249      	movs	r2, #73	; 0x49
 80024c2:	2102      	movs	r1, #2
 80024c4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	438a      	bics	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f85f 	bl	800259c <USART_SetConfig>
 80024de:	0003      	movs	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e01c      	b.n	8002522 <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_USART_Init+0x9c>)
 80024f4:	400a      	ands	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	212a      	movs	r1, #42	; 0x2a
 8002504:	438a      	bics	r2, r1
 8002506:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 f996 	bl	800284c <USART_CheckIdleState>
 8002520:	0003      	movs	r3, r0
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	ffffbfff 	.word	0xffffbfff

08002530 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002540:	e017      	b.n	8002572 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	3301      	adds	r3, #1
 8002546:	d014      	beq.n	8002572 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002548:	f7fe fafe 	bl	8000b48 <HAL_GetTick>
 800254c:	0002      	movs	r2, r0
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	429a      	cmp	r2, r3
 8002556:	d302      	bcc.n	800255e <USART_WaitOnFlagUntilTimeout+0x2e>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2249      	movs	r2, #73	; 0x49
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2248      	movs	r2, #72	; 0x48
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e00f      	b.n	8002592 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	4013      	ands	r3, r2
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	425a      	negs	r2, r3
 8002582:	4153      	adcs	r3, r2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	001a      	movs	r2, r3
 8002588:	1dfb      	adds	r3, r7, #7
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d0d8      	beq.n	8002542 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b004      	add	sp, #16
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80025a4:	231e      	movs	r3, #30
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	0212      	lsls	r2, r2, #8
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a96      	ldr	r2, [pc, #600]	; (8002828 <USART_SetConfig+0x28c>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a87      	ldr	r2, [pc, #540]	; (800282c <USART_SetConfig+0x290>)
 8002610:	4013      	ands	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a83      	ldr	r2, [pc, #524]	; (8002830 <USART_SetConfig+0x294>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d125      	bne.n	8002674 <USART_SetConfig+0xd8>
 8002628:	4b82      	ldr	r3, [pc, #520]	; (8002834 <USART_SetConfig+0x298>)
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	2203      	movs	r2, #3
 800262e:	4013      	ands	r3, r2
 8002630:	2b01      	cmp	r3, #1
 8002632:	d00f      	beq.n	8002654 <USART_SetConfig+0xb8>
 8002634:	d304      	bcc.n	8002640 <USART_SetConfig+0xa4>
 8002636:	2b02      	cmp	r3, #2
 8002638:	d007      	beq.n	800264a <USART_SetConfig+0xae>
 800263a:	2b03      	cmp	r3, #3
 800263c:	d00f      	beq.n	800265e <USART_SetConfig+0xc2>
 800263e:	e013      	b.n	8002668 <USART_SetConfig+0xcc>
 8002640:	231f      	movs	r3, #31
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e046      	b.n	80026d8 <USART_SetConfig+0x13c>
 800264a:	231f      	movs	r3, #31
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e041      	b.n	80026d8 <USART_SetConfig+0x13c>
 8002654:	231f      	movs	r3, #31
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2204      	movs	r2, #4
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e03c      	b.n	80026d8 <USART_SetConfig+0x13c>
 800265e:	231f      	movs	r3, #31
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2208      	movs	r2, #8
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e037      	b.n	80026d8 <USART_SetConfig+0x13c>
 8002668:	231f      	movs	r3, #31
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2210      	movs	r2, #16
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	e031      	b.n	80026d8 <USART_SetConfig+0x13c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6f      	ldr	r2, [pc, #444]	; (8002838 <USART_SetConfig+0x29c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d128      	bne.n	80026d0 <USART_SetConfig+0x134>
 800267e:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <USART_SetConfig+0x298>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	220c      	movs	r2, #12
 8002684:	4013      	ands	r3, r2
 8002686:	2b04      	cmp	r3, #4
 8002688:	d012      	beq.n	80026b0 <USART_SetConfig+0x114>
 800268a:	d802      	bhi.n	8002692 <USART_SetConfig+0xf6>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <USART_SetConfig+0x100>
 8002690:	e018      	b.n	80026c4 <USART_SetConfig+0x128>
 8002692:	2b08      	cmp	r3, #8
 8002694:	d007      	beq.n	80026a6 <USART_SetConfig+0x10a>
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d00f      	beq.n	80026ba <USART_SetConfig+0x11e>
 800269a:	e013      	b.n	80026c4 <USART_SetConfig+0x128>
 800269c:	231f      	movs	r3, #31
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e018      	b.n	80026d8 <USART_SetConfig+0x13c>
 80026a6:	231f      	movs	r3, #31
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2202      	movs	r2, #2
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e013      	b.n	80026d8 <USART_SetConfig+0x13c>
 80026b0:	231f      	movs	r3, #31
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2204      	movs	r2, #4
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e00e      	b.n	80026d8 <USART_SetConfig+0x13c>
 80026ba:	231f      	movs	r3, #31
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	2208      	movs	r2, #8
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e009      	b.n	80026d8 <USART_SetConfig+0x13c>
 80026c4:	231f      	movs	r3, #31
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2210      	movs	r2, #16
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	e003      	b.n	80026d8 <USART_SetConfig+0x13c>
 80026d0:	231f      	movs	r3, #31
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2210      	movs	r2, #16
 80026d6:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 80026d8:	231f      	movs	r3, #31
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d86d      	bhi.n	80027be <USART_SetConfig+0x222>
 80026e2:	009a      	lsls	r2, r3, #2
 80026e4:	4b55      	ldr	r3, [pc, #340]	; (800283c <USART_SetConfig+0x2a0>)
 80026e6:	18d3      	adds	r3, r2, r3
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	469f      	mov	pc, r3
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80026ec:	f7ff fa1c 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 80026f0:	0003      	movs	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	005a      	lsls	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	18d2      	adds	r2, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0019      	movs	r1, r3
 8002706:	0010      	movs	r0, r2
 8002708:	f7fd fcfe 	bl	8000108 <__udivsi3>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]
      break;
 8002710:	e05a      	b.n	80027c8 <USART_SetConfig+0x22c>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8002712:	f7ff fa1f 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 8002716:	0003      	movs	r3, r0
 8002718:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	005a      	lsls	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	18d2      	adds	r2, r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0019      	movs	r1, r3
 800272c:	0010      	movs	r0, r2
 800272e:	f7fd fceb 	bl	8000108 <__udivsi3>
 8002732:	0003      	movs	r3, r0
 8002734:	61bb      	str	r3, [r7, #24]
      break;
 8002736:	e047      	b.n	80027c8 <USART_SetConfig+0x22c>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002738:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <USART_SetConfig+0x298>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2210      	movs	r2, #16
 800273e:	4013      	ands	r3, r2
 8002740:	d00d      	beq.n	800275e <USART_SetConfig+0x1c2>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> 2U), husart->Init.BaudRate));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	4a3d      	ldr	r2, [pc, #244]	; (8002840 <USART_SetConfig+0x2a4>)
 800274a:	189a      	adds	r2, r3, r2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0019      	movs	r1, r3
 8002752:	0010      	movs	r0, r2
 8002754:	f7fd fcd8 	bl	8000108 <__udivsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
      }
      break;
 800275c:	e034      	b.n	80027c8 <USART_SetConfig+0x22c>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	4a37      	ldr	r2, [pc, #220]	; (8002844 <USART_SetConfig+0x2a8>)
 8002766:	189a      	adds	r2, r3, r2
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0019      	movs	r1, r3
 800276e:	0010      	movs	r0, r2
 8002770:	f7fd fcca 	bl	8000108 <__udivsi3>
 8002774:	0003      	movs	r3, r0
 8002776:	61bb      	str	r3, [r7, #24]
      break;
 8002778:	e026      	b.n	80027c8 <USART_SetConfig+0x22c>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800277a:	f7ff f929 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 800277e:	0003      	movs	r3, r0
 8002780:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	005a      	lsls	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	18d2      	adds	r2, r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0019      	movs	r1, r3
 8002794:	0010      	movs	r0, r2
 8002796:	f7fd fcb7 	bl	8000108 <__udivsi3>
 800279a:	0003      	movs	r3, r0
 800279c:	61bb      	str	r3, [r7, #24]
      break;
 800279e:	e013      	b.n	80027c8 <USART_SetConfig+0x22c>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0252      	lsls	r2, r2, #9
 80027aa:	189a      	adds	r2, r3, r2
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0019      	movs	r1, r3
 80027b2:	0010      	movs	r0, r2
 80027b4:	f7fd fca8 	bl	8000108 <__udivsi3>
 80027b8:	0003      	movs	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]
      break;
 80027bc:	e004      	b.n	80027c8 <USART_SetConfig+0x22c>
    default:
      ret = HAL_ERROR;
 80027be:	231e      	movs	r3, #30
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
      break;
 80027c6:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b0f      	cmp	r3, #15
 80027cc:	d91b      	bls.n	8002806 <USART_SetConfig+0x26a>
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <USART_SetConfig+0x2ac>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d817      	bhi.n	8002806 <USART_SetConfig+0x26a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	200e      	movs	r0, #14
 80027dc:	183b      	adds	r3, r7, r0
 80027de:	210f      	movs	r1, #15
 80027e0:	438a      	bics	r2, r1
 80027e2:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2207      	movs	r2, #7
 80027ec:	4013      	ands	r3, r2
 80027ee:	b299      	uxth	r1, r3
 80027f0:	183b      	adds	r3, r7, r0
 80027f2:	183a      	adds	r2, r7, r0
 80027f4:	8812      	ldrh	r2, [r2, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	183a      	adds	r2, r7, r0
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	e003      	b.n	800280e <USART_SetConfig+0x272>
  }
  else
  {
    ret = HAL_ERROR;
 8002806:	231e      	movs	r3, #30
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 800281a:	231e      	movs	r3, #30
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	781b      	ldrb	r3, [r3, #0]
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b008      	add	sp, #32
 8002826:	bd80      	pop	{r7, pc}
 8002828:	efff69f3 	.word	0xefff69f3
 800282c:	ffffc0ff 	.word	0xffffc0ff
 8002830:	40013800 	.word	0x40013800
 8002834:	40021000 	.word	0x40021000
 8002838:	40004400 	.word	0x40004400
 800283c:	08002968 	.word	0x08002968
 8002840:	007a1200 	.word	0x007a1200
 8002844:	01e84800 	.word	0x01e84800
 8002848:	0000ffff 	.word	0x0000ffff

0800284c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af02      	add	r7, sp, #8
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800285a:	f7fe f975 	bl	8000b48 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2208      	movs	r2, #8
 800286a:	4013      	ands	r3, r2
 800286c:	2b08      	cmp	r3, #8
 800286e:	d10e      	bne.n	800288e <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	0399      	lsls	r1, r3, #14
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	23fa      	movs	r3, #250	; 0xfa
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	0013      	movs	r3, r2
 8002880:	2200      	movs	r2, #0
 8002882:	f7ff fe55 	bl	8002530 <USART_WaitOnFlagUntilTimeout>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e01e      	b.n	80028cc <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2204      	movs	r2, #4
 8002896:	4013      	ands	r3, r2
 8002898:	2b04      	cmp	r3, #4
 800289a:	d10e      	bne.n	80028ba <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	03d9      	lsls	r1, r3, #15
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	23fa      	movs	r3, #250	; 0xfa
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	0013      	movs	r3, r2
 80028ac:	2200      	movs	r2, #0
 80028ae:	f7ff fe3f 	bl	8002530 <USART_WaitOnFlagUntilTimeout>
 80028b2:	1e03      	subs	r3, r0, #0
 80028b4:	d001      	beq.n	80028ba <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e008      	b.n	80028cc <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2249      	movs	r2, #73	; 0x49
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2248      	movs	r2, #72	; 0x48
 80028c6:	2100      	movs	r1, #0
 80028c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <__libc_init_array>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	2600      	movs	r6, #0
 80028d8:	4d0c      	ldr	r5, [pc, #48]	; (800290c <__libc_init_array+0x38>)
 80028da:	4c0d      	ldr	r4, [pc, #52]	; (8002910 <__libc_init_array+0x3c>)
 80028dc:	1b64      	subs	r4, r4, r5
 80028de:	10a4      	asrs	r4, r4, #2
 80028e0:	42a6      	cmp	r6, r4
 80028e2:	d109      	bne.n	80028f8 <__libc_init_array+0x24>
 80028e4:	2600      	movs	r6, #0
 80028e6:	f000 f821 	bl	800292c <_init>
 80028ea:	4d0a      	ldr	r5, [pc, #40]	; (8002914 <__libc_init_array+0x40>)
 80028ec:	4c0a      	ldr	r4, [pc, #40]	; (8002918 <__libc_init_array+0x44>)
 80028ee:	1b64      	subs	r4, r4, r5
 80028f0:	10a4      	asrs	r4, r4, #2
 80028f2:	42a6      	cmp	r6, r4
 80028f4:	d105      	bne.n	8002902 <__libc_init_array+0x2e>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	00b3      	lsls	r3, r6, #2
 80028fa:	58eb      	ldr	r3, [r5, r3]
 80028fc:	4798      	blx	r3
 80028fe:	3601      	adds	r6, #1
 8002900:	e7ee      	b.n	80028e0 <__libc_init_array+0xc>
 8002902:	00b3      	lsls	r3, r6, #2
 8002904:	58eb      	ldr	r3, [r5, r3]
 8002906:	4798      	blx	r3
 8002908:	3601      	adds	r6, #1
 800290a:	e7f2      	b.n	80028f2 <__libc_init_array+0x1e>
 800290c:	08002994 	.word	0x08002994
 8002910:	08002994 	.word	0x08002994
 8002914:	08002994 	.word	0x08002994
 8002918:	08002998 	.word	0x08002998

0800291c <memset>:
 800291c:	0003      	movs	r3, r0
 800291e:	1812      	adds	r2, r2, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	d100      	bne.n	8002926 <memset+0xa>
 8002924:	4770      	bx	lr
 8002926:	7019      	strb	r1, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	e7f9      	b.n	8002920 <memset+0x4>

0800292c <_init>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr

08002938 <_fini>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr
